From f0dd93affe86d3af210caba602d5d2610a724369 Mon Sep 17 00:00:00 2001
From: Pawel MOLL <pawel.moll@st.com>
Date: Fri, 25 Sep 2009 12:38:50 +0100
Subject: [PATCH] sh_stm: SATA MIPHY initialization update

The new chips (7106 & 7108) require different MIPHY initialisation
procedure. This patch reworks it, adding soft JTAG bits definition
and dual-lane PHY support.

Signed-off-by: Pawel Moll <pawel.moll@st.com>
---
 arch/sh/kernel/cpu/sh4/sata-init.c     |  552 ++++++++++++++++++++------------
 arch/sh/kernel/cpu/sh4/setup-stx7105.c |   13 +-
 arch/sh/kernel/cpu/sh4/setup-stx7141.c |   15 +-
 arch/sh/kernel/cpu/sh4/setup-stx7200.c |   16 +-
 include/linux/stm/soc.h                |   18 +-
 5 files changed, 408 insertions(+), 206 deletions(-)

diff --git a/arch/sh/kernel/cpu/sh4/sata-init.c b/arch/sh/kernel/cpu/sh4/sata-init.c
index 817c640..ed7833f 100644
--- a/arch/sh/kernel/cpu/sh4/sata-init.c
+++ b/arch/sh/kernel/cpu/sh4/sata-init.c
@@ -1,5 +1,5 @@
 /*
- * STx7200 Setup
+ * SATA MIPHY initialization hack(s)
  *
  * Copyright (C) 2007 STMicroelectronics Limited
  * Author: Stuart Menefy <stuart.menefy@st.com>
@@ -9,312 +9,466 @@
  * for more details.
  */
 
-#include <linux/stm/soc.h>
-#include <linux/types.h>
-#include <linux/init.h>
+#include <asm/processor.h>
+#include <linux/bug.h>
 #include <linux/delay.h>
+#include <linux/init.h>
+#include <linux/types.h>
+#include <linux/stm/soc.h>
 #include <linux/stm/sysconf.h>
 
-/* sysconf status 0 */
-#define sata_tdo	(1<<1)
+#define OUT(value) sysconf_write(m->out, value)
+#define IN() sysconf_read(m->in_tdo)
 
-/* sysconf config 33 */
-#define tms_sata_en	(1<<5)
-#define trstn_sata	(1<<4)
-#define tdi_high	(1<<1)
-#define tdi_low		(0<<1)
-#define tck_high	(1<<0)
-#define tck_low		(0<<0)
-
-static void __init SATA_JTAG_IR_Select_MIPHY(struct sysconf_field *sc)
+static void __init SATA_JTAG_IR_Select_MIPHY(struct stm_sata_miphy *m,
+		int lane)
 {
 	/* Flush trst synchronizer with two tck clocks */
-	sysconf_write(sc, trstn_sata | tck_low);
-	sysconf_write(sc, trstn_sata | tck_high);
-	sysconf_write(sc, trstn_sata | tck_low);
-	sysconf_write(sc, trstn_sata | tck_high);
+	OUT(m->trstn | m->tck_low);
+	OUT(m->trstn | m->tck_high);
+	OUT(m->trstn | m->tck_low);
+	OUT(m->trstn | m->tck_high);
 
 	/* Set tap into idle state */
-	sysconf_write(sc, trstn_sata | tck_low);
-	sysconf_write(sc, trstn_sata | tck_high);
+	OUT(m->trstn | m->tck_low);
+	OUT(m->trstn | m->tck_high);
 
 	/* Set tap into shift ir state */
-	sysconf_write(sc, tms_sata_en | trstn_sata | tck_low);
-	sysconf_write(sc, tms_sata_en | trstn_sata | tck_high);
-	sysconf_write(sc, tms_sata_en | trstn_sata | tck_low);
-	sysconf_write(sc, tms_sata_en | trstn_sata | tck_high);
-
-	sysconf_write(sc, trstn_sata | tck_low);
-	sysconf_write(sc, trstn_sata | tck_high);
-	sysconf_write(sc, trstn_sata | tck_low);
-	sysconf_write(sc, trstn_sata | tck_high);
-
-	/* Shift in MacroMicroBusAccess TDI = 101 */
-	sysconf_write(sc, trstn_sata | tdi_high | tck_low);
-	sysconf_write(sc, trstn_sata | tdi_high | tck_high);
-	sysconf_write(sc, trstn_sata | tdi_low | tck_low);
-	sysconf_write(sc, trstn_sata | tdi_low | tck_high);
+	OUT(m->tms | m->trstn | m->tck_low);
+	OUT(m->tms | m->trstn | m->tck_high);
+	OUT(m->tms | m->trstn | m->tck_low);
+	OUT(m->tms | m->trstn | m->tck_high);
+
+	OUT(m->trstn | m->tck_low);
+	OUT(m->trstn | m->tck_high);
+	OUT(m->trstn | m->tck_low);
+	OUT(m->trstn | m->tck_high);
+
+	if (!m->dual_not_single) {
+		/* Shift in MacroMicroBusAccess TDI = 101 */
+		OUT(m->trstn | m->tdi_high | m->tck_low);
+		OUT(m->trstn | m->tdi_high | m->tck_high);
+		OUT(m->trstn | m->tdi_low | m->tck_low);
+		OUT(m->trstn | m->tdi_low | m->tck_high);
+	} else if (lane == 0) {
+		/* Lane 1: Shift in BYPASS mode, TDI = 111 */
+		OUT(m->trstn | m->tdi_high | m->tck_low);
+		OUT(m->trstn | m->tdi_high | m->tck_high);
+		OUT(m->trstn | m->tdi_high | m->tck_low);
+		OUT(m->trstn | m->tdi_high | m->tck_high);
+		OUT(m->trstn | m->tdi_high | m->tck_low);
+		OUT(m->trstn | m->tdi_high | m->tck_high);
+
+		/* Lane 0: Shift in MacroMicroBusAccess TDI = 101 */
+		OUT(m->trstn | m->tdi_high | m->tck_low);
+		OUT(m->trstn | m->tdi_high | m->tck_high);
+		OUT(m->trstn | m->tdi_low | m->tck_low);
+		OUT(m->trstn | m->tdi_low | m->tck_high);
+	} else if (lane == 1) {
+		/* Lane 1: Shift in MacroMicroBusAccess TDI = 101 */
+		OUT(m->trstn | m->tdi_high | m->tck_low);
+		OUT(m->trstn | m->tdi_high | m->tck_high);
+		OUT(m->trstn | m->tdi_low | m->tck_low);
+		OUT(m->trstn | m->tdi_low | m->tck_high);
+		OUT(m->trstn | m->tdi_high | m->tck_low);
+		OUT(m->trstn | m->tdi_high | m->tck_high);
+
+		/* Lane 0: Shift in BYPASS mode, TDI = 111 */
+		OUT(m->trstn | m->tdi_high | m->tck_low);
+		OUT(m->trstn | m->tdi_high | m->tck_high);
+		OUT(m->trstn | m->tdi_high | m->tck_low);
+		OUT(m->trstn | m->tdi_high | m->tck_high);
+	} else {
+		BUG();
+	}
 
 	/* Set tap into idle mode */
-	sysconf_write(sc,
-		      tms_sata_en | trstn_sata | tdi_high |
-		      tck_low);
-	sysconf_write(sc, tms_sata_en | trstn_sata | tdi_high | tck_high);
-	sysconf_write(sc, tms_sata_en | trstn_sata | tck_low);
-	sysconf_write(sc, tms_sata_en | trstn_sata | tck_high);
-	sysconf_write(sc, trstn_sata | tck_low);
-	sysconf_write(sc, trstn_sata | tck_high);
+	OUT(m->tms | m->trstn | m->tdi_high | m->tck_low);
+	OUT(m->tms | m->trstn | m->tdi_high | m->tck_high);
+	OUT(m->tms | m->trstn | m->tck_low);
+	OUT(m->tms | m->trstn | m->tck_high);
+	OUT(m->trstn | m->tck_low);
+	OUT(m->trstn | m->tck_high);
 }
 
-static void __init SATA_JTAG_DR_Write_MIPHY(struct sysconf_field *sc, u8 regno,
-					    u8 data)
+static __init u32 SATA_JTAG_DR_Read_MIPHY(struct stm_sata_miphy *m,
+		int lane, u8 regno)
 {
 	int k;
 	u8 x;
+	u32 regvalue = 0;
 
-	/* Set TAP into shift dr state */
-	sysconf_write(sc, tms_sata_en | trstn_sata | tck_low);
-	sysconf_write(sc, tms_sata_en | trstn_sata | tck_high);
-	sysconf_write(sc, trstn_sata | tck_low);
-	sysconf_write(sc, trstn_sata | tck_high);
-	sysconf_write(sc, trstn_sata | tck_low);
-	sysconf_write(sc, trstn_sata | tck_high);
+	/* Set TAP into shift DR state */
+	OUT(m->tms | m->trstn | m->tck_low);
+	OUT(m->tms | m->trstn | m->tck_high);
 
-	/* Shift in DR=[17:10]=data;[9:2]address=regno;[1]rd=0;[0]wr=1  */
-	sysconf_write(sc, trstn_sata | tdi_high | tck_low);
-	sysconf_write(sc, trstn_sata | tdi_high | tck_high);
-	sysconf_write(sc, trstn_sata | tck_low);
-	sysconf_write(sc, trstn_sata | tck_high);
+	OUT(m->trstn | m->tck_low);
+	OUT(m->trstn | m->tck_high);
 
-	/* Push in the register address */
+	OUT(m->trstn | m->tck_low);
+	OUT(m->trstn | m->tck_high);
+
+	/* Shift in DR=[17:10]dummy_data;[9:2]address=regno;[1]rd=1;[0]wr=0 x */
+	OUT(m->trstn | m->tck_low);
+	OUT(m->trstn | m->tck_high);
+	OUT(m->trstn | m->tdi_high | m->tck_low);
+	OUT(m->trstn | m->tdi_high | m->tck_high);
+
+	/*  push in the register address */
 	for (k = 0; k < 8; k++) {
 		x = ((regno >> k) & 0x1);
 		x = x << 1;
-		sysconf_write(sc, trstn_sata | x | tck_low);
-		sysconf_write(sc, trstn_sata | x | tck_high);
+		OUT(m->trstn | x | m->tck_low);
+		OUT(m->trstn | x | m->tck_high);
 	}
 
-	/* Push in the data to be written */
-	x = 0;
+	/* Push in 0 in the data field */
 	for (k = 0; k < 7; k++) {
-		x = ((data >> k) & 0x1);
-		x = x << 1;
-		sysconf_write(sc, trstn_sata | x | tck_low);
-		sysconf_write(sc, trstn_sata | x | tck_high);
+		OUT(m->trstn | m->tck_low);
+		OUT(m->trstn | m->tck_high);
+	}
+
+	if (m->dual_not_single && lane == 1) {
+		/*Shift out 1 bit content of Bypass register of Lane 0 */
+		OUT(m->trstn | m->tck_low);
+		OUT(m->trstn | m->tck_high);
 	}
 
 	/* Set TAP back round into SHIFT DR STATE
 	 * (exit1_dr,update_dr,idle,idle,select_dr,capture_dr) */
-	x = ((data >> 7) & 0x1);
-	x = x << 1;
-	sysconf_write(sc, tms_sata_en | trstn_sata | x | tck_low);
-	sysconf_write(sc, tms_sata_en | trstn_sata | x | tck_high);
-	sysconf_write(sc, tms_sata_en | trstn_sata | tck_low);
-	sysconf_write(sc, tms_sata_en | trstn_sata | tck_high);
-	sysconf_write(sc, trstn_sata | tck_low);
-	sysconf_write(sc, trstn_sata | tck_high);
-	sysconf_write(sc, trstn_sata | tck_low);
-	sysconf_write(sc, trstn_sata | tck_high);
-	sysconf_write(sc, tms_sata_en | trstn_sata | tck_low);
-	sysconf_write(sc, tms_sata_en | trstn_sata | tck_high);
-	sysconf_write(sc, trstn_sata | tck_low);
-	sysconf_write(sc, trstn_sata | tck_high);
-	sysconf_write(sc, trstn_sata | tck_low);
-	sysconf_write(sc, trstn_sata | tck_high);
+	OUT(m->tms | m->trstn | m->tck_low);
+	OUT(m->tms | m->trstn | m->tck_high);
+	OUT(m->tms | m->trstn | m->tck_low);
+	OUT(m->tms | m->trstn | m->tck_high);
+	OUT(m->trstn | m->tck_low);
+	OUT(m->trstn | m->tck_high);
+	OUT(m->trstn | m->tck_low);
+	OUT(m->trstn | m->tck_high);
+	OUT(m->tms | m->trstn | m->tck_low);
+	OUT(m->tms | m->trstn | m->tck_high);
+	OUT(m->trstn | m->tck_low);
+	OUT(m->trstn | m->tck_high);
+	OUT(m->trstn | m->tck_low);
+	OUT(m->trstn | m->tck_high);
 
-	/*Set TAP into idle mode */
-	sysconf_write(sc, tms_sata_en | trstn_sata | tck_low);
-	sysconf_write(sc, tms_sata_en | trstn_sata | tck_high);
-	sysconf_write(sc, tms_sata_en | trstn_sata | tck_low);
-	sysconf_write(sc, tms_sata_en | trstn_sata | tck_high);
-	sysconf_write(sc, trstn_sata | tck_low);
-	sysconf_write(sc, trstn_sata | tck_high);
-	sysconf_write(sc, trstn_sata | tck_low);
-	sysconf_write(sc, trstn_sata | tck_high);
-	sysconf_write(sc, trstn_sata | tck_low);
-	sysconf_write(sc, trstn_sata | tck_high);
+	/* Shift out the MIPHY register contents */
+
+	if (m->dual_not_single && lane == 0) {
+		/*Shift out 1 bit content of Bypass register of Lane 1 */
+		OUT(m->trstn | m->tck_low);
+		OUT(m->trstn | m->tck_high);
+	}
+
+	/* Discard first 10 bits */
+	for (k = 0; k < 10; k++) {
+		OUT(m->trstn | m->tck_low);
+		OUT(m->trstn | m->tck_high);
+	}
+
+	for (k = 0; k < 8; k++) {
+		OUT(m->trstn | m->tck_low);
+		OUT(m->trstn | m->tck_high);
+		regvalue = (IN() << k) | regvalue;
+	}
+
+	/* Set TAP into idle mode */
+	OUT(m->tms | m->trstn | m->tck_low);
+	OUT(m->tms | m->trstn | m->tck_high);
+	OUT(m->tms | m->trstn | m->tck_low);
+	OUT(m->tms | m->trstn | m->tck_high);
+	OUT(m->trstn | m->tck_low);
+	OUT(m->trstn | m->tck_high);
+	OUT(m->trstn | m->tck_low);
+	OUT(m->trstn | m->tck_high);
+	OUT(m->trstn | m->tck_low);
+	OUT(m->trstn | m->tck_high);
+
+	return regvalue;
 }
 
-static __init u32 SATA_JTAG_DR_Read_MIPHY(struct sysconf_field *sc,
-					  struct sysconf_field *status_sc,
-					  u8 regno)
+static void __init SATA_JTAG_DR_Write_MIPHY(struct stm_sata_miphy *m,
+		int lane, u8 regno, u8 data)
 {
 	int k;
 	u8 x;
-	u32 ctrlbit, regvalue = 0;
-
-	/* Set TAP into shift DR state */
-	sysconf_write(sc, tms_sata_en | trstn_sata | tck_low);
-	sysconf_write(sc, tms_sata_en | trstn_sata | tck_high);
-	sysconf_write(sc, trstn_sata | tck_low);
-	sysconf_write(sc, trstn_sata | tck_high);
 
-	sysconf_write(sc, trstn_sata | tck_low);
-	sysconf_write(sc, trstn_sata | tck_high);
+	/* Set TAP into shift dr state */
+	OUT(m->tms | m->trstn | m->tck_low);
+	OUT(m->tms | m->trstn | m->tck_high);
+	OUT(m->trstn | m->tck_low);
+	OUT(m->trstn | m->tck_high);
+	OUT(m->trstn | m->tck_low);
+	OUT(m->trstn | m->tck_high);
 
-	/* Shift in DR=[17:10]dummy_data;[9:2]address=regno;[1]rd=1;[0]wr=0  */
-	sysconf_write(sc, trstn_sata | tck_low);
-	sysconf_write(sc, trstn_sata | tck_high);
-	sysconf_write(sc, trstn_sata | tdi_high | tck_low);
-	sysconf_write(sc, trstn_sata | tdi_high | tck_high);
+	/* Shift in DR=[17:10]=data;[9:2]address=regno;[1]rd=0;[0]wr=1  */
+	OUT(m->trstn | m->tdi_high | m->tck_low);
+	OUT(m->trstn | m->tdi_high | m->tck_high);
+	OUT(m->trstn | m->tck_low);
+	OUT(m->trstn | m->tck_high);
 
-	/*  push in the register address */
+	/* Push in the register address */
 	for (k = 0; k < 8; k++) {
 		x = ((regno >> k) & 0x1);
 		x = x << 1;
-		sysconf_write(sc, trstn_sata | x | tck_low);
-		sysconf_write(sc, trstn_sata | x | tck_high);
+		OUT(m->trstn | x | m->tck_low);
+		OUT(m->trstn | x | m->tck_high);
 	}
 
-	/* Push in 0 in the data field */
+	/* Push in the data to be written */
+	x = 0;
 	for (k = 0; k < 7; k++) {
-		sysconf_write(sc, trstn_sata | tck_low);
-		sysconf_write(sc, trstn_sata | tck_high);
+		x = ((data >> k) & 0x1);
+		x = x << 1;
+		OUT(m->trstn | x | m->tck_low);
+		OUT(m->trstn | x | m->tck_high);
+	}
+	x = ((data >> 7) & 0x1);
+	x = x << 1;
+
+	if (m->dual_not_single && lane == 1) {
+		/*Shift out 1 bit content of Bypass register of Lane 0 */
+		OUT(m->trstn | x | m->tck_low);
+		OUT(m->trstn | x | m->tck_high);
 	}
 
 	/* Set TAP back round into SHIFT DR STATE
 	 * (exit1_dr,update_dr,idle,idle,select_dr,capture_dr) */
-	sysconf_write(sc, tms_sata_en | trstn_sata | tck_low);
-	sysconf_write(sc, tms_sata_en | trstn_sata | tck_high);
-	sysconf_write(sc, tms_sata_en | trstn_sata | tck_low);
-	sysconf_write(sc, tms_sata_en | trstn_sata | tck_high);
-	sysconf_write(sc, trstn_sata | tck_low);
-	sysconf_write(sc, trstn_sata | tck_high);
-	sysconf_write(sc, trstn_sata | tck_low);
-	sysconf_write(sc, trstn_sata | tck_high);
-	sysconf_write(sc, tms_sata_en | trstn_sata | tck_low);
-	sysconf_write(sc, tms_sata_en | trstn_sata | tck_high);
-	sysconf_write(sc, trstn_sata | tck_low);
-	sysconf_write(sc, trstn_sata | tck_high);
-	sysconf_write(sc, trstn_sata | tck_low);
-	sysconf_write(sc, trstn_sata | tck_high);
-
-	/* Shift out the MIPHY register contents */
-
-	/* Discard first 10 bits */
-	for (k = 0; k < 10; k++) {
-		sysconf_write(sc, trstn_sata | tck_low);
-		sysconf_write(sc, trstn_sata | tck_high);
+	if (!m->dual_not_single || lane == 0) {
+		OUT(m->tms | m->trstn | x | m->tck_low);
+		OUT(m->tms | m->trstn | x | m->tck_high);
+	} else if (lane == 1) {
+		OUT(m->tms | m->trstn | m->tck_low);
+		OUT(m->tms | m->trstn | m->tck_high);
+	} else {
+		BUG();
 	}
-
-	for (k = 0; k < 7; k++) {
-		sysconf_write(sc, trstn_sata | tck_low);
-		sysconf_write(sc, trstn_sata | tck_high);
-		ctrlbit = sysconf_read(status_sc);
-		ctrlbit = ctrlbit & sata_tdo;
-		ctrlbit = ctrlbit >> 1;
-		regvalue = ((ctrlbit & 0x1) << k) | regvalue;
+	OUT(m->tms | m->trstn | m->tck_low);
+	OUT(m->tms | m->trstn | m->tck_high);
+	OUT(m->trstn | m->tck_low);
+	OUT(m->trstn | m->tck_high);
+	OUT(m->trstn | m->tck_low);
+	OUT(m->trstn | m->tck_high);
+	OUT(m->tms | m->trstn | m->tck_low);
+	OUT(m->tms | m->trstn | m->tck_high);
+	OUT(m->trstn | m->tck_low);
+	OUT(m->trstn | m->tck_high);
+	OUT(m->trstn | m->tck_low);
+	OUT(m->trstn | m->tck_high);
+
+	/* Shift out MiPhy Control reg , shift in TDI = 0x00000000 ----> Why? */
+	/* Shift out 1 bit content of Bypassed Lane*/
+	if (m->dual_not_single) {
+		/*Shift out 1 bit content of Bypassed Lane  */
+		OUT(m->trstn | m->tck_low);
+		OUT(m->trstn | m->tck_high);
+		if (lane == 0) {
+			/* Shift out 1 bit content of Bypass register
+			 * of Lane 1 */
+			OUT(m->trstn | m->tck_low);
+			OUT(m->trstn | m->tck_high);
+		}
+
+		/*Discard first 10 bits */
+		for (k = 0; k < 10; k++) {
+			OUT(m->trstn | m->tck_low);
+			OUT(m->trstn | m->tck_high);
+		}
 	}
 
-	/* Set TAP into idle mode */
-	sysconf_write(sc, tms_sata_en | trstn_sata | tck_low);
-	sysconf_write(sc, tms_sata_en | trstn_sata | tck_high);
-	ctrlbit = sysconf_read(status_sc);
-	ctrlbit = ctrlbit & sata_tdo;
-	ctrlbit = ctrlbit >> 1;
-	regvalue = ((ctrlbit & 0x1) << 7) | regvalue;
-
-	sysconf_write(sc, tms_sata_en | trstn_sata | tck_low);
-	sysconf_write(sc, tms_sata_en | trstn_sata | tck_high);
-	sysconf_write(sc, trstn_sata | tck_low);
-	sysconf_write(sc, trstn_sata | tck_high);
-	sysconf_write(sc, trstn_sata | tck_low);
-	sysconf_write(sc, trstn_sata | tck_high);
-	sysconf_write(sc, trstn_sata | tck_low);
-	sysconf_write(sc, trstn_sata | tck_high);
-
-	return (regvalue);
+	/*Set TAP into idle mode */
+	OUT(m->tms | m->trstn | m->tck_low);
+	OUT(m->tms | m->trstn | m->tck_high);
+	OUT(m->tms | m->trstn | m->tck_low);
+	OUT(m->tms | m->trstn | m->tck_high);
+	OUT(m->trstn | m->tck_low);
+	OUT(m->trstn | m->tck_high);
+	OUT(m->trstn | m->tck_low);
+	OUT(m->trstn | m->tck_high);
+	OUT(m->trstn | m->tck_low);
+	OUT(m->trstn | m->tck_high);
 }
 
-void __init stm_sata_miphy_init(void)
+static void __init SATA_JTAG_MIPHY_Start_Lane0(struct stm_sata_miphy *miphy)
 {
-	struct sysconf_field *sc, *status_sc;
-	sc = sysconf_claim(SYS_CFG, 33, 0, 5, NULL);
-	status_sc = sysconf_claim(SYS_STA, 0, 0, 2, NULL);
-
-	SATA_JTAG_IR_Select_MIPHY(sc);
+	SATA_JTAG_IR_Select_MIPHY(miphy, 0);
 
 	/* Force Macro1 in reset and request PLL calibration reset */
 
 	/* Force PLL calibration reset, PLL reset and assert
 	 * Deserializer Reset */
-	SATA_JTAG_DR_Write_MIPHY(sc, 0x00, 0x16);
-	SATA_JTAG_DR_Write_MIPHY(sc, 0x11, 0x0);
+	SATA_JTAG_DR_Write_MIPHY(miphy, 0, 0x00, 0x16);
+	SATA_JTAG_DR_Write_MIPHY(miphy, 0, 0x11, 0x0);
 	/* Force macro1 to use rx_lspd, tx_lspd (by default rx_lspd
 	 * and tx_lspd set for Gen1)  */
-	SATA_JTAG_DR_Write_MIPHY(sc, 0x10, 0x1);
+	SATA_JTAG_DR_Write_MIPHY(miphy, 0, 0x10, 0x1);
 
 	/* Force Recovered clock on first I-DLL phase & all
 	 * Deserializers in HP mode */
 
 	/* Force Rx_Clock on first I-DLL phase on macro1 */
-	SATA_JTAG_DR_Write_MIPHY(sc, 0x72, 0x40);
+	SATA_JTAG_DR_Write_MIPHY(miphy, 0, 0x72, 0x40);
 	/* Force Des in HP mode on macro1 */
-	SATA_JTAG_DR_Write_MIPHY(sc, 0x12, 0x00);
+	SATA_JTAG_DR_Write_MIPHY(miphy, 0, 0x12, 0x00);
 
 	/* Wait for HFC_READY = 0 */
-	while (SATA_JTAG_DR_Read_MIPHY(sc, status_sc, 0x1) & 0x3)
+	while (SATA_JTAG_DR_Read_MIPHY(miphy, 0, 0x1) & 0x3)
 		;
 
 	/* Restart properly Process compensation & PLL Calibration */
 
 	/* Set properly comsr definition for 30 MHz ref clock */
-	SATA_JTAG_DR_Write_MIPHY(sc, 0x41, 0x1E);
+	SATA_JTAG_DR_Write_MIPHY(miphy, 0, 0x41, 0x1E);
 	/* comsr compensation reference */
-	SATA_JTAG_DR_Write_MIPHY(sc, 0x42, 0x33);
+	SATA_JTAG_DR_Write_MIPHY(miphy, 0, 0x42, 0x28);
 	/* Set properly comsr definition for 30 MHz ref clock */
-	SATA_JTAG_DR_Write_MIPHY(sc, 0x41, 0x1E);
+	SATA_JTAG_DR_Write_MIPHY(miphy, 0, 0x41, 0x1E);
 	/* comsr cal gives more suitable results in fast PVT for comsr
 	   used by TX buffer to build slopes making TX rise/fall fall
 	   times. */
-	SATA_JTAG_DR_Write_MIPHY(sc, 0x42, 0x33);
+	SATA_JTAG_DR_Write_MIPHY(miphy, 0, 0x42, 0x33);
 	/* Force VCO current to value defined by address 0x5A */
-	SATA_JTAG_DR_Write_MIPHY(sc, 0x51, 0x2);
+	SATA_JTAG_DR_Write_MIPHY(miphy, 0, 0x51, 0x2);
 	/* Force VCO current to value defined by address 0x5A */
-	SATA_JTAG_DR_Write_MIPHY(sc, 0x5A, 0xF);
+	SATA_JTAG_DR_Write_MIPHY(miphy, 0, 0x5A, 0xF);
 	/* Enable auto load compensation for pll_i_bias */
-	SATA_JTAG_DR_Write_MIPHY(sc, 0x47, 0x2A);
+	SATA_JTAG_DR_Write_MIPHY(miphy, 0, 0x47, 0x2A);
 	/* Force restart compensation and enable auto load for
 	 * Comzc_Tx, Comzc_Rx & Comsr on macro1 */
-	SATA_JTAG_DR_Write_MIPHY(sc, 0x40, 0x13);
+	SATA_JTAG_DR_Write_MIPHY(miphy, 0, 0x40, 0x13);
 
 	/* Wait for comzc & comsr done */
-	while ((SATA_JTAG_DR_Read_MIPHY(sc, status_sc, 0x40) & 0xC) != 0xC)
+	while ((SATA_JTAG_DR_Read_MIPHY(miphy, 0, 0x40) & 0xC) != 0xC)
 		;
 
 	/* Recommended settings for swing & slew rate FOR SATA GEN 1
 	 * from CPG */
-	SATA_JTAG_DR_Write_MIPHY(sc, 0x20, 0x00);
+	SATA_JTAG_DR_Write_MIPHY(miphy, 0, 0x20, 0x00);
 	/* (Tx Swing target 500-550mV peak-to-peak diff) */
-	SATA_JTAG_DR_Write_MIPHY(sc, 0x21, 0x2);
+	SATA_JTAG_DR_Write_MIPHY(miphy, 0, 0x21, 0x2);
 	/* (Tx Slew target120-140 ps rising/falling time) */
-	SATA_JTAG_DR_Write_MIPHY(sc, 0x22, 0x4);
+	SATA_JTAG_DR_Write_MIPHY(miphy, 0, 0x22, 0x4);
 
 	/* Force Macro1 in partial mode & release pll cal reset */
-	SATA_JTAG_DR_Write_MIPHY(sc, 0x00, 0x10);
+	SATA_JTAG_DR_Write_MIPHY(miphy, 0, 0x00, 0x10);
 	udelay(10);
 
-	SATA_JTAG_DR_Write_MIPHY(sc, 0x50, 0x8D);
-	SATA_JTAG_DR_Write_MIPHY(sc, 0x50, 0x8D);
+	SATA_JTAG_DR_Write_MIPHY(miphy, 0, 0x50, 0x8D);
+	SATA_JTAG_DR_Write_MIPHY(miphy, 0, 0x50, 0x8D);
 
 	/*  Wait for phy_ready */
 	/*  When phy is in ready state ( register 0x01 of macro1 to 0x13) */
-	while ((SATA_JTAG_DR_Read_MIPHY(sc, status_sc, 0x01) & 0x03) != 0x03)
+	while ((SATA_JTAG_DR_Read_MIPHY(miphy, 0, 0x01) & 0x03) != 0x03)
 		;
 
 	/* Enable macro1 to use rx_lspd  & tx_lspd from link interface */
-	SATA_JTAG_DR_Write_MIPHY(sc, 0x10, 0x00);
+	SATA_JTAG_DR_Write_MIPHY(miphy, 0, 0x10, 0x00);
 	/* Release Rx_Clock on first I-DLL phase on macro1 */
-	SATA_JTAG_DR_Write_MIPHY(sc, 0x72, 0x00);
+	SATA_JTAG_DR_Write_MIPHY(miphy, 0, 0x72, 0x00);
 
 	/* Deassert deserializer reset */
-	SATA_JTAG_DR_Write_MIPHY(sc, 0x00, 0x00);
+	SATA_JTAG_DR_Write_MIPHY(miphy, 0, 0x00, 0x00);
 	/* des_bit_lock_en is set */
-	SATA_JTAG_DR_Write_MIPHY(sc, 0x02, 0x08);
+	SATA_JTAG_DR_Write_MIPHY(miphy, 0, 0x02, 0x08);
 
 	/* bit lock detection strength */
-	SATA_JTAG_DR_Write_MIPHY(sc, 0x86, 0x61);
+	SATA_JTAG_DR_Write_MIPHY(miphy, 0, 0x86, 0x61);
+}
 
-	sysconf_release(sc);
-	sysconf_release(status_sc);
+static void __init SATA_JTAG_MIPHY_Start_Lane1(struct stm_sata_miphy *miphy)
+{
+	/* Select MacroMicroBus for Lane 1*/
+	SATA_JTAG_IR_Select_MIPHY(miphy, 1);
+	/* Force PLL calibration reset, PLL reset and assert Deserializer
+	 * Reset */
+	SATA_JTAG_DR_Write_MIPHY(miphy, 1, 0x00, 0x2);
+	/* Force restart compensation and enable auto load for Comzc_Tx,
+	 * Comzc_Rx & Comsr on macro2 */
+	SATA_JTAG_DR_Write_MIPHY(miphy, 1, 0x40, 0x13);
+
+	/* Select MacroMicroBus for Lane 0 */
+	SATA_JTAG_IR_Select_MIPHY(miphy, 0);
+	/* Force PLL reset  */
+	SATA_JTAG_DR_Write_MIPHY(miphy, 0, 0x00, 0x2);
+	/* Set properly comsr definition for 30 MHz ref clock */
+	SATA_JTAG_DR_Write_MIPHY(miphy, 0, 0x41, 0x1E);
+	/* to get more optimum result on comsr calibration giving faster
+	 * rise/fall time in SATA spec Gen1 useful for some corner case.*/
+	SATA_JTAG_DR_Write_MIPHY(miphy, 0, 0x42, 0x33);
+	/* Force restart compensation and enable auto load for Comzc_Tx,
+	 * Comzc_Rx & Comsr on macro1 */
+	SATA_JTAG_DR_Write_MIPHY(miphy, 0, 0x40, 0x13);
+
+	/*Wait for HFC_READY = 0*/
+	while (SATA_JTAG_DR_Read_MIPHY(miphy, 0, 0x1) & 0x3)
+		;
+
+	/* Select MacroMicroBus for Lane 1*/
+	SATA_JTAG_IR_Select_MIPHY(miphy, 1);
+	SATA_JTAG_DR_Write_MIPHY(miphy, 1, 0x11, 0x0);
+	/* Force macro2 to use rx_lspd, tx_lspd  (by default rx_lspd and
+	 * tx_lspd set for Gen1) */
+	SATA_JTAG_DR_Write_MIPHY(miphy, 1, 0x10, 0x1);
+	/* Force Rx_Clock on first I-DLL phase on macro2*/
+	SATA_JTAG_DR_Write_MIPHY(miphy, 1, 0x72, 0x40);
+	/* Force Des in HP mode on macro2 */
+	SATA_JTAG_DR_Write_MIPHY(miphy, 1, 0x12, 0x00);
+
+	while ((SATA_JTAG_DR_Read_MIPHY(miphy, 1, 0x40) & 0xC) != 0xC)
+		;
+
+	/*RECOMMENDED SETTINGS for Swing & slew rate FOR SATA GEN 1 from CPG*/
+	SATA_JTAG_DR_Write_MIPHY(miphy, 1, 0x20, 0x00);
+	/*(Tx Swing target 500-550mV peak-to-peak diff) */
+	SATA_JTAG_DR_Write_MIPHY(miphy, 1, 0x21, 0x2);
+	/*(Tx Slew target120-140 ps rising/falling time) */
+	SATA_JTAG_DR_Write_MIPHY(miphy, 1, 0x22, 0x4);
+	/*Force Macr21 in partial mode & release pll cal reset */
+	SATA_JTAG_DR_Write_MIPHY(miphy, 1, 0x00, 0x10);
+	udelay(10);
+	/* Select MacroMicroBus for Lane 0 */
+	SATA_JTAG_IR_Select_MIPHY(miphy, 0);
+	/* Release PLL reset  */
+	SATA_JTAG_DR_Write_MIPHY(miphy, 0, 0x00, 0x0);
+
+	/* Select MacroMicroBus for Lane 1*/
+	SATA_JTAG_IR_Select_MIPHY(miphy, 1);
+
+	/*  Wait for phy_ready */
+	/*  When phy is in ready state ( register 0x01 of macro1 to 0x13)*/
+	while ((SATA_JTAG_DR_Read_MIPHY(miphy, 1, 0x01) & 0x03) != 0x03)
+		;
+
+	/* Enable macro1 to use rx_lspd  & tx_lspd from link interface */
+	SATA_JTAG_DR_Write_MIPHY(miphy, 1, 0x10, 0x00);
+	/* Release Rx_Clock on first I-DLL phase on macro1 */
+	SATA_JTAG_DR_Write_MIPHY(miphy, 1, 0x72, 0x00);
+
+	/* Deassert deserializer reset */
+	SATA_JTAG_DR_Write_MIPHY(miphy, 1, 0x00, 0x00);
+	/*des_bit_lock_en is set */
+	SATA_JTAG_DR_Write_MIPHY(miphy, 1, 0x02, 0x08);
+
+	/*bit lock detection strength */
+	SATA_JTAG_DR_Write_MIPHY(miphy, 1, 0x86, 0x61);
+}
+
+
+
+void __init stm_sata_miphy_init(struct stm_sata_miphy *miphy, int lane)
+{
+	BUG_ON(!miphy);
+	BUG_ON(lane < 0 || lane > 1);
+	BUG_ON(!miphy->dual_not_single && lane != 0);
+
+	switch (lane) {
+	case 0:
+		SATA_JTAG_MIPHY_Start_Lane0(miphy);
+		break;
+	case 1:
+		SATA_JTAG_MIPHY_Start_Lane1(miphy);
+		break;
+	default:
+		BUG();
+		break;
+	}
 }
diff --git a/arch/sh/kernel/cpu/sh4/setup-stx7105.c b/arch/sh/kernel/cpu/sh4/setup-stx7105.c
index bf65dac..b6292f2 100644
--- a/arch/sh/kernel/cpu/sh4/setup-stx7105.c
+++ b/arch/sh/kernel/cpu/sh4/setup-stx7105.c
@@ -408,10 +408,21 @@ void __init stx7105_configure_sata(void)
 	sysconf_write(sc, 0);
 
 	if ((cpu_data->cut_major >= 3)) {
+		struct stm_sata_miphy miphy = {
+			.out = sysconf_claim(SYS_CFG, 33, 0, 5, "SATA"),
+			.tms = (1 << 5),
+			.trstn = (1 << 4),
+			.tdi_high = (1 << 1),
+			.tdi_low = (0 << 1),
+			.tck_high = (1 << 0),
+			.tck_low = (0 << 0),
+			.in_tdo = sysconf_claim(SYS_STA, 0, 1, 1, "SATA"),
+		};
+
 		sc = sysconf_claim(SYS_CFG, 33, 6, 6, "SATA");
 		sysconf_write(sc, 1);
 
-		stm_sata_miphy_init();
+		stm_sata_miphy_init(&miphy, 0);
 	}
 
 	/* Power up SATA host */
diff --git a/arch/sh/kernel/cpu/sh4/setup-stx7141.c b/arch/sh/kernel/cpu/sh4/setup-stx7141.c
index 590aaca..9d3dc3d 100644
--- a/arch/sh/kernel/cpu/sh4/setup-stx7141.c
+++ b/arch/sh/kernel/cpu/sh4/setup-stx7141.c
@@ -465,8 +465,19 @@ static struct platform_device sata_device =
 
 void __init stx7141_configure_sata(void)
 {
-	struct sysconf_field *sc;
 	if (cpu_data->cut_major >= 2) {
+		struct stm_sata_miphy miphy = {
+			.out = sysconf_claim(SYS_CFG, 33, 0, 5, "SATA"),
+			.tms = (1 << 5),
+			.trstn = (1 << 4),
+			.tdi_high = (1 << 1),
+			.tdi_low = (0 << 1),
+			.tck_high = (1 << 0),
+			.tck_low = (0 << 0),
+			.in_tdo = sysconf_claim(SYS_STA, 0, 1, 1, "SATA"),
+		};
+		struct sysconf_field *sc;
+
 		/* enable reset  */
 		sc = sysconf_claim(SYS_CFG, 4, 9, 9, "SATA");
 		sysconf_write(sc, 1);
@@ -477,7 +488,7 @@ void __init stx7141_configure_sata(void)
 		sc = sysconf_claim(SYS_CFG, 33, 6, 6, "SATA");
 		sysconf_write(sc, 0);
 
-		stm_sata_miphy_init();
+		stm_sata_miphy_init(&miphy, 0);
 	}
 
 	platform_device_register(&sata_device);
diff --git a/arch/sh/kernel/cpu/sh4/setup-stx7200.c b/arch/sh/kernel/cpu/sh4/setup-stx7200.c
index f5f80a0..56ca0af 100644
--- a/arch/sh/kernel/cpu/sh4/setup-stx7200.c
+++ b/arch/sh/kernel/cpu/sh4/setup-stx7200.c
@@ -407,13 +407,25 @@ static struct platform_device sata_device[2] = {
 void __init stx7200_configure_sata(unsigned int port)
 {
 	static int initialised_phy;
-	struct sysconf_field *sc;
 
 	if ((cpu_data->cut_major >= 3) && (!initialised_phy)) {
+		struct stm_sata_miphy miphy = {
+			.out = sysconf_claim(SYS_CFG, 33, 0, 5, "SATA"),
+			.tms = (1 << 5),
+			.trstn = (1 << 4),
+			.tdi_high = (1 << 1),
+			.tdi_low = (0 << 1),
+			.tck_high = (1 << 0),
+			.tck_low = (0 << 0),
+			.in_tdo = sysconf_claim(SYS_STA, 0, 1, 1, "SATA"),
+		};
+		struct sysconf_field *sc;
+
 		sc = sysconf_claim(SYS_CFG, 33, 6, 6, "SATA");
 		sysconf_write(sc, 1);
 
-		stm_sata_miphy_init();
+		stm_sata_miphy_init(&miphy, 0);
+
 		initialised_phy = 1;
 	}
 
diff --git a/include/linux/stm/soc.h b/include/linux/stm/soc.h
index f312177..5fa466d 100644
--- a/include/linux/stm/soc.h
+++ b/include/linux/stm/soc.h
@@ -232,6 +232,22 @@ struct plat_sata_data {
 	unsigned int only_32bit;
 };
 
+/* MIPHY initialization routine */
+struct stm_sata_miphy {
+	int dual_not_single:1;
+	/* Soft jtag bits */
+	struct sysconf_field *out;  /* Sysconf field with output bits */
+	unsigned long tms; /* Bit masks for the "out" field */
+	unsigned long trstn;
+	unsigned long tdi_high;
+	unsigned long tdi_low;
+	unsigned long tck_high;
+	unsigned long tck_low;
+	struct sysconf_field *in_tdo; /* Just one bit, so defined as a field */
+};
+void stm_sata_miphy_init(struct stm_sata_miphy *miphy, int lane);
+
+
 /* Private data for the PWM driver */
 struct plat_stm_pwm_data {
 	unsigned long flags;
@@ -558,6 +574,4 @@ void stx7200_configure_lirc(lirc_scd_t *scd);
 void stx7200_configure_nand(struct platform_device *pdev);
 void stx7200_configure_pata(int bank, int pc_mode, int irq);
 
-void stm_sata_miphy_init(void);
-
 #endif /* __LINUX_ST_SOC_H */
-- 
1.6.0.6

