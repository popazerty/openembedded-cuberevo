Index: linux/drivers/stm/stm-coprocessor_frmw.c
===================================================================
--- linux.orig/drivers/stm/stm-coprocessor_frmw.c	2006-12-14 15:17:34.846686000 +0000
+++ linux/drivers/stm/stm-coprocessor_frmw.c	2007-01-25 16:46:24.489841000 +0000
@@ -328,20 +328,13 @@
 			if (mem != __va(addr)) {
 				if (mem) {
 					free_bootmem(virt_to_phys(mem), size);
-			}
-			printk(alloc_error, addr);
-
-			/* TODO: It would be a good idea to disable the
-			* co-processor here but at present we cannot
-			* do so. Basically we haven't actually checked
-			* that the coprocessor image and the kernel
-			* memory overlap. Without this check we cannot
-			* disable the coprocessor since failure to
-			* allocate from bootmem is *expected* in this
-			* case.
-			*/
-			/*coproc[i].ram_offset = coproc[i].ram_size = 0;*/
-			}
+				}
+				/* At this point, if addr overlaps kernel
+				 * memory, coprocessor won't be allocated.
+                                 */
+				if (coproc_check_area(addr, size, i, coproc))
+                                        printk(alloc_error, addr);
+                        }
 		}
 	}
 
Index: linux/drivers/stm/stm-coprocessor.c
===================================================================
--- linux.orig/drivers/stm/stm-coprocessor.c	2006-12-14 15:17:32.432706000 +0000
+++ linux/drivers/stm/stm-coprocessor.c	2007-01-25 16:46:24.508842000 +0000
@@ -627,18 +627,11 @@
 				if (mem) {
 					free_bootmem(virt_to_phys(mem), size);
 				}
-				printk(alloc_error, addr);
-
-				/* TODO: It would be a good idea to disable the
-				 * co-processor here but at present we cannot
-				 * do so. Basically we haven't actually checked
-				 * that the coprocessor image and the kernel
-				 * memory overlap. Without this check we cannot
-				 * disable the coprocessor since failure to
-				 * allocate from bootmem is *expected* in this
-				 * case.
+				/* At this point, if addr overlaps kernel
+				 * memory, coprocessor won't be allocated.
 				 */
-				/*coproc[i].ram_offset = coproc[i].ram_size = 0;*/
+				if (coproc_check_area(addr, size, i, coproc))
+					printk(alloc_error, addr);
 			}
 		}
 	}
Index: linux/drivers/stm/copro-stb7100.c
===================================================================
--- linux.orig/drivers/stm/copro-stb7100.c	2006-12-14 15:17:30.800726000 +0000
+++ linux/drivers/stm/copro-stb7100.c	2007-01-25 16:46:24.540841000 +0000
@@ -7,6 +7,8 @@
 #include <asm/io.h>
 #include <asm/irq.h>
 #include <asm/mach/coproc.h>
+#include <asm/sections.h>
+#include <asm/addrspace.h>
 
 struct coproc_board_info coproc_info = {
 	.name = "st231",
@@ -82,3 +84,16 @@
 {
 	return;			/* Do nothing, doesn't delete it */
 }
+
+int coproc_check_area(u_long addr, u_long size, int i, coproc_t * coproc)
+{
+        if (((addr >= CONFIG_MEMORY_START) && (addr < PHYSADDR(_end))) || \
+                (((addr + size) > CONFIG_MEMORY_START) && \
+		(addr < CONFIG_MEMORY_START)))
+        {
+                coproc[i].ram_offset = coproc[i].ram_size = 0;
+                return 1;
+        }
+        return 0;
+}
+
Index: linux/include/linux/st-coprocessor.h
===================================================================
--- linux.orig/include/linux/st-coprocessor.h	2006-12-14 15:17:30.839726000 +0000
+++ linux/include/linux/st-coprocessor.h	2007-01-25 16:46:24.632841000 +0000
@@ -104,4 +104,5 @@
 extern int coproc_cpu_grant(coproc_t *, unsigned long);
 extern int coproc_cpu_release(coproc_t *);
 extern int coproc_cpu_reset(coproc_t *);
+extern int coproc_check_area(u_long, u_long, int, coproc_t *);
 extern void coproc_proc_other_info(coproc_t *, struct seq_file *);
