This patch removes the PHYSADDR macro and reviewes the driver to work
when the kernel is built in 32BIT mode.
It also removes the mb376 platform configuration (no longer supported).

Signed-off-by: Giuseppe Cavallaro <peppe.cavallaro@st.com>

diff -uprN -X linux/Documentation/dontdiff linux.orig/drivers/net/smsc_911x/smsc9118.c linux/drivers/net/smsc_911x/smsc9118.c
--- linux.orig/drivers/net/smsc_911x/smsc9118.c	2008-03-26 13:26:34.000000000 +0100
+++ linux/drivers/net/smsc_911x/smsc9118.c	2008-04-01 15:13:51.710007000 +0200
@@ -520,6 +520,7 @@ void Vl_ReleaseLock(PVERIFIABLE_LOCK pVl
 
 typedef struct _PRIVATE_DATA {
 	DWORD dwLanBase;
+	DWORD dwLanBasePhy;
 	DWORD dwIdRev;
 	DWORD dwFpgaRev;
 	struct net_device *dev;
@@ -1308,7 +1309,6 @@ void Smsc9118_cleanup_module(void)
 
 int Smsc9118_init(struct net_device *dev)
 {
-	DWORD dwLanBase=0UL;
 	DWORD dwIdRev=0UL;
 	DWORD dwFpgaRev=0UL;
 	PPRIVATE_DATA privateData=NULL;
@@ -1336,27 +1336,32 @@ int Smsc9118_init(struct net_device *dev
 	privateData=(PPRIVATE_DATA)(dev->priv);
 	platformData=&(privateData->PlatformData);
 
-	dwLanBase=Platform_Initialize(
+	privateData->dwLanBasePhy=Platform_Initialize(
 		platformData,
 		lan_base,bus_width);
 
-	if(dwLanBase==0UL) {
+	privateData->dwLanBase = (DWORD)ioremap(privateData->dwLanBasePhy, 0x100);
+
+	SMSC_TRACE("Lan Base at 0x%08lX",privateData->dwLanBase);
+
+	if(privateData->dwLanBase==0UL) {
 		SMSC_WARNING("dwLanBase==0x00000000");
 		result=-ENODEV;
 		goto DONE;
 	}
 	platformInitialized=TRUE;
-	SMSC_TRACE("dwLanBase=0x%08lX",dwLanBase);
+	SMSC_TRACE("dwLanBase=0x%08lX",privateData->dwLanBase);
 
-	if(check_mem_region(dwLanBase,LAN_REGISTER_EXTENT)!=0) {
+	if(check_mem_region(privateData->dwLanBase,LAN_REGISTER_EXTENT)!=0) {
 		SMSC_WARNING("  Memory Region specified (0x%08lX to 0x%08lX) is not available.",
-			dwLanBase,dwLanBase+LAN_REGISTER_EXTENT-1UL);
+			privateData->dwLanBase,privateData->dwLanBase+LAN_REGISTER_EXTENT-1UL);
 		result=-ENOMEM;
 		goto DONE;
 	}
 
-	privateData->dwLanBase=dwLanBase;
 	dwIdRev=Lan_GetRegDW(ID_REV);
+	privateData->PlatformData.dwIdRev = dwIdRev;
+
 	if(HIWORD(dwIdRev)==LOWORD(dwIdRev)) {
 		//this may mean the chip is set for 32 bit
 		//  while the bus is reading as 16 bit
@@ -3708,7 +3713,7 @@ void Tx_Initialize(
 		{
 			SMSC_WARNING("Failed Platform_DmaInitialize, dwTxDmaCh=%lu",dwTxDmaCh);
 		}
-		privateData->TxDmaXfer.dwLanReg=privateData->dwLanBase+TX_DATA_FIFO;
+		privateData->TxDmaXfer.dwLanReg=privateData->dwLanBasePhy+TX_DATA_FIFO;
 		privateData->TxDmaXfer.pdwBuf=NULL;//this will be reset per dma request
 		privateData->TxDmaXfer.dwDmaCh=privateData->dwTxDmaCh;
 		privateData->TxDmaXfer.dwDwCnt=0;//this will be reset per dma request
@@ -4612,7 +4617,7 @@ void Rx_ProcessPackets(PPRIVATE_DATA pri
 		}
 
 		if (packets != 0) {
-			dmaXfer.dwLanReg=privateData->dwLanBase+RX_DATA_FIFO;
+			dmaXfer.dwLanReg=privateData->dwLanBasePhy+RX_DATA_FIFO;
 			dmaXfer.pdwBuf=(DWORD*)privateData->RxSgs;
 			dmaXfer.dwDmaCh=dwDmaCh;
 			dmaXfer.dwDwCnt=packets;
@@ -4622,7 +4627,7 @@ void Rx_ProcessPackets(PPRIVATE_DATA pri
 
 			RxPacketDepth[packets]++;
 			privateData->RxSkbsCount = packets;
-			if(!Platform_DmaStartSgXfer(platformData,&dmaXfer, Rx_DmaCompletionCallback, privateData)) {
+			if(!Platform_DmaStartSgXfer(platformData, &dmaXfer, Rx_DmaCompletionCallback, privateData)) {
 				SMSC_WARNING("Failed Platform_DmaStartXfer");
 			}
 		} else if (privateData->RxDropOnCallback != 0) {
@@ -4681,7 +4686,7 @@ BOOLEAN Rx_HandleInterrupt(
 	privateData->LastReasonForReleasingCPU=0;
 
 	if(dwIntSts&INT_STS_RXE_) {
-		SMSC_TRACE("Rx_HandleInterrupt: RXE signalled");
+		/*SMSC_TRACE("Rx_HandleInterrupt: RXE signalled");*/
 		privateData->stats.rx_errors++;
 		Lan_SetRegDW(INT_STS,INT_STS_RXE_);
 		result=TRUE;
diff -uprN -X linux/Documentation/dontdiff linux.orig/drivers/net/smsc_911x/st40.c linux/drivers/net/smsc_911x/st40.c
--- linux.orig/drivers/net/smsc_911x/st40.c	2008-03-26 13:26:34.000000000 +0100
+++ linux/drivers/net/smsc_911x/st40.c	2008-04-01 13:53:20.689999000 +0200
@@ -50,19 +50,8 @@
 #define PLATFORM_IRQ_TYPE	(0UL)
 
 #define DB641_USE_PORT0
-#if defined(CONFIG_SH_STI5528_EVAL)
-/* db641 STEM card plugged into mb376 */
-#ifdef DB641_USE_PORT0
-/* STEM CS0 = BANK3 */
-#define PLATFORM_CSBASE		(0xA3000000UL)
-#define PLATFORM_IRQ		(10UL)
-#else
-/* STEM CS1 = BANK4 */
-#define PLATFORM_CSBASE		(0xA3400000UL)
-#define PLATFORM_IRQ		(9UL)
-#endif
-#elif defined(CONFIG_SH_ST_MB411)
-/* db641 STEM card plugged into mb376 */
+#if defined(CONFIG_SH_ST_MB411)
+/* db641 STEM card plugged */
 #ifdef DB641_USE_PORT0
 /* STEM CS0 = BankB, A23=0 */
 #define PLATFORM_CSBASE		(0x01000000UL)
@@ -210,8 +199,6 @@ DWORD Platform_Initialize(
 	PPLATFORM_DATA platformData,
 	DWORD dwLanBase, DWORD dwBusWidth)
 {
-	DWORD dwIdRev=0;
-	SMSC_TRACE("--> Platform_Initialize");
 	SMSC_ASSERT(platformData!=NULL);
 	platformData->dwBitWidth=0;
 
@@ -219,16 +206,8 @@ DWORD Platform_Initialize(
 		dwLanBase=PLATFORM_CSBASE;
 	}
 
-	dwLanBase = ioremap(dwLanBase, 0x100);
-
-	SMSC_TRACE("Lan Base at 0x%08lX",dwLanBase);
-
 	platformData->dwBitWidth=16;
 
-	dwIdRev=(*(volatile unsigned long *)(dwLanBase+ID_REV_OFFSET));
-	platformData->dwIdRev = dwIdRev;
-
-	SMSC_TRACE("<-- Platform_Initialize");
 	return dwLanBase;
 }
 
diff -uprN -X linux/Documentation/dontdiff linux.orig/drivers/net/smsc_911x/st40-shdma.c linux/drivers/net/smsc_911x/st40-shdma.c
--- linux.orig/drivers/net/smsc_911x/st40-shdma.c	2008-03-26 13:26:34.000000000 +0100
+++ linux/drivers/net/smsc_911x/st40-shdma.c	2008-04-01 14:53:14.950000000 +0200
@@ -202,9 +202,10 @@ BOOLEAN Platform_DmaStartXfer(
 		return FALSE;
 	}
 
+	dwLanPhysAddr = pDmaXfer->dwLanReg;
 	// 3. calculate the physical transfer addresses
-	dwLanPhysAddr = CpuToPhysicalAddr((void *)pDmaXfer->dwLanReg);
-	dwMemPhysAddr = PHYSADDR(CpuToPhysicalAddr((void *)pDmaXfer->pdwBuf));
+	dwMemPhysAddr = dma_map_single(NULL, pDmaXfer->pdwBuf,
+				sizeof(pDmaXfer->pdwBuf), DMA_TO_DEVICE);
 
 	// 4. validate the address alignments
 	// need CL alignment for CL bursts
@@ -224,8 +225,8 @@ BOOLEAN Platform_DmaStartXfer(
 
 	// 5. Prepare the DMA channel structure
 	BUG_ON(pDmaXfer->fMemWr);
-	src = PHYSADDR(dwMemPhysAddr);
-	dst = PHYSADDR(dwLanPhysAddr);
+	src = dwMemPhysAddr;
+	dst = dwLanPhysAddr;
 	dmap = &tx_transfer;
 
 	dma_params_comp_cb(dmap,
@@ -256,7 +257,6 @@ BOOLEAN Platform_DmaStartSgXfer(
 	void (*pCallback)(void*),
 	void* pCallbackData)
 {
-	DWORD dwLanPhysAddr;
 	int res=0;
 	int sg_count;
 	struct scatterlist *sg;
@@ -276,9 +276,6 @@ BOOLEAN Platform_DmaStartSgXfer(
 		return FALSE;
 	}
 
-	// 3. calculate the physical transfer addresses
-	dwLanPhysAddr = PHYSADDR(CpuToPhysicalAddr((void *)pDmaXfer->dwLanReg));
-
 	// 4. Map (flush) the buffer
 	sg = (struct scatterlist*)pDmaXfer->pdwBuf;
 	sg_count = dma_map_sg(NULL, sg,
@@ -294,7 +291,7 @@ BOOLEAN Platform_DmaStartSgXfer(
 		if (long_len) {
 			dma_params_DIM_0_x_1(param);
 			dma_params_addrs(param,
-					dwLanPhysAddr,
+					pDmaXfer->dwLanReg,
 					sg_dma_address(sg),
 					long_len);
 			dma_params_req(param, dma_reqs[SMSC_LONG_PTK_CHAN]);
@@ -305,7 +302,7 @@ BOOLEAN Platform_DmaStartSgXfer(
 		if (short_len) {
 			dma_params_DIM_0_x_1(param);
 			dma_params_addrs(param,
-					dwLanPhysAddr,
+					pDmaXfer->dwLanReg,
 					sg_dma_address(sg) + long_len,
 					short_len);
 			dma_params_req(param, dma_reqs[SMSC_SHORT_PTK_CHAN]);
@@ -362,7 +359,8 @@ BOOLEAN Platform_DmaStartSgXfer(
 	}
 
 	// 3. calculate the physical transfer addresses
-	dwLanPhysAddr = PHYSADDR(CpuToPhysicalAddr((void *)pDmaXfer->dwLanReg));
+	dwLanPhysAddr = pDmaXfer->dwLanReg;
+
 #ifdef CONFIG_SMSC911x_DMA_FIFOSEL
 	dwLanPhysAddr += (1<<16);
 #endif
