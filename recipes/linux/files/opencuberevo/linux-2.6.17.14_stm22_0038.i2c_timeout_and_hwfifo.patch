This patch:
 - adds hardware FIFO support to the I2C driver
 - fixes the timeout handling
 - reduces the i2c memory request
 - improves the i2c finite state machine design
 - don't turn off the SSC after timeout, as this causes SDA to go low
   (closes bugzilla 1377)
 - adds the attribute device file "fastmode" for each
      i2c adapter to allow an easy fast mode setting

	Signed-off-by: Francesco Virlinzi <francesco.virlinzi@st.com>

Index: linux/drivers/i2c/busses/i2c-stm.c
===================================================================
--- linux.orig/drivers/i2c/busses/i2c-stm.c
+++ linux/drivers/i2c/busses/i2c-stm.c
@@ -3,6 +3,7 @@
  *
  * i2c-stm.c
  * i2c algorithms for STMicroelectronics SSC device
+ * Version: 2.0 (1 April 2007)
  *
  * --------------------------------------------------------------------
  *
@@ -25,6 +26,7 @@
 #include <linux/delay.h>
 #include <linux/interrupt.h>
 #include <linux/mutex.h>
+#include <linux/wait.h>
 #include <linux/errno.h>
 #include <linux/preempt.h>
 #include <asm/processor.h>
@@ -34,12 +36,19 @@
 
 #undef dgb_print
 
-#ifdef  CONFIG_I2C_STM_DEBUG
+#ifdef  CONFIG_I2C_DEBUG_BUS
 #define dgb_print(fmt, args...)  printk("%s: " fmt, __FUNCTION__ , ## args)
 #else
 #define dgb_print(fmt, args...)
 #endif
 
+#undef dgb_print2
+#ifdef  CONFIG_I2C_DEBUG_ALGO
+#define dgb_print2(fmt, args...)  printk("%s: " fmt, __FUNCTION__ , ## args)
+#else
+#define dgb_print2(fmt, args...)
+#endif
+
 /* --- Defines for I2C --- */
 #define DEVICE_ID                    0x041175
 
@@ -48,7 +57,7 @@
 #define NANOSEC_PER_SEC            1000000000
 
 #define REP_START_HOLD_TIME_NORMAL   4000	/* standard */
-#define REP_START_HOLD_TIME_FAST     3500	/* it should be 600 */
+#define REP_START_HOLD_TIME_FAST      600	/* it was 3500 but 600 is standard*/
 #define START_HOLD_TIME_NORMAL       4000	/* standard */
 #define START_HOLD_TIME_FAST          600	/* standard */
 #define REP_START_SETUP_TIME_NORMAL  4700	/* standard */
@@ -69,6 +78,7 @@
 
 typedef enum _iic_state_machine_e {
 	IIC_FSM_VOID = 0,
+	IIC_FSM_PREPARE,
 	IIC_FSM_START,
 	IIC_FSM_DATA_WRITE,
 	IIC_FSM_PREPARE_2_READ,
@@ -89,140 +99,245 @@ typedef enum _iic_fsm_error_e {
 struct iic_ssc {
 	unsigned int iic_idx;
 	struct i2c_adapter adapter;
-	unsigned int virtual_configuration;
+	unsigned long config;
+	struct list_head list;
+};
+
+/*
+ * With the struct iic_transaction more information
+ * on the required transaction are moved on
+ * the thread stack instead of (iic_ssc) adapter descriptor...
+ */
+struct iic_transaction {
+	struct iic_ssc *adapter;
 	iic_state_machine_e start_state;
 	iic_state_machine_e state;
 	iic_state_machine_e next_state;
 	struct i2c_msg *msgs_queue;
 	int attempt;
 	int queue_length;
-	int current_msg;	/* the message on going */
-	int idx_current_msg;	/* the byte in the message */
+	int current_msg;		/* the message on going */
+	int idx_current_msg;		/* the byte in the message */
 	iic_fsm_error_e status_error;
+	int waitcondition;
 };
 
-static void iic_algo_stm_setup_timing(struct iic_ssc *adapter);
+#define jump_on_fsm_start(x)	{ (x)->state = IIC_FSM_START;	\
+				goto be_fsm_start;	}
 
-#define jump_on_fsm_start()  { adap->state = IIC_FSM_START; \
-				goto be_fsm_start; }
+#define jump_on_fsm_repstart(x)	{ (x)->state = IIC_FSM_REPSTART; \
+                                goto be_fsm_repstart;	}
 
-#define jump_on_fsm_repstart()  { adap->state = IIC_FSM_REPSTART; \
-                                  goto be_fsm_repstart; }
+#define jump_on_fsm_complete(x)	{ (x)->state = IIC_FSM_COMPLETE; \
+				goto be_fsm_complete;	}
 
-#define jump_on_fsm_stop()      { adap->state = IIC_FSM_STOP;     \
-                                  goto be_fsm_stop;        }
+#define jump_on_fsm_stop(x)	{ (x)->state = IIC_FSM_STOP;	\
+                                  goto be_fsm_stop;	}
 
-#define jump_on_fsm_abort()     { adap->state = IIC_FSM_ABORT;    \
-                                  goto be_fsm_abort;       }
+#define jump_on_fsm_abort(x)	{ (x)->state = IIC_FSM_ABORT;    \
+                                  goto be_fsm_abort;	}
 
-#define check_fastmode(adap)  ( (adap->virtual_configuration & \
-                                 IIC_STM_CONFIG_SPEED_MASK   )!=0 ? 1 : 0 )
+#define check_fastmode(adap)	(((adap)->config & \
+                                 IIC_STM_CONFIG_SPEED_MASK ) ? 1 : 0 )
 
-void iic_algo_state_machine(struct iic_ssc *adap)
+
+static void iic_stm_setup_timing(struct iic_ssc *adap);
+
+static void iic_state_machine(struct iic_transaction *trsc)
 {
+	struct iic_ssc* adap = trsc->adapter;
+	struct ssc_t *ssc_bus =
+		(struct ssc_t *)container_of(adap->adapter.dev.parent,struct ssc_t, dev);
 	unsigned short status;
-	unsigned short tx_fifo_status;
-	unsigned short rx_fifo_status;
+	short tx_fifo_status;
 	unsigned int idx;
 	unsigned short address;
 	struct i2c_msg *pmsg;
-	struct ssc_t *ssc_bus;
-	struct device *dev;
-	char local_fast_mode;
+	char fast_mode;
 	union {
 		char bytes[2];
 		short word;
 	} tmp;
 
-	dgb_print("\n");
-	dev = adap->adapter.dev.parent;
-	ssc_bus = container_of(dev, struct ssc_t, dev);
-	local_fast_mode = check_fastmode(adap);
-	pmsg = adap->msgs_queue + adap->current_msg;
+	dgb_print2("\n");
 
-	adap->state = adap->next_state;
+	fast_mode = check_fastmode(adap);
+	pmsg = trsc->msgs_queue + trsc->current_msg;
+
+	trsc->state = trsc->next_state;
 
 	barrier();
-#if defined(CONFIG_CPU_SUBTYPE_STB7100)
-	tx_fifo_status = ssc_load16(ssc_bus, SSC_TX_FSTAT);
-	rx_fifo_status = ssc_load16(ssc_bus, SSC_RX_FSTAT);
-#endif
-	switch (adap->state) {
+	switch (trsc->state) {
+	case IIC_FSM_PREPARE:
+		dgb_print2("-Prepare\n");
+		/*
+		 * Here we set the right Pio configuration
+		 * because in the future SPI could change them
+		 */
+		stpio_set_pin(ssc_bus->pio_clk,  STPIO_ALT_BIDIR);
+		stpio_set_pin(ssc_bus->pio_data, STPIO_ALT_BIDIR);
+		/*
+		 * check if the i2c timing register
+		 * of ssc are ready to use
+		 */
+		if (check_fastmode(adap) && ssc_bus->i2c_timing != SSC_I2C_READY_FAST ||
+		   !check_fastmode(adap) && ssc_bus->i2c_timing != SSC_I2C_READY_NORMAL )
+			iic_stm_setup_timing(adap);
+		jump_on_fsm_start(trsc);
+		break;
+
 	case IIC_FSM_START:
 	      be_fsm_start:
-		dgb_print("-Start address 0x%x\n", pmsg->addr);
-		adap->start_state = IIC_FSM_START;
+		dgb_print2("-Start address 0x%x\n", pmsg->addr);
 		ssc_store16(ssc_bus, SSC_CTL, SSC_CTL_SR | SSC_CTL_EN | 0x1);
 		ssc_store16(ssc_bus, SSC_BRG,
-			    (adap->virtual_configuration &
+			    (adap->config &
 			     IIC_STM_CONFIG_BAUDRATE_MASK) >> 16);
 		ssc_store16(ssc_bus, SSC_CTL,
 			    SSC_CTL_EN | SSC_CTL_MS |
 			    SSC_CTL_PO | SSC_CTL_PH | SSC_CTL_HB | 0x8);
 		ssc_store16(ssc_bus, SSC_CLR, 0xdc0);
 		ssc_store16(ssc_bus, SSC_I2C, SSC_I2C_I2CM |
-			    (SSC_I2C_I2CFSMODE * local_fast_mode));
+			    (SSC_I2C_I2CFSMODE * fast_mode));
 		address = (pmsg->addr << 2) | 0x1;
-		adap->next_state = IIC_FSM_DATA_WRITE;
-		if (pmsg->flags & I2C_M_RD) {
+		trsc->start_state = IIC_FSM_START;
+		trsc->next_state  = IIC_FSM_DATA_WRITE;
+		if (pmsg->flags & I2C_M_RD){
 			address |= 0x2;
-			adap->next_state = IIC_FSM_PREPARE_2_READ;
+			trsc->next_state = IIC_FSM_PREPARE_2_READ;
 		}
-		adap->idx_current_msg = 0;
+		trsc->idx_current_msg = 0;
 		ssc_store16(ssc_bus, SSC_IEN, SSC_IEN_NACKEN | SSC_IEN_TEEN);
 		ssc_store16(ssc_bus, SSC_TBUF, address);
 		ssc_store16(ssc_bus, SSC_I2C, SSC_I2C_I2CM |
 			    SSC_I2C_STRTG | SSC_I2C_TXENB |
-			    (SSC_I2C_I2CFSMODE * local_fast_mode));
+			    (SSC_I2C_I2CFSMODE * fast_mode));
 		break;
 	case IIC_FSM_PREPARE_2_READ:
 		/* Just to clear th RBUF */
 		ssc_load16(ssc_bus, SSC_RBUF);
 		status = ssc_load16(ssc_bus, SSC_STA);
-		dgb_print(" Prepare to Read... Status=0x%x\n", status);
+		dgb_print2(" Prepare to Read... Status=0x%x\n", status);
 		if (status & SSC_STA_NACK)
-			jump_on_fsm_abort();
-		adap->next_state = IIC_FSM_DATA_READ;
+			jump_on_fsm_abort(trsc);
+		trsc->next_state = IIC_FSM_DATA_READ;
+#if !defined(CONFIG_I2C_STM_HW_FIFO)
 		if (!pmsg->len) {
 			dgb_print("Zero Read\n");
-			jump_on_fsm_stop();
+			jump_on_fsm_stop(trsc);
 		}
 		ssc_store16(ssc_bus, SSC_TBUF, 0x1ff);
 		if (pmsg->len == 1) {
 			ssc_store16(ssc_bus, SSC_IEN, SSC_IEN_NACKEN);
 			ssc_store16(ssc_bus, SSC_I2C, SSC_I2C_I2CM |
-				    (SSC_I2C_I2CFSMODE * local_fast_mode));
+				    (SSC_I2C_I2CFSMODE * fast_mode));
 		} else {
 			ssc_store16(ssc_bus, SSC_I2C, SSC_I2C_I2CM |
 				    SSC_I2C_ACKG |
-				    (SSC_I2C_I2CFSMODE * local_fast_mode));
+				    (SSC_I2C_I2CFSMODE * fast_mode));
 			ssc_store16(ssc_bus, SSC_IEN, SSC_IEN_RIEN);
 		}
+                break;
+#else
+		switch (pmsg->len) {
+		case 0: dgb_print2("Zero Read\n");
+			jump_on_fsm_stop(trsc);
+
+		case 1: ssc_store16(ssc_bus, SSC_TBUF, 0x1ff);
+			ssc_store16(ssc_bus, SSC_I2C, SSC_I2C_I2CM |
+				(SSC_I2C_I2CFSMODE * fast_mode));
+			ssc_store16(ssc_bus, SSC_IEN, SSC_IEN_NACKEN);
+		   break;
+		default:
+			/* enable the fifos */
+			ssc_store16(ssc_bus, SSC_CTL, SSC_CTL_EN | SSC_CTL_MS |
+				SSC_CTL_PO | SSC_CTL_PH | SSC_CTL_HB | 0x8 |
+				SSC_CTL_EN_TX_FIFO | SSC_CTL_EN_RX_FIFO );
+			ssc_store16(ssc_bus, SSC_CLR, 0xdc0);
+			ssc_store16(ssc_bus, SSC_I2C, SSC_I2C_I2CM | SSC_I2C_ACKG |
+				(SSC_I2C_I2CFSMODE * fast_mode));
+			/* P.S.: in any case the last byte has to be
+			 *       managed in a different manner
+			 */
+			for ( idx = 0;  idx < SSC_RXFIFO_SIZE &&
+					idx < pmsg->len-1 ;  ++idx )
+				ssc_store16(ssc_bus, SSC_TBUF, 0x1ff);
+			ssc_store16(ssc_bus, SSC_IEN, SSC_IEN_RIEN | SSC_IEN_TIEN);
+		}
 		break;
+#endif
 	case IIC_FSM_DATA_READ:
+#if !defined(CONFIG_I2C_STM_HW_FIFO)
 		status = ssc_load16(ssc_bus, SSC_STA);
 		if (!(status & SSC_STA_TE))
 			return;
 		tmp.word = ssc_load16(ssc_bus, SSC_RBUF);
 		tmp.word = tmp.word >> 1;
-		pmsg->buf[adap->idx_current_msg++] = tmp.bytes[0];
-		dgb_print(" Data Read...Status=0x%x %d-%c\n",
-			  status, tmp.bytes[0], tmp.bytes[0]);
+		pmsg->buf[trsc->idx_current_msg++] = tmp.bytes[0];
+		dgb_print2(" Data Read...Status=0x%x %d-%c\n",
+			status, tmp.bytes[0], tmp.bytes[0]);
 		/*Did we finish? */
-		if (adap->idx_current_msg == pmsg->len) {
+		if (trsc->idx_current_msg == pmsg->len) {
 			status &= ~SSC_STA_NACK;
-			jump_on_fsm_stop();
+			jump_on_fsm_stop(trsc);
 		} else {
 			ssc_store16(ssc_bus, SSC_TBUF, 0x1ff);
 			/*Is this the last byte? */
-			if (adap->idx_current_msg == (pmsg->len - 1)) {
+			if (trsc->idx_current_msg == (pmsg->len - 1)) {
 				ssc_store16(ssc_bus, SSC_I2C, SSC_I2C_I2CM |
-					    (SSC_I2C_I2CFSMODE *
-					     local_fast_mode));
+					 (SSC_I2C_I2CFSMODE * fast_mode));
 				ssc_store16(ssc_bus, SSC_IEN, SSC_IEN_NACKEN);
 			}
 		}
 		break;
+#else
+		status = ssc_load16(ssc_bus, SSC_STA);
+		if (!(status & SSC_STA_TE))
+			return;
+		dgb_print2(" Data Read...Status=0x%x\n",status);
+		/* 1.0 Is it the last byte */
+		if (trsc->idx_current_msg == pmsg->len-1) {
+			tmp.word = ssc_load16(ssc_bus, SSC_RBUF);
+			tmp.word = tmp.word >> 1;
+			pmsg->buf[trsc->idx_current_msg++] = tmp.bytes[0];
+			dgb_print2(" Rx Data %d-%c\n",tmp.bytes[0], tmp.bytes[0]);
+		} else
+		/* 1.1 take the bytes from Rx fifo */
+		for (idx = 0 ;  idx < SSC_RXFIFO_SIZE &&
+			trsc->idx_current_msg < pmsg->len-1; ++idx ) {
+				tmp.word = ssc_load16(ssc_bus, SSC_RBUF);
+				tmp.word = tmp.word >> 1;
+				pmsg->buf[trsc->idx_current_msg++] = tmp.bytes[0];
+				dgb_print2(" Rx Data %d-%c\n",tmp.bytes[0], tmp.bytes[0]);
+				}
+		/* 2. Do we finish? */
+		if (trsc->idx_current_msg == pmsg->len) {
+			status &= ~SSC_STA_NACK;
+			jump_on_fsm_stop(trsc);
+		}
+		/* 3. Ask other 'idx' bytes in fifo mode
+		 *    but we want save the latest [pmsg->len-1]
+		 *    in any case...
+		 */
+		for (idx=0; idx<SSC_TXFIFO_SIZE &&
+			   (trsc->idx_current_msg+idx)<pmsg->len-1; ++idx)
+			ssc_store16(ssc_bus, SSC_TBUF, 0x1ff);
+		dgb_print2(" Asked %x bytes in fifo mode\n",idx);
+		ssc_store16(ssc_bus,SSC_IEN,SSC_IEN_RIEN | SSC_IEN_TIEN);
+		/*Is the next byte the last byte? */
+		if (trsc->idx_current_msg == (pmsg->len - 1)) {
+			dgb_print2(" Asked the last byte\n");
+			ssc_store16(ssc_bus, SSC_CLR, 0xdc0);
+			/* disable the fifos */
+			ssc_store16(ssc_bus, SSC_CTL, SSC_CTL_EN | SSC_CTL_MS |
+				SSC_CTL_PO | SSC_CTL_PH | SSC_CTL_HB | 0x8 );
+			ssc_store16(ssc_bus, SSC_TBUF, 0x1ff);
+			ssc_store16(ssc_bus, SSC_I2C, SSC_I2C_I2CM |
+					    (SSC_I2C_I2CFSMODE * fast_mode) );
+			ssc_store16(ssc_bus,SSC_IEN,SSC_IEN_NACKEN);
+		}
+		break;
+#endif
 	case IIC_FSM_DATA_WRITE:
 		/* just to clear some bits in the STATUS register */
 		ssc_load16(ssc_bus, SSC_RBUF);
@@ -234,83 +349,102 @@ void iic_algo_state_machine(struct iic_s
 		ssc_store16(ssc_bus, SSC_CLR, 0x9c0);
 		status = ssc_load16(ssc_bus, SSC_STA);
 		if (status & SSC_STA_NACK)
-			jump_on_fsm_abort();
-		if (adap->idx_current_msg == pmsg->len || !(pmsg->len))
-			jump_on_fsm_stop();;
-		dgb_print(" Data Write...Status=0x%x 0x%x-%c\n", status,
-			  pmsg->buf[adap->idx_current_msg],
-			  pmsg->buf[adap->idx_current_msg]);
+			jump_on_fsm_abort(trsc);
+#if defined(CONFIG_I2C_STM_HW_FIFO)
+		tx_fifo_status = ssc_load16(ssc_bus,SSC_TX_FSTAT);
+		if ( tx_fifo_status ) {
+			dgb_print2(" Fifo not empty\n");
+			break;
+		}
+#endif
+		if (trsc->idx_current_msg == pmsg->len || !(pmsg->len))
+			jump_on_fsm_stop(trsc);
+		dgb_print2(" Data Write...Status=0x%x 0x%x-%c\n", status,
+			  pmsg->buf[trsc->idx_current_msg],
+			  pmsg->buf[trsc->idx_current_msg]);
 		ssc_store16(ssc_bus, SSC_I2C, SSC_I2C_I2CM | SSC_I2C_TXENB |
-			    (SSC_I2C_I2CFSMODE * local_fast_mode));
-
-		adap->next_state = IIC_FSM_DATA_WRITE;
-		ssc_store16(ssc_bus, SSC_IEN, SSC_IEN_TEEN);
+			    (SSC_I2C_I2CFSMODE * fast_mode));
 
-		tmp.bytes[0] = pmsg->buf[adap->idx_current_msg++];
+		trsc->next_state = IIC_FSM_DATA_WRITE;
+#if !defined(CONFIG_I2C_STM_HW_FIFO)
+		ssc_store16(ssc_bus, SSC_IEN, SSC_IEN_TEEN | SSC_IEN_NACKEN);
+#else
+		ssc_store16(ssc_bus, SSC_IEN, SSC_IEN_TIEN | SSC_IEN_NACKEN);
+		ssc_store16(ssc_bus, SSC_CTL, SSC_CTL_EN | SSC_CTL_MS |
+                            SSC_CTL_PO | SSC_CTL_PH | SSC_CTL_HB | 0x8 |
+			    SSC_CTL_EN_TX_FIFO);
+		for (; tx_fifo_status < SSC_TXFIFO_SIZE &&
+			trsc->idx_current_msg < pmsg->len ;++tx_fifo_status )
+#endif
+		{
+		tmp.bytes[0] = pmsg->buf[trsc->idx_current_msg++];
 		ssc_store16(ssc_bus, SSC_TBUF, tmp.word << 1 | 0x1);
+		}
 		break;
 
 	case IIC_FSM_ABORT:
 	      be_fsm_abort:
-		dgb_print(" Abort\n");
-		adap->status_error |= IIC_E_NOTACK;
+		dgb_print2(" Abort\n");
+		trsc->status_error |= IIC_E_NOTACK;
 		/* Don't ADD the break */
 
 	case IIC_FSM_STOP:
 	      be_fsm_stop:
 		if (!(status & SSC_STA_NACK) &&
-		    (++adap->current_msg < adap->queue_length)) {
-			jump_on_fsm_repstart();
+		    (++trsc->current_msg < trsc->queue_length)) {
+			jump_on_fsm_repstart(trsc);
 		}
-		dgb_print(" Stop\n");
+		dgb_print2(" Stop\n");
 		ssc_store16(ssc_bus, SSC_CLR, 0xdc0);
 		ssc_store16(ssc_bus, SSC_I2C, SSC_I2C_I2CM |
 			    SSC_I2C_TXENB | SSC_I2C_STOPG |
-			    (SSC_I2C_I2CFSMODE * local_fast_mode));
-		adap->next_state = IIC_FSM_COMPLETE;
+			    (SSC_I2C_I2CFSMODE * fast_mode));
+		trsc->next_state = IIC_FSM_COMPLETE;
 		ssc_store16(ssc_bus, SSC_IEN, SSC_IEN_STOPEN);
 		break;
 
 	case IIC_FSM_COMPLETE:
-		dgb_print(" Complete\n");
+		be_fsm_complete:
+		dgb_print2(" Complete\n");
 		ssc_store16(ssc_bus, SSC_IEN, 0x0);
-		ssc_store16(ssc_bus, SSC_I2C, 0x0);
 /*
  *  If there was some problem i can try again for adap->adapter.retries time...
  */
-		if ((adap->status_error & IIC_E_NOTACK) &&	/* there was a problem */
-		    adap->start_state == IIC_FSM_START &&	/* it cames from start state */
-		    adap->idx_current_msg == 0 &&	/* the problem is on address */
-		    ++adap->attempt <= adap->adapter.retries) {
-			adap->status_error = 0;
-			jump_on_fsm_start();
+		if ((trsc->status_error & IIC_E_NOTACK) &&	/* there was a problem */
+		    trsc->start_state == IIC_FSM_START &&	/* it cames from start state */
+		    trsc->idx_current_msg == 0 &&		/* the problem is on address */
+		    ++trsc->attempt <= adap->adapter.retries) {
+			trsc->status_error = 0;
+			jump_on_fsm_start(trsc);
 		}
-		if (!(adap->status_error & IIC_E_NOTACK))
-			adap->status_error = IIC_E_NO_ERROR;
+		if (!(trsc->status_error & IIC_E_NOTACK))
+			trsc->status_error = IIC_E_NO_ERROR;
+		trsc->waitcondition = 0;
 		wake_up(&(ssc_bus->wait_queue));
 		break;
 	case IIC_FSM_REPSTART:
 	      be_fsm_repstart:
-		pmsg = adap->msgs_queue + adap->current_msg;
-		dgb_print("-Rep Start addr 0x%x\n", pmsg->addr);
-		adap->start_state = IIC_FSM_REPSTART;
-		adap->idx_current_msg = 0;
-		adap->next_state = IIC_FSM_REPSTART_ADDR;
+		pmsg = trsc->msgs_queue + trsc->current_msg;
+		dgb_print2("-Rep Start (0x%x)\n",pmsg->addr);
+		trsc->start_state = IIC_FSM_REPSTART;
+		trsc->idx_current_msg = 0;
+		trsc->next_state = IIC_FSM_REPSTART_ADDR;
 		ssc_store16(ssc_bus, SSC_CLR, 0xdc0);
-		ssc_store16(ssc_bus, SSC_I2C, SSC_I2C_I2CM
+		ssc_store16(ssc_bus, SSC_I2C, SSC_I2C_I2CM | SSC_I2C_TXENB
 			    | SSC_I2C_REPSTRTG | (SSC_I2C_I2CFSMODE *
-						  local_fast_mode));
+						  fast_mode));
 		ssc_store16(ssc_bus, SSC_IEN, SSC_IEN_REPSTRTEN);
 		break;
 	case IIC_FSM_REPSTART_ADDR:
+		dgb_print2("-Rep Start addr 0x%x\n", pmsg->addr);
 		ssc_store16(ssc_bus, SSC_CLR, 0xdc0);
 		ssc_store16(ssc_bus, SSC_I2C, SSC_I2C_I2CM | SSC_I2C_TXENB |
-			    (SSC_I2C_I2CFSMODE * local_fast_mode));
+			    (SSC_I2C_I2CFSMODE * fast_mode));
 		address = (pmsg->addr << 2) | 0x1;
-		adap->next_state = IIC_FSM_DATA_WRITE;
+		trsc->next_state = IIC_FSM_DATA_WRITE;
 		if (pmsg->flags & I2C_M_RD) {
 			address |= 0x2;
-			adap->next_state = IIC_FSM_PREPARE_2_READ;
+			trsc->next_state = IIC_FSM_PREPARE_2_READ;
 		}
 		ssc_store16(ssc_bus, SSC_TBUF, address);
 		ssc_store16(ssc_bus, SSC_IEN, SSC_IEN_NACKEN | SSC_IEN_TEEN);
@@ -322,53 +456,84 @@ void iic_algo_state_machine(struct iic_s
 	return;
 }
 
+static void iic_wait_stop_condition(struct ssc_t *ssc_bus)
+{
+  unsigned int idx;
 /*
-  Description: Prepares the controller for a transaction
-*/
-static int iic_algo_stm_xfer(struct i2c_adapter *i2c_adap,
+ * Look for a stop condition on the bus
+ */
+  dgb_print("\n");
+  for ( idx = 0; idx < 5 ; ++idx )
+    if ((ssc_load16(ssc_bus,SSC_STA) & SSC_STA_STOP) == 0)
+        mdelay(2);
+/*
+ * At this point I hope I detected a stop condition
+ * but in any case I return and I will tour off the ssc....
+ */
+}
+
+static void iic_wait_free_bus(struct ssc_t *ssc_bus)
+{
+#if 1
+  unsigned int idx;
+/*
+ * Look for a free condition on the bus
+ */
+  dgb_print("\n");
+  for ( idx = 0; idx < 5 ; ++idx ) {
+    if (!(ssc_load16(ssc_bus,SSC_STA) & SSC_STA_BUSY) )
+	return ;
+    mdelay(2);
+  }
+#endif
+/*
+ * At this point I hope I detected a free bus
+ * but in any case I return and I will tour off the ssc....
+ */
+}
+
+/*
+ * Description: Prepares the controller for a transaction
+ */
+static int iic_stm_xfer(struct i2c_adapter *i2c_adap,
 			     struct i2c_msg msgs[], int num)
 {
-	struct iic_ssc *adap;
-	struct ssc_t *ssc_bus;
-	struct device *dev;
-	unsigned int local_flag;
+	unsigned int flag;
 	int result;
+	int timeout;
+	struct iic_ssc *adap =
+			(struct iic_ssc *)container_of(i2c_adap, struct iic_ssc, adapter);
+	struct ssc_t *ssc_bus =
+			(struct ssc_t *)container_of(i2c_adap->dev.parent,struct ssc_t, dev);
+	struct iic_transaction transaction = {
+			.adapter      = adap,
+			.msgs_queue   = msgs,
+			.queue_length = num,
+			.current_msg  = 0x0,
+			.attempt      = 0x0,
+			.status_error = IIC_E_RUNNING,
+			.next_state   = IIC_FSM_PREPARE,
+			.waitcondition = 1,
+		};
 
 	dgb_print("\n");
-	adap = container_of(i2c_adap, struct iic_ssc, adapter);
-	dev = i2c_adap->dev.parent;
-	ssc_bus = container_of(dev, struct ssc_t, dev);
-
-	/* Here i have to prepare all the environment */
-	adap->msgs_queue = msgs;
-	adap->queue_length = num;
-	adap->current_msg = 0x0;
-	adap->attempt = 0x0;
-	adap->status_error = IIC_E_RUNNING;
-	adap->next_state = IIC_FSM_START;
+	ssc_request_bus(ssc_bus, iic_state_machine, &transaction);
+	iic_wait_free_bus(ssc_bus);
 
-	ssc_request_bus(ssc_bus, iic_algo_state_machine, adap);
-/*
- * check if the i2c timing register
- * of ssc are ready to use
-*/
-	if (!(ssc_bus->i2c_timing == SSC_I2C_READY_NORMAL &&
-	      !(check_fastmode(adap))
-	      ||
-	      ssc_bus->i2c_timing == SSC_I2C_READY_FAST &&
-	      check_fastmode(adap)))
-		iic_algo_stm_setup_timing(adap);
-
-	local_irq_save(local_flag);
-	iic_algo_state_machine(adap);
-	interruptible_sleep_on_timeout(&(ssc_bus->wait_queue),
-				       i2c_adap->timeout * num * HZ);
-
-	result = adap->current_msg;
-
-	if (adap->status_error != IIC_E_NO_ERROR) {	/* There was some problem */
-		if (adap->status_error == IIC_E_RUNNING) {	/* There was a timeout !!! */
-			/* if there was a timeout we have to
+	iic_state_machine(&transaction);
+
+	timeout = wait_event_interruptible_timeout(ssc_bus->wait_queue,
+					(transaction.waitcondition==0),
+					i2c_adap->timeout *HZ );
+
+	local_irq_save(flag);
+
+	result = transaction.current_msg;
+
+	if (unlikely(transaction.status_error != IIC_E_NO_ERROR || timeout <= 0)) {
+		/* There was some problem */
+		if(timeout<=0){
+			/* There was a timeout !!!
 			   - disable the interrupt
 			   - generate a stop condition on the bus
 			   all this task are done without interrupt....
@@ -378,34 +543,44 @@ static int iic_algo_stm_xfer(struct i2c_
 				    SSC_I2C_STOPG | SSC_I2C_TXENB |
 				    (SSC_I2C_I2CFSMODE * check_fastmode(adap)));
 			/* wait until the ssc detects a Stop condition on the bus */
-			while((ssc_load16(ssc_bus,SSC_STA) & SSC_STA_STOP) == 0 );
-			/* tourn off the ssc */
-			ssc_store16(ssc_bus, SSC_I2C, SSC_I2C_I2CM | SSC_I2C_TXENB);
-			printk(KERN_ERR
-			       "stm-i2c: Error timeout in the finite state machine\n");
-		}
-		result = -EREMOTEIO;
-	}
-	local_irq_restore(local_flag);
+			/* but before we do that we enable all the interrupts     */
+			local_irq_restore(flag);
 
-	while((ssc_load16(ssc_bus,SSC_STA) & SSC_STA_BUSY) != 0 );
+			iic_wait_stop_condition(ssc_bus);
 
-		ndelay(BUS_FREE_TIME_FAST);
+			/* turn off the ssc */
+/*
+ * Don't disable the SSC as this causes the SDA to go low, causing problems
+ * for some slave devices.
+ *			ssc_store16(ssc_bus, SSC_I2C, 0 );
+ *			ssc_store16(ssc_bus, SSC_CTL, SSC_CTL_SR);
+ *			ssc_store16(ssc_bus, SSC_CTL, 0 );
+ */
+		} else
+			local_irq_restore(flag);
 
-   if (!check_fastmode(adap))
-	ndelay(BUS_FREE_TIME_NORMAL-BUS_FREE_TIME_FAST);
+		if (!timeout){
+			printk(KERN_ERR
+			       "stm-i2c: Error timeout in the finite state machine\n");
+			result = -ETIMEDOUT;
+		} else if (timeout < 0) {
+			dgb_print("stm-i2c: interrupt or error in wait event\n");
+			result = timeout;
+		} else
+			result = -EREMOTEIO;
+	} else
+		local_irq_restore(flag);
 
 	ssc_release_bus(ssc_bus);
 
 	return result;
 }
 
-#ifdef CONFIG_I2C_STM_DEBUG
-static void iic_algo_stm_timing_trace(struct iic_ssc *adap)
+static void iic_stm_timing_trace(struct iic_ssc *adap)
 {
-	struct device *dev = adap->adapter.dev.parent;
-	struct ssc_t *ssc_bus = container_of(dev, struct ssc_t, dev);
-	dgb_print("SSC_BRG  %d\n", ssc_load16(ssc_bus, SSC_BRG));
+	struct ssc_t *ssc_bus =
+			container_of(adap->adapter.dev.parent, struct ssc_t, dev);
+	dgb_print("SSC_BRG  %d\n", adap->config >> 16);
 	dgb_print("SSC_REP_START_HOLD %d\n",
 		  ssc_load16(ssc_bus, SSC_REP_START_HOLD));
 	dgb_print("SSC_REP_START_SETUP %d\n",
@@ -414,39 +589,36 @@ static void iic_algo_stm_timing_trace(st
 	dgb_print("SSC_DATA_SETUP %d\n", ssc_load16(ssc_bus, SSC_DATA_SETUP));
 	dgb_print("SSC_STOP_SETUP %d\n", ssc_load16(ssc_bus, SSC_STOP_SETUP));
 	dgb_print("SSC_BUS_FREE %d\n", ssc_load16(ssc_bus, SSC_BUS_FREE));
-
-#ifdef CONFIG_CPU_SUBTYPE_STB7100
 	dgb_print("SSC_PRE_SCALER_BRG %d\n",
 		  ssc_load16(ssc_bus, SSC_PRE_SCALER_BRG));
-#endif
 	dgb_print("SSC_AGFR 0x%x\n", ssc_load8(ssc_bus, SSC_AGFR));
 	dgb_print("SSC_PRSC %d\n", ssc_load8(ssc_bus, SSC_PRSC));
 }
-#endif
 
-static void iic_algo_stm_setup_timing(struct iic_ssc *adap)
+static void iic_stm_setup_timing(struct iic_ssc *adap)
 {
-	struct device *dev = adap->adapter.dev.parent;
-	struct ssc_t *ssc_bus = container_of(dev, struct ssc_t, dev);
+	struct ssc_t *ssc_bus =
+			container_of(adap->adapter.dev.parent, struct ssc_t, dev);
 	unsigned long iic_baudrate;
 	unsigned short iic_rep_start_hold;
 	unsigned short iic_start_hold, iic_rep_start_setup;
 	unsigned short iic_data_setup, iic_stop_setup;
 	unsigned short iic_bus_free, iic_pre_scale_baudrate;
 	unsigned char iic_agfr, iic_prsc;
-	unsigned long NSPerCyc = NANOSEC_PER_SEC / ssc_get_clock();
+	unsigned long clock = ssc_get_clock();
+	unsigned long NSPerCyc = NANOSEC_PER_SEC / clock;
 
-	dgb_print("Assuming %d MHz for the Timing Setup\n",
-		  ssc_get_clock() / 1000000);
+	NSPerCyc = NANOSEC_PER_SEC /clock;
+	dgb_print("Assuming %d MHz for the Timing Setup %d\n",
+		  clock / 1000000,NSPerCyc);
 
 	iic_agfr = 0x0;
-	iic_prsc = (int)ssc_get_clock() / 10000000;
+	iic_prsc = (int)clock / 10000000;
 	iic_pre_scale_baudrate = 0x1;
 
 	if (check_fastmode(adap)) {
 		ssc_bus->i2c_timing = SSC_I2C_READY_FAST;
-		iic_baudrate = ssc_get_clock()
-		    / (2 * I2C_RATE_FASTMODE);
+		iic_baudrate = clock / (2 * I2C_RATE_FASTMODE);
 		iic_rep_start_hold = REP_START_HOLD_TIME_FAST / NSPerCyc;
 		iic_start_hold = START_HOLD_TIME_FAST / NSPerCyc;
 		iic_rep_start_setup = REP_START_SETUP_TIME_FAST / NSPerCyc;
@@ -455,8 +627,7 @@ static void iic_algo_stm_setup_timing(st
 		iic_bus_free = BUS_FREE_TIME_FAST / NSPerCyc;
 	} else {
 		ssc_bus->i2c_timing = SSC_I2C_READY_NORMAL;
-		iic_baudrate = ssc_get_clock()
-		    / (2 * I2C_RATE_NORMAL);
+		iic_baudrate = clock  / (2 * I2C_RATE_NORMAL);
 		iic_rep_start_hold = REP_START_HOLD_TIME_NORMAL / NSPerCyc;
 		iic_start_hold = START_HOLD_TIME_NORMAL / NSPerCyc;
 		iic_rep_start_setup = REP_START_SETUP_TIME_NORMAL / NSPerCyc;
@@ -465,9 +636,8 @@ static void iic_algo_stm_setup_timing(st
 		iic_bus_free = BUS_FREE_TIME_NORMAL / NSPerCyc;
 	}
 
-	adap->virtual_configuration =
-	    (adap->virtual_configuration & ~IIC_STM_CONFIG_BAUDRATE_MASK);
-	adap->virtual_configuration |= iic_baudrate << 16;
+	adap->config &= ~IIC_STM_CONFIG_BAUDRATE_MASK;
+	adap->config |= iic_baudrate << 16;
 
 	ssc_store16(ssc_bus, SSC_REP_START_HOLD, iic_rep_start_hold);
 	ssc_store16(ssc_bus, SSC_START_HOLD, iic_start_hold);
@@ -477,94 +647,113 @@ static void iic_algo_stm_setup_timing(st
 	ssc_store16(ssc_bus, SSC_BUS_FREE, iic_bus_free);
 	ssc_store8(ssc_bus, SSC_AGFR, iic_agfr);
 	ssc_store8(ssc_bus, SSC_PRSC, iic_prsc);
-
-#ifdef CONFIG_CPU_SUBTYPE_STB7100
 	ssc_store16(ssc_bus, SSC_PRE_SCALER_BRG, iic_pre_scale_baudrate);
-#endif
-#ifdef CONFIG_I2C_STM_DEBUG
-	iic_algo_stm_timing_trace(adap);
-#endif
+	iic_stm_timing_trace(adap);
 	return;
 }
 
-static int iic_algo_stm_control(struct i2c_adapter *adapter,
+static int iic_stm_control(struct i2c_adapter *adapter,
 				unsigned int cmd, unsigned long arg)
 {
 	struct iic_ssc *iic_adap =
 	    container_of(adapter, struct iic_ssc, adapter);
-
-	if (cmd == I2C_STM_IOCTL_FAST) {
-		dgb_print("IOCTL Fast\n");
-		iic_adap->virtual_configuration &= ~IIC_STM_CONFIG_SPEED_MASK;
+	switch (cmd) {
+	case I2C_STM_IOCTL_FAST:
+		dgb_print("ioctl fast\n");
+		iic_adap->config &= ~IIC_STM_CONFIG_SPEED_MASK;
 		if (arg)
-			iic_adap->virtual_configuration |=
+			iic_adap->config |=
 			    IIC_STM_CONFIG_SPEED_FAST;
+		break;
+	default:
+		printk(KERN_WARNING" i2c-ioctl not managed\n");
 	}
 /*
- * the timeout and he retries ioctl
+ * the timeout and the retries ioctl
  * are managed by i2c core system
  */
 	return 0;
 }
 
-static u32 iic_algo_stm_func(struct i2c_adapter *adap)
+static u32 iic_stm_func(struct i2c_adapter *adap)
 {
 	return I2C_FUNC_I2C | I2C_FUNC_SMBUS_EMUL;
 }
 
 static struct i2c_algorithm iic_stm_algo = {
-	.master_xfer = iic_algo_stm_xfer,
-	.functionality = iic_algo_stm_func,
-	.algo_control = iic_algo_stm_control
+	.master_xfer   = iic_stm_xfer,
+	.functionality = iic_stm_func,
+	.algo_control  = iic_stm_control
 };
 
-static LIST_HEAD(stm_busses);
+static ssize_t iic_bus_show_fastmode(struct device *dev,
+				      struct device_attribute *attr, char *buf)
+{
+	struct i2c_adapter *adapter = container_of(dev, struct i2c_adapter, dev);
+	struct iic_ssc     *iic_stm = container_of(adapter,struct iic_ssc,adapter);
+	return sprintf(buf, "%u\n",check_fastmode(iic_stm));
+}
 
-struct stm_adapter {
-	struct iic_ssc iic_adap;
-	struct list_head stm_list;
-};
+static ssize_t iic_bus_store_fastmode(struct device *dev,struct device_attribute *attr,
+			 const char *buf,size_t count)
+{
+	struct i2c_adapter *adapter = container_of(dev, struct i2c_adapter, dev);
+	unsigned long val = simple_strtoul(buf, NULL, 10);
 
-static int __init iic_stm_bus_init()
+	iic_stm_control(adapter,I2C_STM_IOCTL_FAST,val);
+
+	return count;
+}
+
+static DEVICE_ATTR(fastmode, S_IRUGO | S_IWUSR, iic_bus_show_fastmode,
+			iic_bus_store_fastmode);
+
+static LIST_HEAD(stm_busses);
+
+static int __init iic_stm_bus_init(void)
 {
 	unsigned int ssc_number = ssc_device_available();
 	unsigned int idx;
 	unsigned int adapnr = 0;
-	struct stm_adapter *st_adapter;
 	struct iic_ssc *iic_stm;
 
 	for (idx = 0; idx < ssc_number; ++idx) {
 		if (!(ssc_capability(idx) & SSC_I2C_CAPABILITY))
 			continue;
-		st_adapter =
-		    (struct stm_adapter *)kmalloc(sizeof(struct stm_adapter),
-						  GFP_KERNEL);
-		if (!st_adapter) {
+		iic_stm =
+		    (struct iic_ssc *)kzalloc(sizeof(struct iic_ssc), GFP_KERNEL);
+		if (!iic_stm) {
 			printk(KERN_EMERG
 			       "Error on initialization of  ssc-i2c adapter module\n");
 			return -ENODEV;
 		}
-		iic_stm = &(st_adapter->iic_adap);
-		iic_stm->virtual_configuration &= ~IIC_STM_CONFIG_SPEED_MASK;
-		memset(&(iic_stm->adapter), 0, sizeof(struct i2c_adapter));
+/*
+ * P.S.: with the "kzalloc" the iic_stm->config is zero
+ *       this means:
+ *       - i2c speed  = normal
+ */
 		iic_stm->adapter.owner = THIS_MODULE;
 		iic_stm->adapter.id = adapnr;
 		iic_stm->adapter.timeout = 4;
-		iic_stm->adapter.retries = 0;
 		iic_stm->adapter.class   = I2C_CLASS_ALL;
 		sprintf(iic_stm->adapter.name,"i2c-ssc-%d",adapnr);
 		iic_stm->adapter.algo = &iic_stm_algo;
 		iic_stm->adapter.dev.bus = &i2c_bus_type;
 		iic_stm->adapter.dev.parent = &(ssc_device_request(idx)->dev);
-		iic_algo_stm_setup_timing(iic_stm);
+/*
+		iic_stm->adapter.dev.release
+*/
+		iic_stm_setup_timing(iic_stm);
 
 		if (i2c_add_adapter(&(iic_stm->adapter)) < 0) {
 			printk(KERN_ERR
 			       "i2c/stm: The I2C Core refuses the i2c/stm adapter\n");
-			kfree(st_adapter);
+			kfree(iic_stm);
 			return -ENODEV;
+		} else {
+			device_create_file(&(iic_stm->adapter.dev), &dev_attr_fastmode);
 		}
-		list_add(&(st_adapter->stm_list), &(stm_busses));
+		list_add(&(iic_stm->list), &(stm_busses));
 		adapnr ++;
 	}
 	return 0;
@@ -572,16 +761,16 @@ static int __init iic_stm_bus_init()
 
 static void __exit iic_stm_bus_exit(void)
 {
-	struct stm_adapter *st_adapter;
+	struct iic_ssc *iic_stm;
 	struct i2c_adapter *iic_adapter;
 	struct list_head *item;
 	dgb_print("\n");
 	list_for_each(item, &(stm_busses)) {
-		st_adapter = container_of(item, struct stm_adapter, stm_list);
-		list_del(&st_adapter->stm_list);
-		iic_adapter = &(st_adapter->iic_adap.adapter);
+		iic_stm = container_of(item, struct iic_ssc, list);
+		list_del(&iic_stm->list);
+		iic_adapter = &(iic_stm->adapter);
 		i2c_del_adapter(iic_adapter);
-		kfree(st_adapter);
+		kfree(iic_stm);
 	}
 }
 
Index: linux/drivers/i2c/busses/Kconfig
===================================================================
--- linux.orig/drivers/i2c/busses/Kconfig
+++ linux/drivers/i2c/busses/Kconfig
@@ -529,7 +529,7 @@ config I2C_MV64XXX
 
 choice
 	prompt "STMicroelectronics I2C support"
-	depends on I2C && (CPU_SUBTYPE_STM8000 || CPU_SUBTYPE_STI5528 || CPU_SUBTYPE_STB7100)
+	depends on I2C && CPU_SUBTYPE_STB7100
 
 	help
 	  STMicroelectronics SoCs have I2C drivers exist for bit-banging using PIO pins or
@@ -537,7 +537,6 @@ choice
 
 	config I2C_ST40_PIO
 	tristate "I2C bit-banging PIO driver"
-	depends on I2C && (CPU_SUBTYPE_STM8000 || CPU_SUBTYPE_STI5528 || CPU_SUBTYPE_STB7100)
 	select I2C_ALGOBIT
 	help
 
@@ -549,18 +548,17 @@ choice
 
 	config I2C_STM
 	tristate "I2C hardware SSC driver"
-	depends on I2C && (CPU_SUBTYPE_STM8000 || CPU_SUBTYPE_STI5528 || CPU_SUBTYPE_STB7100)
        	select STM_SSC
 	help
 
 	  If you say yes to this option, support will be included for the
 	  I2C-SSC for the STM SOCs: STi5528, STm8000 and the STb7100
 
-config I2C_STM_DEBUG
-	bool "I2C hardware SSC driver debug"
+config I2C_STM_HW_FIFO
+	bool "I2C hardware SSC Fifo support"
 	depends on I2C_STM
 	help
-	Enable this option to print out information on STM I2C (SSC) device driver
+	Enable this option to use the ssc hardware fifo support
 
 endchoice
 
Index: linux/drivers/stm/stm_ssc.h
===================================================================
--- linux.orig/drivers/stm/stm_ssc.h
+++ linux/drivers/stm/stm_ssc.h
@@ -55,6 +55,10 @@
 #define SSC_CTL_MS		 0x100
 #define SSC_CTL_EN		 0x200
 #define SSC_CTL_LPB		 0x400
+#define SSC_CTL_EN_TX_FIFO       0x800
+#define SSC_CTL_EN_RX_FIFO       0x1000
+#define SSC_CTL_EN_CLST_RX       0x2000
+
 /* SSC Interrupt Enable */
 #define SSC_IEN               	0x10
 #define SSC_IEN_RIEN		0x1
@@ -67,6 +71,9 @@
 #define SSC_IEN_ARBLEN		0x100
 #define SSC_IEN_NACKEN		0x400
 #define SSC_IEN_REPSTRTEN	0x800
+#define SSC_IEN_TX_FIFO_HALF	0x1000
+#define SSC_IEN_RX_FIFO_FULL	0x4000
+
 /* SSC Status */
 #define SSC_STA                   0x14
 #define SSC_STA_RIR		  0x1
@@ -81,6 +88,10 @@
 #define SSC_STA_BUSY		0x200
 #define SSC_STA_NACK		0x400
 #define SSC_STA_REPSTRT		0x800
+#define SSC_STA_TX_FIFO_HALF	0x1000
+#define SSC_STA_TX_FIFO_FULL    0x2000
+#define SSC_STA_RX_FIFO_HALF    0x4000
+
 /*SSC I2C Control */
 #define SSC_I2C               	0x18
 #define SSC_I2C_I2CM		0x1
@@ -131,9 +142,14 @@
 #define SSC_PRSC		0x104
 #define SSC_PRSC_VALUE          0x0f
 
+/* SSC Max delay width*/
+#define SSC_MAX_DELAY		0x108
+
+/* SSC Prescaler for delay in dataout */
+#define SSC_PRSC_DATAOUT	0x10c
 
-#define SSC_TXFIFO_SIZE         0x7
-#define SSC_RXFIFO_SIZE         0x7
+#define SSC_TXFIFO_SIZE         0x8
+#define SSC_RXFIFO_SIZE         0x8
 /*
  * The I2C timing register could be ready
  * for normal or fast rate
