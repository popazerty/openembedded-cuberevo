This patch:
 o reviews the wake-up setting for the gmac (disabled should_wakeup by default).
 o reviews the ethtool support. So, wol can be enabled by using:
   "ethtool -s eth0 wol g".
 o reviews the suspend/resume functions in order to support the
   hibernation on media. During the standby operation the driver doesn't
   shutdown the HW but only cleans the rings and stops the DMA engine.
   In case of hibernation, the interface is totally turned-off and the HW is
   re-initialized after resuming.  Although this can appear slightly redundant
   it  actually makes fast the standby operation and guarantees the driver
   working if hibernation on media is on.

Signed-off-by: Giuseppe Cavallaro <peppe.cavallaro@st.com>
Signed-off-by: Francesco Virlinzi <francesco.virlinzi@st.com>

diff -uprN -X dontdiff linux-sh4/drivers/net/stmmac.orig/stmmac_ethtool.c linux-sh4/drivers/net/stmmac/stmmac_ethtool.c
--- linux-sh4/drivers/net/stmmac.orig/stmmac_ethtool.c	2008-05-30 15:20:29.000000000 +0200
+++ linux-sh4/drivers/net/stmmac/stmmac_ethtool.c	2008-05-30 15:21:43.000000000 +0200
@@ -277,7 +277,7 @@ static void stmmac_get_wol(struct net_de
 
 	spin_lock_irq(&lp->lock);
 	if (lp->wolenabled == PMT_SUPPORTED) {
-		wol->supported = WAKE_MAGIC | WAKE_UCAST;
+		wol->supported = WAKE_MAGIC /*| WAKE_UCAST*/;
 		wol->wolopts = lp->wolopts;
 	}
 	spin_unlock_irq(&lp->lock);
@@ -294,6 +294,11 @@ static int stmmac_set_wol(struct net_dev
 	if (wol->wolopts & ~support)
 		return -EINVAL;
 
+	if (wol->wolopts == 0)
+		device_set_wakeup_enable(lp->device, 0);
+	else
+		device_set_wakeup_enable(lp->device, 1);
+
 	spin_lock_irq(&lp->lock);
 	lp->wolopts = wol->wolopts;
 	spin_unlock_irq(&lp->lock);
diff -uprN -X dontdiff linux-sh4/drivers/net/stmmac.orig/stmmac.h linux-sh4/drivers/net/stmmac/stmmac.h
--- linux-sh4/drivers/net/stmmac.orig/stmmac.h	2008-05-30 15:20:29.000000000 +0200
+++ linux-sh4/drivers/net/stmmac/stmmac.h	2008-05-30 15:21:43.000000000 +0200
@@ -57,4 +57,5 @@ struct eth_driver_local {
 	int tx_aggregation;
 	int has_timer;
 	struct timer_list timer;
+	int shutdown;
 };
diff -uprN -X dontdiff linux-sh4/drivers/net/stmmac.orig/stmmac_main.c linux-sh4/drivers/net/stmmac/stmmac_main.c
--- linux-sh4/drivers/net/stmmac.orig/stmmac_main.c	2008-05-30 15:20:29.000000000 +0200
+++ linux-sh4/drivers/net/stmmac/stmmac_main.c	2008-05-30 15:21:43.000000000 +0200
@@ -1107,6 +1107,7 @@ static int stmmac_open(struct net_device
 	/* Initialize the MAC Core */
 	lp->mac_type->ops->core_init(ioaddr);
 	lp->tx_aggregation = 0;
+	lp->shutdown = 0;
 
 	/* Initialise the MMC (if present) to disable all interrupts */
 	writel(0xffffffff, ioaddr+MMC_HIGH_INTR_MASK);
@@ -2021,41 +2022,45 @@ static int stmmac_suspend(struct platfor
 	struct net_device *dev = platform_get_drvdata(pdev);
 	struct eth_driver_local *lp = netdev_priv(dev);
 
-	spin_lock(&lp->lock);
 
 	if (!dev || !netif_running(dev))
 		return 0;
 
-	netif_device_detach(dev);
-
-	netif_stop_queue(dev);
-
-	phy_stop(lp->phydev);
+	spin_lock(&lp->lock);
 
-	netif_stop_queue(dev);
+	if (state.event == PM_EVENT_SUSPEND) {
+		netif_device_detach(dev);
+		netif_stop_queue(dev);
+		phy_stop(lp->phydev);
+		netif_stop_queue(dev);
 
 #ifdef CONFIG_STMMAC_RTC_TIMER
-	if (likely(lp->has_timer == 0))
-		stmmac_timer_stop();
+		if (likely(lp->has_timer == 0))
+			stmmac_timer_stop();
 #endif
-	/* Stop TX/RX DMA */
-	stmmac_dma_stop_tx(dev->base_addr);
-	stmmac_dma_stop_rx(dev->base_addr);
-
-	/* Clear the Rx/Tx descriptors */
-	lp->mac_type->ops->init_rx_desc(lp->dma_rx, lp->dma_rx_size, 
-			rx_irq_mitigation);
-	lp->mac_type->ops->init_tx_desc(lp->dma_tx, lp->dma_tx_size);
-
-	stmmac_mac_disable_tx(dev);
-
-	if (state.event == PM_EVENT_SUSPEND && 
-		device_may_wakeup(&(pdev->dev))) {
-		/* Enable Power down mode by programming the PMT regs */
-		if (lp->wolenabled == PMT_SUPPORTED)
-			lp->mac_type->ops->pmt(dev->base_addr, lp->wolopts);
+		/* Stop TX/RX DMA */
+		stmmac_dma_stop_tx(dev->base_addr);
+		stmmac_dma_stop_rx(dev->base_addr);
+		/* Clear the Rx/Tx descriptors */
+		lp->mac_type->ops->init_rx_desc(lp->dma_rx, lp->dma_rx_size, 
+				rx_irq_mitigation);
+		lp->mac_type->ops->init_tx_desc(lp->dma_tx, lp->dma_tx_size);
+
+		stmmac_mac_disable_tx(dev);
+
+		if (device_may_wakeup(&(pdev->dev))) {
+			/* Enable Power down mode by programming the PMT regs */
+			if (lp->wolenabled == PMT_SUPPORTED)
+				lp->mac_type->ops->pmt(dev->base_addr, lp->wolopts);
+		} else {
+			stmmac_mac_disable_rx(dev);
+		}
 	} else {
-		stmmac_mac_disable_rx(dev);
+		lp->shutdown = 1;
+		/* Although this can appear slightly redundant it actually 
+		 * makes fast the standby operation and guarantees the driver 
+		 * working if hibernation is on media. */
+		stmmac_release(dev);
 	}
 
 	spin_unlock(&lp->lock);
@@ -2068,10 +2073,18 @@ static int stmmac_resume(struct platform
 	struct eth_driver_local *lp = netdev_priv(dev);
 	unsigned long ioaddr = dev->base_addr;
 
-	spin_lock(&lp->lock);
 	if (!netif_running(dev))
 		return 0;
 
+	spin_lock(&lp->lock);
+
+	if (lp->shutdown){
+		/* Re-open the interface and re-init the MAC/DMA
+		   and the rings. */
+		stmmac_open(dev);
+		goto out_resume;
+	}
+
 	netif_device_attach(dev);
 
 	/* Enable the MAC and DMA */
@@ -2087,6 +2100,8 @@ static int stmmac_resume(struct platform
 	phy_start(lp->phydev);
 	
 	netif_start_queue(dev);
+
+out_resume:
 	spin_unlock(&lp->lock);
 	return 0;
 }
--- linux-sh4/arch/sh/kernel/cpu/sh4/setup-stx7111.c.orig	2008-05-30 15:21:04.000000000 +0200
+++ linux-sh4/arch/sh/kernel/cpu/sh4/setup-stx7111.c	2008-05-30 15:25:55.000000000 +0200
@@ -305,9 +305,6 @@ static struct platform_device stx7111eth
 	},
 	.dev = {
 		.power.can_wakeup    = 1,
-#ifdef  CONFIG_PM_SLEEP
-		.power.should_wakeup = 1,
-#endif
 		.platform_data = &stx7111eth_private_data,
 	}
 };
