From 7a1dee0a66fb5485a980d186571ebd79626d34c5 Mon Sep 17 00:00:00 2001
From: Angus CLARK <angus.clark@st.com>
Date: Fri, 12 Sep 2008 17:39:32 +0100
Subject: [PATCH] spi_stm: Updates to STM SPI drivers

spi_stm: Updates to STM SPI drivers:
        - Fixes the name of the SSC SPI driver in the SoC setup files
        - Added support for user-defined chip_select functions
        - Updated to fit with changes to ssc_pio_t
        - Updated to handle 7141 PIO ALT configuration
        - Bug fix to spi_stm_ssc driver relating to rx_bytes_pending calculations
        - SSC accesses now all 32-bit, to fit with 7141 Comms block
        - GPIO-based chipselect 'ID' updated to handle up to 20 PIO banks
        - mb628 EPLD ENABLE register bits for SPI_NOTCS and IFE_NOTCS

Signed-off-by: Angus Clark <angus.clark@st.com>
Signed-off-by: Stuart Menefy <stuart.menefy@st.com>
---
 arch/sh/kernel/cpu/sh4/setup-stb7100.c |    3 +-
 arch/sh/kernel/cpu/sh4/setup-stx7105.c |    3 +-
 arch/sh/kernel/cpu/sh4/setup-stx7111.c |    3 +-
 arch/sh/kernel/cpu/sh4/setup-stx7141.c |    3 +-
 arch/sh/kernel/cpu/sh4/setup-stx7200.c |    3 +
 drivers/spi/spi_stm_gpio.c             |   43 ++++++---
 drivers/spi/spi_stm_ssc.c              |  158 +++++++++++++++++++-------------
 include/asm-sh/mb628/epld.h            |    2 +
 include/linux/stm/soc.h                |   15 ++-
 9 files changed, 145 insertions(+), 88 deletions(-)

diff --git a/arch/sh/kernel/cpu/sh4/setup-stb7100.c b/arch/sh/kernel/cpu/sh4/setup-stb7100.c
index 1427928..fdcb53d 100644
--- a/arch/sh/kernel/cpu/sh4/setup-stb7100.c
+++ b/arch/sh/kernel/cpu/sh4/setup-stb7100.c
@@ -289,7 +289,7 @@ static void fdma_setup(int chip_7109, int chip_revision)
 
 /* SSC resources ----------------------------------------------------------- */
 static char i2c_st[] = "i2c_st";
-static char spi_st[] = "spi_st";
+static char spi_st[] = "spi_st_ssc";
 static struct platform_device stssc_devices[] = {
 	STSSC_DEVICE(0x18040000, 119, 2, 0, 1, 2),
 	STSSC_DEVICE(0x18041000, 118, 3, 0, 1, 2),
@@ -317,6 +317,7 @@ void __init stx7100_configure_ssc(struct plat_ssc_data *data)
 			stssc_devices[i].name = spi_st;
 			sysconf_write(ssc_sc, 0);
 			stssc_devices[i].id = num_spi++;
+			ssc_pio->chipselect = data->spi_chipselects[i];
 		} else {
 			stssc_devices[i].name = i2c_st;
 			sysconf_write(ssc_sc, 0);
diff --git a/arch/sh/kernel/cpu/sh4/setup-stx7105.c b/arch/sh/kernel/cpu/sh4/setup-stx7105.c
index 7579935..ba7f9ab 100644
--- a/arch/sh/kernel/cpu/sh4/setup-stx7105.c
+++ b/arch/sh/kernel/cpu/sh4/setup-stx7105.c
@@ -297,7 +297,7 @@ static struct platform_device fdma_xbar_device = {
 /* SSC resources ----------------------------------------------------------- */
 
 static char i2c_st[] = "i2c_st";
-static char spi_st[] = "spi_st";
+static char spi_st[] = "spi_st_ssc";
 
 static struct platform_device stssc_devices[] = {
 	STSSC_DEVICE(0xfd040000, evt2irq(0x10e0), 2, 2, 3, 4),
@@ -382,6 +382,7 @@ void __init stx7105_configure_ssc(struct plat_ssc_data *data)
 		if(capability & SSC_SPI_CAPABILITY){
 			stssc_devices[i].name = spi_st;
 			stssc_devices[i].id = num_spi++;
+			ssc_pio->chipselect = data->spi_chipselects[i];
 		} else {
 			stssc_devices[i].name = i2c_st;
 			stssc_devices[i].id = num_i2c++;
diff --git a/arch/sh/kernel/cpu/sh4/setup-stx7111.c b/arch/sh/kernel/cpu/sh4/setup-stx7111.c
index 0d22895..11a63f6 100644
--- a/arch/sh/kernel/cpu/sh4/setup-stx7111.c
+++ b/arch/sh/kernel/cpu/sh4/setup-stx7111.c
@@ -201,7 +201,7 @@ static struct platform_device fdma_xbar_device = {
 /* SSC resources ----------------------------------------------------------- */
 
 static char i2c_st[] = "i2c_st";
-static char spi_st[] = "spi_st";
+static char spi_st[] = "spi_st_ssc";
 
 static struct platform_device stssc_devices[] = {
 	STSSC_DEVICE(0xfd040000, evt2irq(0x10e0), 2, 0, 1, 2),
@@ -251,6 +251,7 @@ void __init stx7111_configure_ssc(struct plat_ssc_data *data)
 			stssc_devices[i].name = spi_st;
 			sysconf_write(ssc_sc, 1);
 			stssc_devices[i].id = num_spi++;
+			ssc_pio->chipselect = data->spi_chipselects[i];
 		} else {
 			stssc_devices[i].name = i2c_st;
 			sysconf_write(ssc_sc, 0);
diff --git a/arch/sh/kernel/cpu/sh4/setup-stx7141.c b/arch/sh/kernel/cpu/sh4/setup-stx7141.c
index b08d2ab..2521124 100644
--- a/arch/sh/kernel/cpu/sh4/setup-stx7141.c
+++ b/arch/sh/kernel/cpu/sh4/setup-stx7141.c
@@ -425,7 +425,7 @@ static struct platform_device fdma_xbar_device = {
 /* SSC resources ----------------------------------------------------------- */
 
 static char i2c_st[] = "i2c_st";
-static char spi_st[] = "spi_st";
+static char spi_st[] = "spi_st_ssc";
 
 static struct platform_device stssc_devices[] = {
 	STSSC_DEVICE(0xfd040000, ILC_IRQ(69), 2, 0, 1, 2),
@@ -468,6 +468,7 @@ void __init stx7141_configure_ssc(struct plat_ssc_data *data)
 		if (capability & SSC_SPI_CAPABILITY) {
 			stssc_devices[i].name = spi_st;
 			stssc_devices[i].id = num_spi++;
+			ssc_pio->chipselect = data->spi_chipselects[i];
 		} else {
 			stssc_devices[i].name = i2c_st;
 			stssc_devices[i].id = num_i2c++;
diff --git a/arch/sh/kernel/cpu/sh4/setup-stx7200.c b/arch/sh/kernel/cpu/sh4/setup-stx7200.c
index 5c9010a..4ea8b1e 100644
--- a/arch/sh/kernel/cpu/sh4/setup-stx7200.c
+++ b/arch/sh/kernel/cpu/sh4/setup-stx7200.c
@@ -548,6 +548,8 @@ void __init stx7200_configure_ssc(struct plat_ssc_data *data)
 	struct sysconf_field* ssc_sc;
 
 	for (i=0; i<ARRAY_SIZE(stssc_devices); i++, capability >>= SSC_BITS_SIZE){
+		struct ssc_pio_t *ssc_pio = stssc_devices[i].dev.platform_data;
+
 		if(capability & SSC_UNCONFIGURED)
 			continue;
 		/* We only support SSC as master, so always set up as such.
@@ -566,6 +568,7 @@ void __init stx7200_configure_ssc(struct plat_ssc_data *data)
 			stssc_devices[i].name = spi_st;
 			sysconf_write(ssc_sc, 0);
 			stssc_devices[i].id = num_spi++;
+			ssc_pio->chipselect = data->spi_chipselects[i];
 		} else {
 			stssc_devices[i].name = i2c_st;
 			sysconf_write(ssc_sc, 0);
diff --git a/drivers/spi/spi_stm_gpio.c b/drivers/spi/spi_stm_gpio.c
index 4228966..9414cca 100644
--- a/drivers/spi/spi_stm_gpio.c
+++ b/drivers/spi/spi_stm_gpio.c
@@ -16,6 +16,9 @@
  *      hold of PIO pin (freeing pin selects STPIO_IN (high-Z) mode).
  *    - added spi_stmpio_setup() and spi_stmpio_setup_transfer() to enfore
  *	SPI_STMPIO_MAX_SPEED_HZ
+ *  2008-08-28 Angus Clark <angus.clark@st.com>
+ *    - Updated to fit with changes to 'ssc_pio_t'
+ *    - Support for user-defined chip_select, specified in board setup
  *
  *  -------------------------------------------------------------------------
  */
@@ -36,7 +39,7 @@
 #define dgb_print(fmt, args...)  printk(KERN_INFO "%s: " \
 					fmt, __FUNCTION__ , ## args)
 #else
-#define dgb_print(fmt, args...)
+#define dgb_print(fmt, args...)	do { } while (0)
 #endif
 
 #define NAME "spi_stm_pio"
@@ -103,7 +106,7 @@ static u32 spi_gpio_txrx_mode3(struct spi_device *spi,
 	return bitbang_txrx_be_cpha1(spi, nsecs, 1, word, bits);
 }
 
-static void spi_gpio_chipselect(struct spi_device *spi, int value)
+static void spi_stpio_chipselect(struct spi_device *spi, int value)
 {
 	unsigned int out;
 
@@ -199,38 +202,45 @@ static int __init spi_probe(struct platform_device *pdev)
 	st_bitbang->bitbang.master = master;
 	st_bitbang->bitbang.master->setup = spi_stmpio_setup;
 	st_bitbang->bitbang.setup_transfer = spi_stmpio_setup_transfer;
-	st_bitbang->bitbang.chipselect = spi_gpio_chipselect;
+	st_bitbang->bitbang.chipselect = spi_stpio_chipselect;
 	st_bitbang->bitbang.txrx_word[SPI_MODE_0] = spi_gpio_txrx_mode0;
 	st_bitbang->bitbang.txrx_word[SPI_MODE_1] = spi_gpio_txrx_mode1;
 	st_bitbang->bitbang.txrx_word[SPI_MODE_2] = spi_gpio_txrx_mode2;
 	st_bitbang->bitbang.txrx_word[SPI_MODE_3] = spi_gpio_txrx_mode3;
 
+	if (pio_info->chipselect)
+		st_bitbang->bitbang.chipselect = (void (*)
+						  (struct spi_device *, int))
+			(pio_info->chipselect);
+	else
+		st_bitbang->bitbang.chipselect = spi_stpio_chipselect;
+
 	master->num_chipselect = SPI_NO_CHIPSELECT + 1;
 	master->bus_num = pdev->id;
 	st_bitbang->max_speed_hz = SPI_STMPIO_MAX_SPEED_HZ;
 
-	pio_info->clk = stpio_request_pin(pio_info->pio_port,
-					  pio_info->pio_pin[0],
+	pio_info->clk = stpio_request_pin(pio_info->pio[0].pio_port,
+					  pio_info->pio[0].pio_pin,
 					  "SPI Clock", STPIO_OUT);
 	if (!pio_info->clk) {
 		printk(KERN_ERR NAME " Faild to clk pin allocation PIO%d[%d]\n",
-		       pio_info->pio_port, pio_info->pio_pin[0]);
+		       pio_info->pio[0].pio_port, pio_info->pio[0].pio_pin);
 		return -1;
 	}
-	pio_info->sdout = stpio_request_pin(pio_info->pio_port,
-					    pio_info->pio_pin[1],
+	pio_info->sdout = stpio_request_pin(pio_info->pio[1].pio_port,
+					    pio_info->pio[1].pio_pin,
 					    "SPI Data Out", STPIO_OUT);
 	if (!pio_info->sdout) {
 		printk(KERN_ERR NAME " Faild to sda pin allocation PIO%d[%d]\n",
-		       pio_info->pio_port, pio_info->pio_pin[1]);
+		       pio_info->pio[1].pio_port, pio_info->pio[1].pio_pin);
 		return -1;
 	}
-	pio_info->sdin = stpio_request_pin(pio_info->pio_port,
-					   pio_info->pio_pin[2],
+	pio_info->sdin = stpio_request_pin(pio_info->pio[2].pio_port,
+					   pio_info->pio[2].pio_pin,
 					   "SPI Data In", STPIO_IN);
 	if (!pio_info->sdin) {
 		printk(KERN_ERR NAME " Faild to sdo pin allocation PIO%d[%d]\n",
-		       pio_info->pio_port, pio_info->pio_pin[2]);
+		       pio_info->pio[1].pio_port, pio_info->pio[1].pio_pin);
 		return -1;
 	}
 
@@ -244,9 +254,12 @@ static int __init spi_probe(struct platform_device *pdev)
 		return -1;
 	}
 
-	printk(KERN_INFO NAME ": Registered SPI Bus %d: PIO%d[%d/%d/%d]\n",
-	       master->bus_num, pio_info->pio_port, pio_info->pio_pin[0],
-	       pio_info->pio_pin[1], pio_info->pio_pin[2]);
+	printk(KERN_INFO NAME ": Registered SPI Bus %d: "
+	       "SCL [%d,%d], SDO [%d,%d], SDI [%d, %d]\n",
+	       master->bus_num,
+	       pio_info->pio[0].pio_port, pio_info->pio[0].pio_pin,
+	       pio_info->pio[1].pio_port, pio_info->pio[1].pio_pin,
+	       pio_info->pio[2].pio_port, pio_info->pio[2].pio_pin);
 
 	return 0;
 }
diff --git a/drivers/spi/spi_stm_ssc.c b/drivers/spi/spi_stm_ssc.c
index 71cab95..5f9adcf 100644
--- a/drivers/spi/spi_stm_ssc.c
+++ b/drivers/spi/spi_stm_ssc.c
@@ -5,12 +5,23 @@
  *
  *  Copyright (c) 2008 STMicroelectronics Limited
  *  Author: Angus Clark <Angus.Clark@st.com>
-
- *  ------------------------------------------------------------------------
+ *
  *  May be copied or modified under the terms of the GNU General Public
  *  License Version 2.0 only.  See linux/COPYING for more information.
  *
  *  ------------------------------------------------------------------------
+ *  Changelog:
+ *  2008-01-24 (angus.clark@st.com)
+ *    - Initial version
+ *  2008-08-28 (angus.clark@st.com)
+ *    - Updates to fit with changes to 'ssc_pio_t'
+ *    - SSC accesses now all 32-bit, for compatibility with 7141 Comms block
+ *    - Updated to handle 7141 PIO ALT configuration
+ *    - Support for user-defined, per-bus, chip_select function.  Specified
+ *      in board setup
+ *    - Bug fix for rx_bytes_pending updates
+ *
+ *  ------------------------------------------------------------------------
  */
 
 #include <linux/stm/pio.h>
@@ -38,7 +49,7 @@
 #define dgb_print(fmt, args...)  printk(KERN_INFO "%s: " \
 					fmt, __FUNCTION__ , ## args)
 #else
-#define dgb_print(fmt, args...)
+#define dgb_print(fmt, args...)	do { } while (0)
 #endif
 
 #define NAME "spi_stm_ssc"
@@ -62,7 +73,7 @@ struct spi_stm_ssc {
 
 };
 
-static void spi_stmssc_chipselect(struct spi_device *spi, int value)
+static void spi_stpio_chipselect(struct spi_device *spi, int value)
 {
 	unsigned int out;
 
@@ -103,7 +114,7 @@ static int spi_stmssc_setup_transfer(struct spi_device *spi,
 	struct spi_stm_ssc *st_ssc;
 	u32 hz;
 	u8 bits_per_word;
-	u16 reg;
+	u32 reg;
 	u32 sscbrg;
 
 	st_ssc = spi_master_get_devdata(spi->master);
@@ -136,10 +147,10 @@ static int spi_stmssc_setup_transfer(struct spi_device *spi,
 	if (sscbrg == (0x1 << 16)) /* 16-bit counter wraps */
 		sscbrg = 0x0;
 	dgb_print("setting baudrate: hz = %d, sscbrg = %d\n", hz, sscbrg);
-	ssc_store16(st_ssc, SSC_BRG, sscbrg);
+	ssc_store32(st_ssc, SSC_BRG, sscbrg);
 
 	 /* Set SSC_CTL and enable SSC */
-	 reg = ssc_load16(st_ssc, SSC_CTL);
+	 reg = ssc_load32(st_ssc, SSC_CTL);
 	 reg |= SSC_CTL_MS;
 
 	 if (spi->mode & SPI_CPOL)
@@ -162,7 +173,7 @@ static int spi_stmssc_setup_transfer(struct spi_device *spi,
 	 else
 		 reg &= ~SSC_CTL_LPB;
 
-	 reg &= 0xfff0;
+	 reg &= 0xfffffff0;
 	 reg |= (bits_per_word - 1);
 
 	 /* CHECK!: are we always going to use FIFO or
@@ -171,10 +182,10 @@ static int spi_stmssc_setup_transfer(struct spi_device *spi,
 	 reg |= SSC_CTL_EN;
 
 	 dgb_print("ssc_ctl = 0x%04x\n", reg);
-	 ssc_store16(st_ssc, SSC_CTL, reg);
+	 ssc_store32(st_ssc, SSC_CTL, reg);
 
 	 /* Clear the status register */
-	 ssc_load16(st_ssc, SSC_RBUF);
+	 ssc_load32(st_ssc, SSC_RBUF);
 
 	 return 0;
 }
@@ -232,9 +243,9 @@ static int spi_stmssc_setup(struct spi_device *spi)
 static void spi_stmssc_fill_tx_fifo(struct spi_stm_ssc *st_ssc)
 {
 	union {
-		unsigned char bytes[2];
-		unsigned short word;
-	} tmp = {.word = 0,};
+		u8 bytes[4];
+		u32 dword;
+	} tmp = {.dword = 0,};
 	int i;
 
 	for (i = 0;
@@ -258,18 +269,18 @@ static void spi_stmssc_fill_tx_fifo(struct spi_stm_ssc *st_ssc)
 
 			st_ssc->tx_bytes_pending--;
 		}
-		ssc_store16(st_ssc, SSC_TBUF, tmp.word);
+		ssc_store32(st_ssc, SSC_TBUF, tmp.dword);
 	}
 }
 
 static int spi_stmssc_rx_mopup(struct spi_stm_ssc *st_ssc)
 {
 	unsigned long word_period_ns;
-	u16 rx_fifo_status;
+	u32 rx_fifo_status;
 	union {
-		unsigned char bytes[2];
-		unsigned short word;
-	} tmp = {.word = 0,};
+		u8 bytes[4];
+		u32 dword;
+	} tmp = {.dword = 0,};
 
 	dgb_print("\n");
 
@@ -281,25 +292,25 @@ static int spi_stmssc_rx_mopup(struct spi_stm_ssc *st_ssc)
 	ndelay(word_period_ns);
 
 	/* Check 'last' word is actually there! */
-	rx_fifo_status = ssc_load16(st_ssc, SSC_RX_FSTAT);
+	rx_fifo_status = ssc_load32(st_ssc, SSC_RX_FSTAT);
 	if (rx_fifo_status == 1) {
-		tmp.word = ssc_load16(st_ssc, SSC_RBUF);
-		if (st_ssc->rx_ptr) {
-			if (st_ssc->bits_per_word > 8) {
+		tmp.dword = ssc_load32(st_ssc, SSC_RBUF);
+
+		if (st_ssc->bits_per_word > 8) {
+			if (st_ssc->rx_ptr) {
 				*st_ssc->rx_ptr++ = tmp.bytes[1];
 				*st_ssc->rx_ptr++ = tmp.bytes[0];
-				st_ssc->rx_bytes_pending -= 2;
-			} else {
-				*st_ssc->rx_ptr++ = tmp.bytes[0];
-				st_ssc->rx_bytes_pending--;
 			}
+			st_ssc->rx_bytes_pending -= 2;
+		} else {
+			if (st_ssc->rx_ptr)
+				*st_ssc->rx_ptr++ = tmp.bytes[0];
+			st_ssc->rx_bytes_pending--;
 		}
-		if (st_ssc->rx_bytes_pending)
-			dgb_print("rx_bytes_pending = %d\n",
-				  st_ssc->rx_bytes_pending);
-	} else
+	} else {
 		dgb_print("should only be one word in RX_FIFO"
 			  "(rx_fifo_status = %d)\n", rx_fifo_status);
+	}
 
 	return 0;
 }
@@ -323,34 +334,36 @@ static int spi_stmssc_txrx_bufs(struct spi_device *spi, struct spi_transfer *t)
 	spi_stmssc_fill_tx_fifo(st_ssc);
 
 	/* enable TX_FIFO_EMPTY interrupts */
-	ssc_store16(st_ssc, SSC_IEN, SSC_IEN_TIEN);
+	ssc_store32(st_ssc, SSC_IEN, SSC_IEN_TIEN);
 
 	/* wait for all bytes to be transmitted*/
 	wait_for_completion(&st_ssc->done);
 
-	/* if necessary, check all bytes have been received */
-	if (st_ssc->rx_bytes_pending && st_ssc->rx_ptr)
+	/* check 'last' byte has been received */
+	/* NOTE: need to read rxbuf, even if ignoring the result! */
+	if (st_ssc->rx_bytes_pending)
 		spi_stmssc_rx_mopup(st_ssc);
 
 	/* disable ints */
-	ssc_store16(st_ssc, SSC_IEN, 0x0);
+	ssc_store32(st_ssc, SSC_IEN, 0x0);
 
 	return t->len - st_ssc->tx_bytes_pending;
 }
 
+
+
 static irqreturn_t spi_stmssc_irq(int irq, void *dev_id)
 {
 	struct spi_stm_ssc *st_ssc = (struct spi_stm_ssc *)dev_id;
 	unsigned int rx_fifo_status;
-	u16 ssc_status;
+	u32 ssc_status;
 
 	union {
-		unsigned char bytes[2];
-		unsigned short word;
-	} tmp = {.word = 0,};
+		u8 bytes[4];
+		u32 dword;
+	} tmp = {.dword = 0,};
 
-
-	ssc_status = ssc_load16(st_ssc, SSC_STA);
+	ssc_status = ssc_load32(st_ssc, SSC_STA);
 
 	/* FIFO_TX_EMPTY */
 	if (ssc_status & SSC_STA_TIR) {
@@ -358,23 +371,25 @@ static irqreturn_t spi_stmssc_irq(int irq, void *dev_id)
 		   else SSC_RX_FSTAT (0-7)
 		*/
 		rx_fifo_status = (ssc_status & SSC_STA_RIR) ? 8 :
-			ssc_load16(st_ssc, SSC_RX_FSTAT);
+			ssc_load32(st_ssc, SSC_RX_FSTAT);
+
 		/* Read all available words from RX_FIFO */
 		while (rx_fifo_status) {
-			tmp.word = ssc_load16(st_ssc, SSC_RBUF);
+			tmp.dword = ssc_load32(st_ssc, SSC_RBUF);
 
-			if (st_ssc->rx_ptr) {
-				if (st_ssc->bits_per_word > 8) {
+			if (st_ssc->bits_per_word > 8) {
+				if (st_ssc->rx_ptr) {
 					*st_ssc->rx_ptr++ = tmp.bytes[1];
 					*st_ssc->rx_ptr++ = tmp.bytes[0];
-					st_ssc->rx_bytes_pending -= 2;
-				} else {
-					*st_ssc->rx_ptr++ = tmp.bytes[0];
-					st_ssc->rx_bytes_pending--;
 				}
+				st_ssc->rx_bytes_pending -= 2;
+			} else {
+				if (st_ssc->rx_ptr)
+					*st_ssc->rx_ptr++ = tmp.bytes[0];
+				st_ssc->rx_bytes_pending--;
 			}
 
-			rx_fifo_status = ssc_load16(st_ssc, SSC_RX_FSTAT);
+			rx_fifo_status = ssc_load32(st_ssc, SSC_RX_FSTAT);
 		}
 
 		/* See if there is more data to send */
@@ -382,7 +397,7 @@ static irqreturn_t spi_stmssc_irq(int irq, void *dev_id)
 			spi_stmssc_fill_tx_fifo(st_ssc);
 		else {
 			/* No more data to send */
-			ssc_store16(st_ssc, SSC_IEN, 0x0);
+			ssc_store32(st_ssc, SSC_IEN, 0x0);
 			complete(&st_ssc->done);
 		}
 	}
@@ -390,6 +405,7 @@ static irqreturn_t spi_stmssc_irq(int irq, void *dev_id)
 	return IRQ_HANDLED;
 }
 
+
 static int __init spi_stm_probe(struct platform_device *pdev)
 {
 	struct ssc_pio_t *pio_info =
@@ -398,7 +414,7 @@ static int __init spi_stm_probe(struct platform_device *pdev)
 	struct resource *res;
 	struct spi_stm_ssc *st_ssc;
 
-	u16 reg;
+	u32 reg;
 
 	master = spi_alloc_master(&pdev->dev, sizeof(struct spi_stm_ssc));
 	if (!master)
@@ -408,11 +424,17 @@ static int __init spi_stm_probe(struct platform_device *pdev)
 
 	st_ssc = spi_master_get_devdata(master);
 	st_ssc->bitbang.master     = spi_master_get(master);
-	st_ssc->bitbang.chipselect = spi_stmssc_chipselect;
 	st_ssc->bitbang.setup_transfer = spi_stmssc_setup_transfer;
 	st_ssc->bitbang.txrx_bufs  = spi_stmssc_txrx_bufs;
 	st_ssc->bitbang.master->setup = spi_stmssc_setup;
 
+	if (pio_info->chipselect)
+		st_ssc->bitbang.chipselect = (void (*)
+					      (struct spi_device *, int))
+			pio_info->chipselect;
+	else
+		st_ssc->bitbang.chipselect = spi_stpio_chipselect;
+
 	master->num_chipselect = SPI_NO_CHIPSELECT + 1;
 	master->bus_num = pdev->id;
 	init_completion(&st_ssc->done);
@@ -457,7 +479,7 @@ static int __init spi_stm_probe(struct platform_device *pdev)
 	if (!pio_info->clk) {
 		printk(KERN_ERR NAME
 		       " Failed to allocate clk pin (PIO%d[%d])\n",
-		       pio_info->pio_port, pio_info->pio_pin[0]);
+		       pio_info->pio[0].pio_port, pio_info->pio[0].pio_pin);
 		return -ENODEV;
 	}
 	pio_info->sdout = stpio_request_set_pin(pio_info->pio[1].pio_port,
@@ -466,7 +488,7 @@ static int __init spi_stm_probe(struct platform_device *pdev)
 	if (!pio_info->sdout) {
 		printk(KERN_ERR NAME
 		       " Failed to allocate sdo pin (PIO%d[%d])\n",
-		       pio_info->pio_port, pio_info->pio_pin[1]);
+		       pio_info->pio[1].pio_port, pio_info->pio[1].pio_pin);
 		return -ENODEV;
 	}
 	pio_info->sdin = stpio_request_pin(pio_info->pio[2].pio_port,
@@ -475,29 +497,35 @@ static int __init spi_stm_probe(struct platform_device *pdev)
 	if (!pio_info->sdin) {
 		printk(KERN_ERR NAME
 		       " Failed to allocate sdi pin (PIO%d[%d])\n",
-		       pio_info->pio_port, pio_info->pio_pin[2]);
+		       pio_info->pio[2].pio_port, pio_info->pio[2].pio_pin);
 		return -ENODEV;
 	}
 
 	/* Disable I2C and Reset SSC */
-	ssc_store16(st_ssc, SSC_I2C, 0x0);
+	ssc_store32(st_ssc, SSC_I2C, 0x0);
 	reg = ssc_load16(st_ssc, SSC_CTL);
 	reg |= SSC_CTL_SR;
-	ssc_store16(st_ssc, SSC_CTL, reg);
+	ssc_store32(st_ssc, SSC_CTL, reg);
 
 	udelay(1);
-	reg = ssc_load16(st_ssc, SSC_CTL);
+	reg = ssc_load32(st_ssc, SSC_CTL);
 	reg &= ~SSC_CTL_SR;
-	ssc_store16(st_ssc, SSC_CTL, reg);
+	ssc_store32(st_ssc, SSC_CTL, reg);
 
 	/* Set SSC into slave mode before reconfiguring PIO pins */
-	reg = ssc_load16(st_ssc, SSC_CTL);
+	reg = ssc_load32(st_ssc, SSC_CTL);
 	reg &= ~SSC_CTL_MS;
-	ssc_store16(st_ssc, SSC_CTL, reg);
+	ssc_store32(st_ssc, SSC_CTL, reg);
 
+#ifdef CONFIG_CPU_SUBTYPE_STX7141
+	stpio_configure_pin(pio_info->clk, STPIO_OUT);
+	stpio_configure_pin(pio_info->sdout, STPIO_OUT);
+	stpio_configure_pin(pio_info->sdin, STPIO_IN);
+#else
 	stpio_configure_pin(pio_info->clk, STPIO_ALT_OUT);
 	stpio_configure_pin(pio_info->sdout, STPIO_ALT_OUT);
 	stpio_configure_pin(pio_info->sdin, STPIO_IN);
+#endif
 
 	st_ssc->fcomms = clk_get_rate(clk_get(NULL, "comms_clk"));;
 
@@ -508,9 +536,11 @@ static int __init spi_stm_probe(struct platform_device *pdev)
 		return -1;
 	}
 
-	printk(KERN_INFO NAME ": Registered SPI Bus %d: PIO%d[%d/%d/%d]\n",
-	       master->bus_num, pio_info->pio_port, pio_info->pio_pin[0],
-	       pio_info->pio_pin[1], pio_info->pio_pin[2]);
+	printk(KERN_INFO NAME ": Registered SPI Bus %d: "
+	       "CLK[%d,%d] SDOUT[%d, %d] SDIN[%d, %d]\n", master->bus_num,
+	       pio_info->pio[0].pio_port, pio_info->pio[0].pio_pin,
+	       pio_info->pio[1].pio_port, pio_info->pio[1].pio_pin,
+	       pio_info->pio[2].pio_port, pio_info->pio[2].pio_pin);
 
 	return 0;
 }
diff --git a/include/asm-sh/mb628/epld.h b/include/asm-sh/mb628/epld.h
index 66d3c74..6ef1764 100644
--- a/include/asm-sh/mb628/epld.h
+++ b/include/asm-sh/mb628/epld.h
@@ -27,6 +27,8 @@
 #define EPLD_IEEE		0x060000
 #define EPLD_ENABLE		0x070000
 #define   EPLD_ENABLE_HBEAT		(1<<2)
+#define   EPLD_ENABLE_SPI_NOTCS		(1<<3)
+#define   EPLD_ENABLE_IFE_NOTCS		(1<<4)
 #define EPLD_CCARDCTRL		0x080000
 #define EPLD_CCARDCTRL2		0x090000
 #define EPLD_CCARDIMDIMODE	0x0A0000
diff --git a/include/linux/stm/soc.h b/include/linux/stm/soc.h
index 911d824..5f57dca 100644
--- a/include/linux/stm/soc.h
+++ b/include/linux/stm/soc.h
@@ -12,6 +12,8 @@ struct ssc_pio_t {
 	struct stpio_pin* clk;
 	struct stpio_pin* sdout;
 	struct stpio_pin* sdin;
+	/* chip-select for SPI bus (struct spi_device *spi) -> (void *)*/
+	void (*chipselect)(void *spi, int is_on);
 };
 
 #define SSC_I2C_CAPABILITY  0x0
@@ -40,6 +42,8 @@ struct ssc_pio_t {
 struct plat_ssc_data {
 	unsigned short		capability;	/* bitmask on the ssc capability */
 	unsigned long		routing;
+	/* chip-select for SPI bus (struct spi_device *spi) -> (void *)*/
+	void (*spi_chipselects[])(void *spi, int is_on);
 };
 
 #ifdef CONFIG_CPU_SUBTYPE_STX7105
@@ -72,22 +76,23 @@ struct plat_ssc_data {
 #define SSC3_MRST_PIO3_7	(1 << SSC_MRST_SHIFT(3))
 #define SSC3_MRST_PIO13_3	(2 << SSC_MRST_SHIFT(3))
 #define SSC3_MRST_PIO13_7	(3 << SSC_MRST_SHIFT(3))
+#endif
 
 #define SPI_LINE_SHIFT		0x0
 #define SPI_LINE_MASK		0x7
 #define SPI_BANK_SHIFT		0x3
-#define SPI_BANK_MASK		0xf
+#define SPI_BANK_MASK		0xff
 #define spi_get_bank(address)  (((address) >> SPI_BANK_SHIFT) & SPI_BANK_MASK)
 #define spi_get_line(address)  (((address) >> SPI_LINE_SHIFT) & SPI_LINE_MASK)
 #define spi_set_cs(bank, line) ((((bank) & SPI_BANK_MASK) << SPI_BANK_SHIFT) | \
 				 (((line) & SPI_LINE_MASK) << SPI_LINE_SHIFT))
 /* each spi bus is able to manage 'all' the pios as chip selector
-   therefore each master must have 8(pioline)x10(piobank)
-   10 pio banks is enough for our boards
+   therefore each master must have 8(pioline)x20(piobank)
+   20 pio banks is enough for our boards
    SPI_NO_CHIPSELECT to specify SPI device with no CS (ie CS tied to 'active')
 */
-#define SPI_NO_CHIPSELECT	(spi_set_cs(9, 7) + 1)
-#endif
+#define SPI_NO_CHIPSELECT	(spi_set_cs(19, 7) + 1)
+
 
 /* Private data for the SATA driver */
 struct plat_sata_data {
-- 
1.5.3.6

