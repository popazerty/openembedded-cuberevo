From 7cd409dd8581255ac8a88648f2892b0fa8d9e23c Mon Sep 17 00:00:00 2001
From: Pawel Moll <pawel.moll@st.com>
Date: Thu, 19 Mar 2009 12:28:44 +0000
Subject: [PATCH] sound_stm: Fix interrupt handling in audio peripherals

Interrupts generated by the audio peripherals are now cleared before
enabling, which is helpful in case of sharing these IPs between cores.

Additionally reader-related FDMA interrupts may be generated long after
the capture operation is stopped. This situation is handled now
properly.

Signed-off-by: Pawel Moll <pawel.moll@st.com>
---
 sound/stm/pcm_player.c   |    4 +++-
 sound/stm/pcm_reader.c   |   14 +++++++++++++-
 sound/stm/spdif_player.c |    4 +++-
 3 files changed, 19 insertions(+), 3 deletions(-)

diff --git a/sound/stm/pcm_player.c b/sound/stm/pcm_player.c
index 751be3e..f63c2e4 100644
--- a/sound/stm/pcm_player.c
+++ b/sound/stm/pcm_player.c
@@ -621,10 +621,12 @@ static inline int snd_stm_pcm_player_start(struct snd_pcm_substream *substream)
 			DMA_CHANNEL_STATUS_RUNNING)
 		udelay(5);
 
-	/* Enable player interrupts */
+	/* Enable player interrupts (and clear possible stalled ones) */
 
 	enable_irq(pcm_player->irq);
+	set__AUD_PCMOUT_ITS_CLR__NSAMPLE__CLEAR(pcm_player);
 	set__AUD_PCMOUT_IT_EN_SET__NSAMPLE__SET(pcm_player);
+	set__AUD_PCMOUT_ITS_CLR__UNF__CLEAR(pcm_player);
 	set__AUD_PCMOUT_IT_EN_SET__UNF__SET(pcm_player);
 
 	/* Launch the player */
diff --git a/sound/stm/pcm_reader.c b/sound/stm/pcm_reader.c
index a256a3d..abae689 100644
--- a/sound/stm/pcm_reader.c
+++ b/sound/stm/pcm_reader.c
@@ -80,6 +80,7 @@ struct snd_stm_pcm_reader {
 	int fdma_max_transfer_size;
 	struct stm_dma_params *fdma_params_list;
 	struct stm_dma_req *fdma_request;
+	int running;
 
 	snd_stm_magic_field;
 };
@@ -135,6 +136,9 @@ static void snd_stm_pcm_reader_callback_node_done(unsigned long param)
 	snd_stm_assert(pcm_reader, return);
 	snd_stm_magic_assert(pcm_reader, return);
 
+	if (!pcm_reader->running)
+		return;
+
 	snd_stm_printd(2, "Period elapsed ('%s')\n",
 			pcm_reader->device->bus_id);
 
@@ -152,6 +156,9 @@ static void snd_stm_pcm_reader_callback_node_error(unsigned long param)
 	snd_stm_assert(pcm_reader, return);
 	snd_stm_magic_assert(pcm_reader, return);
 
+	if (!pcm_reader->running)
+		return;
+
 	snd_stm_printe("Error during FDMA transfer in reader '%s'!\n",
 			pcm_reader->device->bus_id);
 
@@ -619,9 +626,10 @@ static inline int snd_stm_pcm_reader_start(struct snd_pcm_substream *substream)
 			DMA_CHANNEL_STATUS_RUNNING)
 		udelay(5);
 
-	/* Enable required reader interrupts */
+	/* Enable required reader interrupt (and clear possible stalled) */
 
 	enable_irq(pcm_reader->irq);
+	set__AUD_PCMIN_ITS_CLR__OVF__CLEAR(pcm_reader);
 	set__AUD_PCMIN_IT_EN_SET__OVF__SET(pcm_reader);
 
 	/* Launch the reader */
@@ -636,6 +644,8 @@ static inline int snd_stm_pcm_reader_start(struct snd_pcm_substream *substream)
 		snd_stm_conv_unmute(pcm_reader->conv_group);
 	}
 
+	pcm_reader->running = 1;
+
 	return 0;
 }
 
@@ -650,6 +660,8 @@ static inline int snd_stm_pcm_reader_stop(struct snd_pcm_substream *substream)
 	snd_stm_assert(pcm_reader, return -EINVAL);
 	snd_stm_magic_assert(pcm_reader, return -EINVAL);
 
+	pcm_reader->running = 0;
+
 	/* Mute & shutdown DAC */
 
 	if (pcm_reader->conv_group) {
diff --git a/sound/stm/spdif_player.c b/sound/stm/spdif_player.c
index 176cd00..5866bd0 100644
--- a/sound/stm/spdif_player.c
+++ b/sound/stm/spdif_player.c
@@ -638,10 +638,12 @@ static inline int snd_stm_spdif_player_start(struct snd_pcm_substream
 			DMA_CHANNEL_STATUS_RUNNING)
 		udelay(5);
 
-	/* Enable player interrupts */
+	/* Enable player interrupts (and clear possible stalled ones) */
 
 	enable_irq(spdif_player->irq);
+	set__AUD_SPDIF_ITS_CLR__NSAMPLE__CLEAR(spdif_player);
 	set__AUD_SPDIF_IT_EN_SET__NSAMPLE__SET(spdif_player);
+	set__AUD_SPDIF_ITS_CLR__UNF__CLEAR(spdif_player);
 	set__AUD_SPDIF_IT_EN_SET__UNF__SET(spdif_player);
 
 	/* Launch the player */
-- 
1.6.0.6

