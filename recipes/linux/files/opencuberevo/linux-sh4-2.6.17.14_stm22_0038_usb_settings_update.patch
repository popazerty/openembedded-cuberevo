Implement the new settings as supplied by hardware team.

These are now the same settings as implemented on OS21, with the exception of
the packets per message and packets per chunk settings.

Signed-off-by: Carl Shaw <carl.shaw@st.com>
Index: linux/drivers/usb/host/ehci-stcore.c
===================================================================
--- linux.orig/drivers/usb/host/ehci-stcore.c	2007-03-19 22:12:43.000000000 +0000
+++ linux/drivers/usb/host/ehci-stcore.c	2007-03-20 20:41:52.000000000 +0000
@@ -100,6 +100,12 @@
 	return retval;
 }
 
+static int ehci_st40_reset(struct usb_hcd *hcd)
+{
+	writel(AHB2STBUS_INOUT_THRESHOLD, AHB2STBUS_INSREG01);
+	return ehci_init(hcd);
+}
+
 static const struct hc_driver ehci_st40_hc_driver = {
 	.description = hcd_name,
 	.product_desc = "ST EHCI Host Controller",
@@ -114,7 +120,7 @@
 	/*
 	 * basic lifecycle operations
 	 */
-	.reset = ehci_init,
+	.reset = ehci_st40_reset,
 	.start = ehci_run,
 #ifdef	CONFIG_PM
 	.suspend = ehci_st40_suspend,
Index: linux/drivers/usb/host/stb7100-common.c
===================================================================
--- linux.orig/drivers/usb/host/stb7100-common.c	2007-03-19 21:57:05.000000000 +0000
+++ linux/drivers/usb/host/stb7100-common.c	2007-03-20 20:41:10.000000000 +0000
@@ -22,13 +22,9 @@
 	unsigned long reg;
 	static int initialised = 0;
 
-	printk("%s\n", __FUNCTION__);
-
 	if (xchg(&initialised, 1))
 		return;
 
-	printk("%s proceeding\n", __FUNCTION__);
-
 	/* Make sure PLL is on */
 	reg = readl(SYS_CFG2);
 	if (reg & SYS_CFG2_PLL_POWER_DOWN_BIT) {
@@ -36,9 +32,9 @@
 		mdelay(100);
 	}
 
-	/* Set 16 bit strap mode */
+	/* Set 8 bit strap mode */
 	reg = readl(AHB2STBUS_STRAP);
-	writel(reg | AHB2STBUS_STRAP_16_BIT, AHB2STBUS_STRAP);
+	writel(reg & (~AHB2STBUS_STRAP_16_BIT), AHB2STBUS_STRAP);
 
 	/* Start PLL */
 	reg = readl(AHB2STBUS_STRAP);
@@ -55,4 +51,7 @@
 
 	/* Set the Chunk Size Config to 64 packets per chunk */
 	writel(AHB2STBUS_CHUNKSIZE_64, AHB2STBUS_CHUNKSIZE);
+
+	/* Set bus wrapper packet IN/OUT threshold to 128 */
+	writel(AHB2STBUS_INOUT_THRESHOLD, AHB2STBUS_INSREG01);
 }
Index: linux/drivers/usb/host/stb7100-common.h
===================================================================
--- linux.orig/drivers/usb/host/stb7100-common.h	2007-03-19 22:20:06.000000000 +0000
+++ linux/drivers/usb/host/stb7100-common.h	2007-03-19 22:32:24.000000000 +0000
@@ -22,6 +22,8 @@
 #define AHB2STBUS_EHCI_BASE		(UHOST2C_BASE + 0x000ffe00)
 #define AHB2STBUS_PROTOCOL_BASE		(UHOST2C_BASE + 0x000fff00)
 
+#define AHB2STBUS_INSREG01		(AHB2STBUS_EHCI_BASE + 0x10 + 0x84)
+
 /* The transaction opcode is programmed in this register */
 #define AHB2STBUS_STBUS_OPC		(AHB2STBUS_PROTOCOL_BASE + 0x00)
 #define AHB2STBUS_STBUS_OPC_4BIT	0x00
@@ -72,6 +74,8 @@
 #define AHB2STBUS_STRAP_PLL		0x08	/* undocumented */
 #define AHB2STBUS_STRAP_16_BIT		0x04	/* ss_word_if */
 
+/* Define a bus wrapper IN/OUT threshold of 128 */
+#define AHB2STBUS_INOUT_THRESHOLD	0x00800080
 
 /*
  * SYSCONF stuff
