From 159b78e7fad160b3722c75a7972023624c0f594b Mon Sep 17 00:00:00 2001
From: Stuart MENEFY <stuart.menefy@st.com>
Date: Wed, 18 Nov 2009 15:23:10 +0000
Subject: [PATCH] sh_stm: Update mb705 code to reflect new EPLD programming

The EPLD programming for the mb705 has been updated, which has changed which
EMI bank various devices appear in. Update the addresses or banks the kernel
uses to match. Note that an updated target pack is also required.

Also display the mb705 board revision on the from panel display.

Signed-off-by: Stuart Menefy <stuart.menefy@st.com>
---
 arch/sh/boards/st/common/mb705-display.c |    5 ++++-
 arch/sh/boards/st/common/mb705-epld.h    |    1 +
 arch/sh/boards/st/common/mb705.c         |   11 +++++++----
 include/asm-sh/mb680/stem.h              |    6 +++---
 4 files changed, 15 insertions(+), 8 deletions(-)

diff --git a/arch/sh/boards/st/common/mb705-display.c b/arch/sh/boards/st/common/mb705-display.c
index 88c39a3..bfd7595 100644
--- a/arch/sh/boards/st/common/mb705-display.c
+++ b/arch/sh/boards/st/common/mb705-display.c
@@ -100,6 +100,8 @@ static int __init mb705_display_probe(struct platform_device *pdev)
 	int res;
 	struct display_data *dd;
 	int i;
+	char string[17];
+	int string_len;
 
 	dd = devm_kzalloc(dev, sizeof(*dd), GFP_KERNEL);
 	if (dd == NULL)
@@ -120,7 +122,8 @@ static int __init mb705_display_probe(struct platform_device *pdev)
 	/* notFL signal is controlled by DisplayCtrlReg[0] */
 	epld_write(1, EPLD_TS_DISPLAY_CTRL_REG);
 
-	store_text(dev, NULL, "mb705", 5);
+	string_len = scnprintf(string, sizeof(string), "MB705%c", mb705_rev);
+	store_text(dev, NULL, string, string_len);
 
 	return 0;
 }
diff --git a/arch/sh/boards/st/common/mb705-epld.h b/arch/sh/boards/st/common/mb705-epld.h
index 7840a9f..c42442a 100644
--- a/arch/sh/boards/st/common/mb705-epld.h
+++ b/arch/sh/boards/st/common/mb705-epld.h
@@ -123,5 +123,6 @@
 #define EPLD_AUDIO_USERLED_LD10T		(1<<3)
 
 void mb705_reset(int bit, unsigned long usdelay);
+extern char mb705_rev;
 
 #endif
diff --git a/arch/sh/boards/st/common/mb705.c b/arch/sh/boards/st/common/mb705.c
index 8b73a04..5ed5692 100644
--- a/arch/sh/boards/st/common/mb705.c
+++ b/arch/sh/boards/st/common/mb705.c
@@ -32,6 +32,7 @@
 #include "mb705-epld.h"
 
 static DEFINE_SPINLOCK(misc_lock);
+char mb705_rev = '?';
 
 static struct platform_device mb705_gpio_led = {
 	.name = "leds-gpio",
@@ -55,8 +56,8 @@ static struct platform_device epld_device = {
 	.num_resources	= 1,
 	.resource	= (struct resource[]) {
 		{
-			.start	= 0x07000000,
-			.end	= 0x070002ff,
+			.start	= 0x04800000,
+			.end	= 0x048002ff,
 			.flags	= IORESOURCE_MEM,
 		}
 	},
@@ -72,8 +73,8 @@ static struct platform_device mb705_display_device = {
 	.num_resources	= 1,
 	.resource	= (struct resource[]) {
 		{
-			.start	= 0x07000140,
-			.end	= 0x070001bf,
+			.start	= 0x04800140,
+			.end	= 0x048001bf,
 			.flags	= IORESOURCE_MEM,
 		}
 	},
@@ -305,6 +306,8 @@ static int __init mb705_init(void)
 		        "passed" : "failed");
 	}
 
+	mb705_rev = ((epld_read(EPLD_EMI_IDENT) >> 4) & 0xf) - 1 + 'A';
+
 	/* Determine whether NOR and NAND devices are swapped. */
 	i = epld_read(EPLD_EMI_SWITCH);
 	if (i & EPLD_EMI_SWITCH_BOOTFROMNOR) {
diff --git a/include/asm-sh/mb680/stem.h b/include/asm-sh/mb680/stem.h
index 8671fb1..e70a38b 100644
--- a/include/asm-sh/mb680/stem.h
+++ b/include/asm-sh/mb680/stem.h
@@ -17,14 +17,14 @@
  * J4 to 1-2 and fit J2A (notStemIntr(0) <= SysIRQ2).
  *
  * If used with mb705 STEMCS0 is routed via the EPLD (J14A in position 2-3)
- * which subdecodes STEMCS0 as CSE (bank 4) and A17-16 = 01 (the EPLDs
+ * which subdecodes STEMCS0 as CSC (bank 2) and A[25:24] != 00 (the EPLDs
  * occupy this same bank). Similarly StemIntr(0) is routed via the EPLD,
  * which we program up to route it directly to SysIRQ2, see mb705_init()
  * for more details
  */
 #ifdef CONFIG_SH_ST_MB705
-#define STEM_CS0_BANK 4
-#define STEM_CS0_OFFSET (1<<16)
+#define STEM_CS0_BANK 2
+#define STEM_CS0_OFFSET (1<<24)
 #else
 #define STEM_CS0_BANK 2
 #define STEM_CS0_OFFSET 0
-- 
1.6.0.6

