This patch adds the glitch suppression support
 in the STLinux 2.2
Signed-off-by: Francesco M. Virlinzi <francesco.virlinzi@st.com>
===============================================================
diff -upNr -X notdiff.txt linux-2.6.17.14_stm22_0040/drivers/i2c/busses/i2c-stm.c linux-2.6.17.14_stm22_0040.i2c/drivers/i2c/busses/i2c-stm.c
--- linux-2.6.17.14_stm22_0040/drivers/i2c/busses/i2c-stm.c	2008-01-22 15:21:27.000000000 +0100
+++ linux-2.6.17.14_stm22_0040.i2c/drivers/i2c/busses/i2c-stm.c	2008-01-22 15:35:39.963646976 +0100
@@ -56,18 +56,35 @@
 #define I2C_RATE_FASTMODE          400000
 #define NANOSEC_PER_SEC            1000000000
 
-#define REP_START_HOLD_TIME_NORMAL   4000	/* standard */
-#define REP_START_HOLD_TIME_FAST      600	/* it was 3500 but 600 is standard*/
-#define START_HOLD_TIME_NORMAL       4000	/* standard */
-#define START_HOLD_TIME_FAST          600	/* standard */
-#define REP_START_SETUP_TIME_NORMAL  4700	/* standard */
-#define REP_START_SETUP_TIME_FAST     600	/* standard */
-#define DATA_SETUP_TIME_NORMAL        250	/* standard */
-#define DATA_SETUP_TIME_FAST          100	/* standard */
-#define STOP_SETUP_TIME_NORMAL       4000	/* standard */
-#define STOP_SETUP_TIME_FAST          600	/* standard */
-#define BUS_FREE_TIME_NORMAL         4700	/* standard */
-#define BUS_FREE_TIME_FAST           1300	/* standard */
+#define REP_START_HOLD_TIME_NORMAL   4000
+#define REP_START_HOLD_TIME_FAST     6500
+#define START_HOLD_TIME_NORMAL       4500
+#define START_HOLD_TIME_FAST          800
+#define REP_START_SETUP_TIME_NORMAL  4700
+#define REP_START_SETUP_TIME_FAST     800
+#define DATA_SETUP_TIME_NORMAL        300
+#define DATA_SETUP_TIME_FAST          300
+#define STOP_SETUP_TIME_NORMAL       4200
+#define STOP_SETUP_TIME_FAST          800
+#define BUS_FREE_TIME_NORMAL         5700
+#define BUS_FREE_TIME_FAST           1500
+
+/* Define for glitch suppression support */
+#ifdef CONFIG_I2C_STM_GLITCH_SUPPORT
+  #if CONFIG_GLITCH_CLK_WIDTH > 0
+    #define GLITCH_WIDTH_CLOCK			CONFIG_GLITCH_CLK_WIDTH
+  #else
+    #define GLITCH_WIDTH_CLOCK			500 /* in nanosecs */
+  #endif
+  #if CONFIG_GLITCH_DATA_WIDTH > 0
+    #define GLITCH_WIDTH_DATA			CONFIG_GLITCH_DATA_WIDTH
+  #else
+    #define GLITCH_WIDTH_DATA			500 /* in nanosecs */
+  #endif
+#else
+     #define GLITCH_WIDTH_DATA			0
+     #define GLITCH_WIDTH_CLOCK			0
+#endif
 
 /* To manage normal vs fast mode */
 #define IIC_STM_CONFIG_SPEED_MASK          0x1
@@ -591,49 +608,69 @@ static void iic_stm_timing_trace(struct 
 	dgb_print("SSC_BUS_FREE %d\n", ssc_load16(ssc_bus, SSC_BUS_FREE));
 	dgb_print("SSC_PRE_SCALER_BRG %d\n",
 		  ssc_load16(ssc_bus, SSC_PRE_SCALER_BRG));
-	dgb_print("SSC_AGFR 0x%x\n", ssc_load8(ssc_bus, SSC_AGFR));
-	dgb_print("SSC_PRSC %d\n", ssc_load8(ssc_bus, SSC_PRSC));
+	dgb_print("SSC_NOISE_SUPP_WIDTH %d\n",
+			ssc_load8(ssc_bus, SSC_NOISE_SUPP_WIDTH));
+	dgb_print("SSC_PRSCALER %d\n",
+			ssc_load8(ssc_bus, SSC_PRSCALER));
+	dgb_print("SSC_NOISE_SUPP_WIDTH_DATAOUT %d\n",
+			ssc_load16(ssc_bus, SSC_NOISE_SUPP_WIDTH_DATAOUT));
+	dgb_print("SSC_PRSCALER_DATAOUT %d\n",
+			ssc_load16(ssc_bus, SSC_PRSCALER_DATAOUT));
 }
 
 static void iic_stm_setup_timing(struct iic_ssc *adap)
 {
 	struct ssc_t *ssc_bus =
 			container_of(adap->adapter.dev.parent, struct ssc_t, dev);
-	unsigned long iic_baudrate;
+	unsigned long  iic_baudrate;
 	unsigned short iic_rep_start_hold;
-	unsigned short iic_start_hold, iic_rep_start_setup;
-	unsigned short iic_data_setup, iic_stop_setup;
-	unsigned short iic_bus_free, iic_pre_scale_baudrate;
-	unsigned char iic_agfr, iic_prsc;
-	unsigned long clock = ssc_get_clock();
-	unsigned long NSPerCyc = NANOSEC_PER_SEC / clock;
-
-	NSPerCyc = NANOSEC_PER_SEC /clock;
-	dgb_print("Assuming %d MHz for the Timing Setup %d\n",
-		  clock / 1000000,NSPerCyc);
-
-	iic_agfr = 0x0;
-	iic_prsc = (int)clock / 10000000;
-	iic_pre_scale_baudrate = 0x1;
+	unsigned short iic_start_hold;
+	unsigned short iic_rep_start_setup;
+	unsigned short iic_data_setup;
+	unsigned short iic_stop_setup;
+	unsigned short iic_bus_free;
+	unsigned short iic_pre_scale_baudrate = 1;
+	unsigned short iic_glitch_width;
+	unsigned short iic_glitch_width_dataout;
+	unsigned char  iic_prescaler;
+	unsigned char  iic_prescaler_dataout;
+	unsigned long  clock = ssc_get_clock()+5000000; /* +5000000 for rounding */
+	unsigned long  ns_per_clk = NANOSEC_PER_SEC / clock;
+
+	dgb_print("Assuming %d MHz for the Timing Setup\n",
+		clock / 1000000);
+
+	iic_prescaler          = clock / 10000000;
+	iic_prescaler_dataout  = clock / 10000000;
+	iic_glitch_width_dataout = GLITCH_WIDTH_DATA/100;
+
 
 	if (check_fastmode(adap)) {
 		ssc_bus->i2c_timing = SSC_I2C_READY_FAST;
 		iic_baudrate = clock / (2 * I2C_RATE_FASTMODE);
-		iic_rep_start_hold = REP_START_HOLD_TIME_FAST / NSPerCyc;
-		iic_start_hold = START_HOLD_TIME_FAST / NSPerCyc;
-		iic_rep_start_setup = REP_START_SETUP_TIME_FAST / NSPerCyc;
-		iic_data_setup = DATA_SETUP_TIME_FAST / NSPerCyc;
-		iic_stop_setup = STOP_SETUP_TIME_FAST / NSPerCyc;
-		iic_bus_free = BUS_FREE_TIME_FAST / NSPerCyc;
+		iic_rep_start_hold  =(REP_START_HOLD_TIME_FAST +GLITCH_WIDTH_DATA) /ns_per_clk;
+		iic_rep_start_setup =(REP_START_SETUP_TIME_FAST+GLITCH_WIDTH_CLOCK) /ns_per_clk;
+		if(GLITCH_WIDTH_DATA < 200)
+			iic_start_hold =(START_HOLD_TIME_FAST+GLITCH_WIDTH_DATA) /ns_per_clk;
+		else
+			iic_start_hold =( 5 * GLITCH_WIDTH_DATA ) /ns_per_clk;
+		iic_data_setup =(DATA_SETUP_TIME_FAST+GLITCH_WIDTH_DATA) /ns_per_clk;
+		iic_stop_setup =(STOP_SETUP_TIME_FAST+GLITCH_WIDTH_CLOCK) /ns_per_clk;
+		iic_bus_free =(BUS_FREE_TIME_FAST+GLITCH_WIDTH_DATA) /ns_per_clk;
+		iic_glitch_width = 0;
 	} else {
 		ssc_bus->i2c_timing = SSC_I2C_READY_NORMAL;
 		iic_baudrate = clock  / (2 * I2C_RATE_NORMAL);
-		iic_rep_start_hold = REP_START_HOLD_TIME_NORMAL / NSPerCyc;
-		iic_start_hold = START_HOLD_TIME_NORMAL / NSPerCyc;
-		iic_rep_start_setup = REP_START_SETUP_TIME_NORMAL / NSPerCyc;
-		iic_data_setup = DATA_SETUP_TIME_NORMAL / NSPerCyc;
-		iic_stop_setup = STOP_SETUP_TIME_NORMAL / NSPerCyc;
-		iic_bus_free = BUS_FREE_TIME_NORMAL / NSPerCyc;
+		iic_rep_start_hold =( REP_START_HOLD_TIME_NORMAL+GLITCH_WIDTH_DATA) / ns_per_clk;
+		iic_rep_start_setup =( REP_START_SETUP_TIME_NORMAL+GLITCH_WIDTH_CLOCK) / ns_per_clk;
+		if(GLITCH_WIDTH_DATA < 1200)
+			iic_start_hold =( START_HOLD_TIME_NORMAL+GLITCH_WIDTH_DATA) / ns_per_clk;
+		else
+			iic_start_hold =( 5 * GLITCH_WIDTH_DATA ) / ns_per_clk;
+		iic_data_setup =( DATA_SETUP_TIME_NORMAL+GLITCH_WIDTH_DATA) / ns_per_clk;
+		iic_stop_setup =( STOP_SETUP_TIME_NORMAL+GLITCH_WIDTH_CLOCK) / ns_per_clk;
+		iic_bus_free =( BUS_FREE_TIME_NORMAL+GLITCH_WIDTH_DATA) / ns_per_clk;
+		iic_glitch_width = (GLITCH_WIDTH_DATA*(clock/10000000))/(iic_prescaler*1000);
 	}
 
 	adap->config &= ~IIC_STM_CONFIG_BAUDRATE_MASK;
@@ -645,9 +682,11 @@ static void iic_stm_setup_timing(struct 
 	ssc_store16(ssc_bus, SSC_DATA_SETUP, iic_data_setup);
 	ssc_store16(ssc_bus, SSC_STOP_SETUP, iic_stop_setup);
 	ssc_store16(ssc_bus, SSC_BUS_FREE, iic_bus_free);
-	ssc_store8(ssc_bus, SSC_AGFR, iic_agfr);
-	ssc_store8(ssc_bus, SSC_PRSC, iic_prsc);
 	ssc_store16(ssc_bus, SSC_PRE_SCALER_BRG, iic_pre_scale_baudrate);
+	ssc_store8(ssc_bus, SSC_PRSCALER, iic_prescaler);
+	ssc_store8(ssc_bus,  SSC_NOISE_SUPP_WIDTH, iic_glitch_width);
+	ssc_store16(ssc_bus, SSC_NOISE_SUPP_WIDTH_DATAOUT, iic_glitch_width_dataout);
+	ssc_store16(ssc_bus, SSC_PRSCALER_DATAOUT, iic_prescaler_dataout);
 	iic_stm_timing_trace(adap);
 	return;
 }
diff -upNr -X notdiff.txt linux-2.6.17.14_stm22_0040/drivers/i2c/busses/Kconfig linux-2.6.17.14_stm22_0040.i2c/drivers/i2c/busses/Kconfig
--- linux-2.6.17.14_stm22_0040/drivers/i2c/busses/Kconfig	2008-01-22 15:21:27.000000000 +0100
+++ linux-2.6.17.14_stm22_0040.i2c/drivers/i2c/busses/Kconfig	2008-01-22 15:17:20.000000000 +0100
@@ -559,4 +559,23 @@ config I2C_STM_HW_FIFO
 	help
 	  Enable this option to print out information on STM I2C (SSC) device driver
 
+config I2C_STM_GLITCH_SUPPORT
+	bool "I2C hardware glitch suppression support"
+	depends on I2C_STM
+	help
+	  Enable this option to add the glitch suppression support in the
+	  STM I2C (SSC) device driver.
+	  Moreover you can set the glitch width in nanosecond (on both clock and data)
+	  or use the default value.
+
+config GLITCH_CLK_WIDTH
+	depends on I2C_STM_GLITCH_SUPPORT
+	int "Glitch clock width"
+	default "500"
+
+config GLITCH_DATA_WIDTH
+	depends on I2C_STM_GLITCH_SUPPORT
+	int "Glitch data width"
+	default "500"
+
 endmenu
diff -upNr -X notdiff.txt linux-2.6.17.14_stm22_0040/drivers/stm/stm_ssc.h linux-2.6.17.14_stm22_0040.i2c/drivers/stm/stm_ssc.h
--- linux-2.6.17.14_stm22_0040/drivers/stm/stm_ssc.h	2008-01-22 15:22:02.000000000 +0100
+++ linux-2.6.17.14_stm22_0040.i2c/drivers/stm/stm_ssc.h	2008-01-22 15:17:20.000000000 +0100
@@ -137,16 +137,16 @@
 #define SSC_CLR_REPSTRT     	0x800
 
 /* SSC Noise suppression Width */
-#define SSC_AGFR		0x100
+#define SSC_NOISE_SUPP_WIDTH	0x100
 /* SSC Clock Prescaler */
-#define SSC_PRSC		0x104
+#define SSC_PRSCALER		0x104
 #define SSC_PRSC_VALUE          0x0f
 
-/* SSC Max delay width*/
-#define SSC_MAX_DELAY		0x108
+/* SSC Noise suppression Width dataout */
+#define SSC_NOISE_SUPP_WIDTH_DATAOUT	0x108
 
 /* SSC Prescaler for delay in dataout */
-#define SSC_PRSC_DATAOUT	0x10c
+#define SSC_PRSCALER_DATAOUT	0x10c
 
 #define SSC_TXFIFO_SIZE         0x8
 #define SSC_RXFIFO_SIZE         0x8
