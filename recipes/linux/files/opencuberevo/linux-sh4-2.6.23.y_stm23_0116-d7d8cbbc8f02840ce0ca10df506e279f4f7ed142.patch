From d7d8cbbc8f02840ce0ca10df506e279f4f7ed142 Mon Sep 17 00:00:00 2001
From: Pawel Moll <pawel.moll@st.com>
Date: Mon, 18 Aug 2008 16:13:29 +0100
Subject: [PATCH] sound_stm: Audio peripherals support for mb705.

This implementation supports mb705+mb680 duet, making 6-channels
analog output, SPDIF output & input. See mb705-audio.c file for
outputs layout description and board configuration details.

Signed-off-by: Pawel Moll <pawel.moll@st.com>
---
 arch/sh/Kconfig                        |   12 ++
 arch/sh/boards/st/common/Makefile      |    1 +
 arch/sh/boards/st/common/common.h      |    2 +
 arch/sh/boards/st/common/mb705-audio.c |  198 ++++++++++++++++++++++++++++++++
 arch/sh/boards/st/common/mb705-epld.h  |   87 ++++++++++++++
 5 files changed, 300 insertions(+), 0 deletions(-)
 create mode 100644 arch/sh/boards/st/common/mb705-audio.c

diff --git a/arch/sh/Kconfig b/arch/sh/Kconfig
index 37e6d30..d67303f 100644
--- a/arch/sh/Kconfig
+++ b/arch/sh/Kconfig
@@ -641,6 +641,18 @@ config SH_ST_MB705
 	  Select SH_ST_MB705 if your processor board is connected
 	  to this STB-like peripherals board.
 
+config SH_ST_MB705_AUDIO
+	tristate "Driver for audio peripherals on mb705"
+	depends on SH_ST_MB705
+	depends on SND_STM
+	default y
+	help
+	  Select this option to enable support for audio perypeharals
+	  on the mb705 (DACs and SPDIF-I2S converter).
+
+	  If you compile this driver as a module, it will be
+	  called mb705-audio.ko
+
 config SH_ST_MB705_DISPLAY
 	bool "Driver for LED display on mb705"
 	depends on SH_ST_MB705
diff --git a/arch/sh/boards/st/common/Makefile b/arch/sh/boards/st/common/Makefile
index feeae9f..0bdc381 100644
--- a/arch/sh/boards/st/common/Makefile
+++ b/arch/sh/boards/st/common/Makefile
@@ -11,5 +11,6 @@ obj-$(CONFIG_SH_ST_MB520) += mb520.o
 obj-$(CONFIG_SH_ST_MB562) += mb562.o
 obj-$(CONFIG_SH_ST_MB588) += mb588.o
 obj-$(CONFIG_SH_ST_MB705) += mb705.o
+obj-$(CONFIG_SH_ST_MB705_AUDIO) += mb705-audio.o
 obj-$(CONFIG_SH_ST_MB705_DISPLAY) += mb705-display.o
 obj-$(CONFIG_SH_ST_MB705_FPBUTTON) += mb705-fpbutton.o
diff --git a/arch/sh/boards/st/common/common.h b/arch/sh/boards/st/common/common.h
index 3df5a0b..cd6b193 100644
--- a/arch/sh/boards/st/common/common.h
+++ b/arch/sh/boards/st/common/common.h
@@ -1,6 +1,8 @@
 #ifndef __ARCH_SH_BOARDS_ST_COMMON_COMMON_H
 #define __ARCH_SH_BOARDS_ST_COMMON_COMMON_H
 
+#include <linux/platform_device.h>
+
 /* epld.c */
 
 struct plat_epld_data {
diff --git a/arch/sh/boards/st/common/mb705-audio.c b/arch/sh/boards/st/common/mb705-audio.c
new file mode 100644
index 0000000..8f0bec0
--- /dev/null
+++ b/arch/sh/boards/st/common/mb705-audio.c
@@ -0,0 +1,198 @@
+/*
+ * arch/sh/boards/st/common/mb705-audio.c
+ *
+ * Copyright (C) 2008 STMicroelectronics Limited
+ * Author: Pawel Moll <pawel.moll@st.com>
+ *
+ * May be copied or modified under the terms of the GNU General Public
+ * License.  See linux/COPYING for more information.
+ *
+ * WARNING! This driver (so far) supports only mb705+mb680 duet.
+ * (SW2[1..4] should be OFF)
+ * In that case (mb705+mb680) audio outputs layout presents as follows:
+ *
+ * +--------------------------------------+
+ * |                                      |
+ * |  (S.I)   (---)  (---)  (0.5)  (0.6)  | TOP
+ * |                                      |
+ * |  (---)   (---)  (---)  (0.3)  (0.4)  |
+ * |                                      |
+ * |  (S.O)   (---)  (---)  (0.1)  (0.2)  | BOTTOM
+ * |                                      |
+ * +--------------------------------------+
+ *     CN5     CN4    CN3    CN2     CN1
+ *
+ * where:
+ *   - S.I - SPDIF input - PCM Reader #0
+ *   - S.O - SPDIF output - SPDIF Player (HDMI)
+ *   - 0.1-6 - audio outputs - PCM Player #0, channels 1 to 6
+ *     (PCM Player #0 has 8-channels output, however only 3 pairs
+ *     are available on pads)
+ */
+
+#include <linux/init.h>
+#include <linux/stm/soc.h>
+#include <sound/stm.h>
+
+#include "common.h"
+#include "mb705-epld.h"
+
+struct mb705_audio_conv {
+	struct snd_stm_conv_converter *conv;
+
+	unsigned int reset_mask;
+
+	unsigned int mute_offset;
+	unsigned int mute_mask;
+};
+
+static struct mb705_audio_conv mb705_audio_spdif_input = {
+	.reset_mask = EPLD_AUDIO_RESET_SPDIFIN,
+};
+
+static struct mb705_audio_conv mb705_audio_8ch_dac = {
+	.reset_mask = EPLD_AUDIO_RESET_AUDDAC2,
+	.mute_offset = EPLD_AUDIO_DAC2,
+	.mute_mask = EPLD_AUDIO_DAC2_SMUTE,
+};
+
+
+
+static unsigned int mb705_audio_get_format(void *priv)
+{
+	return SND_STM_FORMAT__I2S | SND_STM_FORMAT__SUBFRAME_32_BITS;
+}
+
+static int mb705_audio_get_oversampling(void *priv)
+{
+	return 256;
+}
+
+static int mb705_audio_set_enabled(int enabled, void *priv)
+{
+	struct mb705_audio_conv *data = priv;
+	unsigned int value = epld_read(EPLD_AUDIO_RESET);
+
+	if (enabled)
+		value &= ~data->reset_mask;
+	else
+		value |= data->reset_mask;
+
+	epld_write(value, EPLD_AUDIO_RESET);
+
+	return 0;
+}
+
+static int mb705_audio_set_muted(int muted, void *priv)
+{
+	struct mb705_audio_conv *data = priv;
+	unsigned int value = epld_read(data->mute_offset);
+
+	if (muted)
+		value |= data->mute_mask;
+	else
+		value &= ~data->mute_mask;
+
+	epld_write(value, data->mute_offset);
+
+	return 0;
+}
+
+static struct snd_stm_conv_ops mb705_audio_enable_ops = {
+	.get_format = mb705_audio_get_format,
+	.get_oversampling = mb705_audio_get_oversampling,
+	.set_enabled = mb705_audio_set_enabled,
+};
+
+static struct snd_stm_conv_ops mb705_audio_enable_mute_ops = {
+	.get_format = mb705_audio_get_format,
+	.get_oversampling = mb705_audio_get_oversampling,
+	.set_enabled = mb705_audio_set_enabled,
+	.set_muted = mb705_audio_set_muted,
+};
+
+
+
+static int __init mb705_audio_init(void)
+{
+#ifndef CONFIG_SH_ST_MB680
+	/* So far this code is supporting mb705 in a duet with mb680 only! */
+	BUG();
+	return -ENODEV;
+#endif
+
+	/* Check the SPDIF test mode */
+	if ((epld_read(EPLD_AUDIO_SWITCH2) & (EPLD_AUDIO_SWITCH1_SW21 |
+			EPLD_AUDIO_SWITCH1_SW22 | EPLD_AUDIO_SWITCH1_SW23 |
+			EPLD_AUDIO_SWITCH1_SW24)) == 0) {
+		printk(KERN_WARNING "WARNING! MB705 is in audio test mode!\n");
+		printk(KERN_WARNING "You won't hear any generated sound!\n");
+	}
+
+	/* Disable (enable reset) all converters */
+
+	epld_write(EPLD_AUDIO_RESET_AUDDAC0 | EPLD_AUDIO_RESET_AUDDAC1 |
+			EPLD_AUDIO_RESET_AUDDAC2 | EPLD_AUDIO_RESET_SPDIFIN |
+			EPLD_AUDIO_RESET_SPDIFOUT, EPLD_AUDIO_RESET);
+
+	/* Configure and register SPDIF-I2S converter (CS8416, IC5) */
+
+	epld_write(EPLD_AUDIO_SPDIFIN_C | EPLD_AUDIO_SPDIFIN_RCBL,
+			EPLD_AUDIO_SPDIFIN);
+	mb705_audio_spdif_input.conv = snd_stm_conv_register_converter("SPDIF"
+			" Input", &mb705_audio_enable_ops,
+			&mb705_audio_spdif_input, &platform_bus_type,
+			"snd_pcm_reader", 0, 1, NULL);
+	if (!mb705_audio_spdif_input.conv) {
+		printk(KERN_ERR "%s:%u: Can't register SPDIF Input converter!"
+				"\n", __FILE__, __LINE__);
+		goto error;
+	}
+
+	/* Configure and register 8-channels external DAC (AK4359, IC1) */
+
+	epld_write(EPLD_AUDIO_DAC2_DIF0 | EPLD_AUDIO_DAC2_DIF1 |
+			EPLD_AUDIO_DAC2_SMUTE | EPLD_AUDIO_DAC2_ACKS |
+			EPLD_AUDIO_DAC2_DEM0 | EPLD_AUDIO_DAC2_PNOTS,
+			EPLD_AUDIO_DAC2);
+	mb705_audio_8ch_dac.conv = snd_stm_conv_register_converter("External "
+			"8-channels DAC", &mb705_audio_enable_mute_ops,
+			&mb705_audio_8ch_dac, &platform_bus_type,
+			"snd_pcm_player.0", 0, 7, NULL);
+	if (!mb705_audio_8ch_dac.conv) {
+		printk(KERN_ERR "%s:%u: Can't register external 8-channels "
+				"DAC!\n", __FILE__, __LINE__);
+		goto error;
+	}
+
+	/* Configure digital audio pins (multiplexed with PIOs now...) */
+
+	stx7105_configure_audio_pins(3, 1, 1);
+
+	return 0;
+
+error:
+	if (mb705_audio_8ch_dac.conv)
+		snd_stm_conv_unregister_converter(mb705_audio_8ch_dac.conv);
+	if (mb705_audio_spdif_input.conv)
+		snd_stm_conv_unregister_converter(mb705_audio_spdif_input.conv);
+
+	return -ENODEV;
+}
+
+static void __exit mb705_audio_exit(void)
+{
+	/* Disable all converters, just to be sure ;-) */
+
+	epld_write(EPLD_AUDIO_RESET_AUDDAC0 | EPLD_AUDIO_RESET_AUDDAC1 |
+			EPLD_AUDIO_RESET_AUDDAC2 | EPLD_AUDIO_RESET_SPDIFIN |
+			EPLD_AUDIO_RESET_SPDIFOUT, EPLD_AUDIO_RESET);
+
+	/* Unregister converters */
+
+	snd_stm_conv_unregister_converter(mb705_audio_8ch_dac.conv);
+	snd_stm_conv_unregister_converter(mb705_audio_spdif_input.conv);
+}
+
+module_init(mb705_audio_init);
+module_exit(mb705_audio_exit);
diff --git a/arch/sh/boards/st/common/mb705-epld.h b/arch/sh/boards/st/common/mb705-epld.h
index ecde8ef..0f9ae88 100644
--- a/arch/sh/boards/st/common/mb705-epld.h
+++ b/arch/sh/boards/st/common/mb705-epld.h
@@ -10,6 +10,9 @@
  * Register offsets into the EPLD memory space.
  */
 
+#ifndef __ARCH_SH_BOARDS_ST_COMMON_MB705_EPLD_H
+#define __ARCH_SH_BOARDS_ST_COMMON_MB705_EPLD_H
+
 #define EPLD_EMI_IDENT			0x000
 #define EPLD_EMI_TEST			0x002
 #define EPLD_EMI_SWITCH			0x004
@@ -25,3 +28,87 @@
 #define EPLD_TS_DISPLAY0_BASE		0x140
 #define EPLD_TS_DISPLAY1_BASE		0x180
 
+#define EPLD_AUDIO_IDENT		0x200
+#define EPLD_AUDIO_TEST			0x202
+#define EPLD_AUDIO_RESET		0x204
+#define EPLD_AUDIO_RESET_AUDDAC0		(1<<0)
+#define EPLD_AUDIO_RESET_AUDDAC1		(1<<1)
+#define EPLD_AUDIO_RESET_AUDDAC2		(1<<2)
+#define EPLD_AUDIO_RESET_SPDIFIN		(1<<3)
+#define EPLD_AUDIO_RESET_SPDIFOUT		(1<<4)
+#define EPLD_AUDIO_SWITCH0		0x206
+#define EPLD_AUDIO_SWITCH0_SW61			(1<<0)
+#define EPLD_AUDIO_SWITCH0_SW62			(1<<1)
+#define EPLD_AUDIO_SWITCH0_SW63			(1<<2)
+#define EPLD_AUDIO_SWITCH0_SW64			(1<<3)
+#define EPLD_AUDIO_SWITCH0_SW41			(1<<4)
+#define EPLD_AUDIO_SWITCH0_SW42			(1<<5)
+#define EPLD_AUDIO_SWITCH0_SW43			(1<<6)
+#define EPLD_AUDIO_SWITCH0_SW44			(1<<7)
+#define EPLD_AUDIO_SWITCH1		0x208
+#define EPLD_AUDIO_SWITCH1_SW31			(1<<0)
+#define EPLD_AUDIO_SWITCH1_SW32			(1<<1)
+#define EPLD_AUDIO_SWITCH1_SW33			(1<<2)
+#define EPLD_AUDIO_SWITCH1_SW34			(1<<3)
+#define EPLD_AUDIO_SWITCH1_SW51			(1<<4)
+#define EPLD_AUDIO_SWITCH1_SW52			(1<<5)
+#define EPLD_AUDIO_SWITCH1_SW53			(1<<6)
+#define EPLD_AUDIO_SWITCH1_SW54			(1<<7)
+#define EPLD_AUDIO_SWITCH2		0x20a
+#define EPLD_AUDIO_SWITCH1_SW11			(1<<0)
+#define EPLD_AUDIO_SWITCH1_SW12			(1<<1)
+#define EPLD_AUDIO_SWITCH1_SW13			(1<<2)
+#define EPLD_AUDIO_SWITCH1_SW14			(1<<3)
+#define EPLD_AUDIO_SWITCH1_SW21			(1<<4)
+#define EPLD_AUDIO_SWITCH1_SW22			(1<<5)
+#define EPLD_AUDIO_SWITCH1_SW23			(1<<6)
+#define EPLD_AUDIO_SWITCH1_SW24			(1<<7)
+#define EPLD_AUDIO_SPDIFIN		0x20c
+#define EPLD_AUDIO_SPDIFIN_I2CEN		(1<<0)
+#define EPLD_AUDIO_SPDIFIN_SNOTH		(1<<1)
+#define EPLD_AUDIO_SPDIFIN_AD0NVRERR		(1<<2)
+#define EPLD_AUDIO_SPDIFIN_AD1NOTAUDIO		(1<<3)
+#define EPLD_AUDIO_SPDIFIN_AD2U			(1<<4)
+#define EPLD_AUDIO_SPDIFIN_C			(1<<5)
+#define EPLD_AUDIO_SPDIFIN_96KHZ		(1<<6)
+#define EPLD_AUDIO_SPDIFIN_RCBL			(1<<7)
+#define EPLD_AUDIO_SPDIFOUT0		0x20e
+#define EPLD_AUDIO_SPDIFOUT0_I2CEN		(1<<0)
+#define EPLD_AUDIO_SPDIFOUT0_HNOTS		(1<<1)
+#define EPLD_AUDIO_SPDIFOUT0_AD0		(1<<2)
+#define EPLD_AUDIO_SPDIFOUT0_AD1		(1<<3)
+#define EPLD_AUDIO_SPDIFOUT0_AD2		(1<<4)
+#define EPLD_AUDIO_SPDIFOUT0_CEN		(1<<5)
+#define EPLD_AUDIO_SPDIFOUT0_APMS		(1<<6)
+#define EPLD_AUDIO_SPDIFOUT0_TRCBLD		(1<<7)
+#define EPLD_AUDIO_SPDIFOUT1		0x210
+#define EPLD_AUDIO_SPDIFOUT1_SFMT0		(1<<0)
+#define EPLD_AUDIO_SPDIFOUT1_SFMT1		(1<<1)
+#define EPLD_AUDIO_DAC0			0x212
+#define EPLD_AUDIO_DAC0_DIF0			(1<<0)
+#define EPLD_AUDIO_DAC0_DIF1			(1<<1)
+#define EPLD_AUDIO_DAC0_SMUTE			(1<<2)
+#define EPLD_AUDIO_DAC0_ACKS			(1<<3)
+#define EPLD_AUDIO_DAC0_DEM			(1<<4)
+#define EPLD_AUDIO_DAC1			0x214
+#define EPLD_AUDIO_DAC1_DIF0			(1<<0)
+#define EPLD_AUDIO_DAC1_DIF1			(1<<1)
+#define EPLD_AUDIO_DAC1_SMUTE			(1<<2)
+#define EPLD_AUDIO_DAC1_ACKS			(1<<3)
+#define EPLD_AUDIO_DAC1_DEM			(1<<4)
+#define EPLD_AUDIO_DAC2			0x216
+#define EPLD_AUDIO_DAC2_DIF0			(1<<0)
+#define EPLD_AUDIO_DAC2_DIF1			(1<<1)
+#define EPLD_AUDIO_DAC2_SMUTE			(1<<2)
+#define EPLD_AUDIO_DAC2_ACKS			(1<<3)
+#define EPLD_AUDIO_DAC2_DEM0			(1<<4)
+#define EPLD_AUDIO_DAC2_DEM1			(1<<5)
+#define EPLD_AUDIO_DAC2_I2CEN			(1<<6)
+#define EPLD_AUDIO_DAC2_PNOTS			(1<<7)
+#define EPLD_AUDIO_USERLED		0x218
+#define EPLD_AUDIO_USERLED_LD11B		(1<<0)
+#define EPLD_AUDIO_USERLED_LD11T		(1<<1)
+#define EPLD_AUDIO_USERLED_LD10B		(1<<2)
+#define EPLD_AUDIO_USERLED_LD10T		(1<<3)
+
+#endif
-- 
1.5.3.6

