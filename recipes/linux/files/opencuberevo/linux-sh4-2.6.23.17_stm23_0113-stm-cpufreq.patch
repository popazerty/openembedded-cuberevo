sh_stm: support for host sh4 cpu clock frequency scaling

This patch adds cpu clock frequency scaling support for
 - stb7100 platform
 - stx7200 platform
 - stx7111 platform

Signed-off by: Francesco Virlinzi <francesco.virlinzi@st.com>
Index: linux/arch/sh/Kconfig
===================================================================
--- linux.orig/arch/sh/Kconfig	2008-07-01 09:04:13.000000000 +0100
+++ linux/arch/sh/Kconfig	2008-07-01 13:40:31.000000000 +0100
@@ -766,6 +766,15 @@
 
 	  If unsure, say N.
 
+config STM_CPU_FREQ
+	bool "STMicroelectronics CPU Frequency driver"
+	depends on CPU_FREQ && (CPU_SUBTYPE_STB7100 || CPU_SUBTYPE_STX7200 || \
+		                CPU_SUBTYPE_STX7111)
+	select CPU_FREQ_TABLE
+	help
+	  This adds the cpufreq driver for STMicroelectronics micros.
+	  For details, take a look at <file:Documentation/cpu-freq>.
+
 endmenu
 
 source "arch/sh/drivers/Kconfig"
Index: linux/arch/sh/kernel/cpu/sh4/clock-stb7100.c
===================================================================
--- linux.orig/arch/sh/kernel/cpu/sh4/clock-stb7100.c	2008-06-30 14:28:52.000000000 +0100
+++ linux/arch/sh/kernel/cpu/sh4/clock-stb7100.c	2008-07-01 13:32:54.000000000 +0100
@@ -113,6 +113,11 @@
 	&comms_clk,
 };
 
+void* clk_get_iomem(void)
+{
+	return clkgen_base;
+}
+
 int __init clk_init(void)
 {
 	int i, ret = 0;
Index: linux/arch/sh/kernel/cpu/sh4/clock-stx7111.c
===================================================================
--- linux.orig/arch/sh/kernel/cpu/sh4/clock-stx7111.c	2008-06-30 14:28:55.000000000 +0100
+++ linux/arch/sh/kernel/cpu/sh4/clock-stx7111.c	2008-07-01 13:32:54.000000000 +0100
@@ -361,6 +361,11 @@
 	.ops		= &generic_clk_ops,
 };
 
+void* clk_get_iomem(void)
+{
+	return clkgena_base;
+}
+
 int __init clk_init(void)
 {
 	int i, ret;
Index: linux/arch/sh/kernel/cpu/sh4/clock-stx7200.c
===================================================================
--- linux.orig/arch/sh/kernel/cpu/sh4/clock-stx7200.c	2008-06-30 14:28:56.000000000 +0100
+++ linux/arch/sh/kernel/cpu/sh4/clock-stx7200.c	2008-07-01 13:32:54.000000000 +0100
@@ -593,6 +593,11 @@
 	.ops		= &comms_clk_ops
 };
 
+void* clk_get_iomem()
+{
+        return (void*)0xfd700000;
+}
+
 int __init clk_init(void)
 {
 	int i, ret = 0;
Index: linux/arch/sh/kernel/cpu/sh4/cpufreq-stb7100.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ linux/arch/sh/kernel/cpu/sh4/cpufreq-stb7100.c	2008-07-01 13:33:04.000000000 +0100
@@ -0,0 +1,174 @@
+/*
+ * arch/sh/kernel/cpu/sh4/cpufreq-stb7100.c
+ *
+ * Cpufreq driver for the ST40 processors.
+ * Version: 0.1 (7 Jan 2008)
+ *
+ * Copyright (C) 2008 STMicroelectronics
+ * Author: Francesco M. Virlinzi <francesco.virlinzi@st.com>
+ *
+ * This program is under the terms of the
+ * General Public License version 2 ONLY
+ *
+ */
+#include <linux/types.h>
+#include <linux/cpufreq.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/time.h>
+#include <linux/delay.h>	/* loops_per_jiffy */
+#include <linux/cpumask.h>
+#include <linux/smp.h>
+#include <linux/sched.h>	/* set_cpus_allowed() */
+#include <linux/stm/pm.h>
+
+#include <asm/processor.h>
+#include <asm/freq.h>
+#include <asm/io.h>
+#include <asm/clock.h>
+
+#undef  dbg_print
+#ifdef  CONFIG_CPU_FREQ_DEBUG
+#define dbg_print(fmt, args...)  printk("%s: " fmt, __FUNCTION__ , ## args)
+#else
+#define dbg_print(fmt, args...)
+#endif
+
+static struct clk *pll0_clk;
+static struct clk *sh4_clk;
+static struct clk *sh4_ic_clk;
+static struct clk *module_clk;
+static unsigned long clk_iomem;
+
+static inline unsigned long _1_ms_lpj(void)
+{
+	return clk_get_rate(sh4_clk) / (1000 * 2);
+}
+
+#define CLOCKGEN_LOCK		(clk_iomem + 0x00)
+#define ST40_CLK_CTRL 		(clk_iomem + 0x14)
+#define CKGA_CLKOUT_SEL 	(clk_iomem + 0x38)
+
+static struct sh4_ratio {
+	long cpu, bus, per;
+} ratios[] = {
+	{0, 1, 0},		/* 1:1 - 1:2 - 1:4 */
+	{1, 3, 0},		/* 1:2 - 1:4 - 1:4 */
+	{3, 5, 5},		/* 1:4 - 1:8 - 1:8 */
+};
+
+static struct cpufreq_frequency_table *cpu_freqs;
+
+static void st_cpufreq_update_clocks(unsigned int set, int propagate)
+{
+	static unsigned int current_set = 0;
+	unsigned long flag;
+	unsigned long st40_clk_address = ST40_CLK_CTRL;
+	unsigned long l_p_j = _1_ms_lpj();
+
+	l_p_j >>= 3;		/* l_p_j = 125 usec (for each HZ) */
+
+	local_irq_save(flag);
+	iowrite32(0xc0de, CLOCKGEN_LOCK);
+
+	if (set > current_set) {	/* down scaling... */
+		/* it scales l_p_j based on the new frequency */
+		l_p_j >>= 1;	// 266 -> 133 or 133 -> 66.5
+		if ((set + current_set) == 2)
+			l_p_j >>= 1;	// 266 -> 66.5
+
+		asm volatile (".balign	32	\n"
+			      "mov.l	%3, @(8,%0)\n"	// sets the sh4per clock
+			      "mov.l	%2, @(4,%0)\n"	// sets the sh4ic  clock
+			      "mov.l	%1, @(0,%0)\n"	// sets the sh4    clock
+			      "tst	%4, %4	\n"
+			      "1:		\n"
+			      "bf/s	1b	\n"
+			      " dt	%4	\n"
+			::"r" (st40_clk_address),	// 0
+			      "r"(ratios[set].cpu),	// 1
+			      "r"(ratios[set].bus),	// 2
+			      "r"(ratios[set].per),	// 3
+			      "r"(l_p_j)	// 4
+			      :"memory", "t");
+	} else {
+		/* it scales l_p_j based on the new frequency */
+		l_p_j <<= 1;	// 133  -> 266 or 66.5 -> 133
+		if ((set + current_set) == 2)
+			l_p_j <<= 1;	// 66.5 -> 266
+
+		asm volatile (".balign	32	\n"
+			      "mov.l	%1, @(0,%0)\n"	// sets the sh4    clock
+			      "mov.l	%2, @(4,%0)\n"	// sets the sh4ic  clock
+			      "mov.l	%3, @(8,%0)\n"	// sets the sh4per clock
+			      "tst	%4, %4	\n"
+			      "1:		\n"
+			      "bf/s	1b	\n"
+			      " dt	%4	\n"
+			::"r" (st40_clk_address),	// 0
+			      "r"(ratios[set].cpu),	// 1
+			      "r"(ratios[set].bus),	// 2
+			      "r"(ratios[set].per),	// 3
+			      "r"(l_p_j)	// 4
+			      :"memory", "t");
+	}
+
+	iowrite32(0, CLOCKGEN_LOCK);
+	current_set = set;
+	sh4_clk->rate = (cpu_freqs[set].frequency << 3) * 125;
+	sh4_ic_clk->rate = (cpu_freqs[set].frequency << 2) * 125;
+	module_clk->rate = clk_get_rate(pll0_clk) >> 3;
+	if (set == 2)
+		module_clk->rate >>= 1;
+/* The module_clk propagation can create a race condition
+ * on the tmu0 during the suspend/resume...
+ * The race condition basically leaves the TMU0 enabled
+ * with interrupt enabled and the system immediately resume
+ * after a suspend
+ */
+	if (propagate)
+		clk_set_rate(module_clk, module_clk->rate);	/* to propagate... */
+	local_irq_restore(flag);
+}
+
+void *__init st_cpufreq_platform_init(struct cpufreq_frequency_table
+				      *_cpu_freqs)
+{
+	dbg_print("\n");
+
+	if (!_cpu_freqs)
+		return NULL;
+	cpu_freqs = _cpu_freqs;
+
+	pll0_clk = clk_get(NULL, "pll0_clk");
+	sh4_clk = clk_get(NULL, "sh4_clk");
+	sh4_ic_clk = clk_get(NULL, "sh4_ic_clk");
+	module_clk = clk_get(NULL, "module_clk");
+	clk_iomem = (unsigned long)clk_get_iomem();
+
+	if (!pll0_clk) {
+		printk(KERN_ERR "ERROR: on clk_get(pll0_clk)\n");
+		return NULL;
+	}
+	if (!sh4_clk) {
+		printk(KERN_ERR "ERROR: on clk_get(sh4_clk)\n");
+		return NULL;
+	}
+	if (!sh4_ic_clk) {
+		printk(KERN_ERR "ERROR: on clk_get(sh4_ic_clk)\n");
+		return NULL;
+	}
+	if (!module_clk) {
+		printk(KERN_ERR "ERROR: on clk_get(module_clk)\n");
+		return NULL;
+	}
+	if (!clk_iomem)
+		return NULL;
+
+#ifdef CONFIG_CPU_FREQ_DEBUG
+	iowrite8(0, CKGA_CLKOUT_SEL);	/* st40 routed on SYSCLK_OUT */
+#endif
+	return (void *)st_cpufreq_update_clocks;
+}
+
+MODULE_LICENSE("GPL");
Index: linux/arch/sh/kernel/cpu/sh4/cpufreq-stm.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ linux/arch/sh/kernel/cpu/sh4/cpufreq-stm.c	2008-07-01 13:33:04.000000000 +0100
@@ -0,0 +1,204 @@
+/*
+ * arch/sh/kernel/cpu/sh4/cpufreq-stm.c
+ *
+ * Cpufreq driver for the ST40 processors.
+ * Version: 0.1 (7 Jan 2008)
+ *
+ * Copyright (C) 2008 STMicroelectronics
+ * Author: Francesco M. Virlinzi <francesco.virlinzi@st.com>
+ *
+ * This program is under the terms of the
+ * General Public License version 2 ONLY
+ *
+ */
+#include <linux/types.h>
+#include <linux/cpufreq.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/time.h>
+#include <linux/delay.h>	/* loops_per_jiffy */
+#include <linux/cpumask.h>
+#include <linux/smp.h>
+#include <linux/sched.h>	/* set_cpus_allowed() */
+#include <linux/stm/pm.h>
+
+#include <asm/processor.h>
+#include <asm/freq.h>
+#include <asm/io.h>
+#include <asm/clock.h>
+
+#undef  dbg_print
+#ifdef  CONFIG_CPU_FREQ_DEBUG
+#define dbg_print(fmt, args...)  printk("%s: " fmt, __FUNCTION__ , ## args)
+#else
+#define dbg_print(fmt, args...)
+#endif
+
+static struct clk *sh4_clk;
+static struct cpufreq_frequency_table cpu_freqs[] = {
+	{.index = 0,},		/* Really initialised during the boot ... */
+	{.index = 1,},
+	{.index = 2,},
+	{.frequency = CPUFREQ_TABLE_END},
+};
+
+static void (*st_cpufreq_update_clocks) (unsigned int set, int propagate);
+
+/*
+ * Here we notify other drivers of the proposed change and the final change.
+ */
+static int st_cpufreq_setstate(unsigned int cpu, unsigned int set)
+{
+	cpumask_t cpus_allowed;
+	struct cpufreq_freqs freqs = {
+		.cpu = cpu,
+		.old = clk_get_rate(sh4_clk) / 1000,
+		.new = cpu_freqs[set].frequency,
+		.flags = 0,	/* with Zero the system will updates loops_per_j. automatically */
+	};
+
+	dbg_print("\n");
+
+	if (!cpu_online(cpu)) {
+		dbg_print("cpu not online\n");
+		return -ENODEV;
+	}
+	cpus_allowed = current->cpus_allowed;
+	set_cpus_allowed(current, cpumask_of_cpu(cpu));
+	BUG_ON(smp_processor_id() != cpu);
+
+	cpufreq_notify_transition(&freqs, CPUFREQ_PRECHANGE);
+
+	st_cpufreq_update_clocks(set, 1);
+
+	set_cpus_allowed(current, cpus_allowed);
+
+	cpufreq_notify_transition(&freqs, CPUFREQ_POSTCHANGE);	/* updates the loops_per_jiffies */
+
+	return 0;
+}
+
+static int st_cpufreq_init(struct cpufreq_policy *policy)
+{
+	if (!cpu_online(policy->cpu))
+		return -ENODEV;
+
+	dbg_print("\n");
+	/* cpuinfo and default policy values */
+	policy->governor = CPUFREQ_DEFAULT_GOVERNOR;
+	policy->cur = clk_get_rate(sh4_clk) / 1000;
+	policy->cpuinfo.transition_latency = 10;
+
+	return cpufreq_frequency_table_cpuinfo(policy, cpu_freqs);
+}
+
+static int st_cpufreq_verify(struct cpufreq_policy *policy)
+{
+	int ret = cpufreq_frequency_table_verify(policy, cpu_freqs);
+	dbg_print("ret %d\n", ret);
+	return ret;
+}
+
+static int st_cpufreq_target(struct cpufreq_policy *policy,
+			     unsigned int target_freq, unsigned int relation)
+{
+	unsigned int idx = 0;
+	dbg_print("\n");
+	if (cpufreq_frequency_table_target(policy,
+					   &cpu_freqs[0], target_freq, relation,
+					   &idx))
+		return -EINVAL;
+
+	st_cpufreq_setstate(policy->cpu, idx);
+	return 0;
+}
+
+static unsigned int st_cpufreq_get(unsigned int cpu)
+{
+	dbg_print("\n");
+	return clk_get_rate(sh4_clk) / 1000;
+}
+
+#ifdef CONFIG_PM
+static unsigned long pm_old_freq;
+static int st_cpufreq_suspend(struct cpufreq_policy *policy, pm_message_t pmsg)
+{
+	dbg_print("\n");
+	pm_old_freq = st_cpufreq_get(0);	/* save current frequency               */
+	st_cpufreq_update_clocks(0, 0);	/* switch to the highest frequency    */
+	return 0;
+}
+
+static int st_cpufreq_resume(struct cpufreq_policy *policy)
+{
+	int i;
+	dbg_print("\n");
+	for (i = 0; cpu_freqs[i].frequency != CPUFREQ_TABLE_END; ++i)
+		if (cpu_freqs[i].frequency == pm_old_freq)
+			break;
+	st_cpufreq_update_clocks(i, 0);	/* restore the previous frequency */
+	return 0;
+}
+#else
+#define st_cpufreq_suspend      NULL
+#define st_cpufreq_resume       NULL
+#endif
+
+static struct cpufreq_driver st_cpufreq_driver = {
+	.owner = THIS_MODULE,
+	.name = "st40-cpufreq",
+	.init = st_cpufreq_init,
+	.verify = st_cpufreq_verify,
+	.get = st_cpufreq_get,
+	.target = st_cpufreq_target,
+	.suspend = st_cpufreq_suspend,
+	.resume = st_cpufreq_resume,
+	.flags = CPUFREQ_PM_NO_WARN,
+};
+
+void *st_cpufreq_platform_init(struct cpufreq_frequency_table *cpu_freqs);
+
+static int __init st_cpufreq_module_init(void)
+{
+	int idx;
+	dbg_print("\n");
+
+	st_cpufreq_update_clocks = st_cpufreq_platform_init(cpu_freqs);
+
+	if (!st_cpufreq_update_clocks)
+		return -1;
+
+	sh4_clk = clk_get(NULL, "sh4_clk");
+
+	if (!sh4_clk) {
+		printk(KERN_ERR "ERROR: on clk_get(sh4_clk)\n");
+		return -ENODEV;
+	}
+
+	for (idx = 0; idx < (ARRAY_SIZE(cpu_freqs)) - 1; ++idx) {
+		cpu_freqs[idx].frequency =
+		    (clk_get_rate(sh4_clk) / 1000) >> idx;
+		dbg_print("Initialize idx %u @ %u\n", idx,
+			  cpu_freqs[idx].frequency);
+	}
+
+	if (cpufreq_register_driver(&st_cpufreq_driver))
+		return -EINVAL;
+
+	printk(KERN_INFO "st40 cpu frequency registered\n");
+
+	return 0;
+}
+
+static void __exit st_cpufreq_module_exit(void)
+{
+	dbg_print("\n");
+	cpufreq_unregister_driver(&st_cpufreq_driver);
+	st_cpufreq_update_clocks(0, 1);	/* switch to the highest frequency */
+}
+
+module_init(st_cpufreq_module_init);
+module_exit(st_cpufreq_module_exit);
+
+MODULE_DESCRIPTION("cpufreq driver for ST40 Micro");
+MODULE_LICENSE("GPL");
Index: linux/arch/sh/kernel/cpu/sh4/cpufreq-stx7111.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ linux/arch/sh/kernel/cpu/sh4/cpufreq-stx7111.c	2008-07-01 13:33:04.000000000 +0100
@@ -0,0 +1,129 @@
+/*
+ * arch/sh/kernel/cpu/sh4/cpufreq-stx7111.c
+ *
+ * Cpufreq driver for the ST40 processors.
+ * Version: 0.1 (20 Mar 2008)
+ *
+ * Copyright (C) 2008 STMicroelectronics
+ * Author: Francesco M. Virlinzi <francesco.virlinzi@st.com>
+ *
+ * This program is under the terms of the
+ * General Public License version 2 ONLY
+ *
+ */
+#include <linux/types.h>
+#include <linux/cpufreq.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/time.h>
+#include <linux/delay.h>	/* loops_per_jiffy */
+#include <linux/cpumask.h>
+#include <linux/smp.h>
+#include <linux/sched.h>	/* set_cpus_allowed() */
+#include <linux/stm/pm.h>
+
+#include <asm/processor.h>
+#include <asm/freq.h>
+#include <asm/io.h>
+#include <asm/clock.h>
+
+#undef  dbg_print
+#ifdef  CONFIG_CPU_FREQ_DEBUG
+#define dbg_print(fmt, args...)  printk("%s: " fmt, __FUNCTION__ , ## args)
+#else
+#define dbg_print(fmt, args...)
+#endif
+
+static struct clk *sh4_clk;
+static unsigned long clk_iomem;
+static struct cpufreq_frequency_table *cpu_freqs;
+/*				1:1,	  1:2,	    1:4		*/
+unsigned long st40_ratios[] = { 0x10000, 0x10001, 0x10003 };
+
+static inline unsigned long _1_ms_lpj(void)
+{
+	return clk_get_rate(sh4_clk) / (1000 * 2);
+}
+
+#define CKGA_PLL0LS_DIV_CFG(x)		(0x900+((x)*4))
+#define ST40_CLK 	(clk_iomem + CKGA_PLL0LS_DIV_CFG(4))
+
+static void st_cpufreq_update_clocks(unsigned int set,
+				     int not_used_on_this_platform)
+{
+	static unsigned int current_set = 0;
+	unsigned long flag;
+	unsigned long st40_clk = ST40_CLK;
+	unsigned long l_p_j = _1_ms_lpj();
+
+	dbg_print("\n");
+	l_p_j >>= 3;		/* l_p_j = 125 usec (for each HZ) */
+
+	local_irq_save(flag);
+
+	if (set > current_set) {	/* down scaling... */
+		/* it scales l_p_j based on the new frequency */
+		l_p_j >>= 1;	// 450 -> 225 or 225 -> 112.5
+		if ((set + current_set) == 2)
+			l_p_j >>= 1;	// 450 -> 112.5
+
+		asm volatile (".balign	32	\n"
+			      "mov.l	%1, @%0\n"	// sets the st40 clock
+			      "tst	%2, %2	\n"
+			      "1:		\n"
+			      "bf/s	1b	\n"
+			      " dt	%2	\n"
+			::    "r" (st40_clk),		// 0
+			      "r"(st40_ratios[set]),	// 1
+			      "r"(l_p_j)		// 2
+			:	"memory", "t");
+	} else {
+		/* it scales l_p_j based on the new frequency */
+		l_p_j <<= 1;	// 225   -> 450 or 112.5 -> 225
+		if ((set + current_set) == 2)
+			l_p_j <<= 1;	// 112.5 -> 450
+
+		asm volatile (".balign	32	\n"
+			      "mov.l	%1, @%0\n"	// sets the st40 clock
+			      "tst	%2, %2	\n"
+			      "1:		\n"
+			      "bf/s	1b	\n"
+			      " dt	%2	\n"
+			::    "r" (st40_clk),		// 0
+			      "r"(st40_ratios[set]),	// 1
+			      "r"(l_p_j)		// 2
+			:     "memory", "t");
+	}
+
+	current_set = set;
+	sh4_clk->rate = (cpu_freqs[set].frequency << 3) * 125;
+	local_irq_restore(flag);
+}
+
+void *__init st_cpufreq_platform_init(struct cpufreq_frequency_table
+				      *_cpu_freqs)
+{
+	dbg_print("\n");
+
+	if (!_cpu_freqs)
+		return NULL;
+	cpu_freqs = _cpu_freqs;
+
+	sh4_clk = clk_get(NULL, "sh4_clk");
+	clk_iomem = (unsigned long)clk_get_iomem();
+
+	if (!sh4_clk) {
+		printk(KERN_ERR "ERROR: on clk_get(sh4_clk)\n");
+		return NULL;
+	}
+	if (!clk_iomem)
+		return NULL;
+
+#ifdef CONFIG_CPU_FREQ_DEBUG
+	/* route the sh4/2  clock frequenfy */
+	iowrite32(0xc ,clk_iomem+CKGA_CLKOBS_MUX1_CFG);
+#endif
+	return (void *)st_cpufreq_update_clocks;
+}
+
+MODULE_LICENSE("GPL");
Index: linux/arch/sh/kernel/cpu/sh4/cpufreq-stx7200.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ linux/arch/sh/kernel/cpu/sh4/cpufreq-stx7200.c	2008-07-01 13:33:04.000000000 +0100
@@ -0,0 +1,160 @@
+/*
+ * arch/sh/kernel/cpu/sh4/cpufreq-stx7200.c
+ *
+ * Cpufreq driver for the ST40 processors.
+ * Version: 0.1 (7 Jan 2008)
+ *
+ * Copyright (C) 2008 STMicroelectronics
+ * Author: Francesco M. Virlinzi <francesco.virlinzi@st.com>
+ *
+ * This program is under the terms of the
+ * General Public License version 2 ONLY
+ *
+ */
+#include <linux/types.h>
+#include <linux/cpufreq.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/time.h>
+#include <linux/delay.h>
+#include <linux/cpumask.h>
+#include <linux/smp.h>
+#include <linux/sched.h>	/* set_cpus_allowed() */
+#include <linux/stm/pm.h>
+
+#include <asm/processor.h>
+#include <asm/system.h>
+#include <asm/freq.h>
+#include <asm/io.h>
+#include <asm/clock.h>
+
+#undef  dbg_print
+#ifdef  CONFIG_CPU_FREQ_DEBUG
+#define dbg_print(fmt, args...)  printk("%s: " fmt, __FUNCTION__ , ## args)
+#else
+#define dbg_print(fmt, args...)
+#endif
+
+static struct clk *pll0_clk;
+static struct clk *sh4_clk;
+static struct clk *sh4_ic_clk;
+static struct clk *module_clk;
+static unsigned long clk_iomem;
+
+static inline unsigned long _1_ms_lpj(void)
+{
+	return clk_get_rate(sh4_clk) / (1000 * 2);
+}
+
+static struct cpufreq_frequency_table *cpu_freqs;
+
+#define CLKGNA_DIV_CFG		( clk_iomem + 0x10 )
+#define CKGA_CLKOUT_SEL 	( clk_iomem + 0x18)
+#define SH4_CLK_MASK		( 0x1ff << 1 )
+/*
+ *	value: 0  1  2  3  4  5  6     7
+ *	ratio: 1, 2, 3, 4, 6, 8, 1024, 1
+ */
+static unsigned long sh4_ratio[] = {
+/*	  cpu	   bus	    per */
+	(0 << 1) | (1 << 4) | (3 << 7),	/* 1:1 - 1:2 - 1:4 */
+	(1 << 1) | (3 << 4) | (3 << 7),	/* 1:2 - 1:4 - 1:4 */
+	(3 << 1) | (5 << 4) | (5 << 7)	/* 1:4 - 1:8 - 1:8 */
+};
+
+static void st_cpufreq_update_clocks(unsigned int set, int propagate)
+{
+	static unsigned int sh_current_set;
+	unsigned long clks_address = CLKGNA_DIV_CFG;
+	unsigned long clks_value = ctrl_inl(clks_address);
+	unsigned long flag;
+	unsigned long l_p_j = _1_ms_lpj();
+
+	l_p_j >>= 3;		/* l_p_j = 125 usec (for each HZ) */
+
+	if (set > sh_current_set) {	/* down scaling... */
+		l_p_j >>= 1;
+		if ((set + sh_current_set) == 2)
+			l_p_j >>= 1;
+	} else {		/* up scaling... */
+		l_p_j <<= 1;
+		if ((set + sh_current_set) == 2)
+			l_p_j <<= 1;
+	}
+
+	clks_value &= ~SH4_CLK_MASK;
+	clks_value |= sh4_ratio[set];
+
+	local_irq_save(flag);
+	asm volatile (".balign	32	\n"
+		      "mov.l	%1, @%0	\n"
+		      "tst	%2, %2	\n"
+		      "1:		\n"
+		      "bf/s	1b	\n"
+		      " dt	%2	\n"
+		 ::"r" (clks_address),	// 0
+		      "r"(clks_value),	// 1
+		      "r"(l_p_j)	// 2
+		      :"t", "memory");
+
+	dbg_print("\n");
+	sh_current_set = set;
+	sh4_clk->rate = (cpu_freqs[set].frequency << 3) * 125;
+	if (cpu_data->cut_major < 2){
+		sh4_ic_clk->rate = (cpu_freqs[set].frequency << 2) * 125;
+		module_clk->rate = clk_get_rate(pll0_clk) >> 3;
+		if (set == 2)
+			module_clk->rate >>= 1;
+/* The module_clk propagation can create a race condition
+ * on the tmu0 during the suspend/resume...
+ * The race condition basically leaves the TMU0 enabled
+ * with interrupt enabled and the system immediately resume
+ * after a suspend
+ */
+		if (propagate)
+			clk_set_rate(module_clk, module_clk->rate);	/* to propagate... */
+	}
+	local_irq_restore(flag);
+}
+
+void *__init st_cpufreq_platform_init(struct cpufreq_frequency_table
+				      *_cpu_freqs)
+{
+	dbg_print("\n");
+
+	if (!_cpu_freqs)
+		return NULL;
+	cpu_freqs = _cpu_freqs;
+
+	pll0_clk = clk_get(NULL, "pll0_clk");
+	sh4_clk = clk_get(NULL, "sh4_clk");
+	clk_iomem = (unsigned long)clk_get_iomem();
+
+	if (!pll0_clk) {
+		printk(KERN_ERR "ERROR: on clk_get(pll0_clk)\n");
+		return NULL;
+	}
+	if (!sh4_clk) {
+		printk(KERN_ERR "ERROR: on clk_get(sh4_clk)\n");
+		return NULL;
+	}
+	if (!clk_iomem)
+		return NULL;
+	if (cpu_data->cut_major < 2){
+		sh4_ic_clk = clk_get(NULL, "sh4_ic_clk");
+		module_clk = clk_get(NULL, "module_clk");
+		if (!sh4_ic_clk) {
+			printk(KERN_ERR "ERROR: on clk_get(sh4_ic_clk)\n");
+			return NULL;
+		}
+		if (!module_clk) {
+			printk(KERN_ERR "ERROR: on clk_get(module_clk)\n");
+			return NULL;
+		}
+	}
+	ctrl_outl(0xc, CKGA_CLKOUT_SEL);	/* sh4:2 routed on SYSCLK_OUT */
+
+	return (void *)st_cpufreq_update_clocks;
+}
+
+MODULE_LICENSE("GPL");
Index: linux/arch/sh/kernel/cpu/sh4/Makefile
===================================================================
--- linux.orig/arch/sh/kernel/cpu/sh4/Makefile	2008-07-01 09:04:12.000000000 +0100
+++ linux/arch/sh/kernel/cpu/sh4/Makefile	2008-07-01 13:32:54.000000000 +0100
@@ -39,3 +39,11 @@
 clock-$(CONFIG_CPU_SUBTYPE_SH4_202)	+= clock-sh4-202.o
 
 obj-y	+= $(clock-y)
+
+ifdef CONFIG_STM_CPU_FREQ
+obj-y					+= cpufreq-stm.o
+obj-$(CONFIG_CPU_SUBTYPE_STB7100)	+= cpufreq-stb7100.o
+obj-$(CONFIG_CPU_SUBTYPE_STX7111)	+= cpufreq-stx7111.o
+obj-$(CONFIG_CPU_SUBTYPE_STX7200)	+= cpufreq-stx7200.o
+endif
+
Index: linux/drivers/cpufreq/cpufreq.c
===================================================================
--- linux.orig/drivers/cpufreq/cpufreq.c	2007-10-09 21:31:38.000000000 +0100
+++ linux/drivers/cpufreq/cpufreq.c	2008-07-01 13:32:54.000000000 +0100
@@ -1580,7 +1580,7 @@
 	memcpy(&policy->cpuinfo, &data->cpuinfo,
 				sizeof(struct cpufreq_cpuinfo));
 
-	if (policy->min > data->min && policy->min > policy->max) {
+	if (policy->min > data->min && policy->min < policy->max) {
 		ret = -EINVAL;
 		goto error_out;
 	}
Index: linux/include/linux/stm/pm.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ linux/include/linux/stm/pm.h	2008-07-01 13:32:54.000000000 +0100
@@ -0,0 +1,19 @@
+/*
+ * -------------------------------------------------------------------------
+ * <linux_root>/include/linux/stm/pm.h
+ * -------------------------------------------------------------------------
+ * STMicroelectronics
+ * -------------------------------------------------------------------------
+ * Copyright (C) 2008  STMicroelectronics
+ * Author: Francesco M. Virlinzi  <francesco.virlinzi@st.com>
+ *
+ * May be copied or modified under the terms of the GNU General Public
+ * License V.2 ONLY.  See linux/COPYING for more information.
+ *
+ * ------------------------------------------------------------------------- */
+#ifndef __pm_st_h__
+#define __pm_st_h__
+
+void *clk_get_iomem(void);
+
+#endif
