Add implementation of flush_icache_range() suitable for signal handler and kprobes
Remove flush_cache_sigtramp() and change signal.c to use flush_icache_range()

Signed-off-by: Chris Smith <chris.smith@st.com>
Index: linux/arch/sh/mm/cache-sh4.c
===================================================================
--- linux.orig/arch/sh/mm/cache-sh4.c	2007-11-01 17:08:22.540213000 +0000
+++ linux/arch/sh/mm/cache-sh4.c	2007-11-01 18:52:22.945919000 +0000
@@ -1,6 +1,7 @@
 /*
  * arch/sh/mm/cache-sh4.c
  *
+ * Copyright (c) 2007 STMicroelectronics (R&D) Ltd.
  * Copyright (C) 1999, 2000, 2002  Niibe Yutaka
  * Copyright (C) 2001 - 2007  Paul Mundt
  * Copyright (C) 2003  Richard Curnow
@@ -16,6 +17,7 @@
 #include <linux/fs.h>
 #include <asm/mmu_context.h>
 #include <asm/cacheflush.h>
+#include <linux/debugfs.h>
 
 /*
  * The maximum number of pages we support up to when doing ranged dcache
@@ -23,6 +25,7 @@
  * entirety.
  */
 #define MAX_DCACHE_PAGES	64	/* XXX: Tune for ways */
+#define MAX_ICACHE_PAGES	32
 
 static void __flush_dcache_segment_1way(unsigned long start,
 					unsigned long extent);
@@ -182,42 +185,45 @@
 /*
  * Write back the range of D-cache, and purge the I-cache.
  *
- * Called from kernel/module.c:sys_init_module and routine for a.out format.
+ * Called from kernel/module.c:sys_init_module and routine for a.out format,
+ * signal handler code and kprobes code
  */
 void flush_icache_range(unsigned long start, unsigned long end)
 {
-	flush_cache_all();
-}
-
-/*
- * Write back the D-cache and purge the I-cache for signal trampoline.
- * .. which happens to be the same behavior as flush_icache_range().
- * So, we simply flush out a line.
- */
-void __uses_jump_to_uncached flush_cache_sigtramp(unsigned long addr)
-{
-	unsigned long v, index;
-	unsigned long flags;
+	int icacheaddr;
+	unsigned long flags, v;
 	int i;
 
-	v = addr & ~(L1_CACHE_BYTES-1);
-	asm volatile("ocbwb	%0"
-		     : /* no output */
-		     : "m" (__m(v)));
-
-	index = CACHE_IC_ADDRESS_ARRAY |
-			(v & boot_cpu_data.icache.entry_mask);
+       /* If there are too many pages then just blow the caches */
+        if (((end - start) >> PAGE_SHIFT) >= MAX_ICACHE_PAGES) {
+                flush_cache_all();
+       } else {
+               /* selectively flush d-cache then invalidate the i-cache */
+               /* this is inefficient, so only use for small ranges */
+               start &= ~(L1_CACHE_BYTES-1);
+               end += L1_CACHE_BYTES-1;
+               end &= ~(L1_CACHE_BYTES-1);
+
+               local_irq_save(flags);
+               jump_to_uncached();
+
+               for (v = start; v < end; v+=L1_CACHE_BYTES) {
+                       asm volatile("ocbwb     %0"
+                                    : /* no output */
+                                    : "m" (__m(v)));
+
+                       icacheaddr = CACHE_IC_ADDRESS_ARRAY | (
+                                       v & cpu_data->icache.entry_mask);
+
+                       for (i = 0; i < cpu_data->icache.ways;
+                               i++, icacheaddr += cpu_data->icache.way_incr)
+                                       /* Clear i-cache line valid-bit */
+                                       ctrl_outl(0, icacheaddr);
+               }
 
-	local_irq_save(flags);
-	jump_to_uncached();
-
-	for (i = 0; i < boot_cpu_data.icache.ways;
-	     i++, index += boot_cpu_data.icache.way_incr)
-		ctrl_outl(0, index);	/* Clear out Valid-bit */
-
-	back_to_cached();
-	wmb();
-	local_irq_restore(flags);
+		back_to_cached();
+		local_irq_restore(flags);
+	}
 }
 
 static inline void flush_cache_4096(unsigned long start,
@@ -397,9 +403,6 @@
  */
 void flush_cache_mm(struct mm_struct *mm)
 {
-#if 1
-flush_cache_all();
-#else
 	/*
 	 * If cache is only 4k-per-way, there are never any 'aliases'.  Since
 	 * the cache is physically tagged, the data can just be left in there.
@@ -427,7 +430,6 @@
 	/* Only touch the icache if one of the VMAs has VM_EXEC set. */
 	if (mm->exec_vm)
 		flush_icache_all();
-#endif
 }
 
 /*
Index: linux/include/asm-sh/cpu-sh4/cacheflush.h
===================================================================
--- linux.orig/include/asm-sh/cpu-sh4/cacheflush.h	2007-11-01 17:08:24.266220000 +0000
+++ linux/include/asm-sh/cpu-sh4/cacheflush.h	2007-11-01 18:52:22.974919000 +0000
@@ -30,7 +30,6 @@
 #define flush_dcache_mmap_unlock(mapping)	do { } while (0)
 
 void flush_icache_range(unsigned long start, unsigned long end);
-void flush_cache_sigtramp(unsigned long addr);
 void flush_icache_user_range(struct vm_area_struct *vma, struct page *page,
 			     unsigned long addr, int len);
 
Index: linux/arch/sh/kernel/sys_sh.c
===================================================================
--- linux.orig/arch/sh/kernel/sys_sh.c	2007-11-01 17:08:22.493213000 +0000
+++ linux/arch/sh/kernel/sys_sh.c	2007-11-01 18:52:23.004918000 +0000
@@ -317,7 +317,11 @@
 			break;
 	}
 	if (op & CACHEFLUSH_I) {
+#ifdef CONFIG_CPU_SH4
+		flush_icache_range(addr, addr+len);
+#else
 		flush_cache_all();
+#endif
 	}
 
 #endif
Index: linux/arch/sh/kernel/signal.c
===================================================================
--- linux.orig/arch/sh/kernel/signal.c	2007-11-01 17:08:22.486213000 +0000
+++ linux/arch/sh/kernel/signal.c	2007-11-01 18:52:23.027918000 +0000
@@ -394,10 +394,7 @@
 	pr_debug("SIG deliver (%s:%d): sp=%p pc=%08lx pr=%08lx\n",
 		 current->comm, current->pid, frame, regs->pc, regs->pr);
 
-	flush_cache_sigtramp(regs->pr);
-
-	if ((-regs->pr & (L1_CACHE_BYTES-1)) < sizeof(frame->retcode))
-		flush_cache_sigtramp(regs->pr + L1_CACHE_BYTES);
+	flush_icache_range(regs->pr, regs->pr + sizeof(frame->retcode));
 
 	return 0;
 
@@ -474,10 +471,7 @@
 	pr_debug("SIG deliver (%s:%d): sp=%p pc=%08lx pr=%08lx\n",
 		 current->comm, current->pid, frame, regs->pc, regs->pr);
 
-	flush_cache_sigtramp(regs->pr);
-
-	if ((-regs->pr & (L1_CACHE_BYTES-1)) < sizeof(frame->retcode))
-		flush_cache_sigtramp(regs->pr + L1_CACHE_BYTES);
+	flush_icache_range(regs->pr, regs->pr + sizeof(frame->retcode));
 
 	return 0;
 
