sh_stm: add support for hard-wired SSC I2C bus

This patch
 - adds i2c device driver support for a hard-wired SSC I2C bus (without GPIO).
 - adds SSC_BITS_SIZE macro to specify the number ot bits for each SSC in the
   ssc_capability bitmap

Signed-off-by: Francesco Virlinzi <francesco.virlinzi@st.com>
Index: linux/arch/sh/kernel/cpu/sh4/setup-stb7100.c
===================================================================
--- linux.orig/arch/sh/kernel/cpu/sh4/setup-stb7100.c	2008-07-01 13:01:28.000000000 +0100
+++ linux/arch/sh/kernel/cpu/sh4/setup-stb7100.c	2008-07-01 14:12:35.000000000 +0100
@@ -303,7 +303,7 @@
 	int capability = data->capability;
 	struct sysconf_field* ssc_sc;
 
-	for (i=0; i<ARRAY_SIZE(stssc_devices); i++, capability >>= 2) {
+	for (i=0; i<ARRAY_SIZE(stssc_devices); i++, capability >>= SSC_BITS_SIZE) {
 		if(capability & SSC_UNCONFIGURED)
 			continue;
 		if(!i){
Index: linux/arch/sh/kernel/cpu/sh4/setup-stx7105.c
===================================================================
--- linux.orig/arch/sh/kernel/cpu/sh4/setup-stx7105.c	2008-07-01 09:04:12.000000000 +0100
+++ linux/arch/sh/kernel/cpu/sh4/setup-stx7105.c	2008-07-01 14:12:35.000000000 +0100
@@ -330,7 +330,7 @@
 	} };
 
 	for (i=0; i < ARRAY_SIZE(stssc_devices);
-	     i++, capability >>= 2, routing >>= 6) {
+	     i++, capability >>= SSC_BITS_SIZE, routing >>= 6) {
 		struct ssc_pio_t *ssc_pio = stssc_devices[i].dev.platform_data;
 
 		if(capability & SSC_UNCONFIGURED)
Index: linux/arch/sh/kernel/cpu/sh4/setup-stx7111.c
===================================================================
--- linux.orig/arch/sh/kernel/cpu/sh4/setup-stx7111.c	2008-07-01 13:01:28.000000000 +0100
+++ linux/arch/sh/kernel/cpu/sh4/setup-stx7111.c	2008-07-01 14:12:35.000000000 +0100
@@ -217,7 +217,7 @@
 	int capability = data->capability;
 	struct sysconf_field* ssc_sc;
 
-	for (i=0; i < ARRAY_SIZE(stssc_devices); i++, capability >>= 2){
+	for (i=0; i < ARRAY_SIZE(stssc_devices); i++, capability >>= SSC_BITS_SIZE){
 		if(capability & SSC_UNCONFIGURED)
 			continue;
 
Index: linux/arch/sh/kernel/cpu/sh4/setup-stx7200.c
===================================================================
--- linux.orig/arch/sh/kernel/cpu/sh4/setup-stx7200.c	2008-07-01 13:01:28.000000000 +0100
+++ linux/arch/sh/kernel/cpu/sh4/setup-stx7200.c	2008-07-01 14:12:35.000000000 +0100
@@ -546,7 +546,7 @@
 	int capability = data->capability;
 	struct sysconf_field* ssc_sc;
 
-	for (i=0; i<ARRAY_SIZE(stssc_devices); i++, capability >>= 2){
+	for (i=0; i<ARRAY_SIZE(stssc_devices); i++, capability >>= SSC_BITS_SIZE){
 		if(capability & SSC_UNCONFIGURED)
 			continue;
 		/* We only support SSC as master, so always set up as such.
Index: linux/drivers/i2c/busses/i2c-stm.c
===================================================================
--- linux.orig/drivers/i2c/busses/i2c-stm.c	2008-07-01 11:14:12.000000000 +0100
+++ linux/drivers/i2c/busses/i2c-stm.c	2008-07-01 14:12:35.000000000 +0100
@@ -575,6 +575,8 @@
  */
 static void iic_pio_stop(struct iic_ssc *adap)
 {
+	if(!(adap->pio_info)->clk)
+		return; /* ssc hard wired */
 	printk(KERN_WARNING "i2c-stm: doing PIO stop!\n");
 	stpio_set_pin((adap->pio_info)->clk, 0);
 	stpio_configure_pin((adap->pio_info)->clk, STPIO_BIDIR);
@@ -887,6 +889,9 @@
 		return -ENODEV;
 	}
 
+	if(pio_info->pio[0].pio_port==0xff) /* this means it doesn't use GPIO */
+		goto i2c_hard_wired;
+
 	pio_info->clk = stpio_request_set_pin(pio_info->pio[0].pio_port,
 					  pio_info->pio[0].pio_pin,
 				"I2C Clock", STPIO_ALT_BIDIR, 1);
@@ -902,6 +907,8 @@
 		printk(KERN_ERR "%s: Faild to sda pin allocation\n",__FUNCTION__);
 		return -ENODEV;
 	}
+
+i2c_hard_wired:
 	pdev->dev.driver_data = i2c_stm;
 	i2c_stm->adapter.id = I2C_HW_STM_SSC;
 	i2c_stm->adapter.timeout = 2;
@@ -939,8 +946,10 @@
 	/* mem */
 	devm_iounmap(&pdev->dev, iic_stm->base);
 	/* pio */
-	stpio_free_pin(pio_info->clk);
-	stpio_free_pin(pio_info->sdout);
+	if(pio_info->clk){
+		stpio_free_pin(pio_info->clk);
+		stpio_free_pin(pio_info->sdout);
+	}
 	/* kmem */
 	devm_kfree(&pdev->dev, iic_stm);
 	return 0;
Index: linux/include/linux/stm/soc.h
===================================================================
--- linux.orig/include/linux/stm/soc.h	2008-07-01 13:01:28.000000000 +0100
+++ linux/include/linux/stm/soc.h	2008-07-01 14:12:35.000000000 +0100
@@ -17,12 +17,14 @@
 #define SSC_I2C_CAPABILITY  0x0
 #define SSC_SPI_CAPABILITY  0x1
 #define SSC_UNCONFIGURED    0x2
+
+#define SSC_BITS_SIZE       0x2
 /*
  *   This macro could be used to build the capability field
  *   of struct plat_ssc_data for each SoC
  */
 #define ssc_capability(idx_ssc, cap)  \
-         ( (cap) & (SSC_I2C_CAPABILITY | SSC_SPI_CAPABILITY | SSC_UNCONFIGURED) ) << ((idx_ssc)*2)
+         ( (cap) & (SSC_I2C_CAPABILITY | SSC_SPI_CAPABILITY | SSC_UNCONFIGURED) ) << ((idx_ssc)*SSC_BITS_SIZE)
 
 #define ssc0_has(cap)  ssc_capability(0,cap)
 #define ssc1_has(cap)  ssc_capability(1,cap)
