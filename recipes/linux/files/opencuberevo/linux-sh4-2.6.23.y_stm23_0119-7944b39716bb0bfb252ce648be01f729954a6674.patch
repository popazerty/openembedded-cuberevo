From 7944b39716bb0bfb252ce648be01f729954a6674 Mon Sep 17 00:00:00 2001
From: Pawel MOLL <pawel.moll@st.com>
Date: Wed, 6 May 2009 10:46:05 +0100
Subject: [PATCH] stm_fdma: FDMA platform definitions cleanup

This patch cleans FDMA platform definitions, in particular:
- removes "fdma-plat.h", getting rid of named constants for base
  addesses etc. and moving valid declarations to "soc.h" header
- splits hardware- and firmware-related registers descriptions,
- changes the driver name to a generic one and firmware-containing
  headers to "follow the trend",
- removes "fdma-reqs.h" - request lines enumerations for
  7100/7109/7200 (never defined for other SOCs) and updates relevant
  drivers & BSPs,
- splits request line crossbar driver into separate file with
  designated API between it and the main driver

Signed-off-by: Pawel Moll <pawel.moll@st.com>
---
 arch/sh/kernel/cpu/sh4/setup-stb7100.c   |  254 +++---
 arch/sh/kernel/cpu/sh4/setup-stx5197.c   |   89 +--
 arch/sh/kernel/cpu/sh4/setup-stx7105.c   |  168 ++---
 arch/sh/kernel/cpu/sh4/setup-stx7111.c   |  170 ++---
 arch/sh/kernel/cpu/sh4/setup-stx7141.c   |  168 ++---
 arch/sh/kernel/cpu/sh4/setup-stx7200.c   |  185 ++---
 drivers/net/smsc_911x/st40-shdma.c       |    9 +-
 drivers/serial/stasc.c                   |    1 -
 drivers/stm/Makefile                     |    2 +-
 drivers/stm/fdma-xbar.c                  |  100 +++
 drivers/stm/fdma.c                       | 1370 ++++++++++++++++++++++++++++++
 drivers/stm/fdma.h                       |   70 ++-
 include/linux/stm/fdma_firmware_7100.h   |  719 ++++++++++++++++
 include/linux/stm/fdma_firmware_7109c2.h |  704 +++++++++++++++
 include/linux/stm/fdma_firmware_7109c3.h |  737 ++++++++++++++++
 include/linux/stm/fdma_firmware_7200.h   |  771 +++++++++++++++++
 include/linux/stm/soc.h                  |   60 ++
 17 files changed, 4980 insertions(+), 597 deletions(-)
 create mode 100644 drivers/stm/fdma-xbar.c
 create mode 100644 drivers/stm/fdma.c
 create mode 100644 include/linux/stm/fdma_firmware_7100.h
 create mode 100644 include/linux/stm/fdma_firmware_7109c2.h
 create mode 100644 include/linux/stm/fdma_firmware_7109c3.h
 create mode 100644 include/linux/stm/fdma_firmware_7200.h

diff --git a/arch/sh/kernel/cpu/sh4/setup-stb7100.c b/arch/sh/kernel/cpu/sh4/setup-stb7100.c
index 295f4b6..d9635ef 100644
--- a/arch/sh/kernel/cpu/sh4/setup-stb7100.c
+++ b/arch/sh/kernel/cpu/sh4/setup-stb7100.c
@@ -1,5 +1,5 @@
 /*
- * STx710x Setup
+ * STx7100/STx7109 Setup
  *
  * Copyright (C) 2007 STMicroelectronics Limited
  * Author: Stuart Menefy <stuart.menefy@st.com>
@@ -24,8 +24,6 @@
 #include <linux/dma-mapping.h>
 #include <asm/sci.h>
 #include <asm/irq-ilc.h>
-#include <linux/stm/fdma-plat.h>
-#include <linux/stm/fdma-reqs.h>
 
 static unsigned long chip_revision, chip_7109;
 static struct sysconf_field *sys_cfg7_0;
@@ -152,138 +150,148 @@ void __init stx7100_configure_usb(void)
 
 #ifdef CONFIG_STM_DMA
 
-#include <linux/stm/7100_fdma2_firmware.h>
-#include <linux/stm/7109_cut2_fdma2_firmware.h>
-#include <linux/stm/7109_cut3_fdma2_firmware.h>
-
-static struct fdma_regs stb7100_fdma_regs = {
-	.fdma_id		= FDMA2_ID,
-	.fdma_ver		= FDAM2_VER,
-	.fdma_en		= FDMA2_ENABLE_REG,
-	.fdma_clk_gate		= FDMA2_CLOCKGATE,
-	.fdma_rev_id		= FDMA2_REV_ID,
-	.fdma_cmd_statn		= STB7100_FDMA_CMD_STATn_REG,
-	.fdma_ptrn		= STB7100_FDMA_PTR_REG,
-	.fdma_cntn		= STB7100_FDMA_COUNT_REG,
-	.fdma_saddrn		= STB7100_FDMA_SADDR_REG,
-	.fdma_daddrn		= STB7100_FDMA_DADDR_REG,
-	.fdma_req_ctln		= STB7100_FDMA_REQ_CTLn_REG,
-	.fdma_cmd_sta		= FDMA2_CMD_MBOX_STAT_REG,
-	.fdma_cmd_set		= FDMA2_CMD_MBOX_SET_REG,
-	.fdma_cmd_clr		= FDMA2_CMD_MBOX_CLR_REG,
-	.fdma_cmd_mask		= FDMA2_CMD_MBOX_MASK_REG,
-	.fdma_int_sta		= FDMA2_INT_STAT_REG,
-	.fdma_int_set		= FDMA2_INT_SET_REG,
-	.fdma_int_clr		= FDMA2_INT_CLR_REG,
-	.fdma_int_mask		= FDMA2_INT_MASK_REG,
-	.fdma_sync_reg		= FDMA2_SYNCREG,
-	.fdma_dmem_region	= STB7100_DMEM_OFFSET,
-	.fdma_imem_region	= STB7100_IMEM_OFFSET,
-};
+#include <linux/stm/fdma_firmware_7100.h>
+#include <linux/stm/fdma_firmware_7109c2.h>
+#include <linux/stm/fdma_firmware_7109c3.h>
 
-static struct fdma_regs stb7109_fdma_regs = {
-	.fdma_id		= FDMA2_ID,
-	.fdma_ver		= FDAM2_VER,
-	.fdma_en		= FDMA2_ENABLE_REG,
-	.fdma_clk_gate		= FDMA2_CLOCKGATE,
-	.fdma_rev_id		= FDMA2_REV_ID,
-	.fdma_cmd_statn		= STB7109_FDMA_CMD_STATn_REG,
-	.fdma_ptrn		= STB7109_FDMA_PTR_REG,
-	.fdma_cntn		= STB7109_FDMA_COUNT_REG,
-	.fdma_saddrn		= STB7109_FDMA_SADDR_REG,
-	.fdma_daddrn		= STB7109_FDMA_DADDR_REG,
-	.fdma_req_ctln		= STB7109_FDMA_REQ_CTLn_REG,
-	.fdma_cmd_sta		= FDMA2_CMD_MBOX_STAT_REG,
-	.fdma_cmd_set		= FDMA2_CMD_MBOX_SET_REG,
-	.fdma_cmd_clr		= FDMA2_CMD_MBOX_CLR_REG,
-	.fdma_cmd_mask		= FDMA2_CMD_MBOX_MASK_REG,
-	.fdma_int_sta		= FDMA2_INT_STAT_REG,
-	.fdma_int_set		= FDMA2_INT_SET_REG,
-	.fdma_int_clr		= FDMA2_INT_CLR_REG,
-	.fdma_int_mask		= FDMA2_INT_MASK_REG,
-	.fdma_sync_reg		= FDMA2_SYNCREG,
-	.fdma_dmem_region	= STB7109_DMEM_OFFSET,
-	.fdma_imem_region	= STB7109_IMEM_OFFSET,
+static struct stm_plat_fdma_hw stx7100_fdma_hw = {
+	.slim_regs = {
+		.id       = 0x0000 + (0x000 << 2), /* 0x0000 */
+		.ver      = 0x0000 + (0x001 << 2), /* 0x0004 */
+		.en       = 0x0000 + (0x002 << 2), /* 0x0008 */
+		.clk_gate = 0x0000 + (0x003 << 2), /* 0x000c */
+	},
+	.periph_regs = {
+		.sync_reg = 0x8000 + (0xfe2 << 2), /* 0xbf88 */
+		.cmd_sta  = 0x8000 + (0xff0 << 2), /* 0xbfc0 */
+		.cmd_set  = 0x8000 + (0xff1 << 2), /* 0xbfc4 */
+		.cmd_clr  = 0x8000 + (0xff2 << 2), /* 0xbfc8 */
+		.cmd_mask = 0x8000 + (0xff3 << 2), /* 0xbfcc */
+		.int_sta  = 0x8000 + (0xff4 << 2), /* 0xbfd0 */
+		.int_set  = 0x8000 + (0xff5 << 2), /* 0xbfd4 */
+		.int_clr  = 0x8000 + (0xff6 << 2), /* 0xbfd8 */
+		.int_mask = 0x8000 + (0xff7 << 2), /* 0xbfdc */
+	},
+	.dmem_offset = 0x8000,
+	.dmem_size   = 0x600 << 2, /* 1536 * 4 = 6144 */
+	.imem_offset = 0xc000,
+	.imem_size   = 0xa00 << 2, /* 2560 * 4 = 10240 */
 };
 
-static struct fdma_platform_device_data stb7109_C2_fdma_plat_data = {
-	.registers_ptr = &stb7109_fdma_regs,
+static struct stm_plat_fdma_data stx7100_fdma_platform_data = {
+	.hw = &stx7100_fdma_hw,
+	.fw = &stm_fdma_firmware_7100,
 	.min_ch_num = CONFIG_MIN_STM_DMA_CHANNEL_NR,
 	.max_ch_num = CONFIG_MAX_STM_DMA_CHANNEL_NR,
-	.fw_device_name = "stb7109_fdmav2.8.bin",
-	.fw.data_reg = (unsigned long*)&STB7109_C2_DMEM_REGION,
-	.fw.imem_reg = (unsigned long*)&STB7109_C2_IMEM_REGION,
-	.fw.imem_fw_sz = STB7109_C2_IMEM_FIRMWARE_SZ,
-	.fw.dmem_fw_sz = STB7109_C2_DMEM_FIRMWARE_SZ,
-	.fw.dmem_len = STB7109_C2_DMEM_REGION_LENGTH,
-	.fw.imem_len = STB7109_C2_IMEM_REGION_LENGTH
 };
 
-static struct fdma_platform_device_data stb7109_C3_fdma_plat_data = {
-	.registers_ptr =(void*) &stb7109_fdma_regs,
+static struct stm_plat_fdma_hw stx7109c2_fdma_hw = {
+	.slim_regs = {
+		.id       = 0x0000 + (0x000 << 2), /* 0x0000 */
+		.ver      = 0x0000 + (0x001 << 2), /* 0x0004 */
+		.en       = 0x0000 + (0x002 << 2), /* 0x0008 */
+		.clk_gate = 0x0000 + (0x003 << 2), /* 0x000c */
+	},
+	.periph_regs = {
+		.sync_reg = 0x8000 + (0xfe2 << 2), /* 0xbf88 */
+		.cmd_sta  = 0x8000 + (0xff0 << 2), /* 0xbfc0 */
+		.cmd_set  = 0x8000 + (0xff1 << 2), /* 0xbfc4 */
+		.cmd_clr  = 0x8000 + (0xff2 << 2), /* 0xbfc8 */
+		.cmd_mask = 0x8000 + (0xff3 << 2), /* 0xbfcc */
+		.int_sta  = 0x8000 + (0xff4 << 2), /* 0xbfd0 */
+		.int_set  = 0x8000 + (0xff5 << 2), /* 0xbfd4 */
+		.int_clr  = 0x8000 + (0xff6 << 2), /* 0xbfd8 */
+		.int_mask = 0x8000 + (0xff7 << 2), /* 0xbfdc */
+	},
+	.dmem_offset = 0x8000,
+	.dmem_size   = 0x600 << 2, /* 1536 * 4 = 6144 */
+	.imem_offset = 0xc000,
+	.imem_size   = 0xa00 << 2, /* 2560 * 4 = 10240 */
+};
+
+static struct stm_plat_fdma_data stx7109c2_fdma_platform_data = {
+	.hw = &stx7109c2_fdma_hw,
+	.fw = &stm_fdma_firmware_7109c2,
 	.min_ch_num = CONFIG_MIN_STM_DMA_CHANNEL_NR,
-	.max_ch_num  =CONFIG_MAX_STM_DMA_CHANNEL_NR,
-	.fw_device_name = "stb7109_fdmav3.0.bin",
-	.fw.data_reg = (unsigned long*)&STB7109_C3_DMEM_REGION,
-	.fw.imem_reg = (unsigned long*)&STB7109_C3_IMEM_REGION,
-	.fw.imem_fw_sz = STB7109_C3_IMEM_FIRMWARE_SZ,
-	.fw.dmem_fw_sz = STB7109_C3_DMEM_FIRMWARE_SZ,
-	.fw.dmem_len = STB7109_C3_DMEM_REGION_LENGTH,
-	.fw.imem_len = STB7109_C3_IMEM_REGION_LENGTH
+	.max_ch_num = CONFIG_MAX_STM_DMA_CHANNEL_NR,
+};
 
+static struct stm_plat_fdma_hw stx7109c3_fdma_hw = {
+	.slim_regs = {
+		.id       = 0x0000 + (0x000 << 2), /* 0x0000 */
+		.ver      = 0x0000 + (0x001 << 2), /* 0x0004 */
+		.en       = 0x0000 + (0x002 << 2), /* 0x0008 */
+		.clk_gate = 0x0000 + (0x003 << 2), /* 0x000c */
+	},
+	.periph_regs = {
+		.sync_reg = 0x8000 + (0xfe2 << 2), /* 0xbf88 */
+		.cmd_sta  = 0x8000 + (0xff0 << 2), /* 0xbfc0 */
+		.cmd_set  = 0x8000 + (0xff1 << 2), /* 0xbfc4 */
+		.cmd_clr  = 0x8000 + (0xff2 << 2), /* 0xbfc8 */
+		.cmd_mask = 0x8000 + (0xff3 << 2), /* 0xbfcc */
+		.int_sta  = 0x8000 + (0xff4 << 2), /* 0xbfd0 */
+		.int_set  = 0x8000 + (0xff5 << 2), /* 0xbfd4 */
+		.int_clr  = 0x8000 + (0xff6 << 2), /* 0xbfd8 */
+		.int_mask = 0x8000 + (0xff7 << 2), /* 0xbfdc */
+	},
+	.dmem_offset = 0x8000,
+	.dmem_size   = 0x800 << 2, /* 2048 * 4 = 8192 */
+	.imem_offset = 0xc000,
+	.imem_size   = 0x1000 << 2, /* 4096 * 4 = 16384 */
 };
 
-static struct fdma_platform_device_data stb7100_Cx_fdma_plat_data = {
-	.registers_ptr =(void*) &stb7100_fdma_regs,
+static struct stm_plat_fdma_data stx7109c3_fdma_platform_data = {
+	.hw = &stx7109c3_fdma_hw,
+	.fw = &stm_fdma_firmware_7109c3,
 	.min_ch_num = CONFIG_MIN_STM_DMA_CHANNEL_NR,
-	.max_ch_num  =CONFIG_MAX_STM_DMA_CHANNEL_NR,
-	.fw_device_name = "stb7100_fdmav2.8.bin",
-	.fw.data_reg = (unsigned long*)&STB7100_DMEM_REGION,
-	.fw.imem_reg = (unsigned long*)&STB7100_IMEM_REGION,
-	.fw.imem_fw_sz = STB7100_IMEM_FIRMWARE_SZ,
-	.fw.dmem_fw_sz = STB7100_DMEM_FIRMWARE_SZ,
-	.fw.dmem_len = STB7100_DMEM_REGION_LENGTH,
-	.fw.imem_len = STB7100_IMEM_REGION_LENGTH
+	.max_ch_num = CONFIG_MAX_STM_DMA_CHANNEL_NR,
 };
 
 #endif /* CONFIG_STM_DMA */
 
-static struct platform_device fdma_710x_device = {
-	.name		= "stmfdma",
+static struct platform_device stx7100_fdma_device = {
+	.name		= "stm-fdma",
 	.id		= -1,
 	.num_resources	= 2,
-	.resource = (struct resource[2]) {
-		[0] = {
-			.start = STB7100_FDMA_BASE,
-			.end   = STB7100_FDMA_BASE + 0xffff,
+	.resource = (struct resource[]) {
+		{
+			.start = 0x19220000,
+			.end   = 0x1922ffff,
 			.flags = IORESOURCE_MEM,
-		},
-		[1] = {
-			.start = LINUX_FDMA_STB7100_IRQ_VECT,
-			.end   = LINUX_FDMA_STB7100_IRQ_VECT,
+		}, {
+			.start = 140,
+			.end   = 140,
 			.flags = IORESOURCE_IRQ,
 		},
 	},
 };
 
-static void fdma_setup(int chip_7109, int chip_revision)
+static void stx7100_fdma_setup(void)
 {
 #ifdef CONFIG_STM_DMA
-	if(chip_7109){
-		switch (chip_revision) {
+	switch (cpu_data->type) {
+	case CPU_STB7100:
+		stx7100_fdma_device.dev.platform_data =
+				&stx7100_fdma_platform_data;
+		break;
+	case CPU_STB7109:
+		switch (cpu_data->cut_major) {
 		case 1:
 			BUG();
 			break;
 		case 2:
-			fdma_710x_device.dev.platform_data =(void*) &stb7109_C2_fdma_plat_data;
+			stx7100_fdma_device.dev.platform_data =
+					&stx7109c2_fdma_platform_data;
 			break;
 		default:
-			fdma_710x_device.dev.platform_data =(void*) &stb7109_C3_fdma_plat_data;
+			stx7100_fdma_device.dev.platform_data =
+					&stx7109c3_fdma_platform_data;
 			break;
 		}
-	} else {
-		/* 7100 */
-		fdma_710x_device.dev.platform_data =(void*) &stb7100_Cx_fdma_plat_data;
+		break;
+	default:
+		BUG();
+		break;
 	}
 #endif
 }
@@ -692,17 +700,17 @@ static struct platform_device stm_stasc_devices[] = {
 };
 
 static unsigned int __initdata stm_stasc_fdma_requests_7100[][2] = {
-	{ STB7100_FDMA_REQ_UART_0_RX, STB7100_FDMA_REQ_UART_0_TX },
-	{ STB7100_FDMA_REQ_UART_1_RX, STB7100_FDMA_REQ_UART_1_TX },
-	{ STB7100_FDMA_REQ_UART_2_RX, STB7100_FDMA_REQ_UART_2_TX },
-	{ STB7100_FDMA_REQ_UART_3_RX, STB7100_FDMA_REQ_UART_3_TX },
+	{ 14, 18 },
+	{ 15, 19 },
+	{ 16, 20 },
+	{ 17, 21 },
 };
 
 static unsigned int __initdata stm_stasc_fdma_requests_7109[][2] = {
-	{ STB7109_FDMA_REQ_UART_0_RX, STB7109_FDMA_REQ_UART_0_TX },
-	{ STB7109_FDMA_REQ_UART_1_RX, STB7109_FDMA_REQ_UART_1_TX },
-	{ STB7109_FDMA_REQ_UART_2_RX, STB7109_FDMA_REQ_UART_2_TX },
-	{ STB7109_FDMA_REQ_UART_3_RX, STB7109_FDMA_REQ_UART_3_TX },
+	{ 12, 16 },
+	{ 13, 17 },
+	{ 14, 18 },
+	{ 15, 19 },
 };
 
 /*
@@ -878,20 +886,20 @@ static struct platform_device ilc3_device = {
 
 /* Pre-arch initialisation ------------------------------------------------- */
 
-static int __init stx710x_postcore_setup(void)
+static int __init stx7100_postcore_setup(void)
 {
 	emi_init(0, 0x1a100000);
 
 	return 0;
 }
-postcore_initcall(stx710x_postcore_setup);
+postcore_initcall(stx7100_postcore_setup);
 
 /* Late resources ---------------------------------------------------------- */
 
-static struct platform_device *stx710x_devices[] __initdata = {
+static struct platform_device *stx7100_devices[] __initdata = {
 	&sci_device,
 	&wdt_device,
-	&fdma_710x_device,
+	&stx7100_fdma_device,
 	&sysconf_device,
 	&ilc3_device,
 	&rtc_device,
@@ -901,18 +909,18 @@ static struct platform_device *stx710x_devices[] __initdata = {
 
 #include "./platform-pm-stb7100.c"
 
-static int __init stx710x_devices_setup(void)
+static int __init stx7100_devices_setup(void)
 {
-	fdma_setup(chip_7109, chip_revision);
+	stx7100_fdma_setup();
 	pio_late_setup();
 
-	platform_add_pm_devices(stx710x_pm_devices,
-				ARRAY_SIZE(stx710x_pm_devices));
+	platform_add_pm_devices(stx7100_pm_devices,
+				ARRAY_SIZE(stx7100_pm_devices));
 
-	return platform_add_devices(stx710x_devices,
-				    ARRAY_SIZE(stx710x_devices));
+	return platform_add_devices(stx7100_devices,
+				    ARRAY_SIZE(stx7100_devices));
 }
-device_initcall(stx710x_devices_setup);
+device_initcall(stx7100_devices_setup);
 
 /* Interrupt initialisation ------------------------------------------------ */
 
diff --git a/arch/sh/kernel/cpu/sh4/setup-stx5197.c b/arch/sh/kernel/cpu/sh4/setup-stx5197.c
index ca3cbf9..1676ce0 100644
--- a/arch/sh/kernel/cpu/sh4/setup-stx5197.c
+++ b/arch/sh/kernel/cpu/sh4/setup-stx5197.c
@@ -19,8 +19,6 @@
 #include <linux/phy.h>
 #include <linux/stm/sysconf.h>
 #include <linux/stm/emi.h>
-#include <linux/stm/fdma-plat.h>
-#include <linux/stm/fdma-reqs.h>
 #include <linux/mtd/nand.h>
 #include <linux/mtd/partitions.h>
 #include <linux/dma-mapping.h>
@@ -95,70 +93,63 @@ void __init stx5197_configure_usb(void)
 
 #ifdef CONFIG_STM_DMA
 
-#include <linux/stm/7200_cut1_fdma2_firmware.h>
-
-static struct fdma_regs stx5197_fdma_regs = {
-	.fdma_id = FDMA2_ID,
-	.fdma_ver = FDAM2_VER,
-	.fdma_en = FDMA2_ENABLE_REG,
-	.fdma_clk_gate = FDMA2_CLOCKGATE,
-	.fdma_rev_id = FDMA2_REV_ID,
-	.fdma_cmd_statn = STB7200_FDMA_CMD_STATn_REG,
-	.fdma_ptrn = STB7200_FDMA_PTR_REG,
-	.fdma_cntn = STB7200_FDMA_COUNT_REG,
-	.fdma_saddrn = STB7200_FDMA_SADDR_REG,
-	.fdma_daddrn = STB7200_FDMA_DADDR_REG,
-	.fdma_req_ctln = STB7200_FDMA_REQ_CTLn_REG,
-	.fdma_cmd_sta = FDMA2_CMD_MBOX_STAT_REG,
-	.fdma_cmd_set = FDMA2_CMD_MBOX_SET_REG,
-	.fdma_cmd_clr = FDMA2_CMD_MBOX_CLR_REG,
-	.fdma_cmd_mask = FDMA2_CMD_MBOX_MASK_REG,
-	.fdma_int_sta = FDMA2_INT_STAT_REG,
-	.fdma_int_set = FDMA2_INT_SET_REG,
-	.fdma_int_clr = FDMA2_INT_CLR_REG,
-	.fdma_int_mask = FDMA2_INT_MASK_REG,
-	.fdma_sync_reg = FDMA2_SYNCREG,
-	.fdma_dmem_region = STX7111_DMEM_OFFSET,
-	.fdma_imem_region = STX7111_IMEM_OFFSET,
+#include <linux/stm/fdma_firmware_7200.h>
+
+static struct stm_plat_fdma_hw stx5197_fdma_hw = {
+	.slim_regs = {
+		.id       = 0x0000 + (0x000 << 2), /* 0x0000 */
+		.ver      = 0x0000 + (0x001 << 2), /* 0x0004 */
+		.en       = 0x0000 + (0x002 << 2), /* 0x0008 */
+		.clk_gate = 0x0000 + (0x003 << 2), /* 0x000c */
+	},
+	.periph_regs = {
+		.sync_reg = 0x8000 + (0xfe2 << 2), /* 0xbf88 */
+		.cmd_sta  = 0x8000 + (0xff0 << 2), /* 0xbfc0 */
+		.cmd_set  = 0x8000 + (0xff1 << 2), /* 0xbfc4 */
+		.cmd_clr  = 0x8000 + (0xff2 << 2), /* 0xbfc8 */
+		.cmd_mask = 0x8000 + (0xff3 << 2), /* 0xbfcc */
+		.int_sta  = 0x8000 + (0xff4 << 2), /* 0xbfd0 */
+		.int_set  = 0x8000 + (0xff5 << 2), /* 0xbfd4 */
+		.int_clr  = 0x8000 + (0xff6 << 2), /* 0xbfd8 */
+		.int_mask = 0x8000 + (0xff7 << 2), /* 0xbfdc */
+	},
+	.dmem_offset = 0x8000,
+	.dmem_size   = 0x800 << 2, /* 2048 * 4 = 8192 */
+	.imem_offset = 0xc000,
+	.imem_size   = 0x1000 << 2, /* 4096 * 4 = 16384 */
 };
 
-static struct fdma_platform_device_data stx5197_fdma_plat_data = {
-	.registers_ptr = &stx5197_fdma_regs,
+static struct stm_plat_fdma_data stx5197_fdma_platform_data = {
+	.hw = &stx5197_fdma_hw,
+	.fw = &stm_fdma_firmware_7200,
 	.min_ch_num = CONFIG_MIN_STM_DMA_CHANNEL_NR,
 	.max_ch_num = CONFIG_MAX_STM_DMA_CHANNEL_NR,
-	.fw_device_name = "stb7200_v1.4.bin",
-	.fw.data_reg = (unsigned long *)&STB7200_DMEM_REGION,
-	.fw.imem_reg = (unsigned long *)&STB7200_IMEM_REGION,
-	.fw.imem_fw_sz = STB7200_IMEM_FIRMWARE_SZ,
-	.fw.dmem_fw_sz = STB7200_DMEM_FIRMWARE_SZ,
-	.fw.dmem_len = STB7200_DMEM_REGION_LENGTH,
-	.fw.imem_len = STB7200_IMEM_REGION_LENGTH
 };
 
-#define stx5197_fdma_plat_data_addr &stx5197_fdma_plat_data
+#define stx5197_fdma_platform_data_addr &stx5197_fdma_platform_data
+
 #else
-#define stx5197_fdma_plat_data_addr NULL
+
+#define stx5197_fdma_platform_data_addr NULL
+
 #endif /* CONFIG_STM_DMA */
 
-static struct platform_device fdma_device = {
-	.name		= "stmfdma",
-	.id		= -1,
+static struct platform_device stx5197_fdma_device = {
+	.name		= "stm-fdma",
+	.id		= 0,
 	.num_resources	= 2,
-	.resource = (struct resource[2]) {
-		[0] = {
+	.resource = (struct resource[]) {
+		{
 			.start = 0xfdb00000,
 			.end   = 0xfdb0ffff,
 			.flags = IORESOURCE_MEM,
-		},
-		[1] = {
+		}, {
 			.start = ILC_IRQ(34),
 			.end   = ILC_IRQ(34),
 			.flags = IORESOURCE_IRQ,
 		},
 	},
-	.dev = {
-		.platform_data = stx5197_fdma_plat_data_addr,
-	},
+	.dev.platform_data = stx5197_fdma_platform_data_addr,
 };
 
 /* SSC resources ----------------------------------------------------------- */
@@ -752,7 +743,7 @@ static int __init stx5197_subsys_setup(void)
 subsys_initcall(stx5197_subsys_setup);
 
 static struct platform_device *stx5197_devices[] __initdata = {
-	&fdma_device,
+	&stx5197_fdma_device,
 	&stx5197_sysconf_devices[0],
 	&stx5197_sysconf_devices[1],
 	&ilc3_device,
diff --git a/arch/sh/kernel/cpu/sh4/setup-stx7105.c b/arch/sh/kernel/cpu/sh4/setup-stx7105.c
index c534f16..beadb4f 100644
--- a/arch/sh/kernel/cpu/sh4/setup-stx7105.c
+++ b/arch/sh/kernel/cpu/sh4/setup-stx7105.c
@@ -20,8 +20,6 @@
 #include <linux/stm/sysconf.h>
 #include <linux/stm/emi.h>
 #include <linux/pata_platform.h>
-#include <linux/stm/fdma-plat.h>
-#include <linux/stm/fdma-reqs.h>
 #include <linux/mtd/nand.h>
 #include <linux/mtd/partitions.h>
 #include <linux/dma-mapping.h>
@@ -192,117 +190,91 @@ void __init stx7105_configure_usb(int port, struct usb_init_data *data)
 
 #ifdef CONFIG_STM_DMA
 
-#include <linux/stm/7200_cut1_fdma2_firmware.h>
-
-static struct fdma_regs stx7105_fdma_regs = {
-	.fdma_id= FDMA2_ID,
-	.fdma_ver = FDAM2_VER,
-	.fdma_en = FDMA2_ENABLE_REG,
-	.fdma_clk_gate = FDMA2_CLOCKGATE,
-	.fdma_rev_id = FDMA2_REV_ID,
-	.fdma_cmd_statn = STB7200_FDMA_CMD_STATn_REG,
-	.fdma_ptrn = STB7200_FDMA_PTR_REG,
-	.fdma_cntn = STB7200_FDMA_COUNT_REG,
-	.fdma_saddrn = STB7200_FDMA_SADDR_REG,
-	.fdma_daddrn = STB7200_FDMA_DADDR_REG,
-	.fdma_req_ctln = STB7200_FDMA_REQ_CTLn_REG,
-	.fdma_cmd_sta = FDMA2_CMD_MBOX_STAT_REG,
-	.fdma_cmd_set = FDMA2_CMD_MBOX_SET_REG,
-	.fdma_cmd_clr = FDMA2_CMD_MBOX_CLR_REG,
-	.fdma_cmd_mask = FDMA2_CMD_MBOX_MASK_REG,
-	.fdma_int_sta = FDMA2_INT_STAT_REG,
-	.fdma_int_set = FDMA2_INT_SET_REG,
-	.fdma_int_clr= FDMA2_INT_CLR_REG,
-	.fdma_int_mask= FDMA2_INT_MASK_REG,
-	.fdma_sync_reg= FDMA2_SYNCREG,
-	.fdma_dmem_region = STX7105_DMEM_OFFSET,
-	.fdma_imem_region = STX7105_IMEM_OFFSET,
-};
+#include <linux/stm/fdma_firmware_7200.h>
 
-static struct fdma_platform_device_data stx7105_fdma0_plat_data = {
-	.registers_ptr = &stx7105_fdma_regs,
-	.min_ch_num = CONFIG_MIN_STM_DMA_CHANNEL_NR,
-	.max_ch_num = CONFIG_MAX_STM_DMA_CHANNEL_NR,
-	.fw_device_name = "stb7200_v1.4.bin",
-	.fw.data_reg = (unsigned long*)&STB7200_DMEM_REGION,
-	.fw.imem_reg = (unsigned long*)&STB7200_IMEM_REGION,
-	.fw.imem_fw_sz = STB7200_IMEM_FIRMWARE_SZ,
-	.fw.dmem_fw_sz = STB7200_DMEM_FIRMWARE_SZ,
-	.fw.dmem_len = STB7200_DMEM_REGION_LENGTH,
-	.fw.imem_len = STB7200_IMEM_REGION_LENGTH
+static struct stm_plat_fdma_hw stx7105_fdma_hw = {
+	.slim_regs = {
+		.id       = 0x0000 + (0x000 << 2), /* 0x0000 */
+		.ver      = 0x0000 + (0x001 << 2), /* 0x0004 */
+		.en       = 0x0000 + (0x002 << 2), /* 0x0008 */
+		.clk_gate = 0x0000 + (0x003 << 2), /* 0x000c */
+	},
+	.periph_regs = {
+		.sync_reg = 0x8000 + (0xfe2 << 2), /* 0xbf88 */
+		.cmd_sta  = 0x8000 + (0xff0 << 2), /* 0xbfc0 */
+		.cmd_set  = 0x8000 + (0xff1 << 2), /* 0xbfc4 */
+		.cmd_clr  = 0x8000 + (0xff2 << 2), /* 0xbfc8 */
+		.cmd_mask = 0x8000 + (0xff3 << 2), /* 0xbfcc */
+		.int_sta  = 0x8000 + (0xff4 << 2), /* 0xbfd0 */
+		.int_set  = 0x8000 + (0xff5 << 2), /* 0xbfd4 */
+		.int_clr  = 0x8000 + (0xff6 << 2), /* 0xbfd8 */
+		.int_mask = 0x8000 + (0xff7 << 2), /* 0xbfdc */
+	},
+	.dmem_offset = 0x8000,
+	.dmem_size   = 0x800 << 2, /* 2048 * 4 = 8192 */
+	.imem_offset = 0xc000,
+	.imem_size   = 0x1000 << 2, /* 4096 * 4 = 16384 */
 };
 
-
-static struct fdma_platform_device_data stx7105_fdma1_plat_data = {
-	.registers_ptr = &stx7105_fdma_regs,
+static struct stm_plat_fdma_data stx7105_fdma_platform_data = {
+	.hw = &stx7105_fdma_hw,
+	.fw = &stm_fdma_firmware_7200,
 	.min_ch_num = CONFIG_MIN_STM_DMA_CHANNEL_NR,
 	.max_ch_num = CONFIG_MAX_STM_DMA_CHANNEL_NR,
-	.fw_device_name = "stb7200_v1.4.bin",
-	.fw.data_reg = (unsigned long*)&STB7200_DMEM_REGION,
-	.fw.imem_reg = (unsigned long*)&STB7200_IMEM_REGION,
-	.fw.imem_fw_sz = STB7200_IMEM_FIRMWARE_SZ,
-	.fw.dmem_fw_sz = STB7200_DMEM_FIRMWARE_SZ,
-	.fw.dmem_len = STB7200_DMEM_REGION_LENGTH,
-	.fw.imem_len = STB7200_IMEM_REGION_LENGTH
 };
 
-#define stx7105_fdma0_plat_data_addr &stx7105_fdma0_plat_data
-#define stx7105_fdma1_plat_data_addr &stx7105_fdma1_plat_data
+#define stx7105_fdma_platform_data_addr &stx7105_fdma_platform_data
+
 #else
-#define stx7105_fdma0_plat_data_addr NULL
-#define stx7105_fdma1_plat_data_addr NULL
-#endif /* CONFIG_STM_DMA */
 
-static struct platform_device fdma0_device = {
-	.name		= "stmfdma",
-	.id		= 0,
-	.num_resources	= 2,
-	.resource = (struct resource[2]) {
-		[0] = {
-			.start = STX7105_FDMA0_BASE,
-			.end   = STX7105_FDMA0_BASE + 0xffff,
-			.flags = IORESOURCE_MEM,
-		},
-		[1] = {
-			.start = LINUX_FDMA0_STX7105_IRQ_VECT,
-			.end   = LINUX_FDMA0_STX7105_IRQ_VECT,
-			.flags = IORESOURCE_IRQ,
-		},
-	},
-	.dev = {
-		.platform_data = stx7105_fdma0_plat_data_addr,
-	},
-};
+#define stx7105_fdma_platform_data_addr NULL
 
-static struct platform_device fdma1_device = {
-	.name		= "stmfdma",
-	.id		= 1,
-	.resource = (struct resource[2]) {
-		[0] = {
-			.start = STX7105_FDMA1_BASE,
-			.end   = STX7105_FDMA1_BASE + 0xffff,
-			.flags = IORESOURCE_MEM,
+#endif /* CONFIG_STM_DMA */
+
+static struct platform_device stx7105_fdma_devices[] = {
+	{
+		.name		= "stm-fdma",
+		.id		= 0,
+		.num_resources	= 2,
+		.resource = (struct resource[]) {
+			{
+				.start = 0xfe220000,
+				.end   = 0xfe22ffff,
+				.flags = IORESOURCE_MEM,
+			}, {
+				.start = evt2irq(0x1380),
+				.end   = evt2irq(0x1380),
+				.flags = IORESOURCE_IRQ,
+			},
 		},
-		[1] = {
-			.start = LINUX_FDMA1_STX7105_IRQ_VECT,
-			.end   = LINUX_FDMA1_STX7105_IRQ_VECT,
-			.flags = IORESOURCE_IRQ,
+		.dev.platform_data = stx7105_fdma_platform_data_addr,
+	}, {
+		.name		= "stm-fdma",
+		.id		= 1,
+		.resource = (struct resource[]) {
+			{
+				.start = 0xfe410000,
+				.end   = 0xfe41ffff,
+				.flags = IORESOURCE_MEM,
+			}, {
+				.start = evt2irq(0x13a0),
+				.end   = evt2irq(0x13a0),
+				.flags = IORESOURCE_IRQ,
+			},
 		},
-	},
-	.dev = {
-		.platform_data = stx7105_fdma1_plat_data_addr,
+		.dev.platform_data = stx7105_fdma_platform_data_addr,
 	},
 };
 
-static struct platform_device fdma_xbar_device = {
-	.name		= "fdma-xbar",
+static struct platform_device stx7105_fdma_xbar_device = {
+	.name		= "stm-fdma-xbar",
 	.id		= -1,
 	.num_resources	= 1,
-	.resource	= (struct resource[1]) {
+	.resource	= (struct resource[]) {
 		{
-			.start	= STX7105_XBAR_BASE,
-			.end	= STX7105_XBAR_BASE+(4*1024)-1,
-			.flags	= IORESOURCE_MEM,
+			.start = 0xfe420000,
+			.end   = 0xfe420fff,
+			.flags = IORESOURCE_MEM,
 		},
 	},
 };
@@ -1340,9 +1312,9 @@ static int __init stx7105_subsys_setup(void)
 subsys_initcall(stx7105_subsys_setup);
 
 static struct platform_device *stx7105_devices[] __initdata = {
-	&fdma0_device,
-	&fdma1_device,
-	&fdma_xbar_device,
+	&stx7105_fdma_devices[0],
+	&stx7105_fdma_devices[1],
+	&stx7105_fdma_xbar_device,
 	&sysconf_device,
 	&ilc3_device,
 	&hwrandom_rng_device,
diff --git a/arch/sh/kernel/cpu/sh4/setup-stx7111.c b/arch/sh/kernel/cpu/sh4/setup-stx7111.c
index 7805779..196de4a 100644
--- a/arch/sh/kernel/cpu/sh4/setup-stx7111.c
+++ b/arch/sh/kernel/cpu/sh4/setup-stx7111.c
@@ -20,8 +20,6 @@
 #include <linux/phy.h>
 #include <linux/stm/sysconf.h>
 #include <linux/stm/emi.h>
-#include <linux/stm/fdma-plat.h>
-#include <linux/stm/fdma-reqs.h>
 #include <linux/mtd/nand.h>
 #include <linux/mtd/partitions.h>
 #include <linux/dma-mapping.h>
@@ -79,121 +77,97 @@ void __init stx7111_configure_usb(int inv_enable)
 
 #ifdef CONFIG_STM_DMA
 
-#include <linux/stm/7200_cut1_fdma2_firmware.h>
-
-static struct fdma_regs stx7111_fdma_regs = {
-	.fdma_id= FDMA2_ID,
-	.fdma_ver = FDAM2_VER,
-	.fdma_en = FDMA2_ENABLE_REG,
-	.fdma_clk_gate = FDMA2_CLOCKGATE,
-	.fdma_rev_id = FDMA2_REV_ID,
-	.fdma_cmd_statn = STB7200_FDMA_CMD_STATn_REG,
-	.fdma_ptrn = STB7200_FDMA_PTR_REG,
-	.fdma_cntn = STB7200_FDMA_COUNT_REG,
-	.fdma_saddrn = STB7200_FDMA_SADDR_REG,
-	.fdma_daddrn = STB7200_FDMA_DADDR_REG,
-	.fdma_req_ctln = STB7200_FDMA_REQ_CTLn_REG,
-	.fdma_cmd_sta = FDMA2_CMD_MBOX_STAT_REG,
-	.fdma_cmd_set = FDMA2_CMD_MBOX_SET_REG,
-	.fdma_cmd_clr = FDMA2_CMD_MBOX_CLR_REG,
-	.fdma_cmd_mask = FDMA2_CMD_MBOX_MASK_REG,
-	.fdma_int_sta = FDMA2_INT_STAT_REG,
-	.fdma_int_set = FDMA2_INT_SET_REG,
-	.fdma_int_clr= FDMA2_INT_CLR_REG,
-	.fdma_int_mask= FDMA2_INT_MASK_REG,
-	.fdma_sync_reg= FDMA2_SYNCREG,
-	.fdma_dmem_region = STX7111_DMEM_OFFSET,
-	.fdma_imem_region = STX7111_IMEM_OFFSET,
-};
+#include <linux/stm/fdma_firmware_7200.h>
 
-static struct fdma_platform_device_data stx7111_fdma0_plat_data = {
-	.registers_ptr = &stx7111_fdma_regs,
-	.min_ch_num = CONFIG_MIN_STM_DMA_CHANNEL_NR,
-	.max_ch_num = CONFIG_MAX_STM_DMA_CHANNEL_NR,
-	.fw_device_name = "stb7200_v1.4.bin",
-	.fw.data_reg = (unsigned long*)&STB7200_DMEM_REGION,
-	.fw.imem_reg = (unsigned long*)&STB7200_IMEM_REGION,
-	.fw.imem_fw_sz = STB7200_IMEM_FIRMWARE_SZ,
-	.fw.dmem_fw_sz = STB7200_DMEM_FIRMWARE_SZ,
-	.fw.dmem_len = STB7200_DMEM_REGION_LENGTH,
-	.fw.imem_len = STB7200_IMEM_REGION_LENGTH
+static struct stm_plat_fdma_hw stx7111_fdma_hw = {
+	.slim_regs = {
+		.id       = 0x0000 + (0x000 << 2), /* 0x0000 */
+		.ver      = 0x0000 + (0x001 << 2), /* 0x0004 */
+		.en       = 0x0000 + (0x002 << 2), /* 0x0008 */
+		.clk_gate = 0x0000 + (0x003 << 2), /* 0x000c */
+	},
+	.periph_regs = {
+		.sync_reg = 0x8000 + (0xfe2 << 2), /* 0xbf88 */
+		.cmd_sta  = 0x8000 + (0xff0 << 2), /* 0xbfc0 */
+		.cmd_set  = 0x8000 + (0xff1 << 2), /* 0xbfc4 */
+		.cmd_clr  = 0x8000 + (0xff2 << 2), /* 0xbfc8 */
+		.cmd_mask = 0x8000 + (0xff3 << 2), /* 0xbfcc */
+		.int_sta  = 0x8000 + (0xff4 << 2), /* 0xbfd0 */
+		.int_set  = 0x8000 + (0xff5 << 2), /* 0xbfd4 */
+		.int_clr  = 0x8000 + (0xff6 << 2), /* 0xbfd8 */
+		.int_mask = 0x8000 + (0xff7 << 2), /* 0xbfdc */
+	},
+	.dmem_offset = 0x8000,
+	.dmem_size   = 0x800 << 2, /* 2048 * 4 = 8192 */
+	.imem_offset = 0xc000,
+	.imem_size   = 0x1000 << 2, /* 4096 * 4 = 16384 */
 };
 
-
-static struct fdma_platform_device_data stx7111_fdma1_plat_data = {
-	.registers_ptr = &stx7111_fdma_regs,
+static struct stm_plat_fdma_data stx7111_fdma_platform_data = {
+	.hw = &stx7111_fdma_hw,
+	.fw = &stm_fdma_firmware_7200,
 	.min_ch_num = CONFIG_MIN_STM_DMA_CHANNEL_NR,
 	.max_ch_num = CONFIG_MAX_STM_DMA_CHANNEL_NR,
-	.fw_device_name = "stb7200_v1.4.bin",
-	.fw.data_reg = (unsigned long*)&STB7200_DMEM_REGION,
-	.fw.imem_reg = (unsigned long*)&STB7200_IMEM_REGION,
-	.fw.imem_fw_sz = STB7200_IMEM_FIRMWARE_SZ,
-	.fw.dmem_fw_sz = STB7200_DMEM_FIRMWARE_SZ,
-	.fw.dmem_len = STB7200_DMEM_REGION_LENGTH,
-	.fw.imem_len = STB7200_IMEM_REGION_LENGTH
 };
 
-#define stx7111_fdma0_plat_data_addr &stx7111_fdma0_plat_data
-#define stx7111_fdma1_plat_data_addr &stx7111_fdma1_plat_data
+#define stx7111_fdma_platform_data_addr &stx7111_fdma_platform_data
+
 #else
-#define stx7111_fdma0_plat_data_addr NULL
-#define stx7111_fdma1_plat_data_addr NULL
-#endif /* CONFIG_STM_DMA */
 
-static struct platform_device fdma0_device = {
-	.name		= "stmfdma",
-	.id		= 0,
-	.num_resources	= 2,
-	.resource = (struct resource[2]) {
-		[0] = {
-			.start = STX7111_FDMA0_BASE,
-			.end   = STX7111_FDMA0_BASE + 0xffff,
-			.flags = IORESOURCE_MEM,
-		},
-		[1] = {
-			.start = LINUX_FDMA0_STX7111_IRQ_VECT,
-			.end   = LINUX_FDMA0_STX7111_IRQ_VECT,
-			.flags = IORESOURCE_IRQ,
-		},
-	},
-	.dev = {
-		.platform_data = stx7111_fdma0_plat_data_addr,
-	},
-};
+#define stx7111_fdma_platform_data_addr NULL
 
-static struct platform_device fdma1_device = {
-	.name		= "stmfdma",
-	.id		= 1,
-	.resource = (struct resource[2]) {
-		[0] = {
-			.start = STX7111_FDMA1_BASE,
-			.end   = STX7111_FDMA1_BASE + 0xffff,
-			.flags = IORESOURCE_MEM,
+#endif /* CONFIG_STM_DMA */
+
+static struct platform_device stx7111_fdma_devices[] = {
+	{
+		.name		= "stm-fdma",
+		.id		= 0,
+		.num_resources	= 2,
+		.resource = (struct resource[]) {
+			{
+				.start = 0xfe220000,
+				.end   = 0xfe22ffff,
+				.flags = IORESOURCE_MEM,
+			}, {
+				.start = evt2irq(0x1380),
+				.end   = evt2irq(0x1380),
+				.flags = IORESOURCE_IRQ,
+			},
 		},
-		[1] = {
-			.start = LINUX_FDMA1_STX7111_IRQ_VECT,
-			.end   = LINUX_FDMA1_STX7111_IRQ_VECT,
-			.flags = IORESOURCE_IRQ,
+		.dev.platform_data = stx7111_fdma_platform_data_addr,
+	}, {
+		.name		= "stm-fdma",
+		.id		= 1,
+		.resource = (struct resource[]) {
+			{
+				.start = 0xfe410000,
+				.end   = 0xfe41ffff,
+				.flags = IORESOURCE_MEM,
+			}, {
+				.start = evt2irq(0x13a0),
+				.end   = evt2irq(0x13a0),
+				.flags = IORESOURCE_IRQ,
+			},
 		},
-	},
-	.dev = {
-		.platform_data = stx7111_fdma1_plat_data_addr,
+		.dev.platform_data = stx7111_fdma_platform_data_addr,
 	},
 };
 
-static struct platform_device fdma_xbar_device = {
-	.name		= "fdma-xbar",
+static struct platform_device stx7111_fdma_xbar_device = {
+	.name		= "stm-fdma-xbar",
 	.id		= -1,
 	.num_resources	= 1,
-	.resource	= (struct resource[1]) {
+	.resource	= (struct resource[]) {
 		{
-			.start	= STX7111_XBAR_BASE,
-			.end	= STX7111_XBAR_BASE+(4*1024)-1,
-			.flags	= IORESOURCE_MEM,
+			.start = 0xfe420000,
+			.end   = 0xfe420fff,
+			.flags = IORESOURCE_MEM,
 		},
 	},
 };
 
+
+
 /* SSC resources ----------------------------------------------------------- */
 
 static char i2c_st[] = "i2c_st";
@@ -903,9 +877,9 @@ static int __init stx7111_subsys_setup(void)
 subsys_initcall(stx7111_subsys_setup);
 
 static struct platform_device *stx7111_devices[] __initdata = {
-	&fdma0_device,
-	//&fdma1_device,
-	&fdma_xbar_device,
+	&stx7111_fdma_devices[0],
+	&stx7111_fdma_devices[1],
+	&stx7111_fdma_xbar_device,
 	&sysconf_device,
 	&ilc3_device,
 	&hwrandom_rng_device,
diff --git a/arch/sh/kernel/cpu/sh4/setup-stx7141.c b/arch/sh/kernel/cpu/sh4/setup-stx7141.c
index 4a4ae4e..2c8be89 100644
--- a/arch/sh/kernel/cpu/sh4/setup-stx7141.c
+++ b/arch/sh/kernel/cpu/sh4/setup-stx7141.c
@@ -20,8 +20,6 @@
 #include <linux/stm/sysconf.h>
 #include <linux/stm/emi.h>
 #include <linux/pata_platform.h>
-#include <linux/stm/fdma-plat.h>
-#include <linux/stm/fdma-reqs.h>
 #include <linux/mtd/nand.h>
 #include <linux/mtd/partitions.h>
 #include <linux/delay.h>
@@ -294,117 +292,91 @@ void __init stx7141_configure_usb(int port)
 
 #ifdef CONFIG_STM_DMA
 
-#include <linux/stm/7200_cut1_fdma2_firmware.h>
-
-static struct fdma_regs stx7141_fdma_regs = {
-	.fdma_id = FDMA2_ID,
-	.fdma_ver = FDAM2_VER,
-	.fdma_en = FDMA2_ENABLE_REG,
-	.fdma_clk_gate = FDMA2_CLOCKGATE,
-	.fdma_rev_id = FDMA2_REV_ID,
-	.fdma_cmd_statn = STB7200_FDMA_CMD_STATn_REG,
-	.fdma_ptrn = STB7200_FDMA_PTR_REG,
-	.fdma_cntn = STB7200_FDMA_COUNT_REG,
-	.fdma_saddrn = STB7200_FDMA_SADDR_REG,
-	.fdma_daddrn = STB7200_FDMA_DADDR_REG,
-	.fdma_req_ctln = STB7200_FDMA_REQ_CTLn_REG,
-	.fdma_cmd_sta = FDMA2_CMD_MBOX_STAT_REG,
-	.fdma_cmd_set = FDMA2_CMD_MBOX_SET_REG,
-	.fdma_cmd_clr = FDMA2_CMD_MBOX_CLR_REG,
-	.fdma_cmd_mask = FDMA2_CMD_MBOX_MASK_REG,
-	.fdma_int_sta = FDMA2_INT_STAT_REG,
-	.fdma_int_set = FDMA2_INT_SET_REG,
-	.fdma_int_clr = FDMA2_INT_CLR_REG,
-	.fdma_int_mask = FDMA2_INT_MASK_REG,
-	.fdma_sync_reg = FDMA2_SYNCREG,
-	.fdma_dmem_region = STX7141_DMEM_OFFSET,
-	.fdma_imem_region = STX7141_IMEM_OFFSET,
-};
+#include <linux/stm/fdma_firmware_7200.h>
 
-static struct fdma_platform_device_data stx7141_fdma0_plat_data = {
-	.registers_ptr = &stx7141_fdma_regs,
-	.min_ch_num = CONFIG_MIN_STM_DMA_CHANNEL_NR,
-	.max_ch_num = CONFIG_MAX_STM_DMA_CHANNEL_NR,
-	.fw_device_name = "stb7200_v1.4.bin",
-	.fw.data_reg = (unsigned long *)&STB7200_DMEM_REGION,
-	.fw.imem_reg = (unsigned long *)&STB7200_IMEM_REGION,
-	.fw.imem_fw_sz = STB7200_IMEM_FIRMWARE_SZ,
-	.fw.dmem_fw_sz = STB7200_DMEM_FIRMWARE_SZ,
-	.fw.dmem_len = STB7200_DMEM_REGION_LENGTH,
-	.fw.imem_len = STB7200_IMEM_REGION_LENGTH
+static struct stm_plat_fdma_hw stx7141_fdma_hw = {
+	.slim_regs = {
+		.id       = 0x0000 + (0x000 << 2), /* 0x0000 */
+		.ver      = 0x0000 + (0x001 << 2), /* 0x0004 */
+		.en       = 0x0000 + (0x002 << 2), /* 0x0008 */
+		.clk_gate = 0x0000 + (0x003 << 2), /* 0x000c */
+	},
+	.periph_regs = {
+		.sync_reg = 0x8000 + (0xfe2 << 2), /* 0xbf88 */
+		.cmd_sta  = 0x8000 + (0xff0 << 2), /* 0xbfc0 */
+		.cmd_set  = 0x8000 + (0xff1 << 2), /* 0xbfc4 */
+		.cmd_clr  = 0x8000 + (0xff2 << 2), /* 0xbfc8 */
+		.cmd_mask = 0x8000 + (0xff3 << 2), /* 0xbfcc */
+		.int_sta  = 0x8000 + (0xff4 << 2), /* 0xbfd0 */
+		.int_set  = 0x8000 + (0xff5 << 2), /* 0xbfd4 */
+		.int_clr  = 0x8000 + (0xff6 << 2), /* 0xbfd8 */
+		.int_mask = 0x8000 + (0xff7 << 2), /* 0xbfdc */
+	},
+	.dmem_offset = 0x8000,
+	.dmem_size   = 0x800 << 2, /* 2048 * 4 = 8192 */
+	.imem_offset = 0xc000,
+	.imem_size   = 0x1000 << 2, /* 4096 * 4 = 16384 */
 };
 
-
-static struct fdma_platform_device_data stx7141_fdma1_plat_data = {
-	.registers_ptr = &stx7141_fdma_regs,
+static struct stm_plat_fdma_data stx7141_fdma_platform_data = {
+	.hw = &stx7141_fdma_hw,
+	.fw = &stm_fdma_firmware_7200,
 	.min_ch_num = CONFIG_MIN_STM_DMA_CHANNEL_NR,
 	.max_ch_num = CONFIG_MAX_STM_DMA_CHANNEL_NR,
-	.fw_device_name = "stb7200_v1.4.bin",
-	.fw.data_reg = (unsigned long *)&STB7200_DMEM_REGION,
-	.fw.imem_reg = (unsigned long *)&STB7200_IMEM_REGION,
-	.fw.imem_fw_sz = STB7200_IMEM_FIRMWARE_SZ,
-	.fw.dmem_fw_sz = STB7200_DMEM_FIRMWARE_SZ,
-	.fw.dmem_len = STB7200_DMEM_REGION_LENGTH,
-	.fw.imem_len = STB7200_IMEM_REGION_LENGTH
 };
 
-#define stx7141_fdma0_plat_data_addr &stx7141_fdma0_plat_data
-#define stx7141_fdma1_plat_data_addr &stx7141_fdma1_plat_data
+#define stx7141_fdma_platform_data_addr &stx7141_fdma_platform_data
+
 #else
-#define stx7141_fdma0_plat_data_addr NULL
-#define stx7141_fdma1_plat_data_addr NULL
-#endif /* CONFIG_STM_DMA */
 
-static struct platform_device fdma0_device = {
-	.name		= "stmfdma",
-	.id		= 0,
-	.num_resources	= 2,
-	.resource = (struct resource[2]) {
-		[0] = {
-			.start = STX7141_FDMA0_BASE,
-			.end   = STX7141_FDMA0_BASE + 0xffff,
-			.flags = IORESOURCE_MEM,
-		},
-		[1] = {
-			.start = LINUX_FDMA0_STX7141_IRQ_VECT,
-			.end   = LINUX_FDMA0_STX7141_IRQ_VECT,
-			.flags = IORESOURCE_IRQ,
-		},
-	},
-	.dev = {
-		.platform_data = stx7141_fdma0_plat_data_addr,
-	},
-};
+#define stx7141_fdma_platform_data_addr NULL
 
-static struct platform_device fdma1_device = {
-	.name		= "stmfdma",
-	.id		= 1,
-	.resource = (struct resource[2]) {
-		[0] = {
-			.start = STX7141_FDMA1_BASE,
-			.end   = STX7141_FDMA1_BASE + 0xffff,
-			.flags = IORESOURCE_MEM,
+#endif /* CONFIG_STM_DMA */
+
+static struct platform_device stx7141_fdma_devices[] = {
+	{
+		.name		= "stm-fdma",
+		.id		= 0,
+		.num_resources	= 2,
+		.resource = (struct resource[]) {
+			{
+				.start = 0xfe220000,
+				.end   = 0xfe22ffff,
+				.flags = IORESOURCE_MEM,
+			}, {
+				.start = ILC_IRQ(44),
+				.end   = ILC_IRQ(44),
+				.flags = IORESOURCE_IRQ,
+			},
 		},
-		[1] = {
-			.start = LINUX_FDMA1_STX7141_IRQ_VECT,
-			.end   = LINUX_FDMA1_STX7141_IRQ_VECT,
-			.flags = IORESOURCE_IRQ,
+		.dev.platform_data = stx7141_fdma_platform_data_addr,
+	}, {
+		.name		= "stm-fdma",
+		.id		= 1,
+		.resource = (struct resource[]) {
+			{
+				.start = 0xfe410000,
+				.end   = 0xfe41ffff,
+				.flags = IORESOURCE_MEM,
+			}, {
+				.start = ILC_IRQ(45),
+				.end   = ILC_IRQ(45),
+				.flags = IORESOURCE_IRQ,
+			},
 		},
-	},
-	.dev = {
-		.platform_data = stx7141_fdma1_plat_data_addr,
+		.dev.platform_data = stx7141_fdma_platform_data_addr,
 	},
 };
 
-static struct platform_device fdma_xbar_device = {
-	.name		= "fdma-xbar",
+static struct platform_device stx7141_fdma_xbar_device = {
+	.name		= "stm-fdma-xbar",
 	.id		= -1,
 	.num_resources	= 1,
-	.resource	= (struct resource[1]) {
+	.resource	= (struct resource[]) {
 		{
-			.start	= STX7141_XBAR_BASE,
-			.end	= STX7141_XBAR_BASE+(4*1024)-1,
-			.flags	= IORESOURCE_MEM,
+			.start = 0xfe420000,
+			.end   = 0xfe420fff,
+			.flags = IORESOURCE_MEM,
 		},
 	},
 };
@@ -1278,9 +1250,9 @@ static int __init stx7141_subsys_setup(void)
 subsys_initcall(stx7141_subsys_setup);
 
 static struct platform_device *stx7141_devices[] __initdata = {
-	&fdma0_device,
-	&fdma1_device,
-	&fdma_xbar_device,
+	&stx7141_fdma_devices[0],
+	&stx7141_fdma_devices[1],
+	&stx7141_fdma_xbar_device,
 	&sysconf_device,
 	&ilc3_device,
 	&hwrandom_rng_device,
diff --git a/arch/sh/kernel/cpu/sh4/setup-stx7200.c b/arch/sh/kernel/cpu/sh4/setup-stx7200.c
index 5593e94..fb8cd86 100644
--- a/arch/sh/kernel/cpu/sh4/setup-stx7200.c
+++ b/arch/sh/kernel/cpu/sh4/setup-stx7200.c
@@ -23,8 +23,6 @@
 #include <linux/pata_platform.h>
 #include <asm/sci.h>
 #include <asm/irq-ilc.h>
-#include <linux/stm/fdma-plat.h>
-#include <linux/stm/fdma-reqs.h>
 #include <linux/mtd/nand.h>
 #include <linux/mtd/partitions.h>
 #include <linux/delay.h>
@@ -421,117 +419,92 @@ void __init stx7200_configure_sata(unsigned int port)
 
 #ifdef CONFIG_STM_DMA
 
-#include <linux/stm/7200_cut1_fdma2_firmware.h>
-
-static struct fdma_regs stb7200_fdma_regs = {
-	.fdma_id= FDMA2_ID,
-	.fdma_ver = FDAM2_VER,
-	.fdma_en = FDMA2_ENABLE_REG,
-	.fdma_clk_gate = FDMA2_CLOCKGATE,
-	.fdma_rev_id = FDMA2_REV_ID,
-	.fdma_cmd_statn = STB7200_FDMA_CMD_STATn_REG,
-	.fdma_ptrn = STB7200_FDMA_PTR_REG,
-	.fdma_cntn = STB7200_FDMA_COUNT_REG,
-	.fdma_saddrn = STB7200_FDMA_SADDR_REG,
-	.fdma_daddrn = STB7200_FDMA_DADDR_REG,
-	.fdma_req_ctln = STB7200_FDMA_REQ_CTLn_REG,
-	.fdma_cmd_sta = FDMA2_CMD_MBOX_STAT_REG,
-	.fdma_cmd_set = FDMA2_CMD_MBOX_SET_REG,
-	.fdma_cmd_clr = FDMA2_CMD_MBOX_CLR_REG,
-	.fdma_cmd_mask = FDMA2_CMD_MBOX_MASK_REG,
-	.fdma_int_sta = FDMA2_INT_STAT_REG,
-	.fdma_int_set = FDMA2_INT_SET_REG,
-	.fdma_int_clr= FDMA2_INT_CLR_REG,
-	.fdma_int_mask= FDMA2_INT_MASK_REG,
-	.fdma_sync_reg= FDMA2_SYNCREG,
-	.fdma_dmem_region = STB7200_DMEM_OFFSET,
-	.fdma_imem_region = STB7200_IMEM_OFFSET,
-};
+#include <linux/stm/fdma_firmware_7200.h>
 
-static struct fdma_platform_device_data stb7200_fdma0_plat_data = {
-	.registers_ptr = &stb7200_fdma_regs,
-	.min_ch_num = CONFIG_MIN_STM_DMA_CHANNEL_NR,
-	.max_ch_num = CONFIG_MAX_STM_DMA_CHANNEL_NR,
-	.fw_device_name = "stb7200_v1.4.bin",
-	.fw.data_reg = (unsigned long*)&STB7200_DMEM_REGION,
-	.fw.imem_reg = (unsigned long*)&STB7200_IMEM_REGION,
-	.fw.imem_fw_sz = STB7200_IMEM_FIRMWARE_SZ,
-	.fw.dmem_fw_sz = STB7200_DMEM_FIRMWARE_SZ,
-	.fw.dmem_len = STB7200_DMEM_REGION_LENGTH,
-	.fw.imem_len = STB7200_IMEM_REGION_LENGTH
+static struct stm_plat_fdma_hw stx7200_fdma_hw = {
+	.slim_regs = {
+		.id       = 0x0000 + (0x000 << 2), /* 0x0000 */
+		.ver      = 0x0000 + (0x001 << 2), /* 0x0004 */
+		.en       = 0x0000 + (0x002 << 2), /* 0x0008 */
+		.clk_gate = 0x0000 + (0x003 << 2), /* 0x000c */
+	},
+	.periph_regs = {
+		.sync_reg = 0x8000 + (0xfe2 << 2), /* 0xbf88 */
+		.cmd_sta  = 0x8000 + (0xff0 << 2), /* 0xbfc0 */
+		.cmd_set  = 0x8000 + (0xff1 << 2), /* 0xbfc4 */
+		.cmd_clr  = 0x8000 + (0xff2 << 2), /* 0xbfc8 */
+		.cmd_mask = 0x8000 + (0xff3 << 2), /* 0xbfcc */
+		.int_sta  = 0x8000 + (0xff4 << 2), /* 0xbfd0 */
+		.int_set  = 0x8000 + (0xff5 << 2), /* 0xbfd4 */
+		.int_clr  = 0x8000 + (0xff6 << 2), /* 0xbfd8 */
+		.int_mask = 0x8000 + (0xff7 << 2), /* 0xbfdc */
+	},
+	.dmem_offset = 0x8000,
+	.dmem_size   = 0x800 << 2, /* 2048 * 4 = 8192 */
+	.imem_offset = 0xc000,
+	.imem_size   = 0x1000 << 2, /* 4096 * 4 = 16384 */
 };
 
-
-static struct fdma_platform_device_data stb7200_fdma1_plat_data = {
-	.registers_ptr = &stb7200_fdma_regs,
+static struct stm_plat_fdma_data stx7200_fdma_platform_data = {
+	.hw = &stx7200_fdma_hw,
+	.fw = &stm_fdma_firmware_7200,
 	.min_ch_num = CONFIG_MIN_STM_DMA_CHANNEL_NR,
 	.max_ch_num = CONFIG_MAX_STM_DMA_CHANNEL_NR,
-	.fw_device_name = "stb7200_v1.4.bin",
-	.fw.data_reg = (unsigned long*)&STB7200_DMEM_REGION,
-	.fw.imem_reg = (unsigned long*)&STB7200_IMEM_REGION,
-	.fw.imem_fw_sz = STB7200_IMEM_FIRMWARE_SZ,
-	.fw.dmem_fw_sz = STB7200_DMEM_FIRMWARE_SZ,
-	.fw.dmem_len = STB7200_DMEM_REGION_LENGTH,
-	.fw.imem_len = STB7200_IMEM_REGION_LENGTH
 };
 
-#define stb7200_fdma0_plat_data_addr &stb7200_fdma0_plat_data
-#define stb7200_fdma1_plat_data_addr &stb7200_fdma1_plat_data
+#define stx7200_fdma_platform_data_addr &stx7200_fdma_platform_data
+
 #else
-#define stb7200_fdma0_plat_data_addr NULL
-#define stb7200_fdma1_plat_data_addr NULL
-#endif /* CONFIG_STM_DMA */
 
-static struct platform_device fdma0_7200_device = {
-	.name		= "stmfdma",
-	.id		= 0,
-	.num_resources	= 2,
-	.resource = (struct resource[2]) {
-		[0] = {
-			.start = STB7200_FDMA0_BASE,
-			.end   = STB7200_FDMA0_BASE + 0xffff,
-			.flags = IORESOURCE_MEM,
-		},
-		[1] = {
-			.start = LINUX_FDMA0_STB7200_IRQ_VECT,
-			.end   = LINUX_FDMA0_STB7200_IRQ_VECT,
-			.flags = IORESOURCE_IRQ,
-		},
-	},
-	.dev = {
-		.platform_data = stb7200_fdma0_plat_data_addr,
-	},
-};
+#define stx7200_fdma_platform_data_addr NULL
 
-static struct platform_device fdma1_7200_device = {
-	.name		= "stmfdma",
-	.id		= 1,
-	.resource = (struct resource[2]) {
-		[0] = {
-			.start = STB7200_FDMA1_BASE,
-			.end   = STB7200_FDMA1_BASE + 0xffff,
-			.flags = IORESOURCE_MEM,
+#endif /* CONFIG_STM_DMA */
+
+static struct platform_device stx7200_fdma_devices[] = {
+	{
+		.name		= "stm-fdma",
+		.id		= 0,
+		.num_resources	= 2,
+		.resource = (struct resource[]) {
+			{
+				.start = 0xfd810000,
+				.end   = 0xfd81ffff,
+				.flags = IORESOURCE_MEM,
+			}, {
+				.start = ILC_IRQ(13),
+				.end   = ILC_IRQ(13),
+				.flags = IORESOURCE_IRQ,
+			},
 		},
-		[1] = {
-			.start = LINUX_FDMA1_STB7200_IRQ_VECT,
-			.end   = LINUX_FDMA1_STB7200_IRQ_VECT,
-			.flags = IORESOURCE_IRQ,
+		.dev.platform_data = stx7200_fdma_platform_data_addr,
+	}, {
+		.name		= "stm-fdma",
+		.id		= 1,
+		.num_resources	= 2,
+		.resource = (struct resource[2]) {
+			{
+				.start = 0xfd820000,
+				.end   = 0xfd82ffff,
+				.flags = IORESOURCE_MEM,
+			}, {
+				.start = ILC_IRQ(15),
+				.end   = ILC_IRQ(15),
+				.flags = IORESOURCE_IRQ,
+			},
 		},
-	},
-	.dev = {
-		.platform_data = stb7200_fdma1_plat_data_addr,
+		.dev.platform_data = stx7200_fdma_platform_data_addr,
 	},
 };
 
-static struct platform_device fdma_xbar_device = {
-	.name		= "fdma-xbar",
+static struct platform_device stx7200_fdma_xbar_device = {
+	.name		= "stm-fdma-xbar",
 	.id		= -1,
 	.num_resources	= 1,
-	.resource	= (struct resource[1]) {
+	.resource	= (struct resource[]) {
 		{
-			.start	= STB7200_XBAR_BASE,
-			.end	= STB7200_XBAR_BASE+(4*1024)-1,
-			.flags	= IORESOURCE_MEM,
+			.start = 0xfd830000,
+			.end   = 0xfd830fff,
+			.flags = IORESOURCE_MEM,
 		},
 	},
 };
@@ -1055,21 +1028,13 @@ static struct platform_device devrandom_rng_device = {
 /* ASC resources ----------------------------------------------------------- */
 
 static struct platform_device stm_stasc_devices[] = {
-	STASC_DEVICE(0xfd030000, ILC_IRQ(104),
-			STB7200_FDMA_REQ_UART_0_RX, STB7200_FDMA_REQ_UART_0_TX,
-			0, 0, 1, 4, 7,
+	STASC_DEVICE(0xfd030000, ILC_IRQ(104), 19, 23, 0, 0, 1, 4, 7,
 			STPIO_ALT_OUT, STPIO_IN, STPIO_IN, STPIO_ALT_OUT), /* oe pin: 6 */
-	STASC_DEVICE(0xfd031000, ILC_IRQ(105),
-			STB7200_FDMA_REQ_UART_1_RX, STB7200_FDMA_REQ_UART_1_TX,
-			1, 0, 1, 4, 5,
+	STASC_DEVICE(0xfd031000, ILC_IRQ(105), 20, 24, 1, 0, 1, 4, 5,
 			STPIO_ALT_OUT, STPIO_IN, STPIO_IN, STPIO_ALT_OUT), /* oe pin: 6 */
-	STASC_DEVICE(0xfd032000, ILC_IRQ(106),
-			STB7200_FDMA_REQ_UART_2_RX, STB7200_FDMA_REQ_UART_2_TX,
-			4, 3, 2, 4, 5,
+	STASC_DEVICE(0xfd032000, ILC_IRQ(106), 21, 25, 4, 3, 2, 4, 5,
 			STPIO_ALT_OUT, STPIO_IN, STPIO_IN, STPIO_ALT_OUT),
-	STASC_DEVICE(0xfd033000, ILC_IRQ(107),
-			STB7200_FDMA_REQ_UART_3_RX, STB7200_FDMA_REQ_UART_3_TX,
-			5, 4, 3, 5, 6,
+	STASC_DEVICE(0xfd033000, ILC_IRQ(107), 22, 26, 5, 4, 3, 5, 6,
 			STPIO_ALT_OUT, STPIO_IN, STPIO_IN, STPIO_ALT_OUT),
 };
 
@@ -1284,9 +1249,9 @@ postcore_initcall(stx7200_postcore_setup);
 /* Late resources ---------------------------------------------------------- */
 
 static struct platform_device *stx7200_devices[] __initdata = {
-	&fdma0_7200_device,
-	//&fdma1_7200_device,
-	&fdma_xbar_device,
+	&stx7200_fdma_devices[0],
+	/* &stx7200_fdma_devices[1], */
+	&stx7200_fdma_xbar_device,
 	&sysconf_device,
 	&ilc3_device,
         &rtc_device,
diff --git a/drivers/net/smsc_911x/st40-shdma.c b/drivers/net/smsc_911x/st40-shdma.c
index 54dcf32..1ed9bf8 100644
--- a/drivers/net/smsc_911x/st40-shdma.c
+++ b/drivers/net/smsc_911x/st40-shdma.c
@@ -1,7 +1,6 @@
 #include <linux/dma-mapping.h>
 #include <asm/dma.h>
 #include <linux/stm/stm-dma.h>
-#include <linux/stm/fdma-reqs.h>
 
 static struct stm_dma_params tx_transfer;
 
@@ -54,12 +53,12 @@ DWORD Platform_RequestDmaChannelSg(
 		return chan;
 
 	if(chip_7109){
-		dma_req_lines[SMSC_LONG_PTK_CHAN] = STB7109_FDMA_REQ_SSC_1_TX;
-		dma_req_lines[SMSC_SHORT_PTK_CHAN] = STB7109_FDMA_REQ_SSC_2_TX;
+		dma_req_lines[SMSC_LONG_PTK_CHAN] = 10;
+		dma_req_lines[SMSC_SHORT_PTK_CHAN] = 11;
 	}
 	else {
-		dma_req_lines[SMSC_LONG_PTK_CHAN] = STB7100_FDMA_REQ_SSC_1_TX;
-		dma_req_lines[SMSC_SHORT_PTK_CHAN] = STB7100_FDMA_REQ_SSC_2_TX;
+		dma_req_lines[SMSC_LONG_PTK_CHAN] = 12;
+		dma_req_lines[SMSC_SHORT_PTK_CHAN] = 13;
 	}
 
 	dma_reqs[0] = dma_req_config(chan, dma_req_lines[0], &dma_req_configs[0]);
diff --git a/drivers/serial/stasc.c b/drivers/serial/stasc.c
index 98d4ae8..0539a9d 100644
--- a/drivers/serial/stasc.c
+++ b/drivers/serial/stasc.c
@@ -20,7 +20,6 @@
 #include <linux/spinlock.h>
 #include <linux/platform_device.h>
 #include <linux/stm/soc.h>
-#include <linux/stm/fdma-reqs.h>
 
 #include <asm/system.h>
 #include <asm/io.h>
diff --git a/drivers/stm/Makefile b/drivers/stm/Makefile
index 8f5e95f..59a86dd 100644
--- a/drivers/stm/Makefile
+++ b/drivers/stm/Makefile
@@ -3,7 +3,7 @@
 #
 
 obj-y				+= sysconf.o
-obj-$(CONFIG_STM_DMA)		+= 710x_fdma2.o
+obj-$(CONFIG_STM_DMA)		+= fdma.o fdma-xbar.o
 obj-$(CONFIG_STM_PIO)		+= pio.o
 obj-$(CONFIG_STM_COPROCESSOR_SUPPORT)	+= copro-st_socs.o
 obj-$(CONFIG_STM_COPROCESSOR)		+= stm-coprocessor.o
diff --git a/drivers/stm/fdma-xbar.c b/drivers/stm/fdma-xbar.c
new file mode 100644
index 0000000..bc30179
--- /dev/null
+++ b/drivers/stm/fdma-xbar.c
@@ -0,0 +1,100 @@
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include "fdma.h"
+
+
+
+struct fdma_xbar {
+	struct resource *memory;
+	void *base;
+	struct fdma_req_router router;
+};
+
+
+
+static int fdma_xbar_route(struct fdma_req_router *router, int input_req_line,
+		int fdma, int fdma_req_line)
+{
+	struct fdma_xbar *xbar = container_of(router, struct fdma_xbar, router);
+	int output_line = (fdma * FDMA_REQ_LINES) + fdma_req_line;
+
+	writel(input_req_line, xbar->base + (output_line * 4));
+
+	return 0;
+}
+
+static int __init fdma_xbar_probe(struct platform_device *pdev)
+{
+	struct fdma_xbar *xbar;
+	struct resource *memory;
+	unsigned long phys_base, phys_size;
+
+	xbar = kzalloc(sizeof(*xbar), GFP_KERNEL);
+	if (xbar == NULL)
+		return -ENOMEM;
+
+	memory = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	BUG_ON(!memory);
+	phys_base = memory->start;
+	phys_size = memory->end - memory->start + 1;
+
+	xbar->memory = request_mem_region(phys_base, phys_size,
+			pdev->dev.bus_id);
+	if (xbar->memory == NULL) {
+		kfree(xbar);
+		return -EBUSY;
+	}
+
+	xbar->base = ioremap_nocache(phys_base, phys_size);
+	if (xbar->base == NULL) {
+		release_resource(xbar->memory);
+		kfree(xbar);
+		return -EBUSY;
+	}
+
+	xbar->router.route = fdma_xbar_route;
+
+	platform_set_drvdata(pdev, xbar);
+
+	if (fdma_register_req_router(&xbar->router) < 0) {
+		iounmap(xbar->base);
+		release_resource(xbar->memory);
+		kfree(xbar);
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+static int fdma_xbar_remove(struct platform_device *pdev)
+{
+	struct fdma_xbar *xbar = platform_get_drvdata(pdev);
+
+	fdma_unregister_req_router(&xbar->router);
+
+	iounmap(xbar->base);
+	release_resource(xbar->memory);
+	kfree(xbar);
+
+	return 0;
+}
+
+static struct platform_driver fdma_xbar_driver = {
+	.driver.name = "stm-fdma-xbar",
+	.probe = fdma_xbar_probe,
+	.remove = fdma_xbar_remove,
+};
+
+static int __init fdma_xbar_init(void)
+{
+	return platform_driver_register(&fdma_xbar_driver);
+}
+
+static void __exit fdma_xbar_exit(void)
+{
+	platform_driver_unregister(&fdma_xbar_driver);
+}
+
+module_init(fdma_xbar_init)
+module_exit(fdma_xbar_exit)
+
diff --git a/drivers/stm/fdma.c b/drivers/stm/fdma.c
new file mode 100644
index 0000000..f94094c
--- /dev/null
+++ b/drivers/stm/fdma.c
@@ -0,0 +1,1370 @@
+/*
+ * Copyright (C) 2005,7 STMicroelectronics Limited
+ * Authors: Mark Glaisher <Mark.Glaisher@st.com>
+ *          Stuart Menefy <stuart.menefy@st.com>
+ *
+ * May be copied or modified under the terms of the GNU General Public
+ * License. See linux/COPYING for more information.
+ */
+
+#include <linux/interrupt.h>
+#include <linux/device.h>
+#include <linux/firmware.h>
+#include <linux/platform_device.h>
+#include <linux/dmapool.h>
+#include <linux/stm/stm-dma.h>
+
+#include "fdma.h"
+
+
+
+static int fdma_setup_freerunning_node(struct stm_dma_params *params,
+		struct fdma_llu_entry *llu)
+{
+	memset(llu, 0, sizeof(*llu));
+
+	if (params->node_pause)
+		llu->control |= SET_NODE_COMP_PAUSE | SET_NODE_COMP_IRQ;
+
+	if (params->node_interrupt)
+		llu->control |= SET_NODE_COMP_IRQ;
+
+	if (DIM_SRC(params->dim) == 0)
+		llu->control |= NODE_ADDR_STATIC << SOURCE_ADDR;
+	else
+		llu->control |= NODE_ADDR_INCR << SOURCE_ADDR;
+
+	if (DIM_DST(params->dim) == 0)
+		llu->control |= NODE_ADDR_STATIC << DEST_ADDR;
+	else
+		llu->control |= NODE_ADDR_INCR << DEST_ADDR;
+
+	llu->line_len = params->line_len;
+	llu->sstride = params->sstride;
+	llu->dstride = params->dstride;
+	return 0;
+}
+
+static int fdma_setup_paced_node(struct stm_dma_params *params,
+		struct fdma_llu_entry *llu)
+{
+	memset(llu, 0, sizeof(*llu));
+
+	/* Moved this into the extrapolate functions so that we can
+	 * change channel in the same way as address. Yech */
+	/* llu->control = params->req_line; */
+	llu->size_bytes = params->node_bytes;
+	llu->line_len = params->node_bytes;
+
+	if (params->node_pause)
+		/* In order to recieve the pause interrupt
+		 * we must also enable end of node interrupts. */
+		llu->control |= SET_NODE_COMP_PAUSE | SET_NODE_COMP_IRQ;
+
+	if (params->node_interrupt)
+		llu->control |= SET_NODE_COMP_IRQ;
+
+	if (DIM_SRC(params->dim) == 0)
+		llu->control |= NODE_ADDR_STATIC << SOURCE_ADDR;
+	else
+		llu->control |= NODE_ADDR_INCR << SOURCE_ADDR;
+
+	if (DIM_DST(params->dim) == 0)
+		llu->control |= NODE_ADDR_STATIC << DEST_ADDR;
+	else
+		llu->control |= NODE_ADDR_INCR << DEST_ADDR;
+
+	return 0;
+}
+
+static struct fdma_llu_node *fdma_extrapolate_simple(
+		struct stm_dma_params *params,
+		struct fdma_xfer_descriptor *desc,
+		struct fdma_llu_node *llu_node)
+{
+	struct fdma_llu_entry *dest_llu = llu_node->virt_addr;
+
+	dest_llu->control = desc->template_llu.control |
+			(params->req ? params->req->req_line : 0);
+	dest_llu->size_bytes = params->node_bytes;
+	dest_llu->saddr	 = params->sar;
+	dest_llu->daddr	 = params->dar;
+	if (desc->extrapolate_line_len)
+		dest_llu->line_len = params->node_bytes;
+	else
+		dest_llu->line_len = desc->template_llu.line_len;
+	dest_llu->sstride = desc->template_llu.sstride;
+	dest_llu->dstride = desc->template_llu.dstride;
+
+	return llu_node;
+}
+
+static struct fdma_llu_node *fdma_extrapolate_sg_src(
+		struct stm_dma_params *params,
+		struct fdma_xfer_descriptor *desc,
+		struct fdma_llu_node *llu_node)
+{
+	int i;
+	struct scatterlist *sg = params->srcsg;
+	struct fdma_llu_node *last_llu_node = llu_node;
+
+	for (i = 0; i < params->sglen; i++) {
+		struct fdma_llu_entry *dest_llu = llu_node->virt_addr;
+
+		dest_llu->control = desc->template_llu.control;
+		dest_llu->size_bytes = sg_dma_len(sg);
+		dest_llu->saddr	= sg_dma_address(sg);
+		dest_llu->daddr	= params->dar;
+		if (desc->extrapolate_line_len)
+			dest_llu->line_len = sg_dma_len(sg);
+		else
+			dest_llu->line_len = desc->template_llu.line_len;
+		dest_llu->sstride = desc->template_llu.sstride;
+		dest_llu->dstride = 0;
+
+		last_llu_node = llu_node++;
+		dest_llu->next_item = llu_node->dma_addr;
+		sg++;
+	}
+
+	return last_llu_node;
+}
+
+static struct fdma_llu_node *fdma_extrapolate_sg_dst(
+		struct stm_dma_params *params,
+		struct fdma_xfer_descriptor *desc,
+		struct fdma_llu_node *llu_node)
+{
+	int i;
+	struct scatterlist *sg = params->dstsg;
+	struct fdma_llu_node *last_llu_node = llu_node;
+
+	for (i = 0; i < params->sglen; i++) {
+		struct fdma_llu_entry *dest_llu = llu_node->virt_addr;
+
+		dest_llu->control = desc->template_llu.control;
+		dest_llu->size_bytes = sg_dma_len(sg);
+		dest_llu->saddr	 = params->sar;
+		dest_llu->daddr	 = sg_dma_address(sg);
+		if (desc->extrapolate_line_len)
+			dest_llu->line_len = sg_dma_len(sg);
+		else
+			dest_llu->line_len = desc->template_llu.line_len;
+		dest_llu->sstride = 0;
+		dest_llu->dstride = desc->template_llu.dstride;
+
+		last_llu_node = llu_node++;
+		dest_llu->next_item = llu_node->dma_addr;
+		sg++;
+	}
+
+	return last_llu_node;
+}
+
+static int fdma_resize_nodelist_mem(struct fdma *fdma,
+		struct fdma_xfer_descriptor *desc, unsigned int new_nnodes,
+		gfp_t context)
+{
+	int old_list_size, new_list_size;
+	unsigned int cur_nnodes;
+	struct fdma_llu_node *new_nodes;
+
+	/* This holds the number of allocated nodes, which may differ
+	 * from the old or new size. It must be maintained so that
+	 * free_list works. */
+	cur_nnodes = desc->alloced_nodes;
+
+	/* The only resize down we need to support is freeing everything. */
+	if (new_nnodes == 0)
+		goto free_list;
+
+	old_list_size = sizeof(struct fdma_llu_node) * desc->alloced_nodes;
+	new_list_size = sizeof(struct fdma_llu_node) * new_nnodes;
+	new_nodes = kmalloc(new_list_size, context);
+	if (new_nodes == NULL)
+		goto free_list;
+
+	if (old_list_size > 0) {
+		memcpy(new_nodes, desc->llu_nodes, old_list_size);
+		kfree(desc->llu_nodes);
+	}
+
+	desc->llu_nodes = new_nodes;
+
+	for (new_nodes += desc->alloced_nodes; cur_nnodes < new_nnodes;
+			cur_nnodes++, new_nodes++) {
+		new_nodes->virt_addr = dma_pool_alloc(fdma->llu_pool,
+				context, &new_nodes->dma_addr);
+		if (new_nodes->virt_addr == NULL)
+			goto free_list;
+	}
+
+	desc->alloced_nodes = new_nnodes;
+	return 0;
+
+free_list:
+	for (new_nodes = desc->llu_nodes; cur_nnodes;
+			cur_nnodes--, new_nodes++)
+		dma_pool_free(fdma->llu_pool, new_nodes->virt_addr,
+				new_nodes->dma_addr);
+	kfree(desc->llu_nodes);
+
+	desc->llu_nodes = NULL;
+	desc->alloced_nodes = 0;
+
+	return -ENOMEM;
+}
+
+static void fdma_start_channel(struct fdma_channel *channel,
+		unsigned long start_addr, unsigned long initial_count)
+{
+	struct fdma *fdma = channel->fdma;
+	u32 cmd_sta_value = (start_addr | CMDSTAT_FDMA_START_CHANNEL);
+
+	/* See comment in fdma_get_residue() for why we do this. */
+	writel(initial_count, fdma->io_base + (channel->chan_num *
+			NODE_DATA_OFFSET) + fdma->regs.cntn);
+
+	writel(cmd_sta_value, CMD_STAT_REG(channel->chan_num));
+	writel(MBOX_CMD_START_CHANNEL << (channel->chan_num * 2),
+			fdma->io_base + fdma->regs.cmd_set);
+}
+
+static int fdma_get_engine_status(struct fdma_channel *channel)
+{
+	struct fdma *fdma = channel->fdma;
+
+	return readl(CMD_STAT_REG(channel->chan_num)) & 3;
+}
+
+static inline void fdma_handle_fdma_err_irq(struct fdma_channel *channel)
+{
+	struct fdma *fdma = channel->fdma;
+	void (*err_cb)(unsigned long) = channel->params->err_cb;
+	unsigned long err_cb_parm = channel->params->err_cb_parm;
+
+	spin_lock(&fdma->channels_lock);
+
+	/* err is bits 2-4 */
+	fdma_dbg(fdma, "%s: FDMA error %d on channel %d\n", __FUNCTION__,
+			(readl(CMD_STAT_REG(channel->chan_num)) >> 2) & 0x7,
+			channel->chan_num);
+
+	/* According to the spec, in case of error transfer "may be
+	 * aborted" (or may not be, sigh) so let's make the situation
+	 * clear and stop it explicitly now. */
+	writel(MBOX_CMD_PAUSE_CHANNEL << (channel->chan_num * 2),
+			fdma->io_base + fdma->regs.cmd_set);
+	channel->sw_state = FDMA_STOPPING;
+
+	spin_unlock(&fdma->channels_lock);
+
+	wake_up(&channel->dma_chan->wait_queue);
+
+	if (err_cb) {
+		if (channel->params->err_cb_isr)
+			err_cb(err_cb_parm);
+		else
+			tasklet_schedule(&channel->fdma_error);
+	}
+}
+
+static inline void fdma_handle_fdma_completion_irq(struct fdma_channel *channel)
+{
+	struct fdma *fdma = channel->fdma;
+	void (*comp_cb)(unsigned long) = channel->params->comp_cb;
+	unsigned long comp_cb_parm = channel->params->comp_cb_parm;
+
+	spin_lock(&fdma->channels_lock);
+
+	switch (fdma_get_engine_status(channel)) {
+	case FDMA_CHANNEL_PAUSED:
+		switch (channel->sw_state) {
+		case FDMA_RUNNING:	/* Hit a pause node */
+		case FDMA_PAUSING:
+			channel->sw_state = FDMA_PAUSED;
+			break;
+		case FDMA_STOPPING:
+			writel(0, CMD_STAT_REG(channel->chan_num));
+			channel->sw_state = FDMA_IDLE;
+			break;
+		default:
+			BUG();
+		}
+		break;
+	case FDMA_CHANNEL_IDLE:
+		switch (channel->sw_state) {
+		case FDMA_RUNNING:
+		case FDMA_PAUSING:
+		case FDMA_STOPPING:
+			channel->sw_state = FDMA_IDLE;
+			break;
+		default:
+			BUG();
+		}
+		break;
+	case FDMA_CHANNEL_RUNNING:
+		break;
+	default:
+		fdma_dbg(fdma, "ERR::FDMA2 unknown interrupt status \n");
+	}
+
+	spin_unlock(&fdma->channels_lock);
+
+	wake_up(&channel->dma_chan->wait_queue);
+
+	if (comp_cb) {
+		if (channel->params->comp_cb_isr)
+			comp_cb(comp_cb_parm);
+		else
+			tasklet_schedule(&channel->fdma_complete);
+	}
+}
+
+static irqreturn_t fdma_irq(int irq, void *dev_id)
+{
+	struct fdma *fdma = dev_id;
+	int chan_num;
+	u32 status = readl(fdma->io_base + fdma->regs.int_sta);
+	u32 masked = status & fdma->ch_status_mask;
+
+	writel(masked, fdma->io_base + fdma->regs.int_clr);
+	for (masked >>= fdma->ch_min * 2, chan_num = fdma->ch_min;
+			masked != 0; masked >>= 2, chan_num++) {
+		struct fdma_channel *channel = &fdma->channels[chan_num];
+		/* error interrupts will raise boths bits, so check
+		 * the err bit first */
+		if (unlikely(masked & 2))
+			fdma_handle_fdma_err_irq(channel);
+		else if (masked & 1)
+			fdma_handle_fdma_completion_irq(channel);
+	}
+
+	/* Here we check to see if there is still pending ints for the other
+	 * dmac, if so rely on it to signal IRQ_HANDLED once all vectors are
+	 * cleared, we return IRQ_NONE. Otherwise we have handled everything
+	 * so we can now safely returnd IRQ_HANDLED to lower the IRQ. */
+	return IRQ_RETVAL(!(status & (~fdma->ch_status_mask)));
+}
+
+/* Request lines management */
+
+static struct fdma_req_router *fdma_req_router;
+
+int fdma_register_req_router(struct fdma_req_router *router)
+{
+	BUG_ON(fdma_req_router);
+
+	fdma_req_router = router;
+
+	return 0;
+}
+
+void fdma_unregister_req_router(struct fdma_req_router *router)
+{
+	fdma_req_router = NULL;
+}
+
+static struct stm_dma_req *fdma_req_allocate(struct fdma_channel *channel,
+		unsigned int soc_req_line)
+{
+	struct fdma *fdma = channel->fdma;
+	struct stm_dma_req *req = NULL;
+	int req_line = -EINVAL;
+
+	spin_lock(&fdma->reqs_lock);
+
+	if (fdma_req_router) {
+		/* There is a request lines crossbar registered - we can
+		 * use any of the available "local" request lines... */
+		if (fdma->reqs_used_mask < ~0UL) {
+			req_line = ffz(fdma->reqs_used_mask);
+
+			if (fdma_req_router->route(fdma_req_router,
+						soc_req_line, fdma->pdev->id,
+						req_line) != 0)
+				req_line = -EBUSY;
+		}
+	} else {
+		/* No crossbar - request lines are connected directly then */
+		unsigned long mask = 1 << soc_req_line;
+
+		BUG_ON(soc_req_line < 0 || soc_req_line >= FDMA_REQ_LINES);
+
+		if ((fdma->reqs_used_mask & mask) == 0) {
+			fdma->reqs_used_mask |= mask;
+			req_line = soc_req_line;
+		}
+	}
+
+	if (req_line >= 0) {
+		req = &fdma->reqs[req_line];
+		req->req_line = req_line;
+	}
+
+	spin_unlock(&fdma->reqs_lock);
+
+	return req;
+}
+
+static void fdma_req_free(struct fdma_channel *channel, struct stm_dma_req *req)
+{
+	struct fdma *fdma = channel->fdma;
+
+	spin_lock(&fdma->reqs_lock);
+
+	fdma->reqs_used_mask &= ~(1 << req->req_line);
+
+	spin_unlock(&fdma->reqs_lock);
+}
+
+/*---------------------------------------------------------------------*
+ *---------------------------------------------------------------------*
+ * FIRMWARE DOWNLOAD & ENGINE INIT
+ *---------------------------------------------------------------------*
+ *---------------------------------------------------------------------*/
+
+static void fdma_initialise(struct fdma *fdma)
+{
+/* These pokes come from the current STAPI tree.
+ * The three magic vals are pokes to undocumented regs so
+ * we don't know what they mean.
+ *
+ * The effect is to turn on and initialise the clocks
+ * and set all channels off */
+
+	/* clear the status regs MBOX & IRQ */
+	writel(CLEAR_WORD, fdma->io_base + fdma->regs.int_clr);
+	writel(CLEAR_WORD, fdma->io_base + fdma->regs.cmd_clr);
+
+	/* Enable the FDMA block */
+	writel(1, fdma->io_base + fdma->regs.sync_reg);
+	writel(5, fdma->io_base + fdma->regs.clk_gate);
+	writel(0, fdma->io_base + fdma->regs.clk_gate);
+
+}
+/* this function enables messaging and intr generation for all channels &
+ * starts the fdma running */
+static int fdma_enable_all_channels(struct fdma *fdma)
+{
+	writel(CLEAR_WORD, fdma->io_base + fdma->regs.int_mask);
+	writel(CLEAR_WORD, fdma->io_base + fdma->regs.cmd_mask);
+	writel(1, fdma->io_base + fdma->regs.en);
+	return readl(fdma->io_base + fdma->regs.en) & 1;
+}
+static int fdma_disable_all_channels(struct fdma *fdma)
+{
+	writel(0, fdma->io_base + fdma->regs.int_mask);
+	writel(0, fdma->io_base + fdma->regs.cmd_mask);
+	writel(0, fdma->io_base + fdma->regs.en);
+	return readl(fdma->io_base + fdma->regs.en) & ~1;
+}
+
+static void fdma_reset_channels(struct fdma *fdma)
+{
+	int chan_num;
+
+	for (chan_num = fdma->ch_min; chan_num <= fdma->ch_max; chan_num++)
+		writel(0, CMD_STAT_REG(chan_num));
+}
+
+static struct stm_dma_req *fdma_configure_pace_channel(
+		struct fdma_channel *channel,
+		struct stm_dma_req_config *req_config)
+{
+	struct fdma *fdma = channel->fdma;
+	void __iomem *req_base_reg = fdma->io_base + fdma->regs.req_ctln;
+	struct stm_dma_req *req;
+
+	req = fdma_req_allocate(channel, req_config->req_line);
+
+	if (req) {
+		u32 req_ctl = 0;
+
+		req_ctl |= (req_config->hold_off & 0x0f) <<  0; /* Bits 3..0 */
+		req_ctl |= (req_config->opcode & 0x0f) <<  4; /* 7..4 */
+		req_ctl |= (req_config->rw & 0x01) << 14; /* 14 */
+		req_ctl |= (req_config->initiator & 0x03) << 22; /* 23..22 */
+		req_ctl |= ((req_config->count - 1) & 0x1f) << 24; /* 28..24 */
+		req_ctl |= (req_config->increment & 0x01) << 29; /* 29 */
+
+		writel(req_ctl, req_base_reg +
+				(req->req_line * CMD_STAT_OFFSET));
+	}
+
+	return req;
+}
+
+static int fdma_register_caps(struct fdma *fdma)
+{
+	int chan_num, dma_chan_num;
+	int err;
+	int num_caps = fdma->ch_max - fdma->ch_min + 1;
+	struct dma_chan_caps dmac_caps[num_caps];
+	static const char *hb_caps[] = {STM_DMA_CAP_HIGH_BW, NULL};
+	static const char *lb_caps[] = {STM_DMA_CAP_LOW_BW, NULL};
+	static const char *eth_caps[] = {STM_DMA_CAP_ETH_BUF, NULL};
+
+	for (chan_num = fdma->ch_min, dma_chan_num = 0;
+			chan_num <= fdma->ch_max;
+			chan_num++, dma_chan_num++) {
+		dmac_caps[dma_chan_num].ch_num = dma_chan_num;
+		switch (chan_num) {
+		case 0 ... 3:
+			dmac_caps[dma_chan_num].caplist = hb_caps;
+			break;
+		case 11:
+			dmac_caps[dma_chan_num].caplist = eth_caps;
+			break;
+		default:
+			dmac_caps[dma_chan_num].caplist = lb_caps;
+			break;
+		}
+	}
+
+	err = register_chan_caps(fdma->name, dmac_caps);
+	if (err != 0) {
+		fdma_dbg(fdma, "%s %s failed to register capabilities err-%d\n",
+				__FUNCTION__, fdma->name, err);
+		return -ENODEV;
+	}
+
+	return 0;
+}
+
+static int fdma_run_initialise_sequence(struct fdma *fdma)
+{
+	fdma->llu_pool = dma_pool_create(fdma->name, NULL,
+			sizeof(struct fdma_llu_entry), 32, 0);
+
+	if (fdma->llu_pool == NULL) {
+		fdma_dbg(fdma, "%s Can't allocate dma_pool memory\n",
+				__FUNCTION__);
+		return -ENOMEM;
+	}
+
+	fdma_initialise(fdma);
+	fdma_reset_channels(fdma);
+
+	if (!fdma_enable_all_channels(fdma))
+		return -ENODEV;
+
+	return 0;
+}
+
+/*---------------------------------------------------------------------*
+ *---------------------------------------------------------------------*
+ * FIRMWARE DOWNLOAD & ENGINE INIT
+ *---------------------------------------------------------------------*
+ *---------------------------------------------------------------------*/
+
+static void fdma_get_fw_revision(struct fdma *fdma, int *major, int *minor)
+{
+	int reg = readl(fdma->io_base + fdma->regs.rev_id);
+
+	*major = (reg & 0xff0000) >> 16;
+	*minor = (reg & 0xff00) >> 8;
+}
+
+static void fdma_get_hw_revision(struct fdma *fdma, int *major, int *minor)
+{
+	*major = readl(fdma->io_base + fdma->regs.id);
+	*minor = readl(fdma->io_base + fdma->regs.ver);
+}
+
+#if defined(CONFIG_STM_DMA_FW_KERNEL)
+
+static int fdma_do_bootload(struct fdma *fdma)
+{
+	unsigned long unused;
+	unsigned long irqflags;
+
+	fdma_dbg(fdma, "FDMA: Loading Firmware...\n");
+
+	spin_lock_irqsave(&fdma->channels_lock, irqflags);
+
+	BUG_ON(fdma->fw->dmem_len > fdma->hw->dmem_size);
+
+	memcpy(fdma->io_base + fdma->hw->dmem_offset,
+			fdma->fw->dmem, fdma->fw->dmem_len);
+	unused = fdma->hw->dmem_size - fdma->fw->dmem_len;
+	if (unused)
+		memset(fdma->io_base + fdma->hw->dmem_offset +
+				fdma->fw->dmem_len, 0, unused);
+
+	BUG_ON(fdma->fw->imem_len > fdma->hw->imem_size);
+
+	memcpy(fdma->io_base + fdma->hw->imem_offset,
+			fdma->fw->imem, fdma->fw->imem_len);
+	unused = fdma->hw->imem_size - fdma->fw->imem_len;
+	if (unused)
+		memset(fdma->io_base + fdma->hw->imem_offset +
+				fdma->fw->imem_len, 0, unused);
+
+	fdma->firmware_loaded = 1;
+	spin_unlock_irqrestore(&fdma->channels_lock, irqflags);
+
+	wake_up(&fdma->fw_load_q);
+
+	return 0;
+}
+
+#elif defined(CONFIG_STM_DMA_FW_USERSPACE)
+
+/* Awkwardly the current FDMA elf instruction section is stored with
+ * 3 byte words. The Slim requires the following - fmt(0x00nnnnnn).
+ * where - 	0 - appended 0 byte
+ * 	 	n value read from elf
+ *
+ * So we must manually insert these word by word from the elf,
+ * This also means the size parameter is incorrect
+ * - Grrrr. */
+static void fdma_build_elf_imem(struct fdma *fdma, Elf32_Shdr *sect_hd,
+		const struct firmware *slimcore_elf)
+{
+	int pos = 0;
+	char *file_off;
+	int imem_sz = sect_hd->sh_size + (sect_hd->sh_size / 3);
+	u8 *imem_st = kmalloc(imem_sz, GFP_KERNEL);
+	u8 *imem_ptr = imem_st;
+	char *imem_sect = fdma->io_base + fdma->hw->imem_offset;
+
+	file_off = (u8 *)&slimcore_elf->data[sect_hd->sh_offset];
+
+	do {
+		memcpy(imem_ptr, file_off, sizeof(char) * 3);
+		imem_ptr += 3;
+		file_off += 3;
+		*imem_ptr = 0x00;
+		imem_ptr++;
+	} while ((pos += 3) < sect_hd->sh_size);
+
+	memcpy(imem_sect, imem_st, imem_sz);
+	kfree(imem_ptr);
+}
+
+static void fdma_build_elf_dmem(struct fdma *fdma, Elf32_Shdr *sect_hd,
+		const struct firmware *slimcore_elf)
+{
+	char *dmem_sect = fdma->io_base + fdma->hw->dmem_offset;
+	char *file_off;
+
+	file_off = (char *)&slimcore_elf->data[sect_hd->sh_offset];
+	memcpy(dmem_sect, (char *)file_off, sect_hd->sh_size);
+}
+
+static int fdma_do_bootload(struct fdma *fdma)
+{
+	int err;
+	int i, imem_loaded = 0, dmem_loaded = 0;
+	const struct firmware *slimcore_elf;
+	struct elf32_hdr hdr;
+	int hw_major, hw_minor;
+	int fw_major, fw_minor;
+
+	fdma_dbg(fdma, "FDMA: Loading Firmware ELF...\n");
+
+	err = request_firmware(&slimcore_elf, fdma->fw->name, &fdma->pdev.dev);
+	if (err != 0) {
+		fdma_dbg(fdma, "%s Can't Locate/Load Firmware %s\n",
+				__FUNCTION__, fdma->fw->name);
+		return -ENOENT;
+	}
+
+	memcpy(&hdr, slimcore_elf->data, sizeof(struct elf32_hdr));
+
+	/* build the section header tbl */
+	for (i = 0; i < hdr.e_shnum; i++) {
+		Elf32_Shdr sect_hdr;
+		char *sh_addr = (char *)&slimcore_elf->data[hdr.e_shoff +
+				(i * sizeof(Elf32_Shdr))];
+
+		memcpy(&sect_hdr, (char *)sh_addr, sizeof(Elf32_Shdr));
+
+		if (SHT_PROGBITS == sect_hdr.sh_type) {
+			if (sect_hdr.sh_flags & SHF_ALLOC) {
+				if ((sect_hdr.sh_flags & SHF_EXECINSTR) ==
+						SHF_EXECINSTR) {
+					fdma_build_elf_imem(fdma, &sect_hdr,
+							slimcore_elf);
+					imem_loaded = 1;
+				} else if ((sect_hdr.sh_flags & SHF_WRITE) ==
+						SHF_WRITE) {
+					fdma_build_elf_dmem(fdma, &sect_hdr,
+							slimcore_elf);
+					dmem_loaded = 1;
+				}
+			}
+			if (dmem_loaded && imem_loaded) {
+				/* we can discard the remainder
+				 * of the elf now */
+				break;
+			}
+		}
+	}
+	release_firmware(slimcore_elf);
+	if (dmem_loaded && imem_loaded) {
+		fdma->firmware_loaded = 1;
+		wake_up(&fdma->fw_load_q);
+	} else {
+		return -ENODEV;
+	}
+
+	fdma_get_hw_revision(fdma, &hw_major, &hw_minor);
+	fdma_get_fw_revision(fdma, &fw_major, &fw_minor);
+	fdma_dbg(fdma, "STB_%dC%d %d.%d %d.%d OK\n",
+			fdma->cpu_subtype, fdma->cpu_rev,
+			hw_major, hw_minor, fw_major, fw_minor);
+
+	return 0;
+}
+
+#endif
+
+static int fdma_load_firmware(struct fdma *fdma)
+{
+	unsigned long irqflags = 0;
+	int hw_major, hw_minor;
+	int fw_major, fw_minor;
+
+	spin_lock_irqsave(&fdma->channels_lock, irqflags);
+	switch (fdma->firmware_loaded) {
+	case 0:
+		fdma->firmware_loaded = -1;
+		spin_unlock_irqrestore(&fdma->channels_lock, irqflags);
+		if (fdma_do_bootload(fdma) != 0) {
+			fdma->firmware_loaded = 0;
+			return -ENOMEM;
+		}
+		fdma_get_hw_revision(fdma, &hw_major, &hw_minor);
+		fdma_get_fw_revision(fdma, &fw_major, &fw_minor);
+		fdma_info(fdma, "SLIM hw %d.%d, FDMA fw %d.%d\n",
+				hw_major, hw_minor, fw_major, fw_minor);
+
+		if (fdma_run_initialise_sequence(fdma) != 0)
+			return -ENODEV;
+
+		return (fdma->firmware_loaded == 1) ? 0: -ENODEV;
+	case 1:
+		spin_unlock_irqrestore(&fdma->channels_lock, irqflags);
+		return 0;
+	default:
+	case -1:
+		spin_unlock_irqrestore(&fdma->channels_lock, irqflags);
+		wait_event_interruptible(fdma->fw_load_q,
+				(fdma->firmware_loaded == 1));
+		if (!fdma->firmware_loaded)
+			return -ENODEV;
+		else
+			return 0;
+	}
+
+	return 0;
+}
+
+static int fdma_check_firmware_state(struct fdma *fdma)
+{
+	return (fdma->firmware_loaded) ? 0 : fdma_load_firmware(fdma);
+}
+
+/*---------------------------------------------------------------------*
+ *---------------------------------------------------------------------*
+ * Linux -SH DMA API hooks
+ *---------------------------------------------------------------------*
+ *---------------------------------------------------------------------*/
+
+/* returns the number of bytes left to transfer for the current node */
+static int fdma_get_residue(struct dma_channel *dma_chan)
+{
+	struct fdma_channel *channel = dma_chan->priv_data;
+	struct fdma *fdma = channel->fdma;
+	struct stm_dma_params *params = channel->params;
+	unsigned long irqflags;
+	u32 count = 0;
+
+	spin_lock_irqsave(&fdma->channels_lock, irqflags);
+
+	if (likely(channel->sw_state != FDMA_IDLE)) {
+		struct fdma_xfer_descriptor *desc =
+			(struct fdma_xfer_descriptor *)params->priv;
+		void __iomem *chan_base = fdma->io_base +
+				(channel->chan_num * NODE_DATA_OFFSET);
+		unsigned long current_node_phys;
+		unsigned long stat1, stat2;
+		struct fdma_llu_node *current_node;
+		int node_num;
+
+		/* Get info about current node */
+		do {
+			stat1 = readl(CMD_STAT_REG(channel->chan_num));
+			count = readl(chan_base + fdma->regs.cntn);
+			stat2 = readl(CMD_STAT_REG(channel->chan_num));
+		} while (stat1 != stat2);
+
+		current_node_phys = stat1 & ~0x1f;
+		for (node_num = 0, current_node = desc->llu_nodes;
+				current_node->dma_addr != current_node_phys;
+				node_num++, current_node++)
+			BUG_ON(node_num == desc->alloced_nodes);
+
+		switch (stat1 & 3) {
+		case FDMA_CHANNEL_IDLE:
+			/* Channel has stopped, but we haven't taken
+			 * the interrupt to change the ->sw_state
+			 * field yet. We could legitimatly return zero
+			 * here, but instead pretend we haven't quite
+			 * finished yet. Is this the right thing to
+			 * do? */
+			count = 1;
+			goto unlock;
+
+		case FDMA_CHANNEL_RUNNING:
+		case FDMA_CHANNEL_PAUSED:
+			/* Unfortuntaly the firmware appears to modify
+			 * CMD_STAT before it has modifed the COUNT.
+			 * However we write the count in
+			 * fdma_start_channel() so can assume it is
+			 * valid. */
+			break;
+
+		case CMDSTAT_FDMA_START_CHANNEL:
+			/* Channel hasn't started running yet, so count
+			 * hasn't yet been loaded from the node. But again
+			 * the value was written in fdma_start_channel()
+			 * so the value read from hardware is valid. */
+			break;
+		}
+
+		while (++node_num < desc->alloced_nodes) {
+			current_node++;
+			count += current_node->virt_addr->size_bytes;
+		}
+	}
+
+unlock:
+	spin_unlock_irqrestore(&fdma->channels_lock, irqflags);
+
+	return count;
+}
+
+/* must only be called when channel is in paused state */
+static int fdma_unpause(struct fdma_channel *channel)
+{
+	struct fdma *fdma = channel->fdma;
+	unsigned long irqflags = 0;
+	u32 cmd_sta_value;
+
+	spin_lock_irqsave(&fdma->channels_lock, irqflags);
+	if (channel->sw_state != FDMA_PAUSED) {
+		spin_unlock_irqrestore(&fdma->channels_lock, irqflags);
+		return -EBUSY;
+	}
+
+	cmd_sta_value = readl(CMD_STAT_REG(channel->chan_num));
+	cmd_sta_value &= ~CMDSTAT_FDMA_CMD_MASK;
+	cmd_sta_value |= CMDSTAT_FDMA_RESTART_CHANNEL;
+	writel(cmd_sta_value, CMD_STAT_REG(channel->chan_num));
+
+	writel(MBOX_CMD_START_CHANNEL << (channel->chan_num * 2),
+			fdma->io_base + fdma->regs.cmd_set);
+	channel->sw_state = FDMA_RUNNING;
+
+	spin_unlock_irqrestore(&fdma->channels_lock, irqflags);
+	return 0;
+}
+
+static int fdma_pause(struct fdma_channel *channel, int flush)
+{
+	struct fdma *fdma = channel->fdma;
+	unsigned long irqflags = 0;
+
+	spin_lock_irqsave(&fdma->channels_lock, irqflags);
+	switch (channel->sw_state) {
+	case FDMA_IDLE:
+	case FDMA_CONFIGURED:
+		/* Hardware isn't set up yet, so treat this as an error */
+		spin_unlock_irqrestore(&fdma->channels_lock, irqflags);
+		return -EBUSY;
+	case FDMA_PAUSED:
+		/* Hardware is already paused */
+		spin_unlock_irqrestore(&fdma->channels_lock, irqflags);
+		return 0;
+	case FDMA_RUNNING:
+		/* Hardware is running, send the command */
+		writel((flush ? MBOX_CMD_FLUSH_CHANNEL : MBOX_CMD_PAUSE_CHANNEL)
+				<< (channel->chan_num * 2),
+				fdma->io_base + fdma->regs.cmd_set);
+		/* Fall through */
+	case FDMA_PAUSING:
+	case FDMA_STOPPING:
+		/* Hardware is pausing already, wait for interrupt */
+		channel->sw_state = FDMA_PAUSING;
+		spin_unlock_irqrestore(&fdma->channels_lock, irqflags);
+#if 0
+		/* In some cases this is called from a context which cannot
+		 * block, so disable the wait at the moment. */
+		wait_event(channel->cur_cfg->wait_queue,
+				channel->sw_state == FDMA_PAUSED);
+#endif
+		break;
+	}
+
+	return 0;
+}
+
+static int fdma_request(struct dma_channel *dma_chan)
+{
+	struct fdma_channel *channel = dma_chan->priv_data;
+	struct fdma *fdma = channel->fdma;
+
+	if (fdma_check_firmware_state(fdma) == 0)
+		return 0;
+
+	return -ENOSYS;
+}
+
+static int fdma_stop(struct fdma_channel *channel)
+{
+	struct fdma *fdma = channel->fdma;
+	unsigned long cmd_val = MBOX_CMD_PAUSE_CHANNEL <<
+			(channel->chan_num * 2);
+	unsigned long irqflags = 0;
+
+	spin_lock_irqsave(&fdma->channels_lock, irqflags);
+	switch (channel->sw_state) {
+	case FDMA_IDLE:
+	case FDMA_CONFIGURED:
+	case FDMA_PAUSED:
+		/* Hardware is already idle, simply change state */
+		channel->sw_state = FDMA_IDLE;
+		writel(0, CMD_STAT_REG(channel->chan_num));
+		spin_unlock_irqrestore(&fdma->channels_lock, irqflags);
+		break;
+	case FDMA_RUNNING:
+		/* Hardware is running, send the command */
+		writel(cmd_val, fdma->io_base + fdma->regs.cmd_set);
+		/* Fall through */
+	case FDMA_PAUSING:
+	case FDMA_STOPPING:
+		/* Hardware is pausing already, wait for interrupt */
+		channel->sw_state = FDMA_STOPPING;
+		spin_unlock_irqrestore(&fdma->channels_lock, irqflags);
+#if 0
+		/* In some cases this is called from a context which cannot
+		 * block, so disable the wait at the moment. */
+		wait_event(channel->cur_cfg->wait_queue,
+				channel->sw_state == FDMA_IDLE);
+#endif
+		break;
+	}
+
+	return 0;
+}
+
+static int fdma_free_params(struct stm_dma_params *params)
+{
+	struct fdma *fdma = params->params_ops_priv;
+	struct stm_dma_params *this;
+
+	for (this = params; this; this = this->next) {
+		struct fdma_xfer_descriptor *desc = this->priv;
+		if (desc) {
+			fdma_resize_nodelist_mem(fdma, desc, 0, 0);
+			kfree(desc);
+		}
+	}
+
+	return 0;
+}
+
+static struct params_ops fdma_params_ops = {
+	.free_params = fdma_free_params
+};
+
+/* Compile params part 1: generate template nodes */
+static int fdma_compile1(struct fdma *fdma, struct stm_dma_params *params)
+{
+	struct stm_dma_params *this;
+
+	for (this = params; this; this = this->next) {
+		struct fdma_xfer_descriptor *desc = this->priv;
+
+		if (desc != NULL)
+			continue;
+
+		desc = kzalloc(sizeof(struct fdma_xfer_descriptor),
+				params->context);
+		if (desc == NULL)
+			return -ENOMEM;
+		this->priv = desc;
+
+		if (this->mode == MODE_SRC_SCATTER)
+			desc->extrapolate_fn = fdma_extrapolate_sg_src;
+		else if (this->mode == MODE_DST_SCATTER)
+			desc->extrapolate_fn = fdma_extrapolate_sg_dst;
+		else
+			desc->extrapolate_fn = fdma_extrapolate_simple;
+
+		if (this->mode == MODE_PACED)
+			fdma_setup_paced_node(this, &desc->template_llu);
+		else
+			fdma_setup_freerunning_node(this, &desc->template_llu);
+
+		/* For any 1D transfers, line_len = nbytes */
+		desc->extrapolate_line_len = !((DIM_SRC(this->dim) == 2) ||
+				(DIM_DST(this->dim) == 2));
+	}
+
+	return 0;
+}
+
+/* Compile params part 2: allocate node list */
+static int fdma_compile2(struct fdma *fdma, struct stm_dma_params *params)
+{
+	struct stm_dma_params *this;
+	int numnodes = 0;
+	struct fdma_xfer_descriptor *desc;
+
+	for (this = params; this; this = this->next) {
+		if (this->mode == MODE_SRC_SCATTER ||
+				this->mode == MODE_DST_SCATTER)
+			numnodes += this->sglen;
+		else
+			numnodes++;
+	}
+
+	desc = params->priv;
+	if (desc->alloced_nodes < numnodes) {
+		int err = fdma_resize_nodelist_mem(fdma, desc, numnodes,
+				params->context);
+
+		if (err)
+			return err;
+	}
+
+	return 0;
+}
+
+/* Compile params part 3: extrapolate */
+static int fdma_compile3(struct fdma *fdma, struct stm_dma_params *params)
+{
+	struct stm_dma_params *this;
+	struct fdma_xfer_descriptor *this_desc;
+	struct fdma_llu_node *first_node, *last_node, *node;
+
+	this = params;
+	this_desc = (struct fdma_xfer_descriptor *)this->priv;
+	first_node = this_desc->llu_nodes;
+
+	node = first_node;
+	while (1) {
+		last_node = this_desc->extrapolate_fn(this, this_desc, node);
+
+		this = this->next;
+		if (this == NULL)
+			break;
+
+		this_desc = (struct fdma_xfer_descriptor *)this->priv;
+		node = last_node + 1;
+		last_node->virt_addr->next_item = node->dma_addr;
+	}
+
+	if (params->circular_llu)
+		last_node->virt_addr->next_item = first_node->dma_addr;
+	else
+		last_node->virt_addr->next_item = 0;
+
+	return 0;
+}
+
+static int fdma_compile_params(struct fdma_channel *channel,
+		struct stm_dma_params *params)
+{
+	struct fdma *fdma = channel->fdma;
+	int res;
+
+	res = fdma_compile1(fdma, params);
+	if (res)
+		return res;
+
+	res = fdma_compile2(fdma, params);
+	if (res)
+		return res;
+
+	res = fdma_compile3(fdma, params);
+	if (res == 0) {
+		params->params_ops = &fdma_params_ops;
+		params->params_ops_priv = fdma;
+	}
+
+	return res;
+}
+
+static void fdma_free(struct dma_channel *dma_chan)
+{
+	struct fdma_channel *channel = dma_chan->priv_data;
+	struct fdma *fdma = channel->fdma;
+	unsigned long irq_flags = 0;
+
+	spin_lock_irqsave(&fdma->channels_lock, irq_flags);
+
+	if (channel->sw_state != FDMA_IDLE) {
+		spin_unlock_irqrestore(&fdma->channels_lock, irq_flags);
+		fdma_dbg(fdma, "%s channel not idle\n", __FUNCTION__);
+		return;
+	}
+
+	BUG_ON(fdma_get_engine_status(channel) != FDMA_CHANNEL_IDLE);
+
+	spin_unlock_irqrestore(&fdma->channels_lock, irq_flags);
+}
+
+/* Note although this returns an int, the dma-api code throws this away. */
+static int fdma_configure(struct dma_channel *dma_chan,
+		unsigned long flags)
+{
+	struct fdma_channel *channel = dma_chan->priv_data;
+	struct fdma *fdma = channel->fdma;
+	struct stm_dma_params *params = (struct stm_dma_params *)flags;
+	unsigned long irq_flags = 0;
+
+	spin_lock_irqsave(&fdma->channels_lock, irq_flags);
+	if (channel->sw_state != FDMA_IDLE) {
+		spin_unlock_irqrestore(&fdma->channels_lock, irq_flags);
+		fdma_dbg(fdma, "%s channel not idle\n", __FUNCTION__);
+		return -EBUSY;
+	}
+
+	if (!((struct fdma_xfer_descriptor *)(params->priv))->llu_nodes) {
+		fdma_dbg(fdma, "%s no nodelist alloced\n", __FUNCTION__);
+		spin_unlock_irqrestore(&fdma->channels_lock, irq_flags);
+		return -ENOMEM;
+	}
+
+	/* Now we are associating the compiled transfer llu & params to the
+	 * channel */
+	channel->params = params;
+	tasklet_init(&channel->fdma_complete, params->comp_cb,
+			(unsigned long)params->comp_cb_parm);
+	tasklet_init(&channel->fdma_error, params->err_cb,
+			(unsigned long)params->err_cb_parm);
+	channel->sw_state = FDMA_CONFIGURED;
+
+	spin_unlock_irqrestore(&fdma->channels_lock, irq_flags);
+
+	return 0;
+}
+
+static int fdma_xfer(struct dma_channel *dma_chan,
+		unsigned long sar, unsigned long dar,
+		size_t count, unsigned int mode)
+{
+	struct fdma_channel *channel = dma_chan->priv_data;
+	struct fdma *fdma = channel->fdma;
+	struct fdma_xfer_descriptor *desc;
+	unsigned long irqflags = 0;
+
+	/* we need to check that the compile has been completed */
+	spin_lock_irqsave(&fdma->channels_lock, irqflags);
+
+	if (channel->sw_state != FDMA_CONFIGURED) {
+		spin_unlock_irqrestore(&fdma->channels_lock, irqflags);
+		return -EINVAL;
+	}
+
+	desc = (struct fdma_xfer_descriptor *)channel->params->priv;
+
+	BUG_ON(fdma_get_engine_status(channel) != FDMA_CHANNEL_IDLE);
+
+	fdma_start_channel(channel, desc->llu_nodes->dma_addr,
+			desc->llu_nodes->virt_addr->size_bytes);
+	channel->sw_state = FDMA_RUNNING;
+
+	spin_unlock_irqrestore(&fdma->channels_lock, irqflags);
+
+	return 0;
+}
+
+static int fdma_extended(struct dma_channel *dma_chan,
+		unsigned long opcode, void *ext_param)
+{
+	struct fdma_channel *channel = dma_chan->priv_data;
+
+	switch (opcode) {
+	case STM_DMA_OP_FLUSH:
+		return fdma_pause(channel, 1);
+	case STM_DMA_OP_PAUSE:
+		return fdma_pause(channel, 0);
+	case STM_DMA_OP_UNPAUSE:
+		return fdma_unpause(channel);
+	case STM_DMA_OP_STOP:
+		return fdma_stop(channel);
+	case STM_DMA_OP_COMPILE:
+		return fdma_compile_params(channel, ext_param);
+	case STM_DMA_OP_STATUS:
+		return fdma_get_engine_status(channel);
+	case STM_DMA_OP_REQ_CONFIG:
+		return (int)fdma_configure_pace_channel(channel, ext_param);
+	case STM_DMA_OP_REQ_FREE:
+		fdma_req_free(channel, ext_param);
+		return 0;
+	default:
+		return -ENOSYS;
+	}
+}
+
+/*---------------------------------------------------------------------*
+ *---------------------------------------------------------------------*
+ * MODULE INIT & REGISTRATION
+ *---------------------------------------------------------------------*
+ *---------------------------------------------------------------------*/
+
+static struct dma_ops fdma_ops = {
+	.request	= fdma_request,
+	.free		= fdma_free,
+	.get_residue	= fdma_get_residue,
+	.xfer		= fdma_xfer,
+	.configure	= fdma_configure,
+	.extend		= fdma_extended,
+};
+
+static int __init fdma_driver_probe(struct platform_device *pdev)
+{
+	struct stm_plat_fdma_data *plat_data;
+	struct fdma *fdma = NULL;
+	struct resource *res;
+	int chan_num;
+	int err = 0;
+
+	plat_data = pdev->dev.platform_data;
+
+	fdma = kzalloc(sizeof(struct fdma), GFP_KERNEL);
+	if (fdma == NULL)
+		return -ENOMEM;
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	if (!res)
+		return -ENODEV;
+
+	fdma->phys_mem = request_mem_region(res->start,
+			res->end - res->start + 1, pdev->name);
+	if (fdma->phys_mem == NULL)
+		return -EBUSY;
+
+	fdma->io_base = ioremap_nocache(res->start, res->end - res->start + 1);
+	if (fdma->io_base == NULL)
+		return -EINVAL;
+
+	fdma->pdev = pdev;
+
+	fdma->ch_min = plat_data->min_ch_num;
+	fdma->ch_max = plat_data->max_ch_num;
+	fdma->fdma_num = pdev->id;
+	fdma->ch_status_mask = ((1ULL << ((fdma->ch_max + 1) * 2)) - 1ULL) ^
+			((1 << (fdma->ch_min * 2)) - 1);
+
+	fdma->fw = plat_data->fw;
+	fdma->hw = plat_data->hw;
+
+	fdma->regs.id = fdma->hw->slim_regs.id;
+	fdma->regs.ver = fdma->hw->slim_regs.ver;
+	fdma->regs.en = fdma->hw->slim_regs.en;
+	fdma->regs.clk_gate = fdma->hw->slim_regs.clk_gate;
+	fdma->regs.rev_id = fdma->fw->fw_regs.rev_id;
+	fdma->regs.cmd_statn = fdma->fw->fw_regs.cmd_statn;
+	fdma->regs.req_ctln = fdma->fw->fw_regs.req_ctln;
+	fdma->regs.ptrn = fdma->fw->fw_regs.ptrn;
+	fdma->regs.cntn = fdma->fw->fw_regs.cntn;
+	fdma->regs.saddrn = fdma->fw->fw_regs.saddrn;
+	fdma->regs.daddrn = fdma->fw->fw_regs.daddrn;
+	fdma->regs.sync_reg = fdma->hw->periph_regs.sync_reg;
+	fdma->regs.cmd_sta = fdma->hw->periph_regs.cmd_sta;
+	fdma->regs.cmd_set = fdma->hw->periph_regs.cmd_set;
+	fdma->regs.cmd_clr = fdma->hw->periph_regs.cmd_clr;
+	fdma->regs.cmd_mask = fdma->hw->periph_regs.cmd_mask;
+	fdma->regs.int_sta = fdma->hw->periph_regs.int_sta;
+	fdma->regs.int_set = fdma->hw->periph_regs.int_set;
+	fdma->regs.int_clr = fdma->hw->periph_regs.int_clr;
+	fdma->regs.int_mask = fdma->hw->periph_regs.int_mask;
+
+	/* Req lines 0 and 31 are basically unusable */
+	fdma->reqs_used_mask = (1 << 31) | (1 << 0);
+	spin_lock_init(&fdma->reqs_lock);
+
+	spin_lock_init(&fdma->channels_lock);
+	init_waitqueue_head(&fdma->fw_load_q);
+
+	fdma->dma_info.nr_channels = fdma->ch_max - fdma->ch_min + 1;
+	fdma->dma_info.ops = &fdma_ops;
+	fdma->dma_info.flags = DMAC_CHANNELS_TEI_CAPABLE;
+	strlcpy(fdma->name, STM_DMAC_ID, FDMA_NAME_LEN);
+	if (pdev->id != -1) {
+		int len = strlen(fdma->name);
+		snprintf(fdma->name + len, FDMA_NAME_LEN - len, ".%d",
+				pdev->id);
+	}
+	fdma->dma_info.name = fdma->name;
+
+	if (register_dmac(&fdma->dma_info) != 0)
+		printk(KERN_ERR "%s Error Registering DMAC\n", __FUNCTION__);
+
+	for (chan_num = fdma->ch_min; chan_num <= fdma->ch_max; chan_num++) {
+		struct fdma_channel *channel = &fdma->channels[chan_num];
+		struct dma_channel *dma_chan;
+
+		channel->chan_num = chan_num;
+		channel->fdma = fdma;
+
+		dma_chan = get_dma_channel(chan_num - fdma->ch_min);
+		dma_chan->priv_data = channel;
+		channel->dma_chan = dma_chan;
+	}
+
+	err = request_irq(platform_get_irq(pdev, 0), fdma_irq,
+			 IRQF_DISABLED | IRQF_SHARED, fdma->name, fdma);
+	if (err < 0)
+		panic("Cant Register irq %d for FDMA engine err %d\n",
+				fdma->irq, err);
+
+	fdma_register_caps(fdma);
+
+	fdma_check_firmware_state(fdma);
+
+	platform_set_drvdata(pdev, fdma);
+
+	return 0;
+}
+
+static int fdma_driver_remove(struct platform_device *pdev)
+{
+	struct fdma *fdma = platform_get_drvdata(pdev);
+
+	fdma_disable_all_channels(fdma);
+	iounmap(fdma->io_base);
+	dma_pool_destroy(fdma->llu_pool);
+	free_irq(fdma->irq, fdma);
+	unregister_dmac(&fdma->dma_info);
+	release_resource(fdma->phys_mem);
+	kfree(fdma);
+
+	return 0;
+}
+
+static struct platform_driver fdma_driver = {
+	.driver.name = "stm-fdma",
+	.probe = fdma_driver_probe,
+	.remove = fdma_driver_remove,
+};
+
+static int __init fdma_init(void)
+{
+	return platform_driver_register(&fdma_driver);
+}
+
+static void __exit fdma_exit(void)
+{
+	platform_driver_unregister(&fdma_driver);
+}
+
+module_init(fdma_init)
+module_exit(fdma_exit)
diff --git a/drivers/stm/fdma.h b/drivers/stm/fdma.h
index 3797016..72facba 100644
--- a/drivers/stm/fdma.h
+++ b/drivers/stm/fdma.h
@@ -10,8 +10,15 @@
 #ifndef __STM_FDMA_H
 #define __STM_FDMA_H
 
+#include <linux/interrupt.h>
+#include <linux/stm/soc.h>
+#include <linux/stm/stm-dma.h>
+
 #define CHAN_ALL_ENABLE 				3
 
+#define NODE_DATA_OFFSET				0x40
+#define CMD_STAT_OFFSET       				0x04
+
 /**cmd stat vals*/
 #define SET_NODE_COMP_PAUSE		    		(1 << 30)
 #define SET_NODE_COMP_IRQ				(1 << 31)
@@ -26,8 +33,7 @@
 #define CMDSTAT_FDMA_RESTART_CHANNEL			0
 
 #define FDMA_CHANS					16
-#define FDMA_7100_REQ_LINES				32
-#define FDMA_7200_REQ_LINES				64
+#define FDMA_REQ_LINES					32
 
 /*******************************/
 /*MBOX SETUP VALUES*/
@@ -38,7 +44,7 @@
 #define CLEAR_WORD					0XFFFFFFFF
 
 #define CMD_STAT_REG(_chan_num) \
-		(fdma->io_base + fdma->regs.fdma_cmd_statn + \
+		(fdma->io_base + fdma->regs.cmd_statn + \
 		(_chan_num * CMD_STAT_OFFSET))
 
 #define FDMA_CHANNEL_IDLE 		0
@@ -93,6 +99,10 @@ enum fdma_state {
 
 struct fdma;
 
+struct stm_dma_req {
+	int req_line;
+};
+
 struct fdma_channel {
 	struct fdma *fdma;
 	int chan_num;
@@ -103,15 +113,46 @@ struct fdma_channel {
 	struct tasklet_struct fdma_error;
 };
 
+struct fdma_regs {
+	unsigned long id;
+	unsigned long ver;
+	unsigned long en;
+	unsigned long clk_gate;
+	unsigned long rev_id;
+	unsigned long cmd_statn;
+	unsigned long ptrn;
+	unsigned long cntn;
+	unsigned long saddrn;
+	unsigned long daddrn;
+	unsigned long req_ctln;
+	unsigned long sync_reg;
+	unsigned long cmd_sta;
+	unsigned long cmd_set;
+	unsigned long cmd_clr;
+	unsigned long cmd_mask;
+	unsigned long int_sta;
+	unsigned long int_set;
+	unsigned long int_clr;
+	unsigned long int_mask;
+};
+
 #define FDMA_NAME_LEN 20
 
 struct fdma {
 	char name[FDMA_NAME_LEN];
+	struct platform_device *pdev;
+
 	struct dma_info dma_info;
 	struct fdma_channel channels[FDMA_CHANS];
 	spinlock_t channels_lock; /* protects channels array */
+
 	struct resource *phys_mem;
 	void __iomem *io_base;
+
+	struct stm_dma_req reqs[FDMA_REQ_LINES];
+	unsigned long reqs_used_mask;
+	spinlock_t reqs_lock; /* protects reqs_used_mask */
+
 	u32 firmware_loaded;
 	u8 ch_min;
 	u8 ch_max;
@@ -121,16 +162,22 @@ struct fdma {
 	struct dma_pool *llu_pool;
 	wait_queue_head_t fw_load_q;
 
-	struct fdma_regs regs;
+	struct stm_plat_fdma_hw *hw;
+	struct stm_plat_fdma_fw *fw;
 
-	char *fw_name;
-	struct fdma_fw fw;
-	int comp_ch;
+	struct fdma_regs regs;
+};
 
-	/* This is used with the xbar to allocate the next available req line */
-	unsigned long req_lines_inuse;
+struct fdma_req_router {
+	int (*route)(struct fdma_req_router *router, int input_req_line,
+			int fdma, int fdma_req_line);
 };
 
+int fdma_register_req_router(struct fdma_req_router *router);
+void fdma_unregister_req_router(struct fdma_req_router *router);
+
+
+
 typedef volatile unsigned long device_t;
 
 #define fdma_printk(level, fd, format, arg...)	\
@@ -145,9 +192,4 @@ typedef volatile unsigned long device_t;
 #define fdma_dbg(fd, format, arg...)		do { } while (0)
 #endif
 
-struct stm_dma_req {
-	struct fdma_channel *channel;
-	int local_req_line;
-};
-
 #endif
diff --git a/include/linux/stm/fdma_firmware_7100.h b/include/linux/stm/fdma_firmware_7100.h
new file mode 100644
index 0000000..c629e0c
--- /dev/null
+++ b/include/linux/stm/fdma_firmware_7100.h
@@ -0,0 +1,719 @@
+#ifndef __STM_FDMA_FIRMWARE_7100_H
+#define __STM_FDMA_FIRMWARE_7100_H
+
+#include <linux/kernel.h>
+#include <linux/stm/soc.h>
+
+
+
+static unsigned long stm_fdma_firmware_7100_dmem[] =
+{
+	0x02030209, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x23104052, 0x00000000, 0x00000000, 0x21100051, 0x00000000,
+	0x020001ad, 0x020301b0, 0x020601b3, 0x020901b6, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x0000031e, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x0000007e, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x000000fe, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x0000241b, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00002424,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x0000242d, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00002436, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0000243f,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00001448, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x0000144d, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00001452,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00001457, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x0000145c, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00001061,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00004065, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00001475, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0000147a,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x0000147f, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00001484, 0xadd0add0, 0xadd0add0, 0xadd0add0, 0xadd0add0,
+	0xadd0add0, 0xadd0add0, 0xadd0add0, 0xadd0add0, 0xadd0add0, 0xadd0add0,
+	0xadd0add0, 0xadd0add0, 0xadd0add0, 0xadd0add0, 0x00002212, 0x05800580,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xadd1add1, 0xadd1add1,
+	0xadd1add1, 0xadd1add1, 0xadd1add1, 0xadd1add1, 0xadd1add1, 0xadd1add1,
+	0xadd1add1, 0xadd1add1, 0xadd1add1, 0xadd1add1, 0xadd1add1, 0xadd1add1,
+	0x00002212, 0x05a005a0, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0xadd2add2, 0xadd2add2, 0xadd2add2, 0xadd2add2, 0xadd2add2, 0xadd2add2,
+	0xadd2add2, 0xadd2add2, 0xadd2add2, 0xadd2add2, 0xadd2add2, 0xadd2add2,
+	0xadd2add2, 0xadd2add2, 0x00002212, 0x05c005c0, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0xadd3add3, 0xadd3add3, 0xadd3add3, 0xadd3add3,
+	0xadd3add3, 0xadd3add3, 0xadd3add3, 0xadd3add3, 0x000000c0, 0x00000000,
+	0xadd3add3, 0xadd3add3, 0xadd3add3, 0xadd3add3, 0x00002212, 0x05e005e0,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000
+};
+
+
+
+static unsigned long stm_fdma_firmware_7100_imem[] = {
+	0x00f51000, 0x00ef0013, 0x00e10001, 0x00ee0080, 0x00b010ea, 0x00f01000,
+	0x00ef0013, 0x00ed000a, 0x009b32f9, 0x00d00090, 0x00a300e0, 0x00aa000b,
+	0x00433a00, 0x009c1504, 0x009a2247, 0x00d00090, 0x00a70005, 0x00177030,
+	0x009c1227, 0x00d00090, 0x00a70004, 0x009c178d, 0x00d00090, 0x00a70021,
+	0x009c184f, 0x00d00090, 0x00a00006, 0x009c146f, 0x00d00090, 0x00a70002,
+	0x009c15f2, 0x00d00090, 0x00a90003, 0x009c1037, 0x00d00090, 0x00a20001,
+	0x009c145d, 0x00d00090, 0x00d00017, 0x00452003, 0x00461003, 0x00355600,
+	0x00755461, 0x00a6040e, 0x00555001, 0x00765080, 0x00d00090, 0x00b0640e,
+	0x00755c23, 0x00761c62, 0x00266500, 0x007564ca, 0x00d00090, 0x00b0540b,
+	0x00840d00, 0x00b0deff, 0x003ee001, 0x00799e00, 0x00d19040, 0x00ea0460,
+	0x00721484, 0x00222a00, 0x00f00000, 0x00aa020e, 0x00ac020f, 0x00a50a0c,
+	0x00ab0a0e, 0x00b050e9, 0x00d0b070, 0x009c106d, 0x00d00090, 0x00a70a0d,
+	0x00a40003, 0x0074003f, 0x00840700, 0x00a50a04, 0x00b04003, 0x00d7c070,
+	0x0098106d, 0x0044507f, 0x009c10a9, 0x00d7c070, 0x00177002, 0x0098106d,
+	0x00407080, 0x00981124, 0x00ed0061, 0x008c812a, 0x009c812a, 0x00e70020,
+	0x00af0007, 0x005f0500, 0x00a82c00, 0x005f0800, 0x00b080eb, 0x00255004,
+	0x009a80e4, 0x00377001, 0x008c305c, 0x00a600e9, 0x00b0c20f, 0x00a80a02,
+	0x00a70a05, 0x00605800, 0x009c106a, 0x0005073c, 0x00b06a0c, 0x00b05a04,
+	0x00b0ba0e, 0x00a70a01, 0x0098111f, 0x00d00090, 0x00a50a00, 0x00d6b070,
+	0x00881090, 0x0099109d, 0x00d00090, 0x00a40201, 0x00ef4042, 0x00744d10,
+	0x00144008, 0x004f50f0, 0x00a32b00, 0x009c2083, 0x00d00090, 0x005f4001,
+	0x00a72b00, 0x00af2b00, 0x004f3001, 0x000f073c, 0x00d00817, 0x005f0400,
+	0x00af2b00, 0x000f033c, 0x005f0000, 0x00a70a01, 0x00255010, 0x00377010,
+	0x00b05a00, 0x00b07a01, 0x0098311f, 0x00d0b070, 0x009c1073, 0x00d00090,
+	0x00a00003, 0x00b0ba0e, 0x00982047, 0x00d00090, 0x00a00202, 0x0098109d,
+	0x00e30027, 0x00d0c370, 0x009c212a, 0x00d00090, 0x00a60003, 0x00b00003,
+	0x00b06002, 0x00b0ba0e, 0x00d4b070, 0x00d7c070, 0x00544700, 0x008c112a,
+	0x00d00090, 0x00a70202, 0x009c112a, 0x00ed00a7, 0x008c04b2, 0x00b00003,
+	0x00d0121a, 0x0099112a, 0x00ed00ca, 0x00d7c070, 0x00177002, 0x0098106d,
+	0x00d00090, 0x00a00202, 0x009810b3, 0x00307020, 0x00982090, 0x0044501f,
+	0x00234700, 0x004030e0, 0x009810b8, 0x00e30020, 0x00333001, 0x003734ff,
+	0x007430a8, 0x00ef4252, 0x005f0400, 0x004f50e0, 0x00764c62, 0x009810c5,
+	0x005f0000, 0x00366001, 0x009c30c0, 0x00d00090, 0x00d00090, 0x00a82c00,
+	0x005f0800, 0x00b080eb, 0x00255004, 0x009a80e4, 0x00377004, 0x009c30c5,
+	0x00764ca8, 0x00d00090, 0x003606e1, 0x0016603e, 0x009810d5, 0x005f0000,
+	0x00366001, 0x009c30d1, 0x00d00090, 0x00b0c20f, 0x00a600e9, 0x00a80a02,
+	0x00a70a05, 0x00605800, 0x009c10dc, 0x0005073c, 0x00b06a0c, 0x00b05a04,
+	0x00b0ba0e, 0x00d4c070, 0x0098106d, 0x0044507f, 0x009c10a9, 0x00d0061d,
+	0x00a30a00, 0x00433001, 0x00941d00, 0x00d00090, 0x00b06eff, 0x00b07efe,
+	0x00b08efd, 0x00b09efc, 0x00b0cefb, 0x003ee005, 0x00a60a07, 0x00a70a08,
+	0x00a800e9, 0x00ec0000, 0x00788d00, 0x00106001, 0x009c2103, 0x00796d08,
+	0x003c9800, 0x00796d00, 0x00398900, 0x005cc900, 0x006cc600, 0x009c2103,
+	0x007c6c3d, 0x007cc43e, 0x00666c00, 0x007c7c3d, 0x007cc43e, 0x00577c00,
+	0x00d01112, 0x00107001, 0x009c2119, 0x00797d08, 0x003c9800, 0x00797d00,
+	0x00398900, 0x005cc900, 0x006cc700, 0x009c2119, 0x007c7c3d, 0x007cc43e,
+	0x00677c00, 0x007c6c3d, 0x007cc43e, 0x00566c00, 0x00a900e9, 0x00b06a07,
+	0x00b07a08, 0x00799c48, 0x002995fc, 0x00b28b00, 0x00b29b00, 0x00ac1e01,
+	0x00a91e01, 0x00a81e01, 0x00a71e01, 0x00a61e01, 0x00840d00, 0x00a40a00,
+	0x00544001, 0x007b0210, 0x00b04a00, 0x00d00910, 0x00a30202, 0x009810a9,
+	0x00d00090, 0x00a60003, 0x00b00003, 0x00b06002, 0x00ad1e01, 0x00d00213,
+	0x00a50a04, 0x00b04003, 0x00d7c070, 0x0098106d, 0x0044507f, 0x009c1150,
+	0x00d7c070, 0x00177002, 0x0098106d, 0x00407080, 0x009811e7, 0x00ed0142,
+	0x008c81ed, 0x009c81ed, 0x00e70020, 0x00af0007, 0x005f0500, 0x00a82c00,
+	0x005f0800, 0x00b080eb, 0x00255004, 0x009a818a, 0x00377001, 0x008c313d,
+	0x00a600e9, 0x00b0c20f, 0x00a80a02, 0x00a70a05, 0x00605800, 0x009c114b,
+	0x0005073c, 0x00b06a0c, 0x00b05a04, 0x00b0ba0e, 0x008c006d, 0x008c0090,
+	0x009911ed, 0x00ed0171, 0x00d7c070, 0x00177002, 0x0098106d, 0x00d00090,
+	0x00a00202, 0x0098115a, 0x00307020, 0x00982090, 0x0044501f, 0x00234700,
+	0x004030e0, 0x0098115f, 0x00e30020, 0x00333001, 0x003734ff, 0x007430a8,
+	0x00ef4252, 0x005f0400, 0x004f50e0, 0x00764c62, 0x0098116c, 0x005f0000,
+	0x00366001, 0x009c3167, 0x00d00090, 0x00d00090, 0x00a82c00, 0x005f0800,
+	0x00b080eb, 0x00255004, 0x009a818a, 0x00377004, 0x009c316c, 0x00764ca8,
+	0x00d00090, 0x003606e1, 0x0016603e, 0x0098117c, 0x005f0000, 0x00366001,
+	0x009c3178, 0x00d00090, 0x00b0c20f, 0x00a600e9, 0x00a80a02, 0x00a70a05,
+	0x00605800, 0x009c1183, 0x0005073c, 0x00b06a0c, 0x00b05a04, 0x00d4c070,
+	0x0098106d, 0x0044507f, 0x009c1150, 0x00d0061d, 0x00a30a00, 0x00433001,
+	0x00941d00, 0x00d00090, 0x00b08a10, 0x00b01eff, 0x00b04efe, 0x00b07efd,
+	0x00b08efc, 0x00b09efb, 0x00b0cefa, 0x003ee006, 0x00a900e9, 0x00789d00,
+	0x00ac0e00, 0x00778ca0, 0x00799c48, 0x0003093c, 0x002995fc, 0x00e44400,
+	0x00144710, 0x009c21c8, 0x00d00090, 0x00d0c070, 0x009c11a8, 0x00d00090,
+	0x00e401ef, 0x00b09a11, 0x00b04a0d, 0x00d01d1b, 0x00a7030c, 0x00777e00,
+	0x00a42c00, 0x00a10a10, 0x00840700, 0x00714100, 0x00011001, 0x00d01b17,
+	0x00714200, 0x00011002, 0x00d01b17, 0x00714300, 0x00011003, 0x00d01b17,
+	0x0001043c, 0x00011040, 0x00d41040, 0x00ac0a12, 0x003404e1, 0x00111400,
+	0x002404e1, 0x00111400, 0x00311001, 0x00301c00, 0x00b01a12, 0x009831d4,
+	0x00d00090, 0x00a10a08, 0x00211001, 0x00d00090, 0x00b01a08, 0x00d01d1b,
+	0x00e40270, 0x00144710, 0x009821d4, 0x00c080b4, 0x009811cf, 0x00780327,
+	0x008c01d0, 0x00780308, 0x00d00090, 0x00b28b00, 0x00b29b00, 0x00d01d1b,
+	0x00ac0a08, 0x002cc001, 0x0078c308, 0x00780027, 0x00b00a08, 0x00b28b00,
+	0x00b29b00, 0x00ac1e01, 0x00a91e01, 0x00a81e01, 0x00a71e01, 0x00a41e01,
+	0x00a11e01, 0x00840d00, 0x00a40a00, 0x00544001, 0x007b0210, 0x00b04a00,
+	0x00d00910, 0x00a30202, 0x00981150, 0x00d00090, 0x00a60003, 0x00b00003,
+	0x00b06002, 0x00ad1e01, 0x00d00213, 0x00b01eff, 0x00b02efe, 0x00b03efd,
+	0x00b04efc, 0x00b0cefb, 0x003ee005, 0x00e2012c, 0x00a32c00, 0x00b02a0d,
+	0x00a20a0c, 0x00742c48, 0x00d00090, 0x00a4040c, 0x00744e10, 0x00a10a10,
+	0x00d00090, 0x00840400, 0x00713100, 0x00011001, 0x00d0201a, 0x00713200,
+	0x00011002, 0x00d0201a, 0x00713300, 0x00011003, 0x00d0201a, 0x0001033c,
+	0x00011040, 0x00d41040, 0x00a30a12, 0x003404e1, 0x00111400, 0x002404e1,
+	0x00111400, 0x00311001, 0x00a40a08, 0x00b01a12, 0x00244001, 0x00301300,
+	0x0098321a, 0x00d00090, 0x00b04a08, 0x00d02211, 0x00a10a0c, 0x00b00a08,
+	0x00714308, 0x00710027, 0x00a30a11, 0x00b21b00, 0x00b23b00, 0x00ac1e01,
+	0x00a41e01, 0x00a31e01, 0x00a21e01, 0x00a11e01, 0x00d0121c, 0x00f00000,
+	0x00d87040, 0x00982242, 0x00e10460, 0x00198004, 0x00299100, 0x00e10000,
+	0x00aa0900, 0x00ed0231, 0x008c0499, 0x00981242, 0x00e40329, 0x007445f0,
+	0x00544850, 0x00a1000a, 0x00b04300, 0x005f1200, 0x004fa0e0, 0x00ea0001,
+	0x00ab090f, 0x001aa800, 0x007b01f0, 0x00677a00, 0x00e10040, 0x00b0b90f,
+	0x00b0190b, 0x00d02218, 0x00aa0005, 0x007a7210, 0x00d00090, 0x00b0a005,
+	0x00d00114, 0x00ac00f0, 0x00a80005, 0x00d1c040, 0x009822f7, 0x0011103f,
+	0x001a1001, 0x00320a00, 0x0013c200, 0x00193a00, 0x00e20257, 0x00222300,
+	0x006cc900, 0x00eb0460, 0x0005013c, 0x00155004, 0x00255b00, 0x00840200,
+	0x00d02919, 0x00d00090, 0x00a2050b, 0x00722d00, 0x009c1249, 0x00e20001,
+	0x00122100, 0x00ab0022, 0x004bb200, 0x009c1249, 0x00588200, 0x00a40501,
+	0x00eb0001, 0x007a4ca0, 0x001bba00, 0x004bb0fe, 0x00981275, 0x009c2270,
+	0x007a4d00, 0x00c0a03f, 0x009c1275, 0x007a4ca8, 0x00eb0001, 0x001bba00,
+	0x00a3000b, 0x006bb0ff, 0x00433b00, 0x00d00090, 0x00b0300b, 0x00ab050b,
+	0x007bbd00, 0x009c1249, 0x00722210, 0x006220ff, 0x00ab0001, 0x00a40002,
+	0x004bb200, 0x00444200, 0x00b0b001, 0x00ab0006, 0x00b04002, 0x00a40004,
+	0x004bb200, 0x00444200, 0x00488200, 0x00b0b006, 0x00b04004, 0x00a40021,
+	0x00444200, 0x00eb0003, 0x00b04021, 0x00a40110, 0x0074b0a0, 0x00a300f4,
+	0x001b1001, 0x00e20001, 0x00122b00, 0x00402300, 0x00981295, 0x00122001,
+	0x00740062, 0x00b020f5, 0x00b04110, 0x00b090f2, 0x00d02419, 0x00e40001,
+	0x00144100, 0x006440ff, 0x00488400, 0x00a60110, 0x0042601f, 0x004660e0,
+	0x00566002, 0x00c02000, 0x00b06110, 0x009812aa, 0x00e20001, 0x00122110,
+	0x00588200, 0x00b06500, 0x00b090f2, 0x00d02419, 0x00a00502, 0x009c12b3,
+	0x0002053c, 0x00b08eff, 0x003ee001, 0x00ed02b1, 0x008c04b2, 0x00a81e01,
+	0x00d02419, 0x00a40501, 0x00b06110, 0x0042401f, 0x009812d1, 0x0042403f,
+	0x00c0201f, 0x009812d8, 0x00c0203f, 0x009812df, 0x00e605e0, 0x0042401f,
+	0x00e40001, 0x00144200, 0x00a3000b, 0x00533400, 0x00266200, 0x00b0300b,
+	0x00a20600, 0x00721088, 0x00742c2e, 0x00b02600, 0x00144004, 0x00244100,
+	0x00e60001, 0x00166400, 0x00a20006, 0x00522600, 0x00b090f2, 0x00b02006,
+	0x00d02419, 0x00a20001, 0x00eb0001, 0x001bb100, 0x00522b00, 0x00b090f2,
+	0x00b02001, 0x00d02419, 0x00a20002, 0x00eb0001, 0x001bb100, 0x00522b00,
+	0x00b090f2, 0x00b02002, 0x00d02419, 0x00724ca8, 0x00eb0001, 0x001bb200,
+	0x00a3000b, 0x00533b00, 0x00a20004, 0x00b0300b, 0x00704c2d, 0x009812ea,
+	0x00d00090, 0x00a20021, 0x00eb0001, 0x001bb100, 0x00522b00, 0x00b090f2,
+	0x00704c2d, 0x009c12f2, 0x00d00090, 0x00b02004, 0x00704c2d, 0x009812f6,
+	0x00d00090, 0x00b02021, 0x00d02419, 0x00b08005, 0x00d00110, 0x00b01eff,
+	0x00b02efe, 0x00b03efd, 0x00b04efc, 0x00b05efb, 0x00b06efa, 0x00b07ef9,
+	0x00b08ef8, 0x00b09ef7, 0x00b0aef6, 0x00b0bef5, 0x00b0cef4, 0x00b0def3,
+	0x003ee00d, 0x00d80050, 0x00788c4c, 0x009c131a, 0x00d00090, 0x00d00090,
+	0x00ad1e01, 0x00ac1e01, 0x00ab1e01, 0x00aa1e01, 0x00a91e01, 0x00a81e01,
+	0x00a71e01, 0x00a61e01, 0x00a51e01, 0x00a41e01, 0x00a31e01, 0x00a21e01,
+	0x00a11e01, 0x00840d00, 0x00da8040, 0x00e60080, 0x0076a023, 0x00a70aec,
+	0x00767060, 0x00d00090, 0x00a10600, 0x00b06009, 0x00731c80, 0x00741df0,
+	0x00751c64, 0x00e20460, 0x00793484, 0x00299200, 0x00840400, 0x00f00000,
+	0x0007093c, 0x00d00090, 0x00d00008, 0x00b1f701, 0x00a00902, 0x00981451,
+	0x00d00090, 0x00a60901, 0x0040601f, 0x0098133a, 0x0047603f, 0x00c0701f,
+	0x00981351, 0x00c0703f, 0x00981373, 0x00d0431b, 0x00e70001, 0x00d00008,
+	0x00400f00, 0x00a60001, 0x00177300, 0x00566700, 0x00d00090, 0x00b06001,
+	0x00a60905, 0x00a70902, 0x00307600, 0x008c2347, 0x0006073c, 0x00a10903,
+	0x00b0690c, 0x00b0690d, 0x00a20904, 0x00b01909, 0x00b0290a, 0x0004093c,
+	0x00ed0350, 0x008c0027, 0x00d04517, 0x00d00008, 0x00400f00, 0x00a70002,
+	0x00e20001, 0x00122300, 0x00577100, 0x007a6c88, 0x001aa005, 0x00e20560,
+	0x002aa200, 0x00b07002, 0x00b0a90e, 0x00b0090b, 0x00a00a0d, 0x008c1457,
+	0x00a60a0e, 0x00760210, 0x00a20a0f, 0x00b06a0e, 0x00722a10, 0x00e60001,
+	0x00b02a0f, 0x00a2090f, 0x00e7004b, 0x00a60a07, 0x00706c3c, 0x0088136e,
+	0x00e7012c, 0x00b00a08, 0x00720210, 0x00b07a0d, 0x00b0290f, 0x00b00a13,
+	0x00d04517, 0x00706c2d, 0x009c140e, 0x00eb05c0, 0x00ac090f, 0x007c0210,
+	0x00a00b09, 0x00b0c90f, 0x00981394, 0x00d00090, 0x00ad0903, 0x007ddc62,
+	0x00a2090e, 0x00522001, 0x00762c23, 0x002dd600, 0x00b0290e, 0x001dd00a,
+	0x00d00008, 0x00500f00, 0x00b0d90b, 0x00ad0902, 0x00a20901, 0x00702c3d,
+	0x0098138e, 0x00d00090, 0x00b0d90c, 0x00d03a1a, 0x00ed0001, 0x0072d03c,
+	0x00b0090c, 0x00b02901, 0x00ed0000, 0x00d03a1a, 0x0028b004, 0x00a10903,
+	0x00d00004, 0x00b1f801, 0x00d00004, 0x00500f00, 0x00a20904, 0x0004093c,
+	0x00ed039e, 0x008c0027, 0x00ad0902, 0x00a20901, 0x00b0d90c, 0x00702c3d,
+	0x009c13aa, 0x00d00090, 0x0002093c, 0x00b00900, 0x0001033c, 0x00ed03a9,
+	0x008c04b2, 0x00d04517, 0x002dd003, 0x001dd03e, 0x001dd003, 0x00d00090,
+	0x00b0d90d, 0x00b0d902, 0x00a00b09, 0x009c13f6, 0x00d00090, 0x00ad0907,
+	0x003dd002, 0x00a20b07, 0x00b0db09, 0x00782c44, 0x0042200f, 0x00188002,
+	0x00b02b07, 0x00b08909, 0x00a20b05, 0x00762c44, 0x0042200f, 0x00166002,
+	0x00b02b05, 0x00b06908, 0x00a50b08, 0x009c13cd, 0x00e500c0, 0x00a20b05,
+	0x00ad0b07, 0x00b02b01, 0x00b0db03, 0x00a20b06, 0x00ad0b04, 0x00b02b02,
+	0x00b0db00, 0x00355002, 0x00a70905, 0x00b05b08, 0x000d073c, 0x00a50b00,
+	0x007d6200, 0x007d5021, 0x0015503f, 0x00b2dc00, 0x00a40b02, 0x001d7010,
+	0x007d8200, 0x007d4021, 0x0014403f, 0x00b2dc00, 0x00a70906, 0x000d073c,
+	0x007d6200, 0x007d5021, 0x0015503f, 0x00b2dc00, 0x001d7010, 0x007d8200,
+	0x007d4021, 0x0014403f, 0x00b2dc00, 0x00ad0b01, 0x0075d21e, 0x001dd03e,
+	0x00b05b00, 0x00b0db01, 0x00a20b03, 0x0074221e, 0x0012203e, 0x00ad090d,
+	0x002dd010, 0x00b04b02, 0x00b02b03, 0x00b0d90d, 0x00b0d902, 0x00b0c90f,
+	0x00ad0901, 0x0072dca8, 0x00e80001, 0x00a00900, 0x009c13fc, 0x007d803c,
+	0x00168200, 0x00a5000b, 0x00555600, 0x00148300, 0x00b0500b, 0x00b0d901,
+	0x00b04004, 0x00ed05e0, 0x002dd200, 0x00a60310, 0x00ab0d00, 0x007b3088,
+	0x004660e0, 0x00566002, 0x00b0bd00, 0x00b06310, 0x00010a3c, 0x00d04517,
+	0x00eb05c0, 0x00ac090f, 0x007c0210, 0x00b0090b, 0x0028b004, 0x00b0c90f,
+	0x00d00004, 0x00b1f801, 0x00d00004, 0x00500f00, 0x00a10902, 0x00a20b07,
+	0x00b0190c, 0x00b0190d, 0x00782c49, 0x00722d20, 0x00188002, 0x00b02b07,
+	0x00b08909, 0x00a20b05, 0x00762c49, 0x00722d20, 0x00166002, 0x00b02b05,
+	0x00b06908, 0x00a10901, 0x00721ca8, 0x00e80001, 0x00168200, 0x00a5000b,
+	0x00555600, 0x00148300, 0x00b0500b, 0x00b04021, 0x00e105e0, 0x00211200,
+	0x00a60310, 0x00ab0100, 0x007b3088, 0x004660e0, 0x00566002, 0x00b0b100,
+	0x00b06310, 0x00010a3c, 0x00d04517, 0x00d00008, 0x00400f00, 0x00e805e0,
+	0x004a601f, 0x00268a00, 0x00a2000b, 0x00a70600, 0x00e50001, 0x00773088,
+	0x00155a00, 0x00b07600, 0x00777c2e, 0x00177004, 0x00233700, 0x00e70001,
+	0x00177300, 0x00aa0006, 0x00522500, 0x005aa700, 0x00b0200b, 0x00b0a006,
+	0x00d03412, 0x0001033c, 0x0002093c, 0x00d00008, 0x00500f00, 0x00ed0457,
+	0x008c04b2, 0x00a20009, 0x00712c23, 0x00722c60, 0x00ed045c, 0x008c04a9,
+	0x00d03017, 0x00142030, 0x008c1460, 0x00722210, 0x00d12040, 0x00e30001,
+	0x00133100, 0x00622300, 0x00311010, 0x00b02001, 0x00ec0000, 0x00b01eff,
+	0x003ee001, 0x00ed046b, 0x008c0883, 0x00a11e01, 0x00ed046e, 0x008c08f4,
+	0x00d00216, 0x00a20006, 0x00722e10, 0x009c1473, 0x00d04815, 0x00ecf0f0,
+	0x00d12040, 0x00e30001, 0x00133100, 0x00622300, 0x00b01eff, 0x00b02efe,
+	0x00b0defd, 0x003ee003, 0x00ed047e, 0x008c0883, 0x00ad1e01, 0x00a21e01,
+	0x00a11e01, 0x00ec0000, 0x00500200, 0x009c1473, 0x00d00090, 0x00a20006,
+	0x00722e00, 0x009c1489, 0x00d0011d, 0x00d12040, 0x00e30001, 0x00133100,
+	0x00622300, 0x00b01eff, 0x00b02efe, 0x00b0defd, 0x003ee003, 0x00ed0493,
+	0x008c08f4, 0x00ad1e01, 0x00a21e01, 0x00a11e01, 0x00500200, 0x009c1489,
+	0x00d0011d, 0x00e30080, 0x00731023, 0x00e40001, 0x00a10300, 0x00d21040,
+	0x009c34a1, 0x00422000, 0x00840d00, 0x00144200, 0x00611400, 0x00742c22,
+	0x00b01300, 0x00533200, 0x0072244c, 0x0072403e, 0x00840d00, 0x00e30080,
+	0x00731023, 0x00e40001, 0x00144200, 0x00a10300, 0x00511400, 0x00d00090,
+	0x00b01300, 0x00840d00, 0x00a30201, 0x0007033c, 0x0077005e, 0x00ea05e0,
+	0x00b07201, 0x00773d00, 0x00c0703f, 0x009c14bc, 0x00773ca8, 0x00d04c10,
+	0x0047301f, 0x00c0701f, 0x009c14c0, 0x00e70000, 0x00a9000b, 0x00e80001,
+	0x00188700, 0x0078003f, 0x00780020, 0x006880ff, 0x00499800, 0x00a40110,
+	0x00b0900b, 0x00a60005, 0x00e70001, 0x00177100, 0x00777210, 0x006770ff,
+	0x00a80001, 0x00a90002, 0x00aa0006, 0x00488700, 0x00499700, 0x004aa700,
+	0x00b08001, 0x00a80004, 0x00b09002, 0x00488700, 0x00a90021, 0x00b0a006,
+	0x00499700, 0x00b08004, 0x00b09021, 0x00a00200, 0x00d50050, 0x00455001,
+	0x00773c3f, 0x00555700, 0x009814ef, 0x00d00090, 0x00a80128, 0x00288001,
+	0x00d00090, 0x00b08128, 0x00a700f4, 0x00181001, 0x00155800, 0x00407500,
+	0x009814ef, 0x00155001, 0x00740062, 0x00a70200, 0x009814f8, 0x00773c3e,
+	0x009814f8, 0x00177100, 0x00566700, 0x00e70003, 0x00747040, 0x00d05010,
+	0x00a70200, 0x009c14fc, 0x00740040, 0x00d05010, 0x00547002, 0x00e70001,
+	0x00177110, 0x00566700, 0x00b04110, 0x00b06005, 0x00b050f5, 0x00840d00,
+	0x00ec0001, 0x00da3040, 0x008c2508, 0x00d0001e, 0x0016ca00, 0x00eb05e0,
+	0x00633600, 0x002bba00, 0x00e40460, 0x00ab0b00, 0x0079bc88, 0x00169004,
+	0x00244600, 0x0076bc2e, 0x009c155b, 0x00d00090, 0x00a7040b, 0x00a1040e,
+	0x00401001, 0x009c151a, 0x00500700, 0x009c1505, 0x004110fe, 0x0076bc84,
+	0x00a8040c, 0x00b0140e, 0x00981505, 0x0075bcb8, 0x00255001, 0x00a1040f,
+	0x0016563e, 0x009c1525, 0x00e60001, 0x00751cc9, 0x00155002, 0x00d11070,
+	0x00211001, 0x00355100, 0x00305600, 0x00982505, 0x000a043c, 0x00b03eff,
+	0x003ee001, 0x0071bc56, 0x00981534, 0x00f40000, 0x00992539, 0x00d05316,
+	0x00f00000, 0x00991539, 0x00ed0538, 0x008c0499, 0x009c153d, 0x00d00090,
+	0x00d00090, 0x00a31e01, 0x00d05015, 0x0075bc84, 0x00e409a2, 0x007445f0,
+	0x00544900, 0x00745064, 0x00725084, 0x00b04300, 0x0071bcb8, 0x00981548,
+	0x007210b8, 0x0072c034, 0x00211001, 0x00111500, 0x0075bc3d, 0x0072503d,
+	0x005f2c00, 0x00a20a03, 0x005f0200, 0x0075bc3d, 0x00981552, 0x00222100,
+	0x00a80a0c, 0x00388100, 0x009c2556, 0x0008003c, 0x00b02a03, 0x00b01a0b,
+	0x00b08a0c, 0x00a31e01, 0x00d05015, 0x00a8040d, 0x009835d4, 0x0008093c,
+	0x00a70402, 0x009835d4, 0x0077bc84, 0x0075bcb8, 0x00255001, 0x00a9040f,
+	0x0016573e, 0x00d59670, 0x00982505, 0x00307002, 0x009c256c, 0x00e60004,
+	0x00370700, 0x00166700, 0x0007043c, 0x00b03eff, 0x003ee001, 0x0071bc56,
+	0x00981573, 0x00f50000, 0x00d05714, 0x00f00000, 0x00ed0576, 0x008c0499,
+	0x009c157b, 0x00d00090, 0x00d00090, 0x00a31e01, 0x00d05015, 0x00306010,
+	0x00983580, 0x008c8585, 0x009c8585, 0x00d05819, 0x0071bc56, 0x00981584,
+	0x009d2589, 0x00d05815, 0x009d1589, 0x00ed057b, 0x009b32f9, 0x00d00090,
+	0x00840d00, 0x00f00000, 0x0075bc56, 0x0098158d, 0x00f50000, 0x0075bc84,
+	0x00e40827, 0x007445f0, 0x00544800, 0x00745064, 0x00746127, 0x0015c800,
+	0x00b04300, 0x00a80022, 0x00588500, 0x0004073c, 0x00b08022, 0x0070bc65,
+	0x009815d5, 0x00e54002, 0x0071bcb8, 0x009815a0, 0x007510b8, 0x0075c034,
+	0x0071bc84, 0x007510a4, 0x0071bc3d, 0x0075103d, 0x00a9040f, 0x005f2500,
+	0x00a20404, 0x0005063c, 0x005f0200, 0x00af2900, 0x00355001, 0x009835ad,
+	0x00d05a19, 0x00156002, 0x0070bc3d, 0x008815b1, 0x00222500, 0x00a70402,
+	0x00a8040d, 0x00377500, 0x00388500, 0x009c35ca, 0x00d00090, 0x00a80405,
+	0x00308700, 0x009825bb, 0x0008073c, 0x00a50401, 0x00b0840c, 0x00705c26,
+	0x009815ca, 0x0079022f, 0x00a50406, 0x00a10409, 0x00211500, 0x00b0deff,
+	0x003ee001, 0x00b01409, 0x00b01403, 0x00ed05c9, 0x008c0027, 0x00ad1e01,
+	0x00a1000b, 0x0016ca00, 0x00611600, 0x00b02404, 0x00b0100b, 0x00b0840d,
+	0x00b0940f, 0x00b07402, 0x00a31e01, 0x00d05015, 0x00d05015, 0x0071bc84,
+	0x00c01000, 0x009c15e6, 0x00e14102, 0x00e50310, 0x00715210, 0x005f2100,
+	0x00a20404, 0x00efeeee, 0x005f0200, 0x00a12900, 0x001f1000, 0x001f1038,
+	0x001f1030, 0x001f1028, 0x00e50004, 0x00d05a1e, 0x00e14112, 0x00e50110,
+	0x00715210, 0x005f2100, 0x00a20404, 0x00efffcc, 0x005f0200, 0x00a12900,
+	0x001f1000, 0x001f1030, 0x00e50004, 0x00d05a1e, 0x00d87040, 0x00982615,
+	0x00e20001, 0x00122800, 0x0009083c, 0x00199004, 0x00e20460, 0x00299200,
+	0x00677100, 0x00a0090b, 0x009c1615, 0x00f00000, 0x00aa0903, 0x00ab0902,
+	0x00991615, 0x009835f2, 0x00e10087, 0x00e20616, 0x00a00100, 0x009c1020,
+	0x00548050, 0x00742210, 0x00e26310, 0x00b04100, 0x00e33051, 0x00732210,
+	0x005f0300, 0x005f0a00, 0x00e20080, 0x002aa200, 0x0013203e, 0x003bb200,
+	0x00b0a903, 0x00b0390b, 0x00b0b902, 0x00d00210, 0x00ad090e, 0x00ab090b,
+	0x00ac090f, 0x00fa1000, 0x00a40d0a, 0x00a80d09, 0x00b040e9, 0x007f8c61,
+	0x00fa3000, 0x004f8080, 0x00b0e008, 0x00ae0d0f, 0x00a20d0b, 0x00981630,
+	0x00d00090, 0x00d00090, 0x00ad1e01, 0x00aa1e01, 0x00a81e01, 0x00a71e01,
+	0x00a61e01, 0x00a51e01, 0x00a41e01, 0x00a31e01, 0x00a11e01, 0x00840200,
+	0x00e20635, 0x00a400ec, 0x00c04007, 0x009c1703, 0x00d00090, 0x00d00090,
+	0x00080f3c, 0x003bb001, 0x00b080eb, 0x00d00090, 0x009a8647, 0x00d00090,
+	0x00a00d13, 0x009c2643, 0x00d00090, 0x00d00090, 0x00b2ac00, 0x000a083c,
+	0x00d06311, 0x00e4ffff, 0x000a083c, 0x00b04d13, 0x00d06311, 0x00a50d06,
+	0x00105001, 0x009c263c, 0x00d00090, 0x00a100e9, 0x00745d08, 0x00b01d0a,
+	0x00761d00, 0x00374600, 0x00745d00, 0x00366400, 0x00577600, 0x00677500,
+	0x008c263c, 0x00a70d09, 0x00b000e9, 0x00711c48, 0x00777c41, 0x003771fb,
+	0x00fa1000, 0x00a40d09, 0x00747041, 0x004f7003, 0x00b04d09, 0x00307004,
+	0x009c2669, 0x00d00090, 0x00a400ec, 0x00e20667, 0x00c04007, 0x009c1703,
+	0x00d00090, 0x003bb001, 0x00000f3c, 0x00307007, 0x00983673, 0x00fa2000,
+	0x00d00090, 0x00d00090, 0x00d00090, 0x00080f3c, 0x00fa3000, 0x000f083c,
+	0x00d0671a, 0x00a400ec, 0x00e20677, 0x00c04007, 0x009c1703, 0x00d00090,
+	0x003bb001, 0x00080f3c, 0x00b0c90f, 0x00738d10, 0x00333001, 0x00705c3d,
+	0x009816a1, 0x00303004, 0x009826a1, 0x00708610, 0x009c26a1, 0x00d00090,
+	0x00a400ec, 0x00e20688, 0x00c04007, 0x009c1703, 0x003bb001, 0x00333004,
+	0x00040f3c, 0x00044040, 0x00744201, 0x00748859, 0x001440be, 0x00788c5a,
+	0x00588001, 0x001880bf, 0x00a5090f, 0x00a20d0e, 0x00d55070, 0x00155002,
+	0x00255101, 0x00a00d13, 0x0098269a, 0x00355004, 0x00d00090, 0x00b28200,
+	0x00a80d04, 0x00255800, 0x00b24200, 0x00b25200, 0x00b02d0e, 0x00c01003,
+	0x009c16ad, 0x00d00090, 0x00a40d13, 0x009826a7, 0x00d06a1a, 0x00444001,
+	0x00b2ac00, 0x00b04d13, 0x00e5fffc, 0x00e1ffff, 0x00d06a1f, 0x002510fd,
+	0x00d00090, 0x00303504, 0x009826ba, 0x00d00090, 0x00a400ec, 0x00e206b6,
+	0x00c04007, 0x009c1703, 0x003bb001, 0x00333004, 0x00080f3c, 0x00d06a1f,
+	0x00477003, 0x00357300, 0x00255101, 0x00fa1000, 0x00a40d09, 0x00745041,
+	0x004f5003, 0x00b04d09, 0x00301303, 0x009816f0, 0x00c05004, 0x009c16e5,
+	0x00fa2000, 0x00d00090, 0x00d00090, 0x00d00090, 0x00080f3c, 0x00fa3000,
+	0x000f083c, 0x00d06f10, 0x00fa2000, 0x00d00090, 0x00d00090, 0x00d00090,
+	0x00040f3c, 0x00fa3000, 0x000f043c, 0x00155003, 0x00144500, 0x0015503d,
+	0x00330300, 0x009c26db, 0x00e30000, 0x00357500, 0x00355004, 0x00155003,
+	0x00144500, 0x00350500, 0x00144500, 0x00355020, 0x00188500, 0x00588400,
+	0x00d06f10, 0x00455003, 0x00305700, 0x009826ce, 0x00e206ed, 0x00a400ec,
+	0x00c04007, 0x009c1703, 0x00d00090, 0x003bb001, 0x00080f3c, 0x00d00090,
+	0x00500100, 0x009c26f3, 0x00ea0000, 0x00211001, 0x00111003, 0x00310100,
+	0x00188100, 0x00211020, 0x001aa100, 0x00310100, 0x001aa100, 0x00211020,
+	0x00188100, 0x00e40001, 0x00588a00, 0x00b04d13, 0x00b080eb, 0x00e20631,
+	0x00d0631a, 0x00b0c90f, 0x00b02d0b, 0x00b0b90b, 0x00fa2000, 0x00b01eff,
+	0x00b03efe, 0x00b04efd, 0x00b05efc, 0x00b06efb, 0x00b07efa, 0x00b08ef9,
+	0x00b0aef8, 0x00b0def7, 0x003ee009, 0x00a100e9, 0x00a40d09, 0x00b01d0a,
+	0x00b0ed0f, 0x00050f3c, 0x00754100, 0x00ae0008, 0x00b05d09, 0x00a0090b,
+	0x009c1307, 0x00e40087, 0x00e80001, 0x00b00400, 0x00a10002, 0x0071803f,
+	0x00b00002, 0x00b01003, 0x00d03017, 0x00a7090e, 0x00ff1000, 0x007f7c61,
+	0x00ff3000, 0x005f0700, 0x00500a00, 0x009c172b, 0x00fa0000, 0x00ec05c0,
+	0x00ed0008, 0x00a4090b, 0x00a6090f, 0x00754cca, 0x00881735, 0x003dd500,
+	0x00500f00, 0x00355001, 0x009c3732, 0x00407001, 0x009c1739, 0x00757c41,
+	0x00244500, 0x00724cc2, 0x003dd200, 0x00122002, 0x00a0090c, 0x008c173f,
+	0x00724d00, 0x0005023c, 0x00222003, 0x0012203e, 0x00a10c09, 0x00ab0c00,
+	0x00311200, 0x00a20c01, 0x00b01c09, 0x00a40c02, 0x00a10c03, 0x00aa0909,
+	0x00a80908, 0x002505fc, 0x009c275a, 0x00255004, 0x00983776, 0x002505fc,
+	0x00777c41, 0x00377504, 0x009c2781, 0x00370500, 0x003dd001, 0x00177003,
+	0x0013f700, 0x00155003, 0x00133500, 0x00d0751b, 0x00530f00, 0x00b05eff,
+	0x003ee001, 0x00a50c08, 0x009c1764, 0x00e500c0, 0x00ab0c04, 0x00a20c05,
+	0x00a40c06, 0x00a10c07, 0x00355001, 0x00d00090, 0x00b05c08, 0x00a51e01,
+	0x00783210, 0x0078b021, 0x001bb03f, 0x007b203f, 0x0012203f, 0x00133030,
+	0x007a3210, 0x007a4021, 0x0014403f, 0x0074103f, 0x0011103f, 0x00b28600,
+	0x00b2a600, 0x00d0741b, 0x00b0bc00, 0x00b02c01, 0x00b04c02, 0x00b01c03,
+	0x00e7ffff, 0x003dd001, 0x00982781, 0x00d00090, 0x00d00090, 0x00500f00,
+	0x00d0771b, 0x00fa2000, 0x0000073c, 0x009c2755, 0x00d00090, 0x00a7090e,
+	0x0047700e, 0x00b0090b, 0x0042f080, 0x00577100, 0x00b0690f, 0x00b0790e,
+	0x00d04517, 0x00d77040, 0x00e90460, 0x007c7484, 0x002cc900, 0x00e90036,
+	0x00a50c0b, 0x00705d00, 0x009c17f3, 0x00d00090, 0x00ab0c0c, 0x008c37cf,
+	0x00a20c01, 0x00702c3c, 0x009817f3, 0x00eb05c0, 0x00a90c0f, 0x00a30c0d,
+	0x00a80b09, 0x009817ce, 0x00e20036, 0x00a40b00, 0x00a50b01, 0x00a60b02,
+	0x00a70b03, 0x00d09270, 0x009c27ce, 0x00e20008, 0x00308008, 0x009c27ab,
+	0x0002083c, 0x00aa0b08, 0x009c17b2, 0x00ea00c0, 0x00a50b05, 0x00a40b04,
+	0x00a60b06, 0x00a70b07, 0x003aa001, 0x00d00090, 0x00b0ab08, 0x00aa0c08,
+	0x007a4021, 0x0014403f, 0x0074503f, 0x0015503f, 0x00b2a900, 0x00aa0c09,
+	0x007a6021, 0x0016603f, 0x0076703f, 0x0017703f, 0x00b2a900, 0x00233008,
+	0x00388001, 0x00322001, 0x009c37ab, 0x00d00090, 0x00b04b00, 0x00b05b01,
+	0x00b06b02, 0x00b07b03, 0x00b03c02, 0x00b03c0d, 0x00b08b09, 0x00b09c0f,
+	0x00d07f13, 0x00aa0c0f, 0x00a10c01, 0x009d17d6, 0x00ed07d1, 0x009b32f9,
+	0x00d00090, 0x00840d00, 0x00711c3b, 0x009817da, 0x00f40000, 0x00d07d1b,
+	0x00f00000, 0x00d0a970, 0x009c27f3, 0x00d00090, 0x00ed07e0, 0x008c0499,
+	0x009817f3, 0x00e40723, 0x007445f0, 0x00544750, 0x00a90c03, 0x00b04300,
+	0x005f2051, 0x0046901f, 0x004f90e0, 0x003606e0, 0x00306b00, 0x009837ed,
+	0x00060b3c, 0x00756100, 0x003bb600, 0x00299600, 0x00b0bc0c, 0x00b09c03,
+	0x00b05c0b, 0x00d00117, 0x00f50000, 0x00500a00, 0x009c17f8, 0x00f00000,
+	0x00ec05c0, 0x00a7090b, 0x00a50c0a, 0x007d7ca3, 0x00ab0c00, 0x00a20c01,
+	0x00a40c02, 0x00a10c03, 0x00a70c08, 0x009c380b, 0x00e700c0, 0x00ab0c04,
+	0x00a20c05, 0x00a40c06, 0x00a10c07, 0x00b0bc00, 0x00b02c01, 0x00b04c02,
+	0x00b01c03, 0x00377001, 0x00a30908, 0x00a60909, 0x00b07c08, 0x0048f500,
+	0x004af500, 0x00783880, 0x007a6880, 0x0078b021, 0x007a4021, 0x001bb03f,
+	0x0014403f, 0x007b203f, 0x0074103f, 0x00a6090f, 0x0011103f, 0x0012203f,
+	0x00b28600, 0x00b2a600, 0x003dd001, 0x00b0690f, 0x008c1800, 0x00b0bc00,
+	0x00b02c01, 0x00b04c02, 0x00b01c03, 0x00b0090b, 0x00d04517, 0x00f50000,
+	0x00500a00, 0x009c182b, 0x00f00000, 0x00781d27, 0x00a40901, 0x00a20aec,
+	0x00307100, 0x009c184b, 0x00d00090, 0x00d00090, 0x00000f3c, 0x00388001,
+	0x009c182d, 0x00724ca0, 0x0030201f, 0x009c1839, 0x00724ca8, 0x00e60001,
+	0x00a8000b, 0x001b6200, 0x00568b00, 0x00e80001, 0x00b0600b, 0x00ab0022,
+	0x00188300, 0x006bb800, 0x00a70902, 0x00b0b022, 0x009c384a, 0x0001033c,
+	0x0002093c, 0x00b00902, 0x00ed084a, 0x008c04b2, 0x00d04517, 0x00718127,
+	0x00d00090, 0x00b01600, 0x00d03017, 0x00d77040, 0x00e10460, 0x007b7484,
+	0x002bb100, 0x00d00090, 0x00a40b0b, 0x009c1882, 0x00d00090, 0x00a10b0f,
+	0x00a80b03, 0x00d91070, 0x00a50b01, 0x002009c0, 0x009c2882, 0x00d00090,
+	0x00ea0004, 0x00a90b0c, 0x00883882, 0x00329020, 0x008c2864, 0x007a9c43,
+	0x009d1869, 0x00ed0864, 0x009b32f9, 0x00d00090, 0x00840d00, 0x00715c3b,
+	0x0098186d, 0x00f40000, 0x00d0861e, 0x00f00000, 0x00ed0870, 0x008c0499,
+	0x00981882, 0x00e407f4, 0x007445f0, 0x00544730, 0x00e10000, 0x00b04300,
+	0x00a30b06, 0x005f2031, 0x004f80f8, 0x00211008, 0x00288300, 0x003aa001,
+	0x008c3877, 0x00399100, 0x00741500, 0x00b09b0c, 0x00b08b03, 0x00b04b0b,
+	0x00d0011a, 0x00b0deff, 0x003ee001, 0x00771484, 0x00e50460, 0x00277500,
+	0x0005013c, 0x00ab0701, 0x00000c3c, 0x009c2891, 0x009d1891, 0x00ed088c,
+	0x009b32f9, 0x00d00090, 0x00840d00, 0x0071bc3b, 0x00981898, 0x00f40000,
+	0x00000c3c, 0x00982897, 0x009928cc, 0x00d0891d, 0x00f00000, 0x00000c3c,
+	0x0098289c, 0x009918cc, 0x00d00090, 0x00a90703, 0x00a3070b, 0x00a8070f,
+	0x00a4070e, 0x00404001, 0x009c18a6, 0x00500300, 0x009c18cc, 0x00d00090,
+	0x00aa070c, 0x009818cc, 0x00738d07, 0x004330fc, 0x00303022, 0x009828d5,
+	0x0040a080, 0x009818d5, 0x0040907f, 0x009c18d5, 0x00d48070, 0x00d00090,
+	0x00303421, 0x009838d0, 0x00ed08b6, 0x008c0499, 0x009818cc, 0x00e409a2,
+	0x007445f0, 0x00544550, 0x00a10007, 0x00611003, 0x0071002e, 0x00b04300,
+	0x005f1200, 0x005f0900, 0x00a4070e, 0x00740020, 0x00a30701, 0x00b0470e,
+	0x00733c26, 0x00133007, 0x00299300, 0x00e30080, 0x003aa300, 0x00b09703,
+	0x00b0a70c, 0x00b0370b, 0x00ad1e01, 0x00d00090, 0x00d00090, 0x00840d00,
+	0x007bbca0, 0x00e40001, 0x0074403f, 0x00144b00, 0x009828cc, 0x00d48070,
+	0x003043f6, 0x009c28cc, 0x00ed08da, 0x008c0499, 0x009818cc, 0x00e4096c,
+	0x007445f0, 0x00544550, 0x005f2051, 0x004f90e0, 0x00b04300, 0x00a4070e,
+	0x00740020, 0x0043901f, 0x00b0470e, 0x00a40701, 0x00744c26, 0x009818e9,
+	0x003993e0, 0x003403e0, 0x003aa400, 0x009c28ed, 0x000a003c, 0x00a3070b,
+	0x00743cca, 0x00d00090, 0x003304f8, 0x00133002, 0x007340ca, 0x00d08c19,
+	0x00741484, 0x00e70460, 0x00244700, 0x00e20020, 0x00a70401, 0x00707c3a,
+	0x009c18fe, 0x00f00000, 0x00991942, 0x00d09010, 0x00f50000, 0x00992942,
+	0x00d00090, 0x00a6040f, 0x00a7040d, 0x00a50404, 0x0043501f, 0x009c1943,
+	0x00207080, 0x00982943, 0x00d76270, 0x00982943, 0x008c8942, 0x009c8942,
+	0x00e20080, 0x00d00090, 0x00af0007, 0x005f0500, 0x00d02000, 0x00af2600,
+	0x00a70402, 0x00b0640f, 0x00255200, 0x00377100, 0x00b05404, 0x00b07402,
+	0x009c3922, 0x00d00090, 0x00b00402, 0x0002043c, 0x00b0deff, 0x003ee001,
+	0x00ed0920, 0x008c04b2, 0x00ad1e01, 0x00d09412, 0x00a3040d, 0x00333200,
+	0x009c1941, 0x00d00090, 0x00a20405, 0x00760210, 0x00302700, 0x0088292b,
+	0x0002073c, 0x00b0640f, 0x00b0240c, 0x00b0240d, 0x00b07402, 0x00a2040a,
+	0x00a70409, 0x00a30407, 0x00a50406, 0x00222300, 0x00277500, 0x00b0240a,
+	0x00b07409, 0x00b02404, 0x00b07403, 0x0003013c, 0x0001073c, 0x00b0deff,
+	0x003ee001, 0x00ed093f, 0x008c0027, 0x00ad1e01, 0x00d09412, 0x00b0340d,
+	0x00840d00, 0x00a2040d, 0x00a0040b, 0x009c1942, 0x00222300, 0x00d86070,
+	0x00981942, 0x00188002, 0x00288300, 0x004880fc, 0x00308020, 0x0098394f,
+	0x00e80020, 0x00308200, 0x00982954, 0x00392001, 0x0008023c, 0x00d09515,
+	0x00398001, 0x00ef4252, 0x000f9337, 0x004f50e0, 0x004a30fc, 0x003b8a00,
+	0x00500a00, 0x00981961, 0x005f0000, 0x003aa004, 0x009c395c, 0x00d00090,
+	0x00d00090, 0x00af2600, 0x003bb004, 0x009c3961, 0x003a08e0, 0x004aa0fc,
+	0x0098196a, 0x005f0000, 0x003aa004, 0x009c3967, 0x00328300, 0x00d09112,
+	0x00a2090e, 0x00ff1000, 0x007f2c61, 0x00ff3000, 0x005f0200, 0x00500a00,
+	0x009c1974, 0x00fa0000, 0x00ab090b, 0x004220fe, 0x00a8090f, 0x00b0290e,
+	0x0075bcca, 0x0098197f, 0x00d00090, 0x00d00090, 0x00500f00, 0x00355001,
+	0x008c397c, 0x0075bcc2, 0x00981986, 0x00d00090, 0x00d00090, 0x00b2f800,
+	0x00355001, 0x008c3983, 0x00b0090b, 0x0002073c, 0x00010a3c, 0x00ed098b,
+	0x008c04a9, 0x00a5090e, 0x009819a0, 0x00ff2000, 0x0045500f, 0x00d00090,
+	0x00d00090, 0x004bf080, 0x00555b00, 0x00a4090c, 0x00981998, 0x00d00090,
+	0x00b0590e, 0x00d09a10, 0x00755c41, 0x00d00090, 0x003505fc, 0x00155003,
+	0x00350500, 0x001bb500, 0x00d00090, 0x00b2b800, 0x00b0890f, 0x00d03017,
+	0x00a2090e, 0x00ff1000, 0x007f2c61, 0x00ff3000, 0x005f0200, 0x00500a00,
+	0x009c19aa, 0x00fa0000, 0x004220fe, 0x00a8090f, 0x00b0290e, 0x00eb09b3,
+	0x007c1c64, 0x002ccb00, 0x00ab090b, 0x00a20908, 0x00840c00, 0x00d09d14,
+	0x00d09c1b, 0x00d09c17, 0x00d09c12, 0x00d09b1d, 0x00ec09b9, 0x00d00008,
+	0x00b2f800, 0x003bb020, 0x00d09d1d, 0x00ec09be, 0x00d00004, 0x00b2f800,
+	0x003bb010, 0x00d09d1d, 0x00ec09c3, 0x00d00002, 0x00b2f800, 0x003bb008,
+	0x00d09d1d, 0x00ec09c8, 0x00b2f800, 0x003bb004, 0x00d09d1d, 0x00ec09cc,
+	0x00122030, 0x0072f210, 0x003bb002, 0x008c19dd, 0x00d00090, 0x00d00090,
+	0x00b22800, 0x00d09d1d, 0x00ec09d5, 0x00122038, 0x0072f118, 0x003bb001,
+	0x008c19dd, 0x00d00090, 0x00d00090, 0x00b22800, 0x00d09d1d, 0x00a50aec,
+	0x00355700, 0x00801c00, 0x00b02908, 0x00b0b90b, 0x00500b00, 0x009c19e8,
+	0x0002073c, 0x00010a3c, 0x00ed09e8, 0x008c04a9, 0x00a5090e, 0x009819fd,
+	0x00ff2000, 0x00d00090, 0x00d00090, 0x0045500f, 0x004bf080, 0x00a4090c,
+	0x009819f5, 0x00555b00, 0x00d00090, 0x00b0590e, 0x00d09f1d, 0x00755c41,
+	0x00d00090, 0x003505fc, 0x00155003, 0x00350500, 0x001bb500, 0x00d00090,
+	0x00b2b800, 0x00b0890f, 0x00d03017
+};
+
+
+
+static struct stm_plat_fdma_fw stm_fdma_firmware_7100 = {
+	.name = "fdma_7100.fw",
+	.fw_regs = {
+		.rev_id    = 0x8000 + (0x000 << 2), /* 0x8000 */
+		.cmd_statn = 0x8000 + (0x010 << 2), /* 0x8040 */
+		.ptrn      = 0x8000 + (0x460 << 2), /* 0x9180 */
+		.cntn      = 0x8000 + (0x462 << 2), /* 0x9188 */
+		.saddrn    = 0x8000 + (0x463 << 2), /* 0x918c */
+		.daddrn    = 0x8000 + (0x464 << 2), /* 0x9190 */
+	},
+	.dmem = stm_fdma_firmware_7100_dmem,
+	.dmem_len = sizeof(stm_fdma_firmware_7100_dmem),
+	.imem = stm_fdma_firmware_7100_imem,
+	.imem_len = sizeof(stm_fdma_firmware_7100_imem),
+};
+
+#endif
diff --git a/include/linux/stm/fdma_firmware_7109c2.h b/include/linux/stm/fdma_firmware_7109c2.h
new file mode 100644
index 0000000..d95c8ff
--- /dev/null
+++ b/include/linux/stm/fdma_firmware_7109c2.h
@@ -0,0 +1,704 @@
+#ifndef __STM_FDMA_FIRMWARE_7109C2_H
+#define __STM_FDMA_FIRMWARE_7109C2_H
+
+#include <linux/kernel.h>
+#include <linux/stm/soc.h>
+
+
+
+static unsigned long stm_fdma_firmware_7109c2_dmem[] = {
+	0x00060208, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x23104052, 0x23100051, 0x00000000, 0x00000000, 0x00000000,
+	0x21100051, 0x01770133, 0x017a0136, 0x017d0139, 0x0180013c, 0x63103051,
+	0x003f001f, 0x000001c2, 0x000001c4, 0x000001c6, 0x000001d2, 0x00000398,
+	0x00000396, 0x00000393, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x000000fe, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x0000007e, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00002416, 0x04a004a0, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00002416, 0x04c004c0,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00002416, 0x04e004e0, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0000241f,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00001428, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x0000142d, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00001432,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00001437, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x0000143c, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00001441,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00001446, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x0000144b, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00001450,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00001455, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x0000145a, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0000145f,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00001464, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00001469, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0000146e
+};
+
+
+
+static unsigned long stm_fdma_firmware_7109c2_imem[] = {
+	0x00e1ffff, 0x00e200ff, 0x00f51000, 0x00b010f9, 0x00b020fa, 0x00ef0013,
+	0x00e10001, 0x00ee00a0, 0x00b010ea, 0x00f01000, 0x00ef0013, 0x00a300f8,
+	0x00aa000b, 0x00433a00, 0x009c1504, 0x009b332e, 0x009a223b, 0x00d00090,
+	0x00a70005, 0x00177030, 0x009c121b, 0x00d00090, 0x00a70006, 0x00a2001c,
+	0x00672700, 0x009c1470, 0x00d00090, 0x00a70002, 0x009c15f6, 0x00d00090,
+	0x00a70004, 0x009c178d, 0x00d00090, 0x00a90003, 0x009c1038, 0x00d00090,
+	0x00a20001, 0x009c145f, 0x00d00090, 0x00d0001b, 0x00452003, 0x00461003,
+	0x00355600, 0x00755461, 0x00a6040e, 0x00555001, 0x00765080, 0x00d00090,
+	0x00b0640e, 0x00755c23, 0x00761c62, 0x00266500, 0x007564ca, 0x00d00090,
+	0x00b0540b, 0x00840d00, 0x00e20500, 0x00d00090, 0x00aa020e, 0x00f50000,
+	0x00ab0a0e, 0x00a10a0d, 0x00d0b070, 0x009c10a9, 0x00d00090, 0x00a4020f,
+	0x00a70201, 0x00a30a04, 0x00d54070, 0x00305020, 0x0098207a, 0x007c3ce0,
+	0x009c107e, 0x00e80020, 0x00ed0054, 0x00a50007, 0x00777c2f, 0x00757037,
+	0x005f0500, 0x005f0300, 0x00a50a0c, 0x00a70a14, 0x00b050e9, 0x00941700,
+	0x00d00090, 0x00ed005b, 0x00a92400, 0x00233004, 0x00b090eb, 0x005f0900,
+	0x00928100, 0x00388001, 0x008c3056, 0x00a50a02, 0x0006033c, 0x00605300,
+	0x008c1062, 0x00a60a05, 0x00a500e9, 0x00b06a04, 0x00b0420f, 0x00b05a0c,
+	0x00d0b070, 0x009c10a9, 0x00d00090, 0x00e60026, 0x00d54070, 0x00306500,
+	0x00982024, 0x00d00090, 0x00a50202, 0x009c1076, 0x00d04070, 0x009c1024,
+	0x00e10000, 0x00b00003, 0x00ed0024, 0x008c04b1, 0x00e10001, 0x00b00003,
+	0x00b01002, 0x008c0024, 0x00a00202, 0x009c1076, 0x00d04070, 0x00981072,
+	0x004c301f, 0x00155002, 0x00265c00, 0x004060e0, 0x00981084, 0x00e60020,
+	0x00366001, 0x00166008, 0x00ed0099, 0x00777c2f, 0x00e54252, 0x00757037,
+	0x000f053c, 0x005f6c00, 0x004f30e0, 0x0018c03e, 0x00981092, 0x000f003c,
+	0x00388001, 0x008c308f, 0x00a50a0c, 0x00166038, 0x00386cff, 0x0018803e,
+	0x00a70a14, 0x00b050e9, 0x00941700, 0x00d00090, 0x00ed00a0, 0x00a92400,
+	0x00233004, 0x00b090eb, 0x005f0900, 0x00928100, 0x00388001, 0x008c309b,
+	0x003806e1, 0x0098105d, 0x000f003c, 0x00388004, 0x008c30a4, 0x008c005d,
+	0x008c00a8, 0x00a30a00, 0x00a80a01, 0x009810cd, 0x00d00090, 0x00a50201,
+	0x00775c2f, 0x00777437, 0x00055035, 0x00e64042, 0x005f6700, 0x004f30f0,
+	0x00a62b00, 0x009c20bd, 0x00d00090, 0x005f5001, 0x00ac2b00, 0x00af2b00,
+	0x004f6001, 0x000f0c3c, 0x008c00c1, 0x000f053c, 0x00af2b00, 0x000f063c,
+	0x000f003c, 0x00233010, 0x00388010, 0x009810cb, 0x00d0b070, 0x009c10b1,
+	0x00d00090, 0x00b08a01, 0x00b03a00, 0x00b0ba0e, 0x008c0024, 0x00d0b070,
+	0x009810c7, 0x00533001, 0x007b0210, 0x0008003c, 0x008c00c7, 0x00a50a00,
+	0x00455001, 0x00941d00, 0x00d00090, 0x00b06eff, 0x00b07efe, 0x00b08efd,
+	0x00b09efc, 0x00b0cefb, 0x003ee005, 0x00a60a07, 0x00a70a08, 0x00a800e9,
+	0x00ec0000, 0x00788d00, 0x00106001, 0x009c20f0, 0x00796d08, 0x003c9800,
+	0x00796d00, 0x00398900, 0x005cc900, 0x006cc600, 0x009c20f0, 0x007c6c3d,
+	0x007cc43e, 0x00666c00, 0x007c7c3d, 0x007cc43e, 0x00577c00, 0x00d00f1f,
+	0x00107001, 0x009c2106, 0x00797d08, 0x003c9800, 0x00797d00, 0x00398900,
+	0x005cc900, 0x006cc700, 0x009c2106, 0x007c7c3d, 0x007cc43e, 0x00677c00,
+	0x007c6c3d, 0x007cc43e, 0x00566c00, 0x00a900e9, 0x00b06a07, 0x00b07a08,
+	0x00799c48, 0x002993fc, 0x00b28b00, 0x00b29b00, 0x00ac1e01, 0x00a91e01,
+	0x00a81e01, 0x00a71e01, 0x00a61e01, 0x00840d00, 0x00a50a00, 0x00455001,
+	0x00941d00, 0x00d00090, 0x00b09a10, 0x00b01eff, 0x00b02efe, 0x00b06efd,
+	0x00b07efc, 0x00b08efb, 0x00b09efa, 0x00b0cef9, 0x00b04ef8, 0x003ee008,
+	0x00a800e9, 0x00788d00, 0x0047801f, 0x00a40e00, 0x00a900e9, 0x00778ca0,
+	0x00799c48, 0x0002093c, 0x002993fc, 0x00e54400, 0x00155710, 0x009c214e,
+	0x00d00090, 0x00d04070, 0x009c112e, 0x00d00090, 0x00e50167, 0x00b09a11,
+	0x00b05a14, 0x00d0151e, 0x00a7020d, 0x00777e00, 0x00a52400, 0x00a60a10,
+	0x00840700, 0x00765100, 0x00066001, 0x00d0131d, 0x00765200, 0x00066002,
+	0x00d0131d, 0x00765300, 0x00066003, 0x00d0131d, 0x0006053c, 0x00066040,
+	0x00d56040, 0x00a40a12, 0x003505e1, 0x00166500, 0x002505e1, 0x00166500,
+	0x00366001, 0x00306400, 0x00b06a12, 0x00983156, 0x00d00090, 0x00a60a08,
+	0x00266001, 0x00d00090, 0x00b06a08, 0x00d0151e, 0x00e50270, 0x00155710,
+	0x00982156, 0x00780327, 0x00d00090, 0x00b28b00, 0x00b29b00, 0x00d0151e,
+	0x00ac0a08, 0x00b00a08, 0x002cc001, 0x0078c308, 0x00780027, 0x00d00090,
+	0x00b28b00, 0x00b29b00, 0x00a41e01, 0x00ac1e01, 0x00a91e01, 0x00a81e01,
+	0x00a71e01, 0x00a61e01, 0x00a21e01, 0x00a11e01, 0x00840d00, 0x00b01eff,
+	0x00b02efe, 0x00b03efd, 0x00b04efc, 0x00b05efb, 0x00b0befa, 0x003ee006,
+	0x00a20a11, 0x00752c40, 0x00a32400, 0x00b00a14, 0x00a5050d, 0x00755e10,
+	0x00a10a10, 0x00d00090, 0x00840500, 0x00713100, 0x00011001, 0x00d01811,
+	0x00713200, 0x00011002, 0x00d01811, 0x00713300, 0x00011003, 0x00d01811,
+	0x0001033c, 0x00011040, 0x00d51040, 0x00a30a12, 0x003505e1, 0x00111500,
+	0x002505e1, 0x00111500, 0x00311001, 0x00a50a08, 0x00b01a12, 0x00255001,
+	0x00301300, 0x00983191, 0x00d00090, 0x00b05a08, 0x00d01919, 0x00a10a0c,
+	0x00a30a11, 0x00b00a08, 0x00715308, 0x00710027, 0x00d00090, 0x00b21b00,
+	0x00b23b00, 0x00a01e01, 0x00a51e01, 0x00a41e01, 0x00a31e01, 0x00a21e01,
+	0x00a11e01, 0x00840d00, 0x00a50a00, 0x00455001, 0x00941d00, 0x00d00090,
+	0x00b09a10, 0x00b01eff, 0x00b06efe, 0x00b07efd, 0x00b08efc, 0x00b09efb,
+	0x00b0cefa, 0x00b04ef9, 0x003ee007, 0x00a100e9, 0x00701c65, 0x009c11e3,
+	0x00781c48, 0x00a60012, 0x0041101f, 0x00106100, 0x009c21e3, 0x0005083c,
+	0x002883fc, 0x00c0100b, 0x009811be, 0x00d00090, 0x00d00090, 0x00b21b00,
+	0x00b28b00, 0x00d01e13, 0x00a60513, 0x00d00090, 0x00d00090, 0x00840600,
+	0x00779e08, 0x00d01d1d, 0x00779e10, 0x00d01d1d, 0x00e601ed, 0x00d04070,
+	0x009c11cc, 0x00d00090, 0x00b06a14, 0x00d01e1b, 0x0006043c, 0x00779d18,
+	0x00d00090, 0x00a62600, 0x00776108, 0x00d01d1d, 0x00e60205, 0x00d04070,
+	0x009c11d8, 0x00d00090, 0x00b06a14, 0x00d01e1b, 0x0006043c, 0x00d00090,
+	0x00d00090, 0x00a72600, 0x00d01d1d, 0x00077040, 0x00777d37, 0x00717128,
+	0x00d00090, 0x00b21b00, 0x00b28b00, 0x00a41e01, 0x00ac1e01, 0x00a91e01,
+	0x00a81e01, 0x00a71e01, 0x00a61e01, 0x00a11e01, 0x00840d00, 0x00b08a11,
+	0x00d01e13, 0x00a90a00, 0x00499001, 0x00941d00, 0x00d00090, 0x00b06eff,
+	0x00b08efe, 0x00b04efd, 0x003ee003, 0x00a90a10, 0x00a80a11, 0x00a62400,
+	0x00166008, 0x00769918, 0x00066040, 0x00766d37, 0x00799d10, 0x00796128,
+	0x00b00a14, 0x00b29b00, 0x00b28b00, 0x00a41e01, 0x00a81e01, 0x00a61e01,
+	0x00840d00, 0x00a90a00, 0x00499001, 0x00941d00, 0x00d00090, 0x00b06eff,
+	0x00b08efe, 0x00b04efd, 0x003ee003, 0x00a90a10, 0x00a80a11, 0x00a62400,
+	0x00799d18, 0x00066040, 0x00766d37, 0x00796128, 0x00b00a14, 0x00b29b00,
+	0x00b28b00, 0x00a41e01, 0x00a81e01, 0x00a61e01, 0x00840d00, 0x00f40000,
+	0x00d87040, 0x00982235, 0x00e10500, 0x00198004, 0x00299100, 0x00e10001,
+	0x00aa0900, 0x00ed0225, 0x008c0498, 0x00981235, 0x00e40340, 0x007445f0,
+	0x00544850, 0x00a1000c, 0x00b04300, 0x005f1200, 0x004fa0e0, 0x00ea0001,
+	0x00ab090f, 0x001aa800, 0x007b01f0, 0x00677a00, 0x00b0b90f, 0x00b0b90b,
+	0x00d0211c, 0x00aa0005, 0x00d00090, 0x007a7210, 0x00d00090, 0x00b0a005,
+	0x00d00116, 0x00ac00f0, 0x00a80005, 0x00d1c040, 0x0098232c, 0x0011103f,
+	0x00ed0450, 0x001a1001, 0x002dd100, 0x00320a00, 0x0013c200, 0x00193a00,
+	0x00e2024d, 0x00222300, 0x006cc900, 0x00eb0500, 0x0005013c, 0x00155004,
+	0x00255b00, 0x00840200, 0x00d02d16, 0x00d02914, 0x00a40501, 0x00724ca0,
+	0x00981294, 0x00e40460, 0x00244200, 0x00c0201f, 0x00981294, 0x00eb0001,
+	0x00a20400, 0x00702c2e, 0x009c1294, 0x001bb100, 0x00a2001c, 0x00522b00,
+	0x00588b00, 0x00b0201c, 0x00a2050f, 0x00aa050c, 0x00ab050b, 0x0070bd00,
+	0x009c123d, 0x00d22070, 0x0098129d, 0x00f50000, 0x0099123d, 0x00122002,
+	0x00b0050c, 0x00ab050d, 0x0030b200, 0x009c226f, 0x00020b3c, 0x003bb200,
+	0x00b0250d, 0x00b0deff, 0x00b01efe, 0x00b05efd, 0x00b0befc, 0x00b0aefb,
+	0x00b08efa, 0x003ee006, 0x00ed027a, 0x008c0885, 0x00a81e01, 0x00aa1e01,
+	0x00ab1e01, 0x00a51e01, 0x00a11e01, 0x00ad1e01, 0x00a2050d, 0x00b0a50c,
+	0x00981287, 0x002bb200, 0x00d00090, 0x00b0b50d, 0x00d0231d, 0x00b0deff,
+	0x00b05efe, 0x00b01efd, 0x003ee003, 0x00b0b50d, 0x00ed028f, 0x00000b3c,
+	0x009818c2, 0x00d00090, 0x00d00090, 0x00a11e01, 0x00a51e01, 0x00ad1e01,
+	0x00a2050b, 0x00702d00, 0x009c123d, 0x00e20001, 0x00122100, 0x00ab001b,
+	0x004bb200, 0x009c123d, 0x00588200, 0x00a40501, 0x00eb0001, 0x007a4ca0,
+	0x001bba00, 0x004bb0fe, 0x009812af, 0x009c22aa, 0x007a4d00, 0x00c0a03f,
+	0x009c12af, 0x007a4ca8, 0x00eb0001, 0x001bba00, 0x00a3000b, 0x006bb0ff,
+	0x00433b00, 0x00d00090, 0x00b0300b, 0x00ab050b, 0x0070bd00, 0x009c123d,
+	0x00722210, 0x006220ff, 0x00ab0001, 0x00a40002, 0x004bb200, 0x00444200,
+	0x00b0b001, 0x00ab0006, 0x00b04002, 0x00a40004, 0x004bb200, 0x00444200,
+	0x00488200, 0x00b0b006, 0x00b04004, 0x00ab001c, 0x004bb200, 0x00a4001a,
+	0x00b0b01c, 0x00444200, 0x00eb0003, 0x00b0401a, 0x00a40d00, 0x0074b0a0,
+	0x00a300f4, 0x001b1001, 0x00e20001, 0x00122b00, 0x00402300, 0x009812d2,
+	0x00122001, 0x00740062, 0x00b020f5, 0x00b04d00, 0x00b090f2, 0x00d0231d,
+	0x00e40001, 0x00144100, 0x006440ff, 0x00488400, 0x00a60d00, 0x0042601f,
+	0x004660e0, 0x00566002, 0x00c02000, 0x00b06d00, 0x009812e7, 0x00e20001,
+	0x00122110, 0x00588200, 0x00b06500, 0x00b090f2, 0x00d0231d, 0x00a00502,
+	0x009c12f2, 0x0002053c, 0x00b0ceff, 0x00b08efe, 0x003ee002, 0x00ed02ef,
+	0x008c04b1, 0x00a81e01, 0x00ac1e01, 0x00d0231d, 0x00a40501, 0x00b06d00,
+	0x0042401f, 0x00981310, 0x0042403f, 0x00c0201f, 0x00981317, 0x00c0203f,
+	0x0098131e, 0x00e60460, 0x0042401f, 0x00e40001, 0x00144200, 0x00a3000b,
+	0x00533400, 0x00266200, 0x00b0300b, 0x00a20600, 0x00721088, 0x00742c2e,
+	0x00b02600, 0x00144004, 0x00244100, 0x00e60001, 0x00166400, 0x00a20006,
+	0x00522600, 0x00b090f2, 0x00b02006, 0x00d0231d, 0x00a20001, 0x00eb0001,
+	0x001bb100, 0x00522b00, 0x00b090f2, 0x00b02001, 0x00d0231d, 0x00a20002,
+	0x00eb0001, 0x001bb100, 0x00522b00, 0x00b090f2, 0x00b02002, 0x00d0231d,
+	0x00eb0001, 0x001bb100, 0x00a2001a, 0x00704c2d, 0x00981327, 0x00522b00,
+	0x00b090f2, 0x00b0201a, 0x00d0231d, 0x00a20004, 0x00522b00, 0x00b090f2,
+	0x00b02004, 0x00d0231d, 0x00b08005, 0x00d00112, 0x00d80050, 0x00788c4c,
+	0x00981010, 0x00da8040, 0x00e600a0, 0x0076a023, 0x00a70aec, 0x00767060,
+	0x00d00090, 0x00a10600, 0x00b0600a, 0x00731c80, 0x00741df0, 0x00751c64,
+	0x00e20500, 0x00793484, 0x00299200, 0x00840400, 0x00f50000, 0x0007093c,
+	0x00d00090, 0x00d00008, 0x00b1f701, 0x00a00902, 0x00981453, 0x00d00090,
+	0x00a70903, 0x00a20904, 0x00a60901, 0x007b7c5e, 0x007b283f, 0x006bb003,
+	0x0076b05a, 0x00ebffff, 0x00ed035c, 0x0041603f, 0x00c0101f, 0x009c199e,
+	0x007a6c88, 0x001aa005, 0x00e20480, 0x002aa200, 0x00ed037c, 0x00ab0a04,
+	0x00a20a00, 0x008c099e, 0x0040601f, 0x00b06901, 0x00981362, 0x00c0103f,
+	0x0098139f, 0x00d0431d, 0x00e70001, 0x00d00008, 0x00400f00, 0x00a20001,
+	0x00177300, 0x00522700, 0x00a10903, 0x00b02001, 0x00a20905, 0x00a70902,
+	0x00307200, 0x008c236f, 0x0002073c, 0x00a10903, 0x00b0290c, 0x00b0290d,
+	0x00a20904, 0x00b01909, 0x00b0290a, 0x0004093c, 0x00b0deff, 0x003ee001,
+	0x00ed037a, 0x008c0028, 0x00ad1e01, 0x00d04519, 0x00d00008, 0x00400f00,
+	0x00a70002, 0x00eb0001, 0x0012b300, 0x00577200, 0x00b0a90e, 0x00b07002,
+	0x00b0090b, 0x00b06901, 0x00a00a0d, 0x008c1459, 0x00a60a0e, 0x00760210,
+	0x00a20a0f, 0x00ab0a07, 0x00722a10, 0x007bbc5b, 0x00b02a0f, 0x00a20b17,
+	0x00b00a14, 0x00b06a0e, 0x00840200, 0x00e6010c, 0x00b00a08, 0x00d03919,
+	0x00e601a0, 0x00d03919, 0x00e600d1, 0x00a2090f, 0x00b06a0d, 0x00720210,
+	0x00b00a13, 0x00b0290f, 0x00d04519, 0x00706c2d, 0x009c143d, 0x00d00090,
+	0x00ac090f, 0x00ed0450, 0x007c0210, 0x002dd300, 0x00eb04e0, 0x00b0c90f,
+	0x00a00b09, 0x009813c3, 0x00d00090, 0x00a10903, 0x00711c62, 0x00a2090e,
+	0x00522001, 0x00762c23, 0x00211600, 0x00b0290e, 0x0011100a, 0x00d00008,
+	0x00500f00, 0x00b0190b, 0x00a10902, 0x00a20901, 0x00702c3d, 0x009813bd,
+	0x00d00090, 0x00b0190c, 0x00d03d1c, 0x00e10001, 0x0072103c, 0x00b0090c,
+	0x00b02901, 0x00e10000, 0x00d03d1c, 0x00080b3c, 0x00a10903, 0x00d00004,
+	0x00b1f801, 0x00d00004, 0x00500f00, 0x00a20904, 0x0004093c, 0x00ed03cd,
+	0x008c0028, 0x00a10902, 0x00a20901, 0x00b0190c, 0x00702c3d, 0x009c13dc,
+	0x00d00090, 0x00a10d00, 0x004110e0, 0x0002093c, 0x00b01d00, 0x00b00900,
+	0x0001033c, 0x00ed03db, 0x008c04b1, 0x00d04519, 0x00211003, 0x0011103e,
+	0x00111003, 0x00d00090, 0x00b0190d, 0x00b01902, 0x00a00b09, 0x009c1425,
+	0x00d00090, 0x00a10907, 0x00311002, 0x00a20b03, 0x00b01b09, 0x00782c44,
+	0x0042200f, 0x00188002, 0x00b02b03, 0x00b08909, 0x00a20b01, 0x00762c44,
+	0x0042200f, 0x00166002, 0x00b02b01, 0x00b06908, 0x00a10b00, 0x00a20b02,
+	0x00b01b04, 0x00b02b06, 0x00a10b01, 0x00a20b03, 0x00b01b05, 0x00e100be,
+	0x00b02b07, 0x00b01b08, 0x00a50b00, 0x00a70905, 0x0001073c, 0x00716200,
+	0x00715021, 0x0015503f, 0x00b21c00, 0x00a40b02, 0x00117010, 0x00718200,
+	0x00714021, 0x0014403f, 0x00b21c00, 0x00a70906, 0x0001073c, 0x00716200,
+	0x00715021, 0x0015503f, 0x00b21c00, 0x00117010, 0x00718200, 0x00714021,
+	0x0014403f, 0x00b21c00, 0x00a10b01, 0x0075121e, 0x0011103e, 0x00b05b00,
+	0x00b01b01, 0x00a20b03, 0x0074221e, 0x0012203e, 0x00a1090d, 0x00211010,
+	0x00b04b02, 0x00b02b03, 0x00b0190d, 0x00b01902, 0x00b0c90f, 0x00a10901,
+	0x00721ca8, 0x00e80001, 0x00a00900, 0x009c142b, 0x0071803c, 0x00168200,
+	0x00a5000b, 0x00555600, 0x00148300, 0x00b0500b, 0x00b01901, 0x00b04004,
+	0x00e10460, 0x00211200, 0x00a60d00, 0x00ab0100, 0x007b3088, 0x004660e0,
+	0x00566002, 0x00b0b100, 0x00b06d00, 0x00010a3c, 0x00d04519, 0x00d00008,
+	0x00400f00, 0x00e80460, 0x004a601f, 0x00218a00, 0x00a2000b, 0x00a70100,
+	0x00e50001, 0x00773088, 0x00155a00, 0x00b07100, 0x00777c2e, 0x00aa0006,
+	0x00177004, 0x00233700, 0x00e70001, 0x00177300, 0x00522500, 0x005aa700,
+	0x00b0200b, 0x00b0a006, 0x00d0361a, 0x0001033c, 0x0002093c, 0x00d00008,
+	0x00500f00, 0x00ed0459, 0x008c04b1, 0x00a2000a, 0x00712c23, 0x00722c60,
+	0x00ed045e, 0x008c04a8, 0x00d0321e, 0x00142030, 0x008c1462, 0x00722210,
+	0x00d12040, 0x00e30001, 0x00133100, 0x00622300, 0x00311010, 0x00b02001,
+	0x00b01eff, 0x003ee001, 0x00ed046c, 0x008c081b, 0x00a11e01, 0x00ed046f,
+	0x008c0885, 0x00d00217, 0x00a20006, 0x00722e10, 0x009c1474, 0x00d04814,
+	0x00d12040, 0x00e30001, 0x00133100, 0x00622300, 0x00b01eff, 0x00b02efe,
+	0x00b0defd, 0x003ee003, 0x00ed047e, 0x008c081b, 0x00ad1e01, 0x00a21e01,
+	0x00a11e01, 0x00500200, 0x009c1474, 0x00d00090, 0x00a20006, 0x00722e00,
+	0x009c1488, 0x00d0011b, 0x00d12040, 0x00e30001, 0x00133100, 0x00622300,
+	0x00b01eff, 0x00b02efe, 0x00b0defd, 0x003ee003, 0x00ed0492, 0x008c0885,
+	0x00ad1e01, 0x00a21e01, 0x00a11e01, 0x00500200, 0x009c1488, 0x00d0011b,
+	0x00e300a0, 0x00731023, 0x00e40001, 0x00a10300, 0x00d21040, 0x009c34a0,
+	0x00422000, 0x00840d00, 0x00144200, 0x00611400, 0x00742c22, 0x00b01300,
+	0x00533200, 0x0072244c, 0x0072403e, 0x00840d00, 0x00e300a0, 0x00731023,
+	0x00e40001, 0x00144200, 0x00a10300, 0x00511400, 0x00d00090, 0x00b01300,
+	0x00840d00, 0x00a30201, 0x0007033c, 0x0077005e, 0x00eb0450, 0x00ea0460,
+	0x002bb100, 0x00b07201, 0x00773d00, 0x00c0703f, 0x009c14bd, 0x00773ca8,
+	0x00d04c11, 0x0047301f, 0x00c0701f, 0x009c14c1, 0x00e70000, 0x00a9000b,
+	0x00e80001, 0x00188700, 0x0078003f, 0x00780020, 0x006880ff, 0x00499800,
+	0x00a40b00, 0x00b0900b, 0x00a60005, 0x00e70001, 0x00177100, 0x00777210,
+	0x006770ff, 0x00a80001, 0x00a90002, 0x00aa0006, 0x00488700, 0x00499700,
+	0x004aa700, 0x00b08001, 0x00a80004, 0x00b09002, 0x00488700, 0x00a9001a,
+	0x00499700, 0x00b0a006, 0x00b0901a, 0x00aa001c, 0x004aa700, 0x00b08004,
+	0x00b0a01c, 0x00a00200, 0x00d50050, 0x00455001, 0x00773c3f, 0x00555700,
+	0x009814ef, 0x00d00090, 0x00a700f4, 0x00181001, 0x00155800, 0x00407500,
+	0x009814ef, 0x00155001, 0x00740062, 0x00a70200, 0x009814f8, 0x00773c3e,
+	0x009814f8, 0x00177100, 0x00566700, 0x00e70003, 0x00747040, 0x00d05010,
+	0x00a70200, 0x009c14fc, 0x00740040, 0x00d05010, 0x00547002, 0x00e70001,
+	0x00177110, 0x00566700, 0x00b04b00, 0x00b06005, 0x00b050f5, 0x00840d00,
+	0x00ec0001, 0x00da3040, 0x008c2508, 0x00d0001f, 0x0016ca00, 0x00eb0460,
+	0x00633600, 0x002bba00, 0x00e40500, 0x00ab0b00, 0x0079bc88, 0x00169004,
+	0x00244600, 0x0076bc2e, 0x009c156b, 0x00d00090, 0x0017c900, 0x00a1001c,
+	0x00411700, 0x009c1505, 0x00d00090, 0x00a7040b, 0x00a1040e, 0x00401001,
+	0x009c151f, 0x00500700, 0x009c1505, 0x004110fe, 0x0076bc84, 0x00a8040c,
+	0x00b0140e, 0x00981505, 0x0075bcb8, 0x00255001, 0x00a1040f, 0x0016563e,
+	0x009c152a, 0x00e60001, 0x00751cc9, 0x00155002, 0x00d11070, 0x00211001,
+	0x00355100, 0x00305600, 0x00982505, 0x0006043c, 0x00b01eff, 0x00b02efe,
+	0x00b03efd, 0x00b04efc, 0x003ee004, 0x0071bc56, 0x0098153c, 0x00f40000,
+	0x00992541, 0x00d0531e, 0x00f00000, 0x00991541, 0x00ed0540, 0x008c0498,
+	0x009c1548, 0x00d00090, 0x00d00090, 0x00a41e01, 0x00a31e01, 0x00a21e01,
+	0x00a11e01, 0x00d05015, 0x0075bc84, 0x00e40941, 0x007445f0, 0x00544900,
+	0x00745064, 0x00725084, 0x00b04300, 0x0071bcb8, 0x00981553, 0x007210b8,
+	0x0072c034, 0x00211001, 0x00111500, 0x0075bc3d, 0x0072503d, 0x005f2c00,
+	0x00a20603, 0x005f0200, 0x0075bc3d, 0x0098155d, 0x00222100, 0x0075bc60,
+	0x00a8060c, 0x00388100, 0x009c2562, 0x0008003c, 0x00b05ac0, 0x00b02603,
+	0x00b0160b, 0x00b0860c, 0x00a41e01, 0x00a31e01, 0x00a21e01, 0x00a11e01,
+	0x00d05015, 0x00a8040d, 0x009835d8, 0x0075bcb8, 0x00a70402, 0x009835d8,
+	0x0077bc84, 0x00255001, 0x00a8040f, 0x0016573e, 0x009c1576, 0x00e60001,
+	0x00d58670, 0x00982505, 0x00306010, 0x0098357c, 0x009c8505, 0x009c8505,
+	0x003707fe, 0x00983580, 0x00e60001, 0x00166700, 0x0007043c, 0x00b03eff,
+	0x003ee001, 0x0071bc56, 0x009c1588, 0x00f00000, 0x0099158d, 0x00d0581a,
+	0x00f50000, 0x0099258d, 0x00ed058c, 0x008c0498, 0x009c1591, 0x00d00090,
+	0x00d00090, 0x00a31e01, 0x00d05015, 0x0075bc84, 0x00e407f4, 0x007445f0,
+	0x00544900, 0x00745064, 0x00746127, 0x0015c900, 0x00b04300, 0x00a9001b,
+	0x00599500, 0x0004073c, 0x00b0901b, 0x0070bc65, 0x009815d9, 0x00e54002,
+	0x0071bcb8, 0x009815a4, 0x007510b8, 0x0075c034, 0x0071bc84, 0x007510a4,
+	0x0071bc3d, 0x0075103d, 0x005f2500, 0x00a20404, 0x00156002, 0x005f0200,
+	0x00af2800, 0x00366001, 0x009c15ac, 0x0076bc60, 0x0070bc3d, 0x008815b3,
+	0x00222500, 0x00a70402, 0x00a9040d, 0x00b06ac0, 0x00377500, 0x00399500,
+	0x009c35ce, 0x00d00090, 0x00a90405, 0x00309700, 0x009825be, 0x0009073c,
+	0x00a50401, 0x00b0940c, 0x00705c26, 0x009815ce, 0x00d00090, 0x00a50406,
+	0x00a10409, 0x00211500, 0x0078022f, 0x00b01409, 0x00b01403, 0x00b0deff,
+	0x003ee001, 0x00ed05cd, 0x008c0028, 0x00ad1e01, 0x00a1000b, 0x0016ca00,
+	0x00611600, 0x00b02404, 0x00b0100b, 0x00b0940d, 0x00b0840f, 0x00b07402,
+	0x00a31e01, 0x00d05015, 0x00d05015, 0x0071bc84, 0x00c01000, 0x009c15ea,
+	0x00e14102, 0x00e50310, 0x00715210, 0x005f2100, 0x00a20404, 0x00efeeee,
+	0x005f0200, 0x00a12800, 0x001f1000, 0x001f1038, 0x001f1030, 0x001f1028,
+	0x00e50004, 0x00d05a1f, 0x00e14112, 0x00e50110, 0x00715210, 0x005f2100,
+	0x00a20404, 0x00efffcc, 0x005f0200, 0x00a12800, 0x001f1000, 0x001f1030,
+	0x00e50004, 0x00d05a1f, 0x00d87040, 0x0098261a, 0x00e20001, 0x00122800,
+	0x0009083c, 0x00199004, 0x00e20500, 0x00299200, 0x00677200, 0x00a0090b,
+	0x009c161a, 0x00f40000, 0x00aa0903, 0x00ab0902, 0x0099161a, 0x009835f6,
+	0x00e100af, 0x00e2061b, 0x00a00100, 0x009c101e, 0x00548050, 0x00742210,
+	0x00a20011, 0x00b04100, 0x00a30901, 0x00733c2f, 0x00723037, 0x005f0200,
+	0x005f0a00, 0x00e20080, 0x002aa200, 0x0013203e, 0x003bb200, 0x00b0a903,
+	0x00b0390b, 0x00b0b902, 0x00d0011e, 0x00ad090e, 0x00ab090b, 0x00ac090f,
+	0x00ff1000, 0x00a40d0a, 0x00a80d09, 0x00b040e9, 0x007f8c61, 0x00ff3000,
+	0x004f8080, 0x00b0e009, 0x00ae0d0f, 0x00a20d0b, 0x00981635, 0x00d00090,
+	0x00d00090, 0x00ad1e01, 0x00aa1e01, 0x00a81e01, 0x00a71e01, 0x00a61e01,
+	0x00a51e01, 0x00a41e01, 0x00a31e01, 0x00a11e01, 0x00840200, 0x00e2063a,
+	0x00a400ed, 0x00c04007, 0x009c1709, 0x00d00090, 0x00d00090, 0x00080f3c,
+	0x003bb001, 0x00b080eb, 0x00d00090, 0x009a864c, 0x00d00090, 0x00a00d13,
+	0x009c2648, 0x00d00090, 0x00d00090, 0x00b2ac00, 0x000a083c, 0x00d06316,
+	0x00e4ffff, 0x000a083c, 0x00b04d13, 0x00d06316, 0x00a50d06, 0x00105001,
+	0x009c2641, 0x00d00090, 0x00a100e9, 0x00745d08, 0x00b01d0a, 0x00761d00,
+	0x00374600, 0x00745d00, 0x00366400, 0x00577600, 0x00677500, 0x0098265b,
+	0x00d06411, 0x00a70d09, 0x00711c48, 0x00777c41, 0x003771fb, 0x00ff1000,
+	0x00a40d09, 0x00747041, 0x004f7003, 0x00b04d09, 0x00307004, 0x009c266e,
+	0x00d00090, 0x00a400ed, 0x00e2066c, 0x00c04007, 0x009c1709, 0x00d00090,
+	0x003bb001, 0x00000f3c, 0x00307007, 0x00983678, 0x00ff2000, 0x00d00090,
+	0x00d00090, 0x00d00090, 0x00080f3c, 0x00ff3000, 0x000f083c, 0x00d0671f,
+	0x00a400ed, 0x00e2067c, 0x00c04007, 0x009c1709, 0x00d00090, 0x003bb001,
+	0x00080f3c, 0x00b0c90f, 0x00738d10, 0x00333001, 0x00705c3d, 0x009816a7,
+	0x00303004, 0x009826a7, 0x00708610, 0x009c26a7, 0x00d00090, 0x00a400ed,
+	0x00e2068d, 0x00c04007, 0x009c1709, 0x003bb001, 0x00333004, 0x00040f3c,
+	0x00044040, 0x00744201, 0x00748859, 0x001440be, 0x00788c5a, 0x00588001,
+	0x001880bf, 0x00a5090f, 0x00a20d0e, 0x00d55070, 0x00155002, 0x00255101,
+	0x00a00d13, 0x0098269f, 0x00355004, 0x00d00090, 0x00d00090, 0x00b28200,
+	0x00a80d04, 0x00255800, 0x00b24200, 0x00b25200, 0x00b02d0e, 0x00c01003,
+	0x009c16b3, 0x00d00090, 0x00a40d13, 0x009826ad, 0x00d06b10, 0x00444001,
+	0x00b2ac00, 0x00b04d13, 0x00e5fffc, 0x00e1ffff, 0x00d06b15, 0x002510fd,
+	0x00d00090, 0x00303504, 0x009826c0, 0x00d00090, 0x00a400ed, 0x00e206bc,
+	0x00c04007, 0x009c1709, 0x003bb001, 0x00333004, 0x00080f3c, 0x00d06b15,
+	0x00477003, 0x00357300, 0x00255101, 0x00ff1000, 0x00a40d09, 0x00745041,
+	0x004f5003, 0x00b04d09, 0x00301303, 0x009816f6, 0x00c05004, 0x009c16eb,
+	0x00ff2000, 0x00d00090, 0x00d00090, 0x00d00090, 0x00080f3c, 0x00ff3000,
+	0x000f083c, 0x00d06f16, 0x00ff2000, 0x00d00090, 0x00d00090, 0x00d00090,
+	0x00040f3c, 0x00ff3000, 0x000f043c, 0x00155003, 0x00144500, 0x0015503d,
+	0x00330300, 0x009c26e1, 0x00e30000, 0x00357500, 0x00355004, 0x00155003,
+	0x00144500, 0x00350500, 0x00144500, 0x00355020, 0x00188500, 0x00588400,
+	0x00d06f16, 0x00455003, 0x00305700, 0x009826d4, 0x00e206f3, 0x00a400ed,
+	0x00c04007, 0x009c1709, 0x00d00090, 0x003bb001, 0x00080f3c, 0x00d00090,
+	0x00500100, 0x009c26f9, 0x00ea0000, 0x00211001, 0x00111003, 0x00310100,
+	0x00188100, 0x00211020, 0x001aa100, 0x00310100, 0x001aa100, 0x00211020,
+	0x00188100, 0x00e40001, 0x00588a00, 0x00b04d13, 0x00b080eb, 0x00e20636,
+	0x00d0631f, 0x00b0c90f, 0x00b02d0b, 0x00b0b90b, 0x00ff2000, 0x00b01eff,
+	0x00b03efe, 0x00b04efd, 0x00b05efc, 0x00b06efb, 0x00b07efa, 0x00b08ef9,
+	0x00b0aef8, 0x00b0def7, 0x003ee009, 0x00a100e9, 0x00a40d09, 0x00b01d0a,
+	0x00b0ed0f, 0x00050f3c, 0x00754100, 0x00ae0009, 0x00b05d09, 0x00a0090b,
+	0x009c132e, 0x00e400af, 0x00e80001, 0x00b00400, 0x00a10002, 0x0071803f,
+	0x00b00002, 0x00b01003, 0x00d0321e, 0x00a2090e, 0x00ff1000, 0x007f2c61,
+	0x00ff3000, 0x005f0200, 0x00500a00, 0x009c1731, 0x00fa0000, 0x00ec04e0,
+	0x00ed0008, 0x00a4090b, 0x00a6090f, 0x00774cca, 0x0088173b, 0x003dd700,
+	0x00500f00, 0x00377001, 0x009c3738, 0x00402001, 0x009c1740, 0x00d00090,
+	0x00772c41, 0x00244700, 0x00774cc2, 0x00a0090c, 0x008c1747, 0x00774d00,
+	0x0005073c, 0x00277003, 0x0017703e, 0x003dd700, 0x00a10c09, 0x00ab0c00,
+	0x00311700, 0x00a20c01, 0x00b01c09, 0x00a40c02, 0x00a10c03, 0x00aa0909,
+	0x00a80908, 0x00500700, 0x0098377a, 0x00d00090, 0x00d00090, 0x00a30c08,
+	0x009c175d, 0x00e300c0, 0x00ab0c04, 0x00a20c05, 0x00a40c06, 0x00b03c08,
+	0x00a10c07, 0x00333001, 0x00d00090, 0x00b03c08, 0x00530f00, 0x00a0090c,
+	0x008c1769, 0x003505fc, 0x00982769, 0x00155003, 0x00133500, 0x00350500,
+	0x00133500, 0x00350500, 0x00783210, 0x0078b021, 0x001bb03f, 0x007b203f,
+	0x0012203f, 0x00133030, 0x007a3210, 0x007a4021, 0x0014403f, 0x0074103f,
+	0x0011103f, 0x00b28600, 0x00b2a600, 0x00377001, 0x009c3755, 0x00d00090,
+	0x00b0bc00, 0x00b02c01, 0x00b04c02, 0x00b01c03, 0x003dd001, 0x00982784,
+	0x00d00090, 0x00d00090, 0x00500f00, 0x00d0771e, 0x00fa2000, 0x00a2090e,
+	0x0042200e, 0x00b0090b, 0x0047f080, 0x00522700, 0x00b0690f, 0x00b0290e,
+	0x00d04519, 0x00d77040, 0x00e90500, 0x007c7484, 0x002cc900, 0x00e90016,
+	0x00a50c0b, 0x00705d00, 0x009c17f3, 0x00d00090, 0x00ab0c0c, 0x008c37d0,
+	0x00a20c01, 0x00702c3c, 0x009817f3, 0x00eb04e0, 0x00a90c0f, 0x00a30c0d,
+	0x00a80b09, 0x009817cf, 0x00e20016, 0x00a40b00, 0x00a50b01, 0x00a60b02,
+	0x00a70b03, 0x00d09270, 0x009c27cf, 0x00e20008, 0x00308008, 0x009c27ab,
+	0x0002083c, 0x00aa0b08, 0x009c17b3, 0x00ea00c0, 0x00a50b05, 0x00b0ab08,
+	0x00a40b04, 0x00a60b06, 0x00a70b07, 0x003aa001, 0x00d00090, 0x00b0ab08,
+	0x00aa0c08, 0x007a4021, 0x0014403f, 0x0074503f, 0x0015503f, 0x00b2a900,
+	0x00aa0c09, 0x007a6021, 0x0016603f, 0x0076703f, 0x0017703f, 0x00b2a900,
+	0x00233008, 0x00388001, 0x00322001, 0x009c37ab, 0x00d00090, 0x00b04b00,
+	0x00b05b01, 0x00b06b02, 0x00b07b03, 0x00b03c02, 0x00b03c0d, 0x00b08b09,
+	0x00b09c0f, 0x00d07f13, 0x00aa0c0f, 0x00a80c01, 0x00718c3b, 0x009817d7,
+	0x00f40000, 0x009927f3, 0x00d07d19, 0x00f00000, 0x009917f3, 0x00d0a970,
+	0x009c27f3, 0x00d00090, 0x00ed07de, 0x008c0498, 0x009817f3, 0x00e40729,
+	0x007445f0, 0x00544750, 0x00a90c03, 0x00b04300, 0x00788c2f, 0x00728037,
+	0x0046901f, 0x005f2051, 0x004f90e0, 0x003606e0, 0x00306b00, 0x009837ed,
+	0x00060b3c, 0x00756100, 0x003bb600, 0x00299600, 0x00b0bc0c, 0x00b09c03,
+	0x00b05c0b, 0x00d00211, 0x00f50000, 0x00500a00, 0x009c17f8, 0x00f00000,
+	0x00761d27, 0x00a40901, 0x00000f3c, 0x00366001, 0x009c17fa, 0x00724ca0,
+	0x0030201f, 0x009c1801, 0x00724ca8, 0x00e60001, 0x00a8000b, 0x001b6200,
+	0x00568b00, 0x00e80001, 0x00b0600b, 0x00ab001b, 0x00188300, 0x006bb800,
+	0x00a70902, 0x00b0b01b, 0x009c3819, 0x0001033c, 0x00b00902, 0x00b01eff,
+	0x00b02efe, 0x00b0aefd, 0x003ee003, 0x0002093c, 0x00ed0816, 0x008c04b1,
+	0x00aa1e01, 0x00a21e01, 0x00a11e01, 0x00010a3c, 0x00d04519, 0x00b0deff,
+	0x003ee001, 0x00771484, 0x00e50500, 0x00277500, 0x0005013c, 0x00ab0701,
+	0x0071bc3b, 0x00981827, 0x00f40000, 0x0099285a, 0x00d0821a, 0x00f00000,
+	0x0099185a, 0x00d00090, 0x00a90703, 0x00a3070b, 0x00a8070f, 0x00a4070e,
+	0x00404001, 0x009c1833, 0x00500300, 0x009c185a, 0x00d00090, 0x00aa070c,
+	0x0098185a, 0x00738d07, 0x004330fc, 0x00303022, 0x00982863, 0x0040a080,
+	0x00981863, 0x00d00090, 0x0040907f, 0x009c1863, 0x00d48070, 0x00d00090,
+	0x00303421, 0x0098385e, 0x00ed0844, 0x008c0498, 0x0098185a, 0x00e40941,
+	0x007445f0, 0x00544550, 0x00a10008, 0x0076bc2f, 0x00716037, 0x00b04300,
+	0x005f1200, 0x005f0900, 0x00a4070e, 0x00740020, 0x00a30701, 0x00b0470e,
+	0x00733c26, 0x00133007, 0x00299300, 0x00e30080, 0x003aa300, 0x00b09703,
+	0x00b0a70c, 0x00b0370b, 0x00ad1e01, 0x00d00090, 0x00d00090, 0x00840d00,
+	0x0076bca0, 0x00e40001, 0x0074403f, 0x00144600, 0x0098285a, 0x00d48070,
+	0x003043f6, 0x009c285a, 0x00ed0868, 0x008c0498, 0x0098185a, 0x00e4090b,
+	0x007445f0, 0x00544550, 0x0076bc2f, 0x00726037, 0x005f2051, 0x004f90e0,
+	0x00b04300, 0x0043901f, 0x00a4070e, 0x00740020, 0x00d00090, 0x00b0470e,
+	0x00a40701, 0x00744c26, 0x0098187a, 0x003993e0, 0x003403e0, 0x003aa400,
+	0x009c287e, 0x000a003c, 0x00a3070b, 0x00743cca, 0x00d00090, 0x003304f8,
+	0x00133002, 0x007340ca, 0x00d08517, 0x00741484, 0x00e70500, 0x00244700,
+	0x00e20020, 0x00a0040b, 0x009c18de, 0x00d00090, 0x00ac0401, 0x0070cc3a,
+	0x009c1892, 0x00f00000, 0x009918de, 0x00d08914, 0x00f50000, 0x009928de,
+	0x00d00090, 0x00a6040f, 0x00a7040d, 0x00a50404, 0x0043501f, 0x009c18df,
+	0x00207080, 0x009828df, 0x00d76270, 0x009828df, 0x009c88de, 0x009c88de,
+	0x00e20080, 0x00d00090, 0x00a70007, 0x007ccc2f, 0x0077c037, 0x005f0700,
+	0x005f0500, 0x00d02000, 0x00af2600, 0x00a70402, 0x00b0640f, 0x00255200,
+	0x00377200, 0x00b05404, 0x00b07402, 0x009c38b9, 0x00d00090, 0x00b00402,
+	0x0002043c, 0x00b0deff, 0x003ee001, 0x00ed08b7, 0x008c04b1, 0x00ad1e01,
+	0x00d08d1e, 0x00a3040d, 0x00333200, 0x009c38dd, 0x00e50001, 0x00155100,
+	0x00a2001c, 0x00422500, 0x009c18dd, 0x00d00090, 0x00a20405, 0x00760210,
+	0x00302700, 0x008828c7, 0x0002073c, 0x00b0640f, 0x00b0240c, 0x00b0240d,
+	0x00b07402, 0x00a2040a, 0x00a70409, 0x00a30407, 0x00a50406, 0x00222300,
+	0x00277500, 0x00b0240a, 0x00b07409, 0x00b02404, 0x00b07403, 0x0003013c,
+	0x0001073c, 0x00b0deff, 0x003ee001, 0x00ed08db, 0x008c0028, 0x00ad1e01,
+	0x00d08d1e, 0x00b0340d, 0x00840d00, 0x00a2040d, 0x00a0040b, 0x009c18de,
+	0x00222300, 0x00d86070, 0x009818de, 0x00188002, 0x00288300, 0x004880fc,
+	0x00308020, 0x009838eb, 0x00e80020, 0x00308200, 0x009828f0, 0x00392001,
+	0x0008023c, 0x00d08f11, 0x00398001, 0x00e74252, 0x007ccc2f, 0x0077c037,
+	0x005f0700, 0x000f9337, 0x004f50e0, 0x004a30fc, 0x003b8a00, 0x00500a00,
+	0x00981900, 0x005f0000, 0x003aa004, 0x009c38fb, 0x00d00090, 0x00d00090,
+	0x00af2600, 0x003bb004, 0x009c3900, 0x003a08e0, 0x004aa0fc, 0x00981909,
+	0x005f0000, 0x003aa004, 0x009c3906, 0x00328300, 0x00d08a19, 0x00a2090e,
+	0x00ff1000, 0x007f2c61, 0x00ff3000, 0x005f0200, 0x00500a00, 0x009c1913,
+	0x00fa0000, 0x00ab090b, 0x004220fe, 0x00a8090f, 0x00b0290e, 0x0075bcca,
+	0x0098191e, 0x00d00090, 0x00d00090, 0x00500f00, 0x00355001, 0x008c391b,
+	0x0075bcc2, 0x00981925, 0x00d00090, 0x00d00090, 0x00b2f800, 0x00355001,
+	0x008c3922, 0x00b0090b, 0x0002073c, 0x00010a3c, 0x00ed092a, 0x008c04a8,
+	0x00a5090e, 0x0098193f, 0x00ff2000, 0x0045500f, 0x00d00090, 0x00d00090,
+	0x004bf080, 0x00555b00, 0x00a4090c, 0x00981937, 0x00d00090, 0x00b0590e,
+	0x00d0931f, 0x00755c41, 0x00d00090, 0x003505fc, 0x00155003, 0x00350500,
+	0x001bb500, 0x00d00090, 0x00b2b800, 0x00b0890f, 0x00d0321e, 0x00a2090e,
+	0x00ff1000, 0x007f2c61, 0x00ff3000, 0x005f0200, 0x00500a00, 0x009c1949,
+	0x00fa0000, 0x004220fe, 0x00a8090f, 0x00b0290e, 0x00eb0952, 0x007c1c64,
+	0x002ccb00, 0x00ab090b, 0x00a20908, 0x00840c00, 0x00d09713, 0x00d0961a,
+	0x00d09616, 0x00d09611, 0x00d0951c, 0x00ec0958, 0x00d00008, 0x00b2f800,
+	0x003bb020, 0x00d0971c, 0x00ec095d, 0x00d00004, 0x00b2f800, 0x003bb010,
+	0x00d0971c, 0x00ec0962, 0x00d00002, 0x00b2f800, 0x003bb008, 0x00d0971c,
+	0x00ec0967, 0x00b2f800, 0x003bb004, 0x00d0971c, 0x00ec096b, 0x00122030,
+	0x0072f210, 0x003bb002, 0x008c197c, 0x00d00090, 0x00d00090, 0x00b22800,
+	0x00d0971c, 0x00ec0974, 0x00122038, 0x0072f118, 0x003bb001, 0x008c197c,
+	0x00d00090, 0x00d00090, 0x00b22800, 0x00d0971c, 0x00a50aec, 0x00355700,
+	0x00801c00, 0x00b02908, 0x00b0b90b, 0x00500b00, 0x009c1987, 0x0002073c,
+	0x00010a3c, 0x00ed0987, 0x008c04a8, 0x00a5090e, 0x0098199c, 0x00ff2000,
+	0x00d00090, 0x00d00090, 0x0045500f, 0x004bf080, 0x00a4090c, 0x00981994,
+	0x00555b00, 0x00d00090, 0x00b0590e, 0x00d0991c, 0x00755c41, 0x00d00090,
+	0x003505fc, 0x00155003, 0x00350500, 0x001bb500, 0x00d00090, 0x00b2b800,
+	0x00b0890f, 0x00d0321e, 0x00707cda, 0x009819a5, 0x00702cda, 0x009819a5,
+	0x0070bcda, 0x009819a5, 0x00840d00, 0x0076002f, 0x00840d00
+};
+
+
+
+static struct stm_plat_fdma_fw stm_fdma_firmware_7109c2 = {
+	.name = "fdma_7109c2.fw",
+	.fw_regs = {
+		.rev_id    = 0x8000 + (0x000 << 2), /* 0x8000 */
+		.cmd_statn = 0x8000 + (0x450 << 2), /* 0x9140 */
+		.req_ctln  = 0x8000 + (0x460 << 2), /* 0x9180 */
+		.ptrn      = 0x8000 + (0x500 << 2), /* 0x9400 */
+		.cntn      = 0x8000 + (0x502 << 2), /* 0x9408 */
+		.saddrn    = 0x8000 + (0x503 << 2), /* 0x940c */
+		.daddrn    = 0x8000 + (0x504 << 2), /* 0x9410 */
+	},
+	.dmem = stm_fdma_firmware_7109c2_dmem,
+	.dmem_len = sizeof(stm_fdma_firmware_7109c2_dmem),
+	.imem = stm_fdma_firmware_7109c2_imem,
+	.imem_len = sizeof(stm_fdma_firmware_7109c2_imem),
+};
+
+#endif
diff --git a/include/linux/stm/fdma_firmware_7109c3.h b/include/linux/stm/fdma_firmware_7109c3.h
new file mode 100644
index 0000000..8803ae6
--- /dev/null
+++ b/include/linux/stm/fdma_firmware_7109c3.h
@@ -0,0 +1,737 @@
+#ifndef __STM_FDMA_FIRMWARE_7109C3_H
+#define __STM_FDMA_FIRMWARE_7109C3_H
+
+#include <linux/kernel.h>
+#include <linux/stm/soc.h>
+
+
+
+static unsigned long stm_fdma_firmware_7109c3_dmem[] = {
+	0x01060300, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x23104052, 0x23100051, 0x00000000, 0x00000000, 0x00000000,
+	0x21100051, 0x017a0136, 0x017d0139, 0x0180013c, 0x0183013f, 0x63103051,
+	0x003f001f, 0x000001c5, 0x000001c7, 0x000001c9, 0x000001d5, 0x000003a6,
+	0x000003a4, 0x000003a1, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x000000fe, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x0000007e, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00002416, 0x04a004a0, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00002416, 0x04c004c0,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00002416, 0x04e004e0, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffff00, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0000241f,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00001428, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x0000142d, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00001432,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00001437, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x0000143c, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00001441,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00001446, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x0000144b, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00001450,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00001455, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x0000145a, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0000145f,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00001464, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00001469, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0000146e
+};
+
+
+
+static unsigned long stm_fdma_firmware_7109c3_imem[] = {
+	0x00e1ffff, 0x00e200ff, 0x00f51000, 0x00b010f9, 0x00b020fa, 0x00ef0013,
+	0x00e10001, 0x00ee00a0, 0x00b010ea, 0x00f01000, 0x00ef0013, 0x00a300f8,
+	0x00aa000b, 0x00433a00, 0x009c154b, 0x009b3338, 0x009a223e, 0x00d00090,
+	0x00a70005, 0x00177030, 0x009c121e, 0x00d00090, 0x00a70006, 0x00a2001c,
+	0x00672700, 0x009c14b7, 0x00d00090, 0x00a70002, 0x009c1649, 0x00d00090,
+	0x00a70004, 0x009c17ee, 0x00d00090, 0x00a7001a, 0x009c1a3a, 0x00d00090,
+	0x00a90003, 0x009c103b, 0x00d00090, 0x00a20001, 0x009c149f, 0x00d00090,
+	0x00d0001b, 0x00452003, 0x00461003, 0x00355600, 0x00755461, 0x00a6040e,
+	0x00555001, 0x00765080, 0x00d00090, 0x00b0640e, 0x00755c23, 0x00761c62,
+	0x00266500, 0x007564ca, 0x00d00090, 0x00b0540b, 0x00840d00, 0x00e20500,
+	0x00d00090, 0x00aa020e, 0x00f50000, 0x00ab0a0e, 0x00a10a0d, 0x00d0b070,
+	0x009c10ac, 0x00d00090, 0x00a4020f, 0x00a70201, 0x00a30a04, 0x00d54070,
+	0x00305020, 0x0098207d, 0x007c3ce0, 0x009c1081, 0x00e80020, 0x00ed0057,
+	0x00a50007, 0x00777c2f, 0x00757037, 0x005f0500, 0x005f0300, 0x00a50a0c,
+	0x00a70a14, 0x00b050e9, 0x00941700, 0x00d00090, 0x00ed005e, 0x00a92400,
+	0x00233004, 0x00b090eb, 0x005f0900, 0x00928100, 0x00388001, 0x008c3059,
+	0x00a50a02, 0x0006033c, 0x00605300, 0x008c1065, 0x00a60a05, 0x00a500e9,
+	0x00b06a04, 0x00b0420f, 0x00b05a0c, 0x00d0b070, 0x009c10ac, 0x00d00090,
+	0x00e60026, 0x00d54070, 0x00306500, 0x00982027, 0x00d00090, 0x00a50202,
+	0x009c1079, 0x00d04070, 0x009c1027, 0x00e10000, 0x00b00003, 0x00ed0027,
+	0x008c04f8, 0x00e10001, 0x00b00003, 0x00b01002, 0x008c0027, 0x00a00202,
+	0x009c1079, 0x00d04070, 0x00981075, 0x004c301f, 0x00155002, 0x00265c00,
+	0x004060e0, 0x00981087, 0x00e60020, 0x00366001, 0x00166008, 0x00ed009c,
+	0x00777c2f, 0x00e54252, 0x00757037, 0x000f053c, 0x005f6c00, 0x004f30e0,
+	0x0018c03e, 0x00981095, 0x000f003c, 0x00388001, 0x008c3092, 0x00a50a0c,
+	0x00166038, 0x00386cff, 0x0018803e, 0x00a70a14, 0x00b050e9, 0x00941700,
+	0x00d00090, 0x00ed00a3, 0x00a92400, 0x00233004, 0x00b090eb, 0x005f0900,
+	0x00928100, 0x00388001, 0x008c309e, 0x003806e1, 0x00981060, 0x000f003c,
+	0x00388004, 0x008c30a7, 0x008c0060, 0x008c00ab, 0x00a30a00, 0x00a80a01,
+	0x009810d0, 0x00d00090, 0x00a50201, 0x00775c2f, 0x00777437, 0x00055035,
+	0x00e64042, 0x005f6700, 0x004f30f0, 0x00a62b00, 0x009c20c0, 0x00d00090,
+	0x005f5001, 0x00ac2b00, 0x00af2b00, 0x004f6001, 0x000f0c3c, 0x008c00c4,
+	0x000f053c, 0x00af2b00, 0x000f063c, 0x000f003c, 0x00233010, 0x00388010,
+	0x009810ce, 0x00d0b070, 0x009c10b4, 0x00d00090, 0x00b08a01, 0x00b03a00,
+	0x00b0ba0e, 0x008c0027, 0x00d0b070, 0x009810ca, 0x00533001, 0x007b0210,
+	0x0008003c, 0x008c00ca, 0x00a50a00, 0x00455001, 0x00941d00, 0x00d00090,
+	0x00b06eff, 0x00b07efe, 0x00b08efd, 0x00b09efc, 0x00b0cefb, 0x003ee005,
+	0x00a60a07, 0x00a70a08, 0x00a800e9, 0x00ec0000, 0x00788d00, 0x00106001,
+	0x009c20f3, 0x00796d08, 0x003c9800, 0x00796d00, 0x00398900, 0x005cc900,
+	0x006cc600, 0x009c20f3, 0x007c6c3d, 0x007cc43e, 0x00666c00, 0x007c7c3d,
+	0x007cc43e, 0x00577c00, 0x00d01012, 0x00107001, 0x009c2109, 0x00797d08,
+	0x003c9800, 0x00797d00, 0x00398900, 0x005cc900, 0x006cc700, 0x009c2109,
+	0x007c7c3d, 0x007cc43e, 0x00677c00, 0x007c6c3d, 0x007cc43e, 0x00566c00,
+	0x00a900e9, 0x00b06a07, 0x00b07a08, 0x00799c48, 0x002993fc, 0x00b28b00,
+	0x00b29b00, 0x00ac1e01, 0x00a91e01, 0x00a81e01, 0x00a71e01, 0x00a61e01,
+	0x00840d00, 0x00a50a00, 0x00455001, 0x00941d00, 0x00d00090, 0x00b09a10,
+	0x00b01eff, 0x00b02efe, 0x00b06efd, 0x00b07efc, 0x00b08efb, 0x00b09efa,
+	0x00b0cef9, 0x00b04ef8, 0x003ee008, 0x00a800e9, 0x00788d00, 0x0047801f,
+	0x00a40e00, 0x00a900e9, 0x00778ca0, 0x00799c48, 0x0002093c, 0x002993fc,
+	0x00e54400, 0x00155710, 0x009c2151, 0x00d00090, 0x00d04070, 0x009c1131,
+	0x00d00090, 0x00e5016a, 0x00b09a11, 0x00b05a14, 0x00d01611, 0x00a7020d,
+	0x00777e00, 0x00a52400, 0x00a60a10, 0x00840700, 0x00765100, 0x00066001,
+	0x00d01410, 0x00765200, 0x00066002, 0x00d01410, 0x00765300, 0x00066003,
+	0x00d01410, 0x0006053c, 0x00066040, 0x00d56040, 0x00a40a12, 0x003505e1,
+	0x00166500, 0x002505e1, 0x00166500, 0x00366001, 0x00306400, 0x00b06a12,
+	0x00983159, 0x00d00090, 0x00a60a08, 0x00266001, 0x00d00090, 0x00b06a08,
+	0x00d01611, 0x00e50270, 0x00155710, 0x00982159, 0x00780327, 0x00d00090,
+	0x00b28b00, 0x00b29b00, 0x00d01611, 0x00ac0a08, 0x00b00a08, 0x002cc001,
+	0x0078c308, 0x00780027, 0x00d00090, 0x00b28b00, 0x00b29b00, 0x00a41e01,
+	0x00ac1e01, 0x00a91e01, 0x00a81e01, 0x00a71e01, 0x00a61e01, 0x00a21e01,
+	0x00a11e01, 0x00840d00, 0x00b01eff, 0x00b02efe, 0x00b03efd, 0x00b04efc,
+	0x00b05efb, 0x00b0befa, 0x003ee006, 0x00a20a11, 0x00752c40, 0x00a32400,
+	0x00b00a14, 0x00a5050d, 0x00755e10, 0x00a10a10, 0x00d00090, 0x00840500,
+	0x00713100, 0x00011001, 0x00d01814, 0x00713200, 0x00011002, 0x00d01814,
+	0x00713300, 0x00011003, 0x00d01814, 0x0001033c, 0x00011040, 0x00d51040,
+	0x00a30a12, 0x003505e1, 0x00111500, 0x002505e1, 0x00111500, 0x00311001,
+	0x00a50a08, 0x00b01a12, 0x00255001, 0x00301300, 0x00983194, 0x00d00090,
+	0x00b05a08, 0x00d0191c, 0x00a10a0c, 0x00a30a11, 0x00b00a08, 0x00715308,
+	0x00710027, 0x00d00090, 0x00b21b00, 0x00b23b00, 0x00a01e01, 0x00a51e01,
+	0x00a41e01, 0x00a31e01, 0x00a21e01, 0x00a11e01, 0x00840d00, 0x00a50a00,
+	0x00455001, 0x00941d00, 0x00d00090, 0x00b09a10, 0x00b01eff, 0x00b06efe,
+	0x00b07efd, 0x00b08efc, 0x00b09efb, 0x00b0cefa, 0x00b04ef9, 0x003ee007,
+	0x00a100e9, 0x00701c65, 0x009c11e6, 0x00781c48, 0x00a60012, 0x0041101f,
+	0x00106100, 0x009c21e6, 0x0005083c, 0x002883fc, 0x00c0100b, 0x009811c1,
+	0x00d00090, 0x00d00090, 0x00b21b00, 0x00b28b00, 0x00d01e16, 0x00a60513,
+	0x00d00090, 0x00d00090, 0x00840600, 0x00779e08, 0x00d01e10, 0x00779e10,
+	0x00d01e10, 0x00e601f0, 0x00d04070, 0x009c11cf, 0x00d00090, 0x00b06a14,
+	0x00d01e1e, 0x0006043c, 0x00779d18, 0x00d00090, 0x00a62600, 0x00776108,
+	0x00d01e10, 0x00e60208, 0x00d04070, 0x009c11db, 0x00d00090, 0x00b06a14,
+	0x00d01e1e, 0x0006043c, 0x00d00090, 0x00d00090, 0x00a72600, 0x00d01e10,
+	0x00077040, 0x00777d37, 0x00717128, 0x00d00090, 0x00b21b00, 0x00b28b00,
+	0x00a41e01, 0x00ac1e01, 0x00a91e01, 0x00a81e01, 0x00a71e01, 0x00a61e01,
+	0x00a11e01, 0x00840d00, 0x00b08a11, 0x00d01e16, 0x00a90a00, 0x00499001,
+	0x00941d00, 0x00d00090, 0x00b06eff, 0x00b08efe, 0x00b04efd, 0x003ee003,
+	0x00a90a10, 0x00a80a11, 0x00a62400, 0x00166008, 0x00769918, 0x00066040,
+	0x00766d37, 0x00799d10, 0x00796128, 0x00b00a14, 0x00b29b00, 0x00b28b00,
+	0x00a41e01, 0x00a81e01, 0x00a61e01, 0x00840d00, 0x00a90a00, 0x00499001,
+	0x00941d00, 0x00d00090, 0x00b06eff, 0x00b08efe, 0x00b04efd, 0x003ee003,
+	0x00a90a10, 0x00a80a11, 0x00a62400, 0x00799d18, 0x00066040, 0x00766d37,
+	0x00796128, 0x00b00a14, 0x00b29b00, 0x00b28b00, 0x00a41e01, 0x00a81e01,
+	0x00a61e01, 0x00840d00, 0x00f40000, 0x00d87040, 0x00982238, 0x00e10500,
+	0x00198004, 0x00299100, 0x00e10001, 0x00aa0900, 0x00ed0228, 0x008c04df,
+	0x00981238, 0x00e4034a, 0x007445f0, 0x00544850, 0x00a1000c, 0x00b04300,
+	0x005f1200, 0x004fa0e0, 0x00ea0001, 0x00ab090f, 0x001aa800, 0x007b01f0,
+	0x00677a00, 0x00b0b90f, 0x00b0b90b, 0x00d0211f, 0x00aa0005, 0x00d00090,
+	0x007a7210, 0x00d00090, 0x00b0a005, 0x00d00116, 0x00ac00f0, 0x00a80005,
+	0x00d1c040, 0x00982336, 0x0011103f, 0x00ed0450, 0x001a1001, 0x002dd100,
+	0x00320a00, 0x0013c200, 0x00193a00, 0x00e20250, 0x00222300, 0x006cc900,
+	0x00eb0500, 0x0005013c, 0x00155004, 0x00255b00, 0x00840200, 0x00d02d19,
+	0x00d02917, 0x00a40501, 0x00724ca0, 0x00981297, 0x00e40460, 0x00244200,
+	0x00c0201f, 0x00981297, 0x00eb0001, 0x00a20400, 0x00702c2e, 0x009c1297,
+	0x001bb100, 0x00a2001c, 0x00522b00, 0x00588b00, 0x00b0201c, 0x00a2050f,
+	0x00aa050c, 0x00ab050b, 0x0070bd00, 0x009c1240, 0x00d22070, 0x00981297,
+	0x00f50000, 0x00991240, 0x00122002, 0x00b0050c, 0x00ab050d, 0x0030b200,
+	0x009c2272, 0x00020b3c, 0x003bb200, 0x00b0250d, 0x00b0deff, 0x00b01efe,
+	0x00b05efd, 0x00b0befc, 0x00b0aefb, 0x00b08efa, 0x003ee006, 0x00ed027d,
+	0x008c08e5, 0x00a81e01, 0x00aa1e01, 0x00ab1e01, 0x00a51e01, 0x00a11e01,
+	0x00ad1e01, 0x00a2050d, 0x00b0a50c, 0x0098128a, 0x002bb200, 0x00d00090,
+	0x00b0b50d, 0x00d02410, 0x00b0deff, 0x00b05efe, 0x00b01efd, 0x003ee003,
+	0x00b0b50d, 0x00ed0292, 0x00000b3c, 0x00981922, 0x00d00090, 0x00d00090,
+	0x00a11e01, 0x00a51e01, 0x00ad1e01, 0x00a2050b, 0x00702d00, 0x009c1240,
+	0x00e20001, 0x00122100, 0x00ab001b, 0x004bb200, 0x009c1240, 0x00588200,
+	0x00a40501, 0x00eb0001, 0x007a4ca0, 0x001bba00, 0x004bb0fe, 0x009812b2,
+	0x009c22ad, 0x007a4d00, 0x00c0a03f, 0x009c12b2, 0x007a4ca8, 0x00eb0001,
+	0x001bba00, 0x00a3000b, 0x006bb0ff, 0x00433b00, 0x00d00090, 0x00b0300b,
+	0x00ab050b, 0x0070bd00, 0x009c1240, 0x00722210, 0x006220ff, 0x00ab0001,
+	0x00a40002, 0x004bb200, 0x00444200, 0x00b0b001, 0x00ab0006, 0x00b04002,
+	0x00a40004, 0x004bb200, 0x00444200, 0x00488200, 0x00b0b006, 0x00b04004,
+	0x00ab001c, 0x004bb200, 0x00a4001a, 0x00b0b01c, 0x00444200, 0x00eb0003,
+	0x00b0401a, 0x00a40d00, 0x0074b0a0, 0x00a300f4, 0x001b1001, 0x00e20001,
+	0x00122b00, 0x00402300, 0x009812d5, 0x00122001, 0x00740062, 0x00b020f5,
+	0x00b04d00, 0x00b090f2, 0x00d02410, 0x00e40001, 0x00144100, 0x006440ff,
+	0x00488400, 0x00a60d00, 0x0042601f, 0x004660e0, 0x00566002, 0x00c02000,
+	0x00b06d00, 0x009812ea, 0x00e20001, 0x00122110, 0x00588200, 0x00b06500,
+	0x00b090f2, 0x00d02410, 0x00a00502, 0x009c12f5, 0x0002053c, 0x00b0ceff,
+	0x00b08efe, 0x003ee002, 0x00ed02f2, 0x008c04f8, 0x00a81e01, 0x00ac1e01,
+	0x00d02410, 0x00a40501, 0x00b06d00, 0x0042401f, 0x00981313, 0x0042403f,
+	0x00c0201f, 0x0098131a, 0x00c0203f, 0x00981321, 0x00e60460, 0x0042401f,
+	0x00e40001, 0x00144200, 0x00a3000b, 0x00533400, 0x00266200, 0x00b0300b,
+	0x00a20600, 0x00721088, 0x00742c2e, 0x00b02600, 0x00144004, 0x00244100,
+	0x00e60001, 0x00166400, 0x00a20006, 0x00522600, 0x00b090f2, 0x00b02006,
+	0x00d02410, 0x00a20001, 0x00eb0001, 0x001bb100, 0x00522b00, 0x00b090f2,
+	0x00b02001, 0x00d02410, 0x00a20002, 0x00eb0001, 0x001bb100, 0x00522b00,
+	0x00b090f2, 0x00b02002, 0x00d02410, 0x00724ca8, 0x00eb0001, 0x001bb200,
+	0x00a3000b, 0x00533b00, 0x00a20004, 0x00b0300b, 0x00eb0001, 0x001bb100,
+	0x00a2001a, 0x00704c2d, 0x00981331, 0x00522b00, 0x00b090f2, 0x00b0201a,
+	0x00d02410, 0x00a20004, 0x00522b00, 0x00b090f2, 0x00b02004, 0x00d02410,
+	0x00b08005, 0x00d00112, 0x00d80050, 0x00788c4c, 0x00981010, 0x00da8040,
+	0x00e600a0, 0x0076a023, 0x00a70aec, 0x00767060, 0x00d00090, 0x00a10600,
+	0x00b0600a, 0x00731c80, 0x00741df0, 0x00751c64, 0x00e20500, 0x00793484,
+	0x00299200, 0x00840400, 0x00f50000, 0x0007093c, 0x00d00090, 0x00d00008,
+	0x00b1f701, 0x00a00902, 0x00981493, 0x00d00090, 0x00a70903, 0x00a20904,
+	0x00a60901, 0x007b7c5e, 0x007b283f, 0x006bb003, 0x0076b05a, 0x00ebffff,
+	0x00ed0366, 0x0041603f, 0x00c0101f, 0x009c19fe, 0x007a6c88, 0x001aa005,
+	0x00e20480, 0x002aa200, 0x00ed0386, 0x00ab0a04, 0x00a20a00, 0x008c09fe,
+	0x0040601f, 0x00b06901, 0x0098136c, 0x00c0103f, 0x009813ad, 0x00d0471d,
+	0x00e70001, 0x00d00008, 0x00400f00, 0x00a20001, 0x00177300, 0x00522700,
+	0x00a10903, 0x00b02001, 0x00a20905, 0x00a70902, 0x00307200, 0x008c2379,
+	0x0002073c, 0x00a10903, 0x00b0290c, 0x00b0290d, 0x00a20904, 0x00b01909,
+	0x00b0290a, 0x0004093c, 0x00b0deff, 0x003ee001, 0x00ed0384, 0x008c002b,
+	0x00ad1e01, 0x00d04919, 0x00d00008, 0x00400f00, 0x00a70002, 0x00eb0001,
+	0x0012b300, 0x00577200, 0x00b0a90e, 0x00b07002, 0x00b0090b, 0x00b06901,
+	0x00a00a0d, 0x008c1499, 0x00a60a0e, 0x00760210, 0x00a20a0f, 0x00ab0a07,
+	0x00722a10, 0x007bbc5b, 0x00b02a0f, 0x00a20b17, 0x00b00a14, 0x00b00a09,
+	0x00b00a0a, 0x00b00a0b, 0x00b00a0c, 0x00b06a0e, 0x00840200, 0x00e6010f,
+	0x00b00a08, 0x00d03a17, 0x00e601a3, 0x00d03a17, 0x00e600d4, 0x00a2090f,
+	0x00b06a0d, 0x00720210, 0x00b00a13, 0x00b0290f, 0x00d04919, 0x00706c2d,
+	0x009c1450, 0x00d00090, 0x00ac090f, 0x00ed0450, 0x007c0210, 0x002dd300,
+	0x00eb04e0, 0x00b0c90f, 0x00a00b09, 0x009813d1, 0x00d00090, 0x00a10903,
+	0x00711c62, 0x00a2090e, 0x00522001, 0x00762c23, 0x00211600, 0x00b0290e,
+	0x0011100a, 0x00d00008, 0x00500f00, 0x00b0190b, 0x00a10902, 0x00a20901,
+	0x00702c3d, 0x009813cb, 0x00d00090, 0x00b0190c, 0x00d03e1a, 0x00e10001,
+	0x0072103c, 0x00b0090c, 0x00b02901, 0x00e10000, 0x00d03e1a, 0x0028b004,
+	0x00a10903, 0x00d00004, 0x00b1f801, 0x00d00004, 0x00500f00, 0x00a20904,
+	0x0004093c, 0x00ed03db, 0x008c002b, 0x00a10902, 0x00a20901, 0x00b0190c,
+	0x00702c3d, 0x009c13ea, 0x00d00090, 0x00a10d00, 0x004110e0, 0x0002093c,
+	0x00b01d00, 0x00b00900, 0x0001033c, 0x00ed03e9, 0x008c04f8, 0x00d04919,
+	0x00211003, 0x0011103e, 0x00111003, 0x00d00090, 0x00b0190d, 0x00b01902,
+	0x00a00b09, 0x009c1438, 0x00d00090, 0x00a10907, 0x00311002, 0x00a20b07,
+	0x00b01b09, 0x00782c44, 0x0042200f, 0x00188002, 0x00b02b07, 0x00b08909,
+	0x00a20b05, 0x00762c44, 0x0042200f, 0x00166002, 0x00b02b05, 0x00b06908,
+	0x00a50b08, 0x009c140e, 0x00d00090, 0x00e500c0, 0x00a20b05, 0x00a10b07,
+	0x00b02b01, 0x00b01b03, 0x00a20b06, 0x00a10b04, 0x00b02b02, 0x00b01b00,
+	0x00355002, 0x00d00090, 0x00b05b08, 0x00a70905, 0x00a50b00, 0x0001073c,
+	0x00716200, 0x00715021, 0x0015503f, 0x00b21c00, 0x00a40b02, 0x00117010,
+	0x00718200, 0x00714021, 0x0014403f, 0x00b21c00, 0x00a70906, 0x0001073c,
+	0x00716200, 0x00715021, 0x0015503f, 0x00b21c00, 0x00117010, 0x00718200,
+	0x00714021, 0x0014403f, 0x00b21c00, 0x00a10b01, 0x0075121e, 0x0011103e,
+	0x00b05b00, 0x00b01b01, 0x00a20b03, 0x0074221e, 0x0012203e, 0x00a1090d,
+	0x00211010, 0x00b04b02, 0x00b02b03, 0x00b0190d, 0x00b01902, 0x00b0c90f,
+	0x00a10901, 0x00721ca8, 0x00e80001, 0x00a00900, 0x009c143e, 0x0071803c,
+	0x00168200, 0x00a5000b, 0x00555600, 0x00148300, 0x00b0500b, 0x00b01901,
+	0x00b04004, 0x00e10460, 0x00211200, 0x00a60d00, 0x00ab0100, 0x007b3088,
+	0x004660e0, 0x00566002, 0x00b0b100, 0x00b06d00, 0x00010a3c, 0x00d04919,
+	0x00ac090f, 0x007c0210, 0x00b0090b, 0x00eb04e0, 0x0028b004, 0x00b0c90f,
+	0x00d00004, 0x00b1f801, 0x00d00004, 0x00500f00, 0x00a10902, 0x00a20b07,
+	0x00b0190c, 0x00b0190d, 0x00782c49, 0x00722d20, 0x00188002, 0x00b02b07,
+	0x00b08909, 0x00a20b05, 0x00762c49, 0x00722d20, 0x00166002, 0x00b02b05,
+	0x00b06908, 0x00a10901, 0x00721ca8, 0x00e80001, 0x00168200, 0x00a5000b,
+	0x00555600, 0x00148300, 0x00b0500b, 0x00b0401a, 0x00e10460, 0x00211200,
+	0x00a60350, 0x00ab0100, 0x007b3088, 0x004660e0, 0x00566002, 0x00b0b100,
+	0x00b06350, 0x00010a3c, 0x00d04919, 0x00d00008, 0x00400f00, 0x00e80460,
+	0x004a601f, 0x00218a00, 0x00a2000b, 0x00a70100, 0x00e50001, 0x00773088,
+	0x00155a00, 0x00b07100, 0x00777c2e, 0x00aa0006, 0x00177004, 0x00233700,
+	0x00e70001, 0x00177300, 0x00522500, 0x005aa700, 0x00b0200b, 0x00b0a006,
+	0x00d03714, 0x0001033c, 0x0002093c, 0x00d00008, 0x00500f00, 0x00ed0499,
+	0x008c04f8, 0x00a2000a, 0x00712c23, 0x00722c60, 0x00ed049e, 0x008c04ef,
+	0x00d03318, 0x00a5001d, 0x00a3001e, 0x00355001, 0x00d00090, 0x00b0501d,
+	0x009c302a, 0x00142030, 0x008c14a8, 0x00722210, 0x00b0301d, 0x00d12040,
+	0x00e30001, 0x00133100, 0x00622300, 0x00311010, 0x00b02001, 0x00b01eff,
+	0x003ee001, 0x00ed04b3, 0x008c087b, 0x00a11e01, 0x00ed04b6, 0x008c08e5,
+	0x00d0021a, 0x00a20006, 0x00722e10, 0x009c14bb, 0x00d04c1b, 0x00d12040,
+	0x00e30001, 0x00133100, 0x00622300, 0x00b01eff, 0x00b02efe, 0x00b0defd,
+	0x003ee003, 0x00ed04c5, 0x008c087b, 0x00ad1e01, 0x00a21e01, 0x00a11e01,
+	0x00500200, 0x009c14bb, 0x00d00090, 0x00a20006, 0x00722e00, 0x009c14cf,
+	0x00d0011b, 0x00d12040, 0x00e30001, 0x00133100, 0x00622300, 0x00b01eff,
+	0x00b02efe, 0x00b0defd, 0x003ee003, 0x00ed04d9, 0x008c08e5, 0x00ad1e01,
+	0x00a21e01, 0x00a11e01, 0x00500200, 0x009c14cf, 0x00d0011b, 0x00e300a0,
+	0x00731023, 0x00e40001, 0x00a10300, 0x00d21040, 0x009c34e7, 0x00422000,
+	0x00840d00, 0x00144200, 0x00611400, 0x00742c22, 0x00b01300, 0x00533200,
+	0x0072244c, 0x0072403e, 0x00840d00, 0x00e300a0, 0x00731023, 0x00e40001,
+	0x00144200, 0x00a10300, 0x00511400, 0x00d00090, 0x00b01300, 0x00840d00,
+	0x00a30201, 0x0007033c, 0x0077005e, 0x00eb0450, 0x00ea0460, 0x002bb100,
+	0x00b07201, 0x00773d00, 0x00c0703f, 0x009c1504, 0x00773ca8, 0x00d05018,
+	0x0047301f, 0x00c0701f, 0x009c1508, 0x00e70000, 0x00a9000b, 0x00e80001,
+	0x00188700, 0x0078003f, 0x00780020, 0x006880ff, 0x00499800, 0x00a40b00,
+	0x00b0900b, 0x00a60005, 0x00e70001, 0x00177100, 0x00777210, 0x006770ff,
+	0x00a80001, 0x00a90002, 0x00aa0006, 0x00488700, 0x00499700, 0x004aa700,
+	0x00b08001, 0x00a80004, 0x00b09002, 0x00488700, 0x00a9001a, 0x00499700,
+	0x00b0a006, 0x00b0901a, 0x00aa001c, 0x004aa700, 0x00b08004, 0x00b0a01c,
+	0x00a00200, 0x00d50050, 0x00455001, 0x00773c3f, 0x00555700, 0x00981536,
+	0x00d00090, 0x00a700f4, 0x00181001, 0x00155800, 0x00407500, 0x00981536,
+	0x00155001, 0x00740062, 0x00a70200, 0x0098153f, 0x00773c3e, 0x0098153f,
+	0x00177100, 0x00566700, 0x00e70003, 0x00747040, 0x00d05417, 0x00a70200,
+	0x009c1543, 0x00740040, 0x00d05417, 0x00547002, 0x00e70001, 0x00177110,
+	0x00566700, 0x00b04b00, 0x00b06005, 0x00b050f5, 0x00840d00, 0x00ec0001,
+	0x00da3040, 0x008c254f, 0x00d0001f, 0x0016ca00, 0x00eb0460, 0x00633600,
+	0x002bba00, 0x00e40500, 0x00ab0b00, 0x0079bc88, 0x00169004, 0x00244600,
+	0x0076bc2e, 0x009c15b5, 0x00d00090, 0x0017c900, 0x00a1001c, 0x00411700,
+	0x009c154c, 0x00d00090, 0x00a7040b, 0x00a1040e, 0x00401001, 0x009c1566,
+	0x00500700, 0x009c154c, 0x004110fe, 0x0076bc84, 0x00a8040c, 0x00b0140e,
+	0x0098154c, 0x0075bcb8, 0x00255001, 0x00a1040f, 0x0016563e, 0x009c1571,
+	0x00e60001, 0x00751cc9, 0x00155002, 0x00d11070, 0x00211001, 0x00355100,
+	0x00305600, 0x0098254c, 0x0006043c, 0x00b01eff, 0x00b02efe, 0x00b03efd,
+	0x00b04efc, 0x003ee004, 0x0071bc56, 0x00981583, 0x00f40000, 0x00992588,
+	0x00d05815, 0x00f00000, 0x00991588, 0x00ed0587, 0x008c04df, 0x009c158f,
+	0x00d00090, 0x00d00090, 0x00a41e01, 0x00a31e01, 0x00a21e01, 0x00a11e01,
+	0x00d0541c, 0x0075bc84, 0x00e409a1, 0x007445f0, 0x00544900, 0x00745064,
+	0x00725084, 0x00b04300, 0x0071bcb8, 0x0098159a, 0x007210b8, 0x0072c034,
+	0x00211001, 0x00111500, 0x00a50401, 0x00755c2f, 0x00725037, 0x0075bc3d,
+	0x0072503d, 0x005f2c00, 0x00a20603, 0x005f0200, 0x0075bc3d, 0x009815a7,
+	0x00222100, 0x0075bc60, 0x00a8060c, 0x00388100, 0x009c25ac, 0x0008003c,
+	0x00b05ac0, 0x00b02603, 0x00b0160b, 0x00b0860c, 0x00a41e01, 0x00a31e01,
+	0x00a21e01, 0x00a11e01, 0x00d0541c, 0x00a8040d, 0x00983625, 0x0075bcb8,
+	0x00a70402, 0x00983625, 0x0077bc84, 0x00255001, 0x00a8040f, 0x0016573e,
+	0x009c15c0, 0x00e60001, 0x00d58670, 0x0098254c, 0x00306010, 0x009835c6,
+	0x009c854c, 0x009c854c, 0x003707fe, 0x009835ca, 0x00e60001, 0x00166700,
+	0x0007043c, 0x00b03eff, 0x003ee001, 0x0071bc56, 0x009c15d2, 0x00f00000,
+	0x009915d7, 0x00d05d14, 0x00f50000, 0x009925d7, 0x00ed05d6, 0x008c04df,
+	0x009c15db, 0x00d00090, 0x00d00090, 0x00a31e01, 0x00d0541c, 0x0075bc84,
+	0x00e40854, 0x007445f0, 0x00544900, 0x00745064, 0x00746127, 0x0015c900,
+	0x00b04300, 0x00a9001b, 0x00599500, 0x0004073c, 0x00b0901b, 0x0070bc65,
+	0x00981626, 0x00e54002, 0x0071bcb8, 0x009815ee, 0x007510b8, 0x0075c034,
+	0x0071bc84, 0x007510a4, 0x0071bc3d, 0x0075103d, 0x00a10401, 0x00711c2f,
+	0x00751037, 0x005f2500, 0x00a20404, 0x00156002, 0x005f0200, 0x00af2800,
+	0x00366001, 0x009c15f9, 0x0076bc60, 0x0070bc3d, 0x00881600, 0x00222500,
+	0x00a70402, 0x00a9040d, 0x00b06ac0, 0x00377500, 0x00399500, 0x009c361b,
+	0x00d00090, 0x00a90405, 0x00309700, 0x0098260b, 0x0009073c, 0x00a50401,
+	0x00b0940c, 0x00705c26, 0x0098161b, 0x00d00090, 0x00a50406, 0x00a10409,
+	0x00211500, 0x0078022f, 0x00b01409, 0x00b01403, 0x00b0deff, 0x003ee001,
+	0x00ed061a, 0x008c002b, 0x00ad1e01, 0x00a1000b, 0x0016ca00, 0x00611600,
+	0x00b02404, 0x00b0100b, 0x00b0940d, 0x00b0840f, 0x00b07402, 0x00a31e01,
+	0x00d0541c, 0x00d0541c, 0x0071bc84, 0x00c01000, 0x009c163a, 0x00e14102,
+	0x00e50310, 0x00715210, 0x00a50401, 0x00755c2f, 0x00715037, 0x005f2100,
+	0x00a20404, 0x00efeeee, 0x005f0200, 0x00a12800, 0x001f1000, 0x001f1038,
+	0x001f1030, 0x001f1028, 0x00e50004, 0x00d05f1c, 0x00e14112, 0x00e50110,
+	0x00715210, 0x00a50401, 0x00755c2f, 0x00715037, 0x005f2100, 0x00a20404,
+	0x00efffcc, 0x005f0200, 0x00a12800, 0x001f1000, 0x001f1030, 0x00e50004,
+	0x00d05f1c, 0x00a30020, 0x00a9001f, 0x00333001, 0x00d00090, 0x00b03020,
+	0x009c301e, 0x00d87040, 0x00b09020, 0x00982674, 0x00e20001, 0x00122800,
+	0x0009083c, 0x00199004, 0x00e20500, 0x00299200, 0x00677200, 0x00a0090b,
+	0x009c1674, 0x00f40000, 0x00aa0903, 0x00ab0902, 0x00991674, 0x0098364f,
+	0x00e100af, 0x00e20675, 0x00a00100, 0x009c101e, 0x00548050, 0x00742210,
+	0x00a20011, 0x00b04100, 0x00a30901, 0x00733c2f, 0x00723037, 0x005f0200,
+	0x005f0a00, 0x00e20080, 0x002aa200, 0x0013203e, 0x003bb200, 0x00b0a903,
+	0x00b0390b, 0x00b0b902, 0x00d0011e, 0x00ad090e, 0x00ab090b, 0x00ac090f,
+	0x00ff1000, 0x00a40d0a, 0x00a80d09, 0x00b040e9, 0x007f8c61, 0x00ff3000,
+	0x004f8080, 0x00b0e009, 0x00ae0d0f, 0x00a20d0b, 0x0098168f, 0x00d00090,
+	0x00d00090, 0x00ad1e01, 0x00aa1e01, 0x00a81e01, 0x00a71e01, 0x00a61e01,
+	0x00a51e01, 0x00a41e01, 0x00a31e01, 0x00a11e01, 0x00840200, 0x00e20694,
+	0x00a400ed, 0x00c04007, 0x009c1763, 0x00d00090, 0x00d00090, 0x00080f3c,
+	0x003bb001, 0x00b080eb, 0x00d00090, 0x009a86a6, 0x00d00090, 0x00a00d13,
+	0x009c26a2, 0x00d00090, 0x00d00090, 0x00b2ac00, 0x000a083c, 0x00d06910,
+	0x00e4ffff, 0x000a083c, 0x00b04d13, 0x00d06910, 0x00a50d06, 0x00105001,
+	0x009c269b, 0x00d00090, 0x00a100e9, 0x00745d08, 0x00b01d0a, 0x00761d00,
+	0x00374600, 0x00745d00, 0x00366400, 0x00577600, 0x00677500, 0x009826b5,
+	0x00d0691b, 0x00a70d09, 0x00711c48, 0x00777c41, 0x003771fb, 0x00ff1000,
+	0x00a40d09, 0x00747041, 0x004f7003, 0x00b04d09, 0x00307004, 0x009c26c8,
+	0x00d00090, 0x00a400ed, 0x00e206c6, 0x00c04007, 0x009c1763, 0x00d00090,
+	0x003bb001, 0x00000f3c, 0x00307007, 0x009836d2, 0x00ff2000, 0x00d00090,
+	0x00d00090, 0x00d00090, 0x00080f3c, 0x00ff3000, 0x000f083c, 0x00d06d19,
+	0x00a400ed, 0x00e206d6, 0x00c04007, 0x009c1763, 0x00d00090, 0x003bb001,
+	0x00080f3c, 0x00b0c90f, 0x00738d10, 0x00333001, 0x00705c3d, 0x00981701,
+	0x00303004, 0x00982701, 0x00708610, 0x009c2701, 0x00d00090, 0x00a400ed,
+	0x00e206e7, 0x00c04007, 0x009c1763, 0x003bb001, 0x00333004, 0x00040f3c,
+	0x00044040, 0x00744201, 0x00748859, 0x001440be, 0x00788c5a, 0x00588001,
+	0x001880bf, 0x00a5090f, 0x00a20d0e, 0x00d55070, 0x00155002, 0x00255101,
+	0x00a00d13, 0x009826f9, 0x00355004, 0x00d00090, 0x00d00090, 0x00b28200,
+	0x00a80d04, 0x00255800, 0x00b24200, 0x00b25200, 0x00b02d0e, 0x00c01003,
+	0x009c170d, 0x00d00090, 0x00a40d13, 0x00982707, 0x00d0701a, 0x00444001,
+	0x00b2ac00, 0x00b04d13, 0x00e5fffc, 0x00e1ffff, 0x00d0701f, 0x002510fd,
+	0x00d00090, 0x00303504, 0x0098271a, 0x00d00090, 0x00a400ed, 0x00e20716,
+	0x00c04007, 0x009c1763, 0x003bb001, 0x00333004, 0x00080f3c, 0x00d0701f,
+	0x00477003, 0x00357300, 0x00255101, 0x00ff1000, 0x00a40d09, 0x00745041,
+	0x004f5003, 0x00b04d09, 0x00301303, 0x00981750, 0x00c05004, 0x009c1745,
+	0x00ff2000, 0x00d00090, 0x00d00090, 0x00d00090, 0x00080f3c, 0x00ff3000,
+	0x000f083c, 0x00d07510, 0x00ff2000, 0x00d00090, 0x00d00090, 0x00d00090,
+	0x00040f3c, 0x00ff3000, 0x000f043c, 0x00155003, 0x00144500, 0x0015503d,
+	0x00330300, 0x009c273b, 0x00e30000, 0x00357500, 0x00355004, 0x00155003,
+	0x00144500, 0x00350500, 0x00144500, 0x00355020, 0x00188500, 0x00588400,
+	0x00d07510, 0x00455003, 0x00305700, 0x0098272e, 0x00e2074d, 0x00a400ed,
+	0x00c04007, 0x009c1763, 0x00d00090, 0x003bb001, 0x00080f3c, 0x00d00090,
+	0x00500100, 0x009c2753, 0x00ea0000, 0x00211001, 0x00111003, 0x00310100,
+	0x00188100, 0x00211020, 0x001aa100, 0x00310100, 0x001aa100, 0x00211020,
+	0x00188100, 0x00e40001, 0x00588a00, 0x00b04d13, 0x00b080eb, 0x00e20690,
+	0x00d06919, 0x00b0c90f, 0x00b02d0b, 0x00b0b90b, 0x00ff2000, 0x00b01eff,
+	0x00b03efe, 0x00b04efd, 0x00b05efc, 0x00b06efb, 0x00b07efa, 0x00b08ef9,
+	0x00b0aef8, 0x00b0def7, 0x003ee009, 0x00a100e9, 0x00a40d09, 0x00b01d0a,
+	0x00b0ed0f, 0x00050f3c, 0x00754100, 0x00ae0009, 0x00b05d09, 0x00a0090b,
+	0x009c1338, 0x00e400af, 0x00e80001, 0x00b00400, 0x00a10002, 0x0071803f,
+	0x00b00002, 0x00b01003, 0x00d03318, 0x00a7090e, 0x00ff1000, 0x007f7c61,
+	0x00ff3000, 0x005f0700, 0x00500a00, 0x009c178b, 0x00fa0000, 0x00ec04e0,
+	0x00ed0008, 0x00a4090b, 0x00a6090f, 0x00754cca, 0x00881795, 0x003dd500,
+	0x00500f00, 0x00355001, 0x009c3792, 0x00407001, 0x009c179a, 0x00d00090,
+	0x00757c41, 0x00244500, 0x00724cc2, 0x003dd200, 0x00122002, 0x00a0090c,
+	0x008c17a0, 0x00724d00, 0x0005023c, 0x00222003, 0x0012203e, 0x00a10c09,
+	0x00ab0c00, 0x00311200, 0x00a20c01, 0x00b01c09, 0x00a40c02, 0x00a10c03,
+	0x00aa0909, 0x00a80908, 0x002505fc, 0x009c27bb, 0x00255004, 0x009837d7,
+	0x002505fc, 0x00777c41, 0x00377504, 0x009c27e2, 0x00370500, 0x003dd001,
+	0x00177003, 0x0013f700, 0x00155003, 0x00133500, 0x00d07b1c, 0x00530f00,
+	0x00b05eff, 0x003ee001, 0x00a50c08, 0x009c17c5, 0x00e500c0, 0x00ab0c04,
+	0x00a20c05, 0x00a40c06, 0x00a10c07, 0x00355001, 0x00d00090, 0x00b05c08,
+	0x00a51e01, 0x00783210, 0x0078b021, 0x001bb03f, 0x007b203f, 0x0012203f,
+	0x00133030, 0x007a3210, 0x007a4021, 0x0014403f, 0x0074103f, 0x0011103f,
+	0x00b28600, 0x00b2a600, 0x00d07a1c, 0x00b0bc00, 0x00b02c01, 0x00b04c02,
+	0x00b01c03, 0x00e7ffff, 0x003dd001, 0x009827e2, 0x00d00090, 0x00d00090,
+	0x00500f00, 0x00d07d1c, 0x00fa2000, 0x0000073c, 0x009c27b6, 0x00d00090,
+	0x00a7090e, 0x0047700e, 0x00b0090b, 0x0042f080, 0x00577200, 0x00b0690f,
+	0x00b0790e, 0x00d04919, 0x00d77040, 0x00e90500, 0x007c7484, 0x002cc900,
+	0x00e90016, 0x00a50c0b, 0x00705d00, 0x009c1853, 0x00d00090, 0x00ab0c0c,
+	0x008c3830, 0x00a20c01, 0x00702c3c, 0x00981853, 0x00eb04e0, 0x00a90c0f,
+	0x00a30c0d, 0x00a80b09, 0x0098182f, 0x00e20016, 0x00a40b00, 0x00a50b01,
+	0x00a60b02, 0x00a70b03, 0x00d09270, 0x009c282f, 0x00e20008, 0x00308008,
+	0x009c280c, 0x0002083c, 0x00aa0b08, 0x009c1813, 0x00ea00c0, 0x00a50b05,
+	0x00a40b04, 0x00a60b06, 0x00a70b07, 0x003aa001, 0x00d00090, 0x00b0ab08,
+	0x00aa0c08, 0x007a4021, 0x0014403f, 0x0074503f, 0x0015503f, 0x00b2a900,
+	0x00aa0c09, 0x007a6021, 0x0016603f, 0x0076703f, 0x0017703f, 0x00b2a900,
+	0x00233008, 0x00388001, 0x00322001, 0x009c380c, 0x00d00090, 0x00b04b00,
+	0x00b05b01, 0x00b06b02, 0x00b07b03, 0x00b03c02, 0x00b03c0d, 0x00b08b09,
+	0x00b09c0f, 0x00d08513, 0x00aa0c0f, 0x00a80c01, 0x00718c3b, 0x00981837,
+	0x00f40000, 0x00992853, 0x00d08319, 0x00f00000, 0x00991853, 0x00d0a970,
+	0x009c2853, 0x00d00090, 0x00ed083e, 0x008c04df, 0x00981853, 0x00e40783,
+	0x007445f0, 0x00544750, 0x00a90c03, 0x00b04300, 0x00788c2f, 0x00728037,
+	0x0046901f, 0x005f2051, 0x004f90e0, 0x003606e0, 0x00306b00, 0x0098384d,
+	0x00060b3c, 0x00756100, 0x003bb600, 0x00299600, 0x00b0bc0c, 0x00b09c03,
+	0x00b05c0b, 0x00d00211, 0x00f50000, 0x00500a00, 0x009c1858, 0x00f00000,
+	0x00761d27, 0x00a40901, 0x00000f3c, 0x00366001, 0x009c185a, 0x00724ca0,
+	0x0030201f, 0x009c1861, 0x00724ca8, 0x00e60001, 0x00a8000b, 0x001b6200,
+	0x00568b00, 0x00e80001, 0x00b0600b, 0x00ab001b, 0x00188300, 0x006bb800,
+	0x00a70902, 0x00b0b01b, 0x009c3879, 0x0001033c, 0x00b00902, 0x00b01eff,
+	0x00b02efe, 0x00b0aefd, 0x003ee003, 0x0002093c, 0x00ed0876, 0x008c04f8,
+	0x00aa1e01, 0x00a21e01, 0x00a11e01, 0x00010a3c, 0x00d04919, 0x00b0deff,
+	0x003ee001, 0x00771484, 0x00e50500, 0x00277500, 0x0005013c, 0x00ab0701,
+	0x0071bc3b, 0x00981887, 0x00f40000, 0x009928ba, 0x00d0881a, 0x00f00000,
+	0x009918ba, 0x00d00090, 0x00a90703, 0x00a3070b, 0x00a8070f, 0x00a4070e,
+	0x00404001, 0x009c1893, 0x00500300, 0x009c18ba, 0x00d00090, 0x00aa070c,
+	0x009818ba, 0x00738d07, 0x004330fc, 0x00303022, 0x009828c3, 0x0040a080,
+	0x009818c3, 0x00d00090, 0x0040907f, 0x009c18c3, 0x00d48070, 0x00d00090,
+	0x00303421, 0x009838be, 0x00ed08a4, 0x008c04df, 0x009818ba, 0x00e409a1,
+	0x007445f0, 0x00544550, 0x00a10008, 0x0076bc2f, 0x00716037, 0x00b04300,
+	0x005f1200, 0x005f0900, 0x00a4070e, 0x00740020, 0x00a30701, 0x00b0470e,
+	0x00733c26, 0x00133007, 0x00299300, 0x00e30080, 0x003aa300, 0x00b09703,
+	0x00b0a70c, 0x00b0370b, 0x00ad1e01, 0x00d00090, 0x00d00090, 0x00840d00,
+	0x0076bca0, 0x00e40001, 0x0074403f, 0x00144600, 0x009828ba, 0x00d48070,
+	0x003043f6, 0x009c28ba, 0x00ed08c8, 0x008c04df, 0x009818ba, 0x00e4096b,
+	0x007445f0, 0x00544550, 0x0076bc2f, 0x00726037, 0x005f2051, 0x004f90e0,
+	0x00b04300, 0x0043901f, 0x00a4070e, 0x00740020, 0x00d00090, 0x00b0470e,
+	0x00a40701, 0x00744c26, 0x009818da, 0x003993e0, 0x003403e0, 0x003aa400,
+	0x009c28de, 0x000a003c, 0x00a3070b, 0x00743cca, 0x00d00090, 0x003304f8,
+	0x00133002, 0x007340ca, 0x00d08b17, 0x00741484, 0x00e70500, 0x00244700,
+	0x00e20020, 0x00a0040b, 0x009c193e, 0x00d00090, 0x00ac0401, 0x0070cc3a,
+	0x009c18f2, 0x00f00000, 0x0099193e, 0x00d08f14, 0x00f50000, 0x0099293e,
+	0x00d00090, 0x00a6040f, 0x00a7040d, 0x00a50404, 0x0043501f, 0x009c193f,
+	0x00207080, 0x0098293f, 0x00d76270, 0x0098293f, 0x009c893e, 0x009c893e,
+	0x00e20080, 0x00d00090, 0x00a70007, 0x007ccc2f, 0x0077c037, 0x005f0700,
+	0x005f0500, 0x00d02000, 0x00af2600, 0x00a70402, 0x00b0640f, 0x00255200,
+	0x00377200, 0x00b05404, 0x00b07402, 0x009c3919, 0x00d00090, 0x00b00402,
+	0x0002043c, 0x00b0deff, 0x003ee001, 0x00ed0917, 0x008c04f8, 0x00ad1e01,
+	0x00d0931e, 0x00a3040d, 0x00333200, 0x009c393d, 0x00e50001, 0x00155100,
+	0x00a2001c, 0x00422500, 0x009c193d, 0x00d00090, 0x00a20405, 0x00760210,
+	0x00302700, 0x00882927, 0x0002073c, 0x00b0640f, 0x00b0240c, 0x00b0240d,
+	0x00b07402, 0x00a2040a, 0x00a70409, 0x00a30407, 0x00a50406, 0x00222300,
+	0x00277500, 0x00b0240a, 0x00b07409, 0x00b02404, 0x00b07403, 0x0003013c,
+	0x0001073c, 0x00b0deff, 0x003ee001, 0x00ed093b, 0x008c002b, 0x00ad1e01,
+	0x00d0931e, 0x00b0340d, 0x00840d00, 0x00a2040d, 0x00a0040b, 0x009c193e,
+	0x00222300, 0x00d86070, 0x0098193e, 0x00188002, 0x00288300, 0x004880fc,
+	0x00308020, 0x0098394b, 0x00e80020, 0x00308200, 0x00982950, 0x00392001,
+	0x0008023c, 0x00d09511, 0x00398001, 0x00e74252, 0x007ccc2f, 0x0077c037,
+	0x005f0700, 0x000f9337, 0x004f50e0, 0x004a30fc, 0x003b8a00, 0x00500a00,
+	0x00981960, 0x005f0000, 0x003aa004, 0x009c395b, 0x00d00090, 0x00d00090,
+	0x00af2600, 0x003bb004, 0x009c3960, 0x003a08e0, 0x004aa0fc, 0x00981969,
+	0x005f0000, 0x003aa004, 0x009c3966, 0x00328300, 0x00d09019, 0x00a2090e,
+	0x00ff1000, 0x007f2c61, 0x00ff3000, 0x005f0200, 0x00500a00, 0x009c1973,
+	0x00fa0000, 0x00ab090b, 0x004220fe, 0x00a8090f, 0x00b0290e, 0x0075bcca,
+	0x0098197e, 0x00d00090, 0x00d00090, 0x00500f00, 0x00355001, 0x008c397b,
+	0x0075bcc2, 0x00981985, 0x00d00090, 0x00d00090, 0x00b2f800, 0x00355001,
+	0x008c3982, 0x00b0090b, 0x0002073c, 0x00010a3c, 0x00ed098a, 0x008c04ef,
+	0x00a5090e, 0x0098199f, 0x00ff2000, 0x0045500f, 0x00d00090, 0x00d00090,
+	0x004bf080, 0x00555b00, 0x00a4090c, 0x00981997, 0x00d00090, 0x00b0590e,
+	0x00d0991f, 0x00755c41, 0x00d00090, 0x003505fc, 0x00155003, 0x00350500,
+	0x001bb500, 0x00d00090, 0x00b2b800, 0x00b0890f, 0x00d03318, 0x00a2090e,
+	0x00ff1000, 0x007f2c61, 0x00ff3000, 0x005f0200, 0x00500a00, 0x009c19a9,
+	0x00fa0000, 0x004220fe, 0x00a8090f, 0x00b0290e, 0x00eb09b2, 0x007c1c64,
+	0x002ccb00, 0x00ab090b, 0x00a20908, 0x00840c00, 0x00d09d13, 0x00d09c1a,
+	0x00d09c16, 0x00d09c11, 0x00d09b1c, 0x00ec09b8, 0x00d00008, 0x00b2f800,
+	0x003bb020, 0x00d09d1c, 0x00ec09bd, 0x00d00004, 0x00b2f800, 0x003bb010,
+	0x00d09d1c, 0x00ec09c2, 0x00d00002, 0x00b2f800, 0x003bb008, 0x00d09d1c,
+	0x00ec09c7, 0x00b2f800, 0x003bb004, 0x00d09d1c, 0x00ec09cb, 0x00122030,
+	0x0072f210, 0x003bb002, 0x008c19dc, 0x00d00090, 0x00d00090, 0x00b22800,
+	0x00d09d1c, 0x00ec09d4, 0x00122038, 0x0072f118, 0x003bb001, 0x008c19dc,
+	0x00d00090, 0x00d00090, 0x00b22800, 0x00d09d1c, 0x00a50aec, 0x00355700,
+	0x00801c00, 0x00b02908, 0x00b0b90b, 0x00500b00, 0x009c19e7, 0x0002073c,
+	0x00010a3c, 0x00ed09e7, 0x008c04ef, 0x00a5090e, 0x009819fc, 0x00ff2000,
+	0x00d00090, 0x00d00090, 0x0045500f, 0x004bf080, 0x00a4090c, 0x009819f4,
+	0x00555b00, 0x00d00090, 0x00b0590e, 0x00d09f1c, 0x00755c41, 0x00d00090,
+	0x003505fc, 0x00155003, 0x00350500, 0x001bb500, 0x00d00090, 0x00b2b800,
+	0x00b0890f, 0x00d03318, 0x00707cda, 0x00981a05, 0x00702cda, 0x00981a05,
+	0x0070bcda, 0x00981a05, 0x00840d00, 0x0076002f, 0x00840d00, 0x00f50000,
+	0x00500a00, 0x009c1a0b, 0x00f00000, 0x00ec04e0, 0x00a7090b, 0x00a50c0a,
+	0x007d7ca3, 0x00ab0c00, 0x00a20c01, 0x00a40c02, 0x00a10c03, 0x00a70c08,
+	0x009c3a1e, 0x00e700c0, 0x00ab0c04, 0x00a20c05, 0x00a40c06, 0x00a10c07,
+	0x00b0bc00, 0x00b02c01, 0x00b04c02, 0x00b01c03, 0x00377001, 0x00a30908,
+	0x00a60909, 0x00b07c08, 0x0048f500, 0x004af500, 0x00783880, 0x007a6880,
+	0x0078b021, 0x007a4021, 0x001bb03f, 0x0014403f, 0x007b203f, 0x0074103f,
+	0x00a6090f, 0x0011103f, 0x0012203f, 0x00b28600, 0x00b2a600, 0x003dd001,
+	0x00b0690f, 0x008c1a13, 0x00b0bc00, 0x00b02c01, 0x00b04c02, 0x00b01c03,
+	0x00b0090b, 0x00d04919, 0x00d77040, 0x00e10500, 0x007b7484, 0x002bb100,
+	0x00d00090, 0x00a40b0b, 0x009c1a6c, 0x00d00090, 0x00a10b0f, 0x00a80b03,
+	0x00d91070, 0x00a50b01, 0x002009e0, 0x009c2a6c, 0x00d00090, 0x00ea0004,
+	0x00a90b0c, 0x00883a6c, 0x00329020, 0x008c2a4f, 0x007a9c43, 0x00715c3b,
+	0x00981a54, 0x00f40000, 0x00992a6c, 0x00d0a516, 0x00f00000, 0x00991a6c,
+	0x00ed0a58, 0x008c04df, 0x00981a6c, 0x00e40a07, 0x007445f0, 0x00544730,
+	0x00755c2f, 0x00b04300, 0x00e10000, 0x00a30b06, 0x00725037, 0x00211008,
+	0x005f2031, 0x004f80f8, 0x00288300, 0x003aa001, 0x008c3a61, 0x00399100,
+	0x00741500, 0x00b09b0c, 0x00b08b03, 0x00b04b0b, 0x00d00214
+};
+
+
+
+static struct stm_plat_fdma_fw stm_fdma_firmware_7109c3 = {
+	.name = "fdma_7109c3.fw",
+	.fw_regs = {
+		.rev_id    = 0x8000 + (0x000 << 2), /* 0x8000 */
+		.cmd_statn = 0x8000 + (0x450 << 2), /* 0x9140 */
+		.req_ctln  = 0x8000 + (0x460 << 2), /* 0x9180 */
+		.ptrn      = 0x8000 + (0x500 << 2), /* 0x9400 */
+		.cntn      = 0x8000 + (0x502 << 2), /* 0x9408 */
+		.saddrn    = 0x8000 + (0x503 << 2), /* 0x940c */
+		.daddrn    = 0x8000 + (0x504 << 2), /* 0x9410 */
+	},
+	.dmem = stm_fdma_firmware_7109c3_dmem,
+	.dmem_len = sizeof(stm_fdma_firmware_7109c3_dmem),
+	.imem = stm_fdma_firmware_7109c3_imem,
+	.imem_len = sizeof(stm_fdma_firmware_7109c3_imem),
+};
+
+#endif
diff --git a/include/linux/stm/fdma_firmware_7200.h b/include/linux/stm/fdma_firmware_7200.h
new file mode 100644
index 0000000..1988509
--- /dev/null
+++ b/include/linux/stm/fdma_firmware_7200.h
@@ -0,0 +1,771 @@
+#ifndef __STM_FDMA_FIRMWARE_7200_H
+#define __STM_FDMA_FIRMWARE_7200_H
+
+#include <linux/stm/soc.h>
+
+
+
+static unsigned long stm_fdma_firmware_7200_dmem[] = {
+	0x00060104, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x23104052, 0x23100051, 0x00000000, 0x00000000, 0x00000000,
+	0x21900051, 0x0196014e, 0x01990151, 0x019c0154, 0x019f0157, 0x63102051,
+	0x003f001f, 0x000001e9, 0x000001eb, 0x000001ed, 0x000001f9, 0x000003ce,
+	0x000003cc, 0x000003c9, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x000000fe, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x0000003e, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00002416, 0x04a004a0, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00002416, 0x04c004c0,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00002416, 0x04e004e0, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffff00, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0000241f, 0x05200520,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x0000241f, 0x05400540, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x0000241f, 0x05600560, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00002428,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00002431, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x0000143a, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0000143f,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00001444, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00001449, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0000144e,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00001453, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00001458, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0000145d,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00001462, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00001467, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0000146c,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00001471, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00001476, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0000147b
+};
+
+
+
+static unsigned long stm_fdma_firmware_7200_imem[] = {
+	0x00e1ffff, 0x00e200ff, 0x00f51000, 0x00b010f9, 0x00b020fa, 0x00ef0013,
+	0x00e10001, 0x00ee00a0, 0x00b010ea, 0x00f01000, 0x00ef0013, 0x00a300f8,
+	0x00aa000b, 0x00433a00, 0x009c157b, 0x009b335d, 0x009a2263, 0x00d00090,
+	0x00a70005, 0x00177030, 0x009c1242, 0x00d00090, 0x00a70006, 0x00a2001c,
+	0x00672700, 0x009c14ea, 0x00d00090, 0x00a70002, 0x009c1679, 0x00d00090,
+	0x00a70004, 0x009c184a, 0x00d00090, 0x00a7001a, 0x009c1a67, 0x00d00090,
+	0x00a90003, 0x009c103b, 0x00d00090, 0x00a20001, 0x009c14d2, 0x00d00090,
+	0x00d0001b, 0x00452003, 0x00461003, 0x00355600, 0x00755461, 0x00a6040e,
+	0x00555001, 0x00765080, 0x00d00090, 0x00b0640e, 0x00755c23, 0x00761c62,
+	0x00266500, 0x007564ca, 0x00d00090, 0x00b0540b, 0x00840d00, 0x00b0901e,
+	0x00a9001e, 0x00799600, 0x00d59040, 0x00982027, 0x00e60001, 0x00166500,
+	0x006660ff, 0x00499600, 0x00795110, 0x00155004, 0x00e20560, 0x00222500,
+	0x00b0901e, 0x00aa020e, 0x00f50000, 0x00ab0a0e, 0x00a10a0d, 0x00d0b070,
+	0x009c10c4, 0x00d00090, 0x00a4020f, 0x00a70201, 0x00a30a04, 0x00d54070,
+	0x00305020, 0x00982095, 0x007c3ce0, 0x009c1099, 0x00e80020, 0x00ed0063,
+	0x00a50007, 0x00777c2f, 0x00757037, 0x005f0500, 0x005f0300, 0x00a50a0c,
+	0x00a70a14, 0x00b050e9, 0x00941700, 0x00d00090, 0x00ed006a, 0x00a92400,
+	0x00233004, 0x00b090eb, 0x005f0900, 0x00928100, 0x00388001, 0x008c3065,
+	0x00a50a02, 0x0006033c, 0x00605300, 0x008c1071, 0x00a60a05, 0x00a500e9,
+	0x00b06a04, 0x00b0420f, 0x00b05a0c, 0x00d0b070, 0x009c10c4, 0x00d00090,
+	0x00e60026, 0x00d54070, 0x00306500, 0x0098203c, 0x00d00090, 0x00a50202,
+	0x009c108a, 0x00d04070, 0x009c103c, 0x00e60001, 0x00a5001e, 0x00715d10,
+	0x00a50003, 0x00166100, 0x00655600, 0x00ed003c, 0x00b05003, 0x008c052b,
+	0x00a5001e, 0x00715d10, 0x00e60001, 0x00a50003, 0x00166100, 0x00655600,
+	0x00a20002, 0x00522600, 0x00b05003, 0x00b02002, 0x008c003c, 0x00a00202,
+	0x009c108a, 0x00d04070, 0x00981081, 0x004c301f, 0x00155002, 0x00265c00,
+	0x004060e0, 0x0098109f, 0x00e60020, 0x00366001, 0x00166008, 0x00ed00b4,
+	0x00777c2f, 0x00e54252, 0x00757037, 0x000f053c, 0x005f6c00, 0x004f30e0,
+	0x0018c03e, 0x009810ad, 0x000f003c, 0x00388001, 0x008c30aa, 0x00a50a0c,
+	0x00166038, 0x00386cff, 0x0018803e, 0x00a70a14, 0x00b050e9, 0x00941700,
+	0x00d00090, 0x00ed00bb, 0x00a92400, 0x00233004, 0x00b090eb, 0x005f0900,
+	0x00928100, 0x00388001, 0x008c30b6, 0x003806e1, 0x0098106c, 0x000f003c,
+	0x00388004, 0x008c30bf, 0x008c006c, 0x008c00c3, 0x00a30a00, 0x00a80a01,
+	0x009810e8, 0x00d00090, 0x00a50201, 0x00775c2f, 0x00777437, 0x00055035,
+	0x00e64042, 0x005f6700, 0x004f30f0, 0x00a62b00, 0x009c20d8, 0x00d00090,
+	0x005f5001, 0x00ac2b00, 0x00af2b00, 0x004f6001, 0x000f0c3c, 0x008c00dc,
+	0x000f053c, 0x00af2b00, 0x000f063c, 0x000f003c, 0x00233010, 0x00388010,
+	0x009810e6, 0x00d0b070, 0x009c10cc, 0x00d00090, 0x00b08a01, 0x00b03a00,
+	0x00b0ba0e, 0x008c003c, 0x00d0b070, 0x009810e2, 0x00533001, 0x007b0210,
+	0x0008003c, 0x008c00e2, 0x00a50a00, 0x00455001, 0x00941d00, 0x00d00090,
+	0x00b06eff, 0x00b07efe, 0x00b08efd, 0x00b09efc, 0x00b0cefb, 0x003ee005,
+	0x00a60a07, 0x00a70a08, 0x00a800e9, 0x00ec0000, 0x00788d00, 0x00106001,
+	0x009c210b, 0x00796d08, 0x003c9800, 0x00796d00, 0x00398900, 0x005cc900,
+	0x006cc600, 0x009c210b, 0x007c6c3d, 0x007cc43e, 0x00666c00, 0x007c7c3d,
+	0x007cc43e, 0x00577c00, 0x00d0111a, 0x00107001, 0x009c2121, 0x00797d08,
+	0x003c9800, 0x00797d00, 0x00398900, 0x005cc900, 0x006cc700, 0x009c2121,
+	0x007c7c3d, 0x007cc43e, 0x00677c00, 0x007c6c3d, 0x007cc43e, 0x00566c00,
+	0x00a900e9, 0x00b06a07, 0x00b07a08, 0x00799c48, 0x002993fc, 0x00b28b00,
+	0x00b29b00, 0x00ac1e01, 0x00a91e01, 0x00a81e01, 0x00a71e01, 0x00a61e01,
+	0x00840d00, 0x00a50a00, 0x00455001, 0x00941d00, 0x00d00090, 0x00b09a10,
+	0x00b01eff, 0x00b02efe, 0x00b06efd, 0x00b07efc, 0x00b08efb, 0x00b09efa,
+	0x00b0cef9, 0x00b04ef8, 0x003ee008, 0x00a800e9, 0x00788d00, 0x0047801f,
+	0x00a40e00, 0x00a900e9, 0x00778ca0, 0x00799c48, 0x0002093c, 0x002993fc,
+	0x00e54400, 0x00155710, 0x009c2169, 0x00d00090, 0x00d04070, 0x009c1149,
+	0x00d00090, 0x00e50186, 0x00b09a11, 0x00b05a14, 0x00d0171d, 0x00a7020d,
+	0x00777e00, 0x00a52400, 0x00a60a10, 0x00840700, 0x00765100, 0x00066001,
+	0x00d01518, 0x00765200, 0x00066002, 0x00d01518, 0x00765300, 0x00066003,
+	0x00d01518, 0x0006053c, 0x00066040, 0x00d56040, 0x00a40a12, 0x003505e1,
+	0x00166500, 0x002505e1, 0x00166500, 0x00366001, 0x00306400, 0x00b06a12,
+	0x00983175, 0x00d00090, 0x00a60a08, 0x00266001, 0x00d00090, 0x00b06a08,
+	0x00d0171d, 0x00e50270, 0x00155710, 0x00982175, 0x00c080b4, 0x00981170,
+	0x00780327, 0x008c0171, 0x00780308, 0x00d00090, 0x00b28b00, 0x00b29b00,
+	0x00d0171d, 0x00ac0a08, 0x00b00a08, 0x002cc001, 0x0078c308, 0x00780027,
+	0x00d00090, 0x00b28b00, 0x00b29b00, 0x00a41e01, 0x00ac1e01, 0x00a91e01,
+	0x00a81e01, 0x00a71e01, 0x00a61e01, 0x00a21e01, 0x00a11e01, 0x00840d00,
+	0x00b01eff, 0x00b02efe, 0x00b03efd, 0x00b04efc, 0x00b05efb, 0x00b0befa,
+	0x003ee006, 0x00a20a11, 0x00752c40, 0x00a32400, 0x00b00a14, 0x00a5050d,
+	0x00755e10, 0x00a10a10, 0x00d00090, 0x00840500, 0x00713100, 0x00011001,
+	0x00d01a10, 0x00713200, 0x00011002, 0x00d01a10, 0x00713300, 0x00011003,
+	0x00d01a10, 0x0001033c, 0x00011040, 0x00d51040, 0x00a30a12, 0x003505e1,
+	0x00111500, 0x002505e1, 0x00111500, 0x00311001, 0x00a50a08, 0x00b01a12,
+	0x00255001, 0x00301300, 0x009831b0, 0x00d00090, 0x00b05a08, 0x00d01b18,
+	0x00a10a0c, 0x00a30a11, 0x00b00a08, 0x00715308, 0x00710027, 0x00d00090,
+	0x00b21b00, 0x00b23b00, 0x00a01e01, 0x00a51e01, 0x00a41e01, 0x00a31e01,
+	0x00a21e01, 0x00a11e01, 0x00840d00, 0x00a50a00, 0x00455001, 0x00941d00,
+	0x00d00090, 0x00b09a10, 0x00b01eff, 0x00b06efe, 0x00b07efd, 0x00b08efc,
+	0x00b09efb, 0x00b0cefa, 0x00b04ef9, 0x003ee007, 0x00a100e9, 0x00781d00,
+	0x00c080b4, 0x009811d2, 0x00701c65, 0x009c120a, 0x00781c48, 0x00a60012,
+	0x00751d00, 0x00c050b4, 0x009c11d9, 0x00e100b4, 0x008c01dc, 0x0041101f,
+	0x00106100, 0x009c220a, 0x0005083c, 0x002883fc, 0x00c0100b, 0x009811e5,
+	0x00d00090, 0x00d00090, 0x00b21b00, 0x00b28b00, 0x00d0201a, 0x00a60513,
+	0x00d00090, 0x00d00090, 0x00840600, 0x00779e08, 0x00d02014, 0x00779e10,
+	0x00d02014, 0x00e60214, 0x00d04070, 0x009c11f3, 0x00d00090, 0x00b06a14,
+	0x00d02112, 0x0006043c, 0x00779d18, 0x00d00090, 0x00a62600, 0x00776108,
+	0x00d02014, 0x00e6022c, 0x00d04070, 0x009c11ff, 0x00d00090, 0x00b06a14,
+	0x00d02112, 0x0006043c, 0x00d00090, 0x00d00090, 0x00a72600, 0x00d02014,
+	0x00077040, 0x00777d37, 0x00717128, 0x00d00090, 0x00b21b00, 0x00b28b00,
+	0x00a41e01, 0x00ac1e01, 0x00a91e01, 0x00a81e01, 0x00a71e01, 0x00a61e01,
+	0x00a11e01, 0x00840d00, 0x00b08a11, 0x00d0201a, 0x00a90a00, 0x00499001,
+	0x00941d00, 0x00d00090, 0x00b06eff, 0x00b08efe, 0x00b04efd, 0x003ee003,
+	0x00a90a10, 0x00a80a11, 0x00a62400, 0x00166008, 0x00769918, 0x00066040,
+	0x00766d37, 0x00799d10, 0x00796128, 0x00b00a14, 0x00b29b00, 0x00b28b00,
+	0x00a41e01, 0x00a81e01, 0x00a61e01, 0x00840d00, 0x00a90a00, 0x00499001,
+	0x00941d00, 0x00d00090, 0x00b06eff, 0x00b08efe, 0x00b04efd, 0x003ee003,
+	0x00a90a10, 0x00a80a11, 0x00a62400, 0x00799d18, 0x00066040, 0x00766d37,
+	0x00796128, 0x00b00a14, 0x00b29b00, 0x00b28b00, 0x00a41e01, 0x00a81e01,
+	0x00a61e01, 0x00840d00, 0x00f40000, 0x00d87040, 0x0098225d, 0x00e10560,
+	0x00198004, 0x00299100, 0x00e10001, 0x00aa0900, 0x00ed024c, 0x008c0512,
+	0x0098125d, 0x00e4036f, 0x007445f0, 0x00544850, 0x00a1000c, 0x00b04300,
+	0x005f1200, 0x004fa0e0, 0x00ea0001, 0x00ab090f, 0x001aa800, 0x007b01f0,
+	0x00e80040, 0x00677a00, 0x00b0b90f, 0x00b0890b, 0x00d02413, 0x00aa0005,
+	0x00d00090, 0x007a7210, 0x00d00090, 0x00b0a005, 0x00d00116, 0x00ac00f0,
+	0x00a80005, 0x00d1c040, 0x0098235b, 0x0011103f, 0x00ed0450, 0x001a1001,
+	0x002dd100, 0x00320a00, 0x0013c200, 0x00193a00, 0x00e20275, 0x00222300,
+	0x006cc900, 0x00eb0560, 0x0005013c, 0x00155004, 0x00255b00, 0x00840200,
+	0x00d02f1e, 0x00d02b1c, 0x00a40501, 0x00724ca0, 0x009812bc, 0x00e40460,
+	0x00244200, 0x00c0201f, 0x009812bc, 0x00eb0001, 0x00a20400, 0x00702c2e,
+	0x009c12bc, 0x001bb100, 0x00a2001c, 0x00522b00, 0x00588b00, 0x00b0201c,
+	0x00a2050f, 0x00aa050c, 0x00ab050b, 0x0070bd00, 0x009c1265, 0x00d22070,
+	0x009812bc, 0x00f50000, 0x00991265, 0x00122002, 0x00b0050c, 0x00ab050d,
+	0x0030b200, 0x009c2297, 0x00020b3c, 0x003bb200, 0x00b0250d, 0x00b0deff,
+	0x00b01efe, 0x00b05efd, 0x00b0befc, 0x00b0aefb, 0x00b08efa, 0x003ee006,
+	0x00ed02a2, 0x008c091a, 0x00a81e01, 0x00aa1e01, 0x00ab1e01, 0x00a51e01,
+	0x00a11e01, 0x00ad1e01, 0x00a2050d, 0x00b0a50c, 0x009812af, 0x002bb200,
+	0x00d00090, 0x00b0b50d, 0x00d02615, 0x00b0deff, 0x00b05efe, 0x00b01efd,
+	0x003ee003, 0x00b0b50d, 0x00ed02b7, 0x00000b3c, 0x00981957, 0x00d00090,
+	0x00d00090, 0x00a11e01, 0x00a51e01, 0x00ad1e01, 0x00a2050b, 0x00702d00,
+	0x009c1265, 0x00e20001, 0x00122100, 0x00ab001b, 0x004bb200, 0x009c1265,
+	0x00588200, 0x00a40501, 0x00eb0001, 0x007a4ca0, 0x001bba00, 0x004bb0fe,
+	0x009812d7, 0x009c22d2, 0x007a4d00, 0x00c0a03f, 0x009c12d7, 0x007a4ca8,
+	0x00eb0001, 0x001bba00, 0x00a3000b, 0x006bb0ff, 0x00433b00, 0x00d00090,
+	0x00b0300b, 0x00ab050b, 0x0070bd00, 0x009c1265, 0x00722210, 0x006220ff,
+	0x00ab0001, 0x00a40002, 0x004bb200, 0x00444200, 0x00b0b001, 0x00ab0006,
+	0x00b04002, 0x00a40004, 0x004bb200, 0x00444200, 0x00488200, 0x00b0b006,
+	0x00b04004, 0x00ab001c, 0x004bb200, 0x00a4001a, 0x00b0b01c, 0x00444200,
+	0x00eb0003, 0x00b0401a, 0x00a40d00, 0x0074b0a0, 0x00a300f4, 0x001b1001,
+	0x00e20001, 0x00122b00, 0x00402300, 0x009812fa, 0x00122001, 0x00740062,
+	0x00b020f5, 0x00b04d00, 0x00b090f2, 0x00d02615, 0x00e40001, 0x00144100,
+	0x006440ff, 0x00488400, 0x00a60d00, 0x0042601f, 0x004660e0, 0x00566002,
+	0x00c02000, 0x00b06d00, 0x0098130f, 0x00e20001, 0x00122110, 0x00588200,
+	0x00b06500, 0x00b090f2, 0x00d02615, 0x00a00502, 0x009c131a, 0x0002053c,
+	0x00b0ceff, 0x00b08efe, 0x003ee002, 0x00ed0317, 0x008c052b, 0x00a81e01,
+	0x00ac1e01, 0x00d02615, 0x00a40501, 0x00b06d00, 0x0042401f, 0x00981338,
+	0x0042403f, 0x00c0201f, 0x0098133f, 0x00c0203f, 0x00981346, 0x00e60460,
+	0x0042401f, 0x00e40001, 0x00144200, 0x00a3000b, 0x00533400, 0x00266200,
+	0x00b0300b, 0x00a20600, 0x00721088, 0x00742c2e, 0x00b02600, 0x00144004,
+	0x00244100, 0x00e60001, 0x00166400, 0x00a20006, 0x00522600, 0x00b090f2,
+	0x00b02006, 0x00d02615, 0x00a20001, 0x00eb0001, 0x001bb100, 0x00522b00,
+	0x00b090f2, 0x00b02001, 0x00d02615, 0x00a20002, 0x00eb0001, 0x001bb100,
+	0x00522b00, 0x00b090f2, 0x00b02002, 0x00d02615, 0x00724ca8, 0x00eb0001,
+	0x001bb200, 0x00a3000b, 0x00533b00, 0x00a20004, 0x00b0300b, 0x00eb0001,
+	0x001bb100, 0x00a2001a, 0x00704c2d, 0x00981356, 0x00522b00, 0x00b090f2,
+	0x00b0201a, 0x00d02615, 0x00a20004, 0x00522b00, 0x00b090f2, 0x00b02004,
+	0x00d02615, 0x00b08005, 0x00d00112, 0x00d80050, 0x00788c4c, 0x00981010,
+	0x00da8040, 0x00e600a0, 0x0076a023, 0x00a70aec, 0x00767060, 0x00d00090,
+	0x00a10600, 0x00b0600a, 0x00731c80, 0x00741df0, 0x00751c64, 0x00e20560,
+	0x00793484, 0x00299200, 0x00840400, 0x00f50000, 0x0007093c, 0x00d00090,
+	0x00d00008, 0x00b1f701, 0x00a00902, 0x009814c6, 0x00d00090, 0x00ebffff,
+	0x00a60901, 0x0076b05a, 0x0040601f, 0x00981383, 0x0047603f, 0x00c0701f,
+	0x009813a2, 0x00c0703f, 0x00b06901, 0x009813d5, 0x00d04a1b, 0x00e70001,
+	0x00d00008, 0x00400f00, 0x00a20001, 0x00177300, 0x00522700, 0x00d00090,
+	0x00b02001, 0x00a70903, 0x00a20904, 0x00ed038f, 0x008c0aca, 0x00a20905,
+	0x00b06901, 0x00a70902, 0x00307200, 0x008c2395, 0x0002073c, 0x00a10903,
+	0x00b0290c, 0x00b0290d, 0x00a20904, 0x00b01909, 0x00b0290a, 0x0004093c,
+	0x00b0deff, 0x003ee001, 0x00ed03a0, 0x008c002b, 0x00ad1e01, 0x00d04c1c,
+	0x00d00008, 0x00400f00, 0x00a70002, 0x00e20001, 0x00122300, 0x00577200,
+	0x007a6c88, 0x001aa005, 0x00e20480, 0x002aa200, 0x00b07002, 0x00b0a90e,
+	0x00a70903, 0x00a20a00, 0x00ab0a04, 0x00ed03b3, 0x008c0ac1, 0x00b0090b,
+	0x00b06901, 0x00a00a0d, 0x008c14cc, 0x00a60a0e, 0x00760210, 0x00a20a0f,
+	0x00b06a0e, 0x00722a10, 0x00e60001, 0x00b02a0f, 0x00a20a07, 0x00722c5b,
+	0x00d00090, 0x00a20217, 0x00b00a14, 0x00b00a09, 0x00b00a0a, 0x00b00a0b,
+	0x00b00a0c, 0x00d00090, 0x00840200, 0x00e60127, 0x00b00a08, 0x00d03c1f,
+	0x00e601bf, 0x00d03c1f, 0x00e600ec, 0x00a2090f, 0x00b06a0d, 0x00720210,
+	0x00b00a13, 0x00b0290f, 0x00d04c1c, 0x00a70903, 0x00a20904, 0x00ed03d9,
+	0x008c0aca, 0x00706c2d, 0x00b06901, 0x009c147e, 0x00d00090, 0x00ac090f,
+	0x00ed0450, 0x007c0210, 0x002dd300, 0x00eb04e0, 0x00b0c90f, 0x00a00b09,
+	0x009813ff, 0x00d00090, 0x00a10903, 0x00711c62, 0x00a2090e, 0x00522001,
+	0x00762c23, 0x00211600, 0x00b0290e, 0x0011100a, 0x00d00090, 0x00d00008,
+	0x00500f00, 0x00b0190b, 0x00a10902, 0x00a20901, 0x00702c3d, 0x009813f9,
+	0x00d00090, 0x00b0190c, 0x00d04118, 0x00e10001, 0x0072103c, 0x00b0090c,
+	0x00b02901, 0x00e10000, 0x00d04118, 0x0028b004, 0x00a10903, 0x00d00004,
+	0x00b1f801, 0x00d00004, 0x00500f00, 0x00a20904, 0x0004093c, 0x00ed0409,
+	0x008c002b, 0x00a10902, 0x00a20901, 0x00b0190c, 0x00702c3d, 0x009c1418,
+	0x00d00090, 0x00a10d00, 0x004110e0, 0x0002093c, 0x00b01d00, 0x00b00900,
+	0x0001033c, 0x00ed0417, 0x008c052b, 0x00d04c1c, 0x00211003, 0x0011103e,
+	0x00111003, 0x00d00090, 0x00b0190d, 0x00b01902, 0x00a00b09, 0x009c1466,
+	0x00d00090, 0x00a10907, 0x00311002, 0x00a20b07, 0x00b01b09, 0x00782c44,
+	0x0042200f, 0x00188002, 0x00b02b07, 0x00b08909, 0x00a20b05, 0x00762c44,
+	0x0042200f, 0x00166002, 0x00b02b05, 0x00b06908, 0x00a50b08, 0x009c143c,
+	0x00d00090, 0x00e500c0, 0x00a20b05, 0x00a10b07, 0x00b02b01, 0x00b01b03,
+	0x00a20b06, 0x00a10b04, 0x00b02b02, 0x00b01b00, 0x00355002, 0x00d00090,
+	0x00b05b08, 0x00a50b00, 0x00a70905, 0x0001073c, 0x00716200, 0x00715021,
+	0x0015503f, 0x00b21c00, 0x00a40b02, 0x00117010, 0x00718200, 0x00714021,
+	0x0014403f, 0x00b21c00, 0x00a70906, 0x0001073c, 0x00716200, 0x00715021,
+	0x0015503f, 0x00b21c00, 0x00117010, 0x00718200, 0x00714021, 0x0014403f,
+	0x00b21c00, 0x00a10b01, 0x0075121e, 0x0011103e, 0x00b05b00, 0x00b01b01,
+	0x00a20b03, 0x0074221e, 0x0012203e, 0x00a1090d, 0x00211010, 0x00b04b02,
+	0x00b02b03, 0x00b0190d, 0x00b01902, 0x00b0c90f, 0x00a10901, 0x00721ca8,
+	0x00e80001, 0x00a00900, 0x009c146c, 0x0071803c, 0x00168200, 0x00a5000b,
+	0x00555600, 0x00148300, 0x00b0500b, 0x00b01901, 0x00b04004, 0x00e10460,
+	0x00211200, 0x00a60d00, 0x00ab0100, 0x007b3088, 0x004660e0, 0x00566002,
+	0x00b0b100, 0x00b06d00, 0x00010a3c, 0x00d04c1c, 0x00ac090f, 0x007c0210,
+	0x00b0090b, 0x00eb04e0, 0x0028b004, 0x00b0c90f, 0x00d00004, 0x00b1f801,
+	0x00d00004, 0x00500f00, 0x00a10902, 0x00a20b07, 0x00b0190c, 0x00b0190d,
+	0x00782c49, 0x00722d20, 0x00188002, 0x00b02b07, 0x00b08909, 0x00a20b05,
+	0x00762c49, 0x00722d20, 0x00166002, 0x00b02b05, 0x00b06908, 0x00a10901,
+	0x00721ca8, 0x00e80001, 0x00168200, 0x00a5000b, 0x00555600, 0x00148300,
+	0x00b0500b, 0x00b0401a, 0x00e10460, 0x00211200, 0x00a60350, 0x00ab0100,
+	0x007b3088, 0x004660e0, 0x00566002, 0x00b0b100, 0x00b06350, 0x00010a3c,
+	0x00d04c1c, 0x00d00008, 0x00400f00, 0x00e80460, 0x004a601f, 0x00218a00,
+	0x00ab000b, 0x00a70100, 0x00e50001, 0x00773088, 0x00155a00, 0x00b07100,
+	0x00777c2e, 0x00aa0006, 0x00177004, 0x00d00090, 0x00233700, 0x00a20904,
+	0x00a70903, 0x00ed04bf, 0x008c0aca, 0x00e70001, 0x00177300, 0x005bb500,
+	0x005aa700, 0x00b0b00b, 0x00b0a006, 0x00d0381f, 0x0001033c, 0x0002093c,
+	0x00d00008, 0x00500f00, 0x00ed04cc, 0x008c052b, 0x00a2000a, 0x00712c23,
+	0x00722c60, 0x00ed04d1, 0x008c0522, 0x00d0351d, 0x00a5001f, 0x00a30020,
+	0x00355001, 0x00d00090, 0x00b0501f, 0x009c302a, 0x00142030, 0x008c14db,
+	0x00722210, 0x00b0301f, 0x00d12040, 0x00e30001, 0x00133100, 0x00622300,
+	0x00311010, 0x00b02001, 0x00b01eff, 0x003ee001, 0x00ed04e6, 0x008c08b0,
+	0x00a11e01, 0x00ed04e9, 0x008c091a, 0x00d0021a, 0x00a20006, 0x00722e10,
+	0x009c14ee, 0x00d04f1e, 0x00d12040, 0x00e30001, 0x00133100, 0x00622300,
+	0x00b01eff, 0x00b02efe, 0x00b0defd, 0x003ee003, 0x00ed04f8, 0x008c08b0,
+	0x00ad1e01, 0x00a21e01, 0x00a11e01, 0x00500200, 0x009c14ee, 0x00d00090,
+	0x00a20006, 0x00722e00, 0x009c1502, 0x00d0011b, 0x00d12040, 0x00e30001,
+	0x00133100, 0x00622300, 0x00b01eff, 0x00b02efe, 0x00b0defd, 0x003ee003,
+	0x00ed050c, 0x008c091a, 0x00ad1e01, 0x00a21e01, 0x00a11e01, 0x00500200,
+	0x009c1502, 0x00d0011b, 0x00e300a0, 0x00731023, 0x00e40001, 0x00a10300,
+	0x00d21040, 0x009c351a, 0x00422000, 0x00840d00, 0x00144200, 0x00611400,
+	0x00742c22, 0x00b01300, 0x00533200, 0x0072244c, 0x0072403e, 0x00840d00,
+	0x00e300a0, 0x00731023, 0x00e40001, 0x00144200, 0x00a10300, 0x00511400,
+	0x00d00090, 0x00b01300, 0x00840d00, 0x00a30201, 0x0007033c, 0x0077005e,
+	0x00eb0450, 0x00ea0460, 0x002bb100, 0x00b07201, 0x00773d00, 0x00c0703f,
+	0x009c1537, 0x00773ca8, 0x00d0531b, 0x0047301f, 0x00c0701f, 0x009c153b,
+	0x00e70000, 0x00a9000b, 0x00e80001, 0x00188700, 0x0078003f, 0x00780020,
+	0x006880ff, 0x00499800, 0x00a40b00, 0x00b0900b, 0x00a60005, 0x00e70001,
+	0x00177100, 0x00777210, 0x006770ff, 0x00a80001, 0x00a90002, 0x00aa0006,
+	0x00488700, 0x00499700, 0x004aa700, 0x00b08001, 0x00a80004, 0x00b09002,
+	0x00488700, 0x00a9001a, 0x00499700, 0x00b0a006, 0x00b0901a, 0x00b08004,
+	0x00a00200, 0x00d50050, 0x00455001, 0x00773c3f, 0x00555700, 0x00981566,
+	0x00d00090, 0x00a700f4, 0x00181001, 0x00155800, 0x00407500, 0x00981566,
+	0x00155001, 0x00740062, 0x00a70200, 0x0098156f, 0x00773c3e, 0x0098156f,
+	0x00177100, 0x00566700, 0x00e70003, 0x00747040, 0x00d05717, 0x00a70200,
+	0x009c1573, 0x00740040, 0x00d05717, 0x00547002, 0x00e70001, 0x00177110,
+	0x00566700, 0x00b04b00, 0x00b06005, 0x00b050f5, 0x00840d00, 0x00ec0001,
+	0x00da3040, 0x008c257f, 0x00d0001f, 0x0016ca00, 0x00eb0460, 0x00633600,
+	0x002bba00, 0x00e40560, 0x00ab0b00, 0x0079bc88, 0x00169004, 0x00244600,
+	0x0076bc2e, 0x009c15e5, 0x00d00090, 0x0017c900, 0x00a1001c, 0x00411700,
+	0x009c157c, 0x00d00090, 0x00a7040b, 0x00a1040e, 0x00401001, 0x009c1596,
+	0x00500700, 0x009c157c, 0x004110fe, 0x0076bc84, 0x00a8040c, 0x00b0140e,
+	0x0098157c, 0x0075bcb8, 0x00255001, 0x00a1040f, 0x0016563e, 0x009c15a1,
+	0x00e60001, 0x00751cc9, 0x00155002, 0x00d11070, 0x00211001, 0x00355100,
+	0x00305600, 0x0098257c, 0x0006043c, 0x00b01eff, 0x00b02efe, 0x00b03efd,
+	0x00b04efc, 0x003ee004, 0x0071bc56, 0x009815b3, 0x00f40000, 0x009925b8,
+	0x00d05b15, 0x00f00000, 0x009915b8, 0x00ed05b7, 0x008c0512, 0x009c15bf,
+	0x00d00090, 0x00d00090, 0x00a41e01, 0x00a31e01, 0x00a21e01, 0x00a11e01,
+	0x00d0571c, 0x0075bc84, 0x00e409d6, 0x007445f0, 0x00544900, 0x00745064,
+	0x00725084, 0x00b04300, 0x0071bcb8, 0x009815ca, 0x007210b8, 0x0072c034,
+	0x00211001, 0x00111500, 0x00a50401, 0x00755c2f, 0x00725037, 0x0075bc3d,
+	0x0072503d, 0x005f2c00, 0x00a20603, 0x005f0200, 0x0075bc3d, 0x009815d7,
+	0x00222100, 0x0075bc60, 0x00a8060c, 0x00388100, 0x009c25dc, 0x0008003c,
+	0x00b05ac0, 0x00b02603, 0x00b0160b, 0x00b0860c, 0x00a41e01, 0x00a31e01,
+	0x00a21e01, 0x00a11e01, 0x00d0571c, 0x00a8040d, 0x00983655, 0x0075bcb8,
+	0x00a70402, 0x00983655, 0x0077bc84, 0x00255001, 0x00a8040f, 0x0016573e,
+	0x009c15f0, 0x00e60001, 0x00d58670, 0x0098257c, 0x00306010, 0x009835f6,
+	0x008c857c, 0x009c857c, 0x003707fe, 0x009835fa, 0x00e60001, 0x00166700,
+	0x0007043c, 0x00b03eff, 0x003ee001, 0x0071bc56, 0x009c1602, 0x00f00000,
+	0x00991607, 0x00d06014, 0x00f50000, 0x00992607, 0x00ed0606, 0x008c0512,
+	0x009c160b, 0x00d00090, 0x00d00090, 0x00a31e01, 0x00d0571c, 0x0075bc84,
+	0x00e40a9a, 0x007445f0, 0x00544900, 0x00745064, 0x00746127, 0x0015c900,
+	0x00b04300, 0x00a9001b, 0x00599500, 0x0004073c, 0x00b0901b, 0x0070bc65,
+	0x00981656, 0x00e54002, 0x0071bcb8, 0x0098161e, 0x007510b8, 0x0075c034,
+	0x0071bc84, 0x007510a4, 0x0071bc3d, 0x0075103d, 0x00a10401, 0x00711c2f,
+	0x00751037, 0x005f2500, 0x00a20404, 0x00156002, 0x005f0200, 0x00af2800,
+	0x00366001, 0x009c1629, 0x0076bc60, 0x0070bc3d, 0x00881630, 0x00222500,
+	0x00a70402, 0x00a9040d, 0x00b06ac0, 0x00377500, 0x00399500, 0x009c364b,
+	0x00d00090, 0x00a90405, 0x00309700, 0x0098263b, 0x0009073c, 0x00a50401,
+	0x00b0940c, 0x00705c26, 0x0098164b, 0x00d00090, 0x00a50406, 0x00a10409,
+	0x00211500, 0x0078022f, 0x00b01409, 0x00b01403, 0x00b0deff, 0x003ee001,
+	0x00ed064a, 0x008c002b, 0x00ad1e01, 0x00a1000b, 0x0016ca00, 0x00611600,
+	0x00b02404, 0x00b0100b, 0x00b0940d, 0x00b0840f, 0x00b07402, 0x00a31e01,
+	0x00d0571c, 0x00d0571c, 0x0071bc84, 0x00c01000, 0x009c166a, 0x00e14102,
+	0x00e50310, 0x00715210, 0x00a50401, 0x00755c2f, 0x00715037, 0x005f2100,
+	0x00a20404, 0x00efeeee, 0x005f0200, 0x00a12800, 0x001f1000, 0x001f1038,
+	0x001f1030, 0x001f1028, 0x00e50004, 0x00d0621c, 0x00e14112, 0x00e50110,
+	0x00715210, 0x00a50401, 0x00755c2f, 0x00715037, 0x005f2100, 0x00a20404,
+	0x00efffcc, 0x005f0200, 0x00a12800, 0x001f1000, 0x001f1030, 0x00e50004,
+	0x00d0621c, 0x00a30022, 0x00a90021, 0x00333001, 0x00d00090, 0x00b03022,
+	0x009c301e, 0x00d87040, 0x00b09022, 0x0098201e, 0x00e20001, 0x00122800,
+	0x00677200, 0x0009083c, 0x00199004, 0x00e20560, 0x00299200, 0x00d00090,
+	0x00a0090b, 0x009c167f, 0x00f40000, 0x00aa0903, 0x00ab0902, 0x0099167f,
+	0x0098367f, 0x00528006, 0x00e100a8, 0x00211200, 0x00e206a9, 0x00a00100,
+	0x009c101e, 0x00548050, 0x00742210, 0x00a20011, 0x00b04100, 0x0072802c,
+	0x00a30901, 0x00733c2f, 0x00723037, 0x005f0200, 0x005f0a00, 0x00e20080,
+	0x002aa200, 0x0013203e, 0x003bb200, 0x00b0a903, 0x00b0390b, 0x00b0b902,
+	0x00d0671f, 0x00ad090e, 0x00ab090b, 0x00ac090f, 0x00ff1000, 0x00a40d0a,
+	0x00a80d09, 0x00b040e9, 0x007f8c61, 0x00543006, 0x00ff3000, 0x004f8080,
+	0x00b0401d, 0x00b0e009, 0x00ae0d0f, 0x00a20d0b, 0x009816c5, 0x00d00090,
+	0x00d00090, 0x00ad1e01, 0x00aa1e01, 0x00a81e01, 0x00a71e01, 0x00a61e01,
+	0x00a51e01, 0x00a41e01, 0x00a31e01, 0x00a11e01, 0x00840200, 0x00e206cf,
+	0x00a400ed, 0x00b01eff, 0x003ee001, 0x00a5001d, 0x00304500, 0x009c17b8,
+	0x00d00090, 0x00d00090, 0x00a11e01, 0x00080f3c, 0x003bb001, 0x00b080eb,
+	0x00d00090, 0x009a86e0, 0x00d00090, 0x00a00d13, 0x009c26dc, 0x00d00090,
+	0x00d00090, 0x00b2ac00, 0x000a083c, 0x00d06c16, 0x00e4ffff, 0x000a083c,
+	0x00b04d13, 0x00d06c16, 0x00a50d06, 0x00105001, 0x009c26d5, 0x00d00090,
+	0x00a100e9, 0x00745d08, 0x00b01d0a, 0x00761d00, 0x00374600, 0x00745d00,
+	0x00366400, 0x00577600, 0x00677500, 0x009826ef, 0x00d06d15, 0x00a70d09,
+	0x00711c48, 0x00777c41, 0x003771fb, 0x00ff1000, 0x00a40d09, 0x00747041,
+	0x004f7003, 0x00b04d09, 0x00307004, 0x009c2707, 0x00d00090, 0x00b01eff,
+	0x003ee001, 0x00a400ed, 0x00e20705, 0x00a1001d, 0x00304100, 0x009c17b8,
+	0x00d00090, 0x00d00090, 0x00a11e01, 0x003bb001, 0x00000f3c, 0x00307007,
+	0x00983711, 0x00ff2000, 0x00d00090, 0x00d00090, 0x00d00090, 0x00080f3c,
+	0x00ff3000, 0x000f083c, 0x00d0711d, 0x00b01eff, 0x003ee001, 0x00a400ed,
+	0x00e2071b, 0x00a1001d, 0x00304100, 0x009c17b8, 0x00d00090, 0x00d00090,
+	0x00a11e01, 0x003bb001, 0x00080f3c, 0x00b0c90f, 0x00738d10, 0x00333001,
+	0x00705c3d, 0x0098174b, 0x00303004, 0x0098274b, 0x00708610, 0x009c274b,
+	0x00d00090, 0x00b01eff, 0x003ee001, 0x00a400ed, 0x00e20731, 0x00a1001d,
+	0x00304100, 0x009c17b8, 0x00d00090, 0x00d00090, 0x00a11e01, 0x003bb001,
+	0x00333004, 0x00040f3c, 0x00044040, 0x00744201, 0x00748859, 0x001440be,
+	0x00788c5a, 0x00588001, 0x001880bf, 0x00a5090f, 0x00a20d0e, 0x00d55070,
+	0x00155002, 0x00255101, 0x00a00d13, 0x00982743, 0x00355004, 0x00d00090,
+	0x00d00090, 0x00b28200, 0x00a80d04, 0x00255800, 0x00b24200, 0x00b25200,
+	0x00b02d0e, 0x00c01003, 0x009c1757, 0x00d00090, 0x00a40d13, 0x00982751,
+	0x00d07514, 0x00444001, 0x00b2ac00, 0x00b04d13, 0x00e5fffc, 0x00e1ffff,
+	0x00d07519, 0x002510fd, 0x00d00090, 0x00303504, 0x0098276a, 0x00d00090,
+	0x00b01eff, 0x003ee001, 0x00a400ed, 0x00a1001d, 0x00e20766, 0x00304100,
+	0x009c17b8, 0x00d00090, 0x00d00090, 0x00a11e01, 0x003bb001, 0x00333004,
+	0x00080f3c, 0x00d07519, 0x00477003, 0x00357300, 0x00255101, 0x00ff1000,
+	0x00a40d09, 0x00745041, 0x004f5003, 0x00b04d09, 0x00301303, 0x009817a5,
+	0x00c05004, 0x009c1795, 0x00ff2000, 0x00d00090, 0x00d00090, 0x00d00090,
+	0x00080f3c, 0x00ff3000, 0x000f083c, 0x00d07a15, 0x00ff2000, 0x00d00090,
+	0x00d00090, 0x00d00090, 0x00040f3c, 0x00ff3000, 0x000f043c, 0x00155003,
+	0x00144500, 0x0015503d, 0x00330300, 0x009c278b, 0x00e30000, 0x00357500,
+	0x00355004, 0x00155003, 0x00144500, 0x00350500, 0x00144500, 0x00355020,
+	0x00188500, 0x00588400, 0x00d07a15, 0x00455003, 0x00305700, 0x0098277e,
+	0x00e207a2, 0x00b01eff, 0x003ee001, 0x00a400ed, 0x00a1001d, 0x00304100,
+	0x009c17b8, 0x00d00090, 0x00d00090, 0x00a11e01, 0x003bb001, 0x00080f3c,
+	0x00d00090, 0x00500100, 0x009c27a8, 0x00ea0000, 0x00211001, 0x00111003,
+	0x00310100, 0x00188100, 0x00211020, 0x001aa100, 0x00310100, 0x001aa100,
+	0x00211020, 0x00188100, 0x00e40001, 0x00588a00, 0x00b04d13, 0x00b080eb,
+	0x00e206c6, 0x00d06d13, 0x00a11e01, 0x00b0c90f, 0x00b02d0b, 0x00b0b90b,
+	0x00ff2000, 0x00b01eff, 0x00b03efe, 0x00b04efd, 0x00b05efc, 0x00b06efb,
+	0x00b07efa, 0x00b08ef9, 0x00b0aef8, 0x00b0def7, 0x003ee009, 0x00a100e9,
+	0x00a40d09, 0x00b01d0a, 0x00b0ed0f, 0x00050f3c, 0x00754100, 0x00ae0009,
+	0x00b05d09, 0x00a0090b, 0x009c135d, 0x00e400a8, 0x00a8001d, 0x00244800,
+	0x00488001, 0x00b00400, 0x00e40001, 0x00144800, 0x00a10002, 0x00611400,
+	0x00a80003, 0x00588400, 0x00b01002, 0x00b08003, 0x00d0351d, 0x00a7090e,
+	0x00ff1000, 0x007f7c61, 0x00ff3000, 0x005f0700, 0x00500a00, 0x009c17e7,
+	0x00fa0000, 0x00ec04e0, 0x00ed0008, 0x00a4090b, 0x00a6090f, 0x00724cca,
+	0x008817f1, 0x003dd200, 0x00500f00, 0x00322001, 0x009c37ee, 0x00407001,
+	0x009c17f6, 0x00d00090, 0x00727c41, 0x00244200, 0x00724cc2, 0x003dd200,
+	0x00122002, 0x00a0090c, 0x008c17fc, 0x00724d00, 0x0005023c, 0x00222003,
+	0x0012203e, 0x00a10c09, 0x00ab0c00, 0x00311200, 0x00a20c01, 0x00b01c09,
+	0x00a40c02, 0x00a10c03, 0x00aa0909, 0x00a80908, 0x002505fc, 0x009c2817,
+	0x00255004, 0x00983833, 0x002505fc, 0x00777c41, 0x00377504, 0x009c283e,
+	0x00370500, 0x003dd001, 0x00177003, 0x0013f700, 0x00155003, 0x00133500,
+	0x00d08118, 0x00530f00, 0x00b05eff, 0x003ee001, 0x00a50c08, 0x009c1821,
+	0x00e500c0, 0x00ab0c04, 0x00a20c05, 0x00a40c06, 0x00a10c07, 0x00355001,
+	0x00d00090, 0x00b05c08, 0x00a51e01, 0x00783210, 0x0078b021, 0x001bb03f,
+	0x007b203f, 0x0012203f, 0x00133030, 0x007a3210, 0x007a4021, 0x0014403f,
+	0x0074103f, 0x0011103f, 0x00b28600, 0x00b2a600, 0x00d08018, 0x00b0bc00,
+	0x00b02c01, 0x00b04c02, 0x00b01c03, 0x00e7ffff, 0x003dd001, 0x0098283e,
+	0x00d00090, 0x00d00090, 0x00500f00, 0x00d08318, 0x00ff2000, 0x0000073c,
+	0x009c2812, 0x00d00090, 0x00a7090e, 0x0047700e, 0x00b0090b, 0x0042f080,
+	0x00577200, 0x00b0690f, 0x00b0790e, 0x00d04c1c, 0x00d77040, 0x00e90560,
+	0x007c7484, 0x002cc900, 0x00e90016, 0x00a50c0b, 0x00705d00, 0x009c18af,
+	0x00d00090, 0x00ab0c0c, 0x008c388c, 0x00a20c01, 0x00702c3c, 0x009818af,
+	0x00eb04e0, 0x00a90c0f, 0x00a30c0d, 0x00a80b09, 0x0098188b, 0x00e20016,
+	0x00a40b00, 0x00a50b01, 0x00a60b02, 0x00a70b03, 0x00d09270, 0x009c288b,
+	0x00e20008, 0x00308008, 0x009c2868, 0x0002083c, 0x00aa0b08, 0x009c186f,
+	0x00ea00c0, 0x00a50b05, 0x00a40b04, 0x00a60b06, 0x00a70b07, 0x003aa001,
+	0x00d00090, 0x00b0ab08, 0x00aa0c08, 0x007a4021, 0x0014403f, 0x0074503f,
+	0x0015503f, 0x00b2a900, 0x00aa0c09, 0x007a6021, 0x0016603f, 0x0076703f,
+	0x0017703f, 0x00b2a900, 0x00233008, 0x00388001, 0x00322001, 0x009c3868,
+	0x00d00090, 0x00b04b00, 0x00b05b01, 0x00b06b02, 0x00b07b03, 0x00b03c02,
+	0x00b03c0d, 0x00b08b09, 0x00b09c0f, 0x00d08a1f, 0x00aa0c0f, 0x00a80c01,
+	0x00718c3b, 0x00981893, 0x00f40000, 0x009928af, 0x00d08915, 0x00f00000,
+	0x009918af, 0x00d0a970, 0x009c28af, 0x00d00090, 0x00ed089a, 0x008c0512,
+	0x009818af, 0x00e407df, 0x007445f0, 0x00544750, 0x00a90c03, 0x00b04300,
+	0x00788c2f, 0x00728037, 0x0046901f, 0x005f2051, 0x004f90e0, 0x003606e0,
+	0x00306b00, 0x009838a9, 0x00060b3c, 0x00756100, 0x003bb600, 0x00299600,
+	0x00b0bc0c, 0x00b09c03, 0x00b05c0b, 0x00d00211, 0x00b0deff, 0x003ee001,
+	0x00771484, 0x00e50560, 0x00277500, 0x0005013c, 0x00ab0701, 0x0071bc3b,
+	0x009818bc, 0x00f40000, 0x009928ef, 0x00d08b1f, 0x00f00000, 0x009918ef,
+	0x00d00090, 0x00a90703, 0x00a3070b, 0x00a8070f, 0x00a4070e, 0x00404001,
+	0x009c18c8, 0x00500300, 0x009c18ef, 0x00d00090, 0x00aa070c, 0x009818ef,
+	0x00738d07, 0x004330fc, 0x00303022, 0x009828f8, 0x0040a080, 0x009818f8,
+	0x00d00090, 0x0040907f, 0x009c18f8, 0x00d48070, 0x00d00090, 0x00303421,
+	0x009838f3, 0x00ed08d9, 0x008c0512, 0x009818ef, 0x00e409d6, 0x007445f0,
+	0x00544550, 0x00a10008, 0x0076bc2f, 0x00716037, 0x00b04300, 0x005f1200,
+	0x005f0900, 0x00a4070e, 0x00740020, 0x00a30701, 0x00b0470e, 0x00733c26,
+	0x00133007, 0x00299300, 0x00e30080, 0x003aa300, 0x00b09703, 0x00b0a70c,
+	0x00b0370b, 0x00ad1e01, 0x00d00090, 0x00d00090, 0x00840d00, 0x0076bca0,
+	0x00e40001, 0x0074403f, 0x00144600, 0x009828ef, 0x00d48070, 0x003043f6,
+	0x009c28ef, 0x00ed08fd, 0x008c0512, 0x009818ef, 0x00e409a0, 0x007445f0,
+	0x00544550, 0x0076bc2f, 0x00726037, 0x005f2051, 0x004f90e0, 0x00b04300,
+	0x0043901f, 0x00a4070e, 0x00740020, 0x00d00090, 0x00b0470e, 0x00a40701,
+	0x00744c26, 0x0098190f, 0x003993e0, 0x003403e0, 0x003aa400, 0x009c2913,
+	0x000a003c, 0x00a3070b, 0x00743cca, 0x00d00090, 0x003304f8, 0x00133002,
+	0x007340ca, 0x00d08e1c, 0x00741484, 0x00e70560, 0x00244700, 0x00e20020,
+	0x00a0040b, 0x009c1973, 0x00d00090, 0x00ac0401, 0x0070cc3a, 0x009c1927,
+	0x00f00000, 0x00991973, 0x00d09219, 0x00f50000, 0x00992973, 0x00d00090,
+	0x00a6040f, 0x00a7040d, 0x00a50404, 0x0043501f, 0x009c1974, 0x00207080,
+	0x00982974, 0x00d76270, 0x00982974, 0x008c8973, 0x009c8973, 0x00e20080,
+	0x00d00090, 0x00a70007, 0x007ccc2f, 0x0077c037, 0x005f0700, 0x005f0500,
+	0x00d02000, 0x00af2600, 0x00a70402, 0x00b0640f, 0x00255200, 0x00377200,
+	0x00b05404, 0x00b07402, 0x009c394e, 0x00d00090, 0x00b00402, 0x0002043c,
+	0x00b0deff, 0x003ee001, 0x00ed094c, 0x008c052b, 0x00ad1e01, 0x00d09713,
+	0x00a3040d, 0x00333200, 0x009c3972, 0x00e50001, 0x00155100, 0x00a2001c,
+	0x00422500, 0x009c1972, 0x00d00090, 0x00a20405, 0x00760210, 0x00302700,
+	0x0088295c, 0x0002073c, 0x00b0640f, 0x00b0240c, 0x00b0240d, 0x00b07402,
+	0x00a2040a, 0x00a70409, 0x00a30407, 0x00a50406, 0x00222300, 0x00277500,
+	0x00b0240a, 0x00b07409, 0x00b02404, 0x00b07403, 0x0003013c, 0x0001073c,
+	0x00b0deff, 0x003ee001, 0x00ed0970, 0x008c002b, 0x00ad1e01, 0x00d09713,
+	0x00b0340d, 0x00840d00, 0x00a2040d, 0x00a0040b, 0x009c1973, 0x00222300,
+	0x00d86070, 0x00981973, 0x00188002, 0x00288300, 0x004880fc, 0x00308020,
+	0x00983980, 0x00e80020, 0x00308200, 0x00982985, 0x00392001, 0x0008023c,
+	0x00d09816, 0x00398001, 0x00e74252, 0x007ccc2f, 0x0077c037, 0x005f0700,
+	0x000f9337, 0x004f50e0, 0x004a30fc, 0x003b8a00, 0x00500a00, 0x00981995,
+	0x005f0000, 0x003aa004, 0x009c3990, 0x00d00090, 0x00d00090, 0x00af2600,
+	0x003bb004, 0x009c3995, 0x003a08e0, 0x004aa0fc, 0x0098199e, 0x005f0000,
+	0x003aa004, 0x009c399b, 0x00328300, 0x00d0931e, 0x00a2090e, 0x00ff1000,
+	0x007f2c61, 0x00ff3000, 0x005f0200, 0x00500a00, 0x009c19a8, 0x00fa0000,
+	0x00ab090b, 0x004220fe, 0x00a8090f, 0x00b0290e, 0x0075bcca, 0x009819b3,
+	0x00d00090, 0x00d00090, 0x00500f00, 0x00355001, 0x008c39b0, 0x0075bcc2,
+	0x009819ba, 0x00d00090, 0x00d00090, 0x00b2f800, 0x00355001, 0x008c39b7,
+	0x00b0090b, 0x0002073c, 0x00010a3c, 0x00ed09bf, 0x008c0522, 0x00a5090e,
+	0x009819d4, 0x00ff2000, 0x0045500f, 0x00d00090, 0x00d00090, 0x004bf080,
+	0x00555b00, 0x00a4090c, 0x009819cc, 0x00d00090, 0x00b0590e, 0x00d09d14,
+	0x00755c41, 0x00d00090, 0x003505fc, 0x00155003, 0x00350500, 0x001bb500,
+	0x00d00090, 0x00b2b800, 0x00b0890f, 0x00d0351d, 0x00a2090e, 0x00ff1000,
+	0x007f2c61, 0x00ff3000, 0x005f0200, 0x00500a00, 0x009c19de, 0x00fa0000,
+	0x004220fe, 0x00a8090f, 0x00b0290e, 0x00eb09e7, 0x007c1c64, 0x002ccb00,
+	0x00ab090b, 0x00a20908, 0x00840c00, 0x00d0a018, 0x00d09f1f, 0x00d09f1b,
+	0x00d09f16, 0x00d09f11, 0x00ec09ed, 0x00d00008, 0x00b2f800, 0x003bb020,
+	0x00d0a111, 0x00ec09f2, 0x00d00004, 0x00b2f800, 0x003bb010, 0x00d0a111,
+	0x00ec09f7, 0x00d00002, 0x00b2f800, 0x003bb008, 0x00d0a111, 0x00ec09fc,
+	0x00b2f800, 0x003bb004, 0x00d0a111, 0x00ec0a00, 0x00122030, 0x0072f210,
+	0x003bb002, 0x008c1a11, 0x00d00090, 0x00d00090, 0x00b22800, 0x00d0a111,
+	0x00ec0a09, 0x00122038, 0x0072f118, 0x003bb001, 0x008c1a11, 0x00d00090,
+	0x00d00090, 0x00b22800, 0x00d0a111, 0x00a50aec, 0x00355700, 0x00801c00,
+	0x00b02908, 0x00b0b90b, 0x00500b00, 0x009c1a1c, 0x0002073c, 0x00010a3c,
+	0x00ed0a1c, 0x008c0522, 0x00a5090e, 0x00981a31, 0x00ff2000, 0x00d00090,
+	0x00d00090, 0x0045500f, 0x004bf080, 0x00a4090c, 0x00981a29, 0x00555b00,
+	0x00d00090, 0x00b0590e, 0x00d0a311, 0x00755c41, 0x00d00090, 0x003505fc,
+	0x00155003, 0x00350500, 0x001bb500, 0x00d00090, 0x00b2b800, 0x00b0890f,
+	0x00d0351d, 0x00f50000, 0x00500a00, 0x009c1a37, 0x00f00000, 0x00ec04e0,
+	0x00a7090b, 0x00a50c0a, 0x007d7ca3, 0x00ab0c00, 0x00a20c01, 0x00a40c02,
+	0x00a10c03, 0x00a70c08, 0x009c3a4a, 0x00e700c0, 0x00ab0c04, 0x00a20c05,
+	0x00a40c06, 0x00a10c07, 0x00b0bc00, 0x00b02c01, 0x00b04c02, 0x00b01c03,
+	0x00377001, 0x00a30908, 0x00a60909, 0x00b07c08, 0x0048f500, 0x004af500,
+	0x00783880, 0x007a6880, 0x0078b021, 0x007a4021, 0x001bb03f, 0x0014403f,
+	0x007b203f, 0x0074103f, 0x00a6090f, 0x0011103f, 0x00d00090, 0x00b28600,
+	0x00b2a600, 0x0012203f, 0x00b0690f, 0x003dd001, 0x008c1a3f, 0x00b0bc00,
+	0x00b02c01, 0x00b04c02, 0x00b01c03, 0x00b0090b, 0x00d04c1c, 0x00d77040,
+	0x00e10560, 0x007b7484, 0x002bb100, 0x00d00090, 0x00a40b0b, 0x009c1a99,
+	0x00d00090, 0x00a10b0f, 0x00a80b03, 0x00d91070, 0x00a50b01, 0x002009e0,
+	0x009c2a99, 0x00d00090, 0x00ea0004, 0x00a90b0c, 0x00883a99, 0x00329020,
+	0x008c2a7c, 0x007a9c43, 0x00715c3b, 0x00981a81, 0x00f40000, 0x00992a99,
+	0x00d0a813, 0x00f00000, 0x00991a99, 0x00ed0a85, 0x008c0512, 0x00981a99,
+	0x00e40a33, 0x007445f0, 0x00544730, 0x00755c2f, 0x00b04300, 0x00e10000,
+	0x00a30b06, 0x00725037, 0x00211008, 0x005f2031, 0x004f80f8, 0x00288300,
+	0x003aa001, 0x008c3a8e, 0x00399100, 0x00741500, 0x00b09b0c, 0x00b08b03,
+	0x00b04b0b, 0x00d00214, 0x00f50000, 0x00500a00, 0x009c1a9e, 0x00f00000,
+	0x00761d27, 0x00a40901, 0x00000f3c, 0x00366001, 0x009c1aa0, 0x00724ca0,
+	0x0030201f, 0x009c1aa7, 0x00724ca8, 0x00e60001, 0x00a8000b, 0x001b6200,
+	0x00568b00, 0x00e80001, 0x00b0600b, 0x00ab001b, 0x00188300, 0x006bb800,
+	0x00a70902, 0x00b0b01b, 0x009c3abf, 0x0001033c, 0x00b00902, 0x00b01eff,
+	0x00b02efe, 0x00b0aefd, 0x003ee003, 0x0002093c, 0x00ed0abc, 0x008c052b,
+	0x00aa1e01, 0x00a21e01, 0x00a11e01, 0x00010a3c, 0x00d04c1c, 0x00707cbb,
+	0x00981ac8, 0x0070bcbb, 0x00981ac8, 0x00702cbb, 0x00981ac8, 0x00840d00,
+	0x0076002f, 0x00840d00, 0x00707cbb, 0x00981acf, 0x00702cbb, 0x00981acf,
+	0x00840d00, 0x0076002f, 0x00840d00
+};
+
+
+
+static struct stm_plat_fdma_fw stm_fdma_firmware_7200 = {
+	.name = "fdma_7200.fw",
+	.fw_regs = {
+		.rev_id    = 0x8000 + (0x000 << 2), /* 0x8000 */
+		.cmd_statn = 0x8000 + (0x450 << 2), /* 0x9140 */
+		.req_ctln  = 0x8000 + (0x460 << 2), /* 0x9180 */
+		.ptrn      = 0x8000 + (0x560 << 2), /* 0x9580 */
+		.cntn      = 0x8000 + (0x562 << 2), /* 0x9588 */
+		.saddrn    = 0x8000 + (0x563 << 2), /* 0x958c */
+		.daddrn    = 0x8000 + (0x564 << 2), /* 0x9590 */
+	},
+	.dmem = stm_fdma_firmware_7200_dmem,
+	.dmem_len = sizeof(stm_fdma_firmware_7200_dmem),
+	.imem = stm_fdma_firmware_7200_imem,
+	.imem_len = sizeof(stm_fdma_firmware_7200_imem),
+};
+
+
+
+#endif
diff --git a/include/linux/stm/soc.h b/include/linux/stm/soc.h
index 9b4d33b..569a907 100644
--- a/include/linux/stm/soc.h
+++ b/include/linux/stm/soc.h
@@ -326,6 +326,66 @@ struct usb_init_data {
 #define USB1_PWR_PIO14_7	(1<<1)
 #endif
 
+
+
+/*** FDMA platform data ***/
+
+struct stm_plat_fdma_slim_regs {
+	unsigned long id;
+	unsigned long ver;
+	unsigned long en;
+	unsigned long clk_gate;
+};
+
+struct stm_plat_fdma_periph_regs {
+	unsigned long sync_reg;
+	unsigned long cmd_sta;
+	unsigned long cmd_set;
+	unsigned long cmd_clr;
+	unsigned long cmd_mask;
+	unsigned long int_sta;
+	unsigned long int_set;
+	unsigned long int_clr;
+	unsigned long int_mask;
+};
+
+struct stm_plat_fdma_hw {
+	struct stm_plat_fdma_slim_regs slim_regs;
+	struct stm_plat_fdma_periph_regs periph_regs;
+	unsigned long dmem_offset;
+	unsigned long dmem_size;
+	unsigned long imem_offset;
+	unsigned long imem_size;
+};
+
+struct stm_plat_fdma_fw_regs {
+	unsigned long rev_id;
+	unsigned long cmd_statn;
+	unsigned long req_ctln;
+	unsigned long ptrn;
+	unsigned long cntn;
+	unsigned long saddrn;
+	unsigned long daddrn;
+};
+
+struct stm_plat_fdma_fw {
+	const char *name;
+	struct stm_plat_fdma_fw_regs fw_regs;
+	void *dmem;
+	unsigned long dmem_len;
+	void *imem;
+	unsigned long imem_len;
+};
+
+struct stm_plat_fdma_data {
+	struct stm_plat_fdma_hw *hw;
+	struct stm_plat_fdma_fw *fw;
+	int min_ch_num;
+	int max_ch_num;
+};
+
+
+
 struct stasc_uart_data {
 	struct {
 		unsigned char pio_port;
-- 
1.6.0.6

