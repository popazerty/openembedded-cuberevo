From 9aa408b495373e3720a7e961137b14c1d73e1b8a Mon Sep 17 00:00:00 2001
From: Francesco M. Virlinzi <francesco.virlinzi@st.com>
Date: Fri, 13 Feb 2009 08:09:35 +0100
Subject: [PATCH] sh_stm: Sysconf Update

Updated sysconf_claim/sysconf_release functions
Add an entry under /proc to show the sysconf list
Add sysconf_address/syscond_mask to support PM core code
Add PM support

Signed-off-by: Francesco M. Virlinzi <francesco.virlinzi@st.com>
---
 drivers/stm/sysconf.c       |  239 ++++++++++++++++++++++++++++++++++++++-----
 include/linux/stm/sysconf.h |   17 +++
 2 files changed, 231 insertions(+), 25 deletions(-)

diff --git a/drivers/stm/sysconf.c b/drivers/stm/sysconf.c
index 438c13f..3a85c74 100644
--- a/drivers/stm/sysconf.c
+++ b/drivers/stm/sysconf.c
@@ -10,9 +10,14 @@
 #include <linux/platform_device.h>
 #include <linux/stm/soc.h>
 #include <linux/stm/sysconf.h>
-
+#include <linux/list.h>
 #include <asm/io.h>
 
+#ifdef CONFIG_PROC_FS
+#include <linux/proc_fs.h>
+#include <linux/seq_file.h>
+#endif
+
 #define DRIVER_NAME "sysconf"
 
 struct sysconf_field {
@@ -26,16 +31,32 @@ static void __iomem *sysconf_base;
 static int sysconf_offsets[3];
 static DEFINE_SPINLOCK(sysconf_lock);
 static LIST_HEAD(sysconf_fields);
+static struct platform_device *sysconf_pdev;
 
 /* We need a small stash of allocations before kmalloc becomes available */
-#define NUM_EARLY_FIELDS 50
+#define NUM_EARLY_FIELDS 64
+#define EARLY_BITS_MAPS_SIZE	DIV_ROUND_UP(NUM_EARLY_FIELDS, 32)
 static struct sysconf_field early_fields[NUM_EARLY_FIELDS];
-static int next_early_field = 0;
+static unsigned long early_fields_map[EARLY_BITS_MAPS_SIZE];
 
 static struct sysconf_field* field_alloc(void)
 {
-	if (next_early_field < NUM_EARLY_FIELDS)
-		return &early_fields[next_early_field++];
+	int bank;
+	int first_free;
+	struct sysconf_field *tmp;
+
+	for (bank = 0; bank < ARRAY_SIZE(early_fields_map); ++bank) {
+		first_free = ffz(early_fields_map[bank]);
+		if (first_free < 32)
+			break;
+	}
+	if (first_free < 32) { /* found! */
+		spin_lock(&sysconf_lock);
+		early_fields_map[bank] |= (1 << (first_free)); /* set as used!*/
+		spin_unlock(&sysconf_lock);
+		tmp = &early_fields[first_free  + (bank * 32)];
+		return tmp;
+	}
 
 	return kzalloc(sizeof(struct sysconf_field), GFP_KERNEL);
 }
@@ -43,37 +64,34 @@ static struct sysconf_field* field_alloc(void)
 struct sysconf_field* sysconf_claim(int regtype, int regnum, int lsb, int msb,
 				    const char *dev)
 {
-	struct sysconf_field *field, *new_field;
+	struct sysconf_field *field, *pfield = NULL;
+	struct list_head *node;
 	int offset = sysconf_offsets[regtype] + (regnum * 4);
 
+	field = field_alloc();
+	if (!field)
+		return NULL;
 
-#if 0
-	spin_lock(&sysconf_lock);
-
-	list_for_each(field, sysconf_fields) {
-		if (field->offset < offset)
+	list_for_each(node, &sysconf_fields) {
+		pfield = container_of(node, struct sysconf_field, list);
+		if (pfield->offset < offset)
 			continue;
-		if (field->offset > offset)
+		if (pfield->offset > offset)
 			break;
-		if (field->lsb > msb)
+		if (pfield->lsb > msb)
 			continue;
-		if (field->msb < lsb)
+		if (pfield->msb < lsb)
 			break;
-
 	}
 
-	/* Insert before field */
-	list_add_tail(new_field, field);
-#endif
-
-
-	field = field_alloc();
-	if (!field)
-		return NULL;
-
 	field->offset = offset;
 	field->lsb = lsb;
 	field->msb = msb;
+	field->dev = (char *)dev;
+
+	spin_lock(&sysconf_lock);
+	list_add_tail(&field->list, node);
+	spin_unlock(&sysconf_lock);
 
 	return field;
 }
@@ -81,7 +99,22 @@ EXPORT_SYMBOL(sysconf_claim);
 
 void sysconf_release(struct sysconf_field *field)
 {
-
+	if (field >= early_fields &&
+	    field <= &early_fields[NUM_EARLY_FIELDS]){
+		int bank, idx;
+		bank = (&early_fields[32] > field ? 0 : 1);
+		idx = ((unsigned long)field -(unsigned long)&early_fields[bank])
+			% sizeof(struct sysconf_field);
+		spin_lock(&sysconf_lock);
+		early_fields_map[bank] &= ~(1<<idx); /* set as free */
+		list_del(&field->list);
+		spin_unlock(&sysconf_lock);
+		return ;
+	}
+	spin_lock(&sysconf_lock);
+	list_del(&field->list);
+	spin_unlock(&sysconf_lock);
+	kfree(field);
 }
 EXPORT_SYMBOL(sysconf_release);
 
@@ -130,6 +163,58 @@ u64 sysconf_read(struct sysconf_field *field)
 }
 EXPORT_SYMBOL(sysconf_read);
 
+void *sysconf_address(struct sysconf_field *field)
+{
+	return sysconf_base + field->offset;
+}
+EXPORT_SYMBOL(sysconf_address);
+
+unsigned long sysconf_mask(struct sysconf_field *field)
+{
+	int field_bits = field->msb - field->lsb + 1;
+	if (field_bits == 32)
+		return 0xffffffff;
+	return ((1 << field_bits) -1) << field->lsb;
+}
+EXPORT_SYMBOL(sysconf_mask);
+
+#ifdef CONFIG_PM
+int sysconf_pm_state(pm_message_t state)
+{
+	unsigned long size, i;
+	static unsigned long prev_state = PM_EVENT_ON;
+	static long *saved_data;
+
+	size = sysconf_pdev->resource[0].end - sysconf_pdev->resource[0].start
+		- sysconf_offsets[SYS_CFG]; /* how many bytes I need */
+
+	switch (state.event) {
+	case PM_EVENT_ON:
+		if (prev_state == PM_EVENT_FREEZE && saved_data) {
+			for (i = 0; i < size; i += sizeof(long))
+				writel(saved_data[i/sizeof(long)],sysconf_base + i
+					+ sysconf_offsets[SYS_CFG]);
+			kfree(saved_data);
+		}
+	case PM_EVENT_SUSPEND:
+		prev_state = state.event;
+		break;
+	case PM_EVENT_FREEZE:
+		prev_state = state.event;
+		saved_data = kmalloc(size, GFP_NOWAIT);
+                if (!saved_data) {
+                        printk(KERN_ERR "Unable to freeze the sysconf registers\n");
+                        return -1;
+                }
+		for (i = 0; i < size; i += sizeof(long))
+			saved_data[i/sizeof(long)] = readl(sysconf_base + i +
+				sysconf_offsets[SYS_CFG]);
+		break;
+	}
+	return 0;
+}
+#endif
+
 /* This is called early to allow board start up code to use sysconf
  * registers (in particular console devices). */
 void __init sysconf_early_init(struct platform_device* pdev)
@@ -157,6 +242,103 @@ void __init sysconf_early_init(struct platform_device* pdev)
 	sysconf_offsets[SYS_CFG] = data->sys_cfg_offset;
 }
 
+#ifdef CONFIG_PROC_FS
+static void *sysconf_seq_next(struct seq_file *s, void *v, loff_t *pos)
+{
+	struct list_head *tmp;
+	union {
+		loff_t value;
+		long parts[2];
+	} ltmp;
+
+	ltmp.value = *pos;
+	tmp = (struct list_head *)ltmp.parts[0];
+	tmp = tmp->next;
+	ltmp.parts[0] = (long)tmp;
+
+	*pos = ltmp.value;
+
+	if (tmp == &sysconf_fields)
+		return NULL; /* No more to read */
+	return pos;
+}
+
+void *sysconf_seq_start(struct seq_file *s, loff_t *pos)
+{
+	if (!*pos) { /* first call! */
+		union {
+			loff_t value;
+			long parts[2];
+		} ltmp;
+		ltmp.parts[0] = (long) sysconf_fields.next;
+		*pos = ltmp. value;
+		seq_puts(s, "------System Registers-----\n");
+		seq_puts(s, " Type Num Bits    Owner\n");
+		seq_puts(s, "---------------------------\n");
+		return pos;
+	}
+	--(*pos); /* to realign *pos value! */
+
+	return sysconf_seq_next(s, NULL, pos);
+}
+
+static int sysconf_seq_show(struct seq_file *s, void *v)
+{
+	unsigned long *l = (unsigned long *)v;
+	struct list_head *tmp = (struct list_head *)(*l);
+	struct sysconf_field *field =
+			container_of(tmp, struct sysconf_field, list);
+	int type;
+
+	seq_printf(s, "+ ");
+	if (field->offset >= sysconf_offsets[SYS_CFG]) {
+		seq_printf(s, "Cfg ");
+		type = SYS_CFG;
+	} else if (field->offset >= sysconf_offsets[SYS_STA]) {
+		seq_printf(s, "Sta ");
+		type = SYS_STA;
+	 } else {
+		seq_printf(s, "Dev ");
+		type = SYS_DEV;
+	}
+
+	seq_printf(s, "%2d [%2d:%2d]",
+		(field->offset - sysconf_offsets[type])/4,
+		field->msb, field->lsb);
+
+	if (field->dev)
+		seq_printf(s, ": %s\n", field->dev);
+	else
+		seq_printf(s, "\n");
+
+	return 0;
+}
+
+static void sysconf_seq_stop(struct seq_file *s, void *v)
+{
+}
+
+static struct seq_operations sysconf_seq_ops = {
+	.start = sysconf_seq_start,
+	.next = sysconf_seq_next,
+	.stop = sysconf_seq_stop,
+	.show = sysconf_seq_show,
+};
+
+static int sysconf_proc_open(struct inode *inode, struct file *file)
+{
+	return seq_open(file, &sysconf_seq_ops);
+}
+
+static struct file_operations sysconf_proc_ops = {
+	.owner = THIS_MODULE,
+	.open = sysconf_proc_open,
+	.read = seq_read,
+	.llseek = seq_lseek,
+	.release = seq_release,
+};
+#endif
+
 static int __init sysconf_probe(struct platform_device *pdev)
 {
 	int size = pdev->resource[0].end - pdev->resource[0].start + 1;
@@ -164,6 +346,7 @@ static int __init sysconf_probe(struct platform_device *pdev)
 	if (!request_mem_region(pdev->resource[0].start, size, pdev->name))
 		return -EBUSY;
 
+	sysconf_pdev = pdev;
 	/* Have we already been set up through sysconf_init? */
 	if (sysconf_base)
 		return 0;
@@ -189,6 +372,12 @@ static struct platform_driver sysconf_driver = {
 
 static int __init sysconf_init(void)
 {
+#ifdef CONFIG_PROC_FS
+	struct proc_dir_entry *entry =
+		create_proc_entry("sysconf", S_IRUGO, NULL);
+	if (entry)
+		entry->proc_fops = &sysconf_proc_ops;
+#endif
 	return platform_driver_register(&sysconf_driver);
 }
 
diff --git a/include/linux/stm/sysconf.h b/include/linux/stm/sysconf.h
index 92e6d86..e631f73 100644
--- a/include/linux/stm/sysconf.h
+++ b/include/linux/stm/sysconf.h
@@ -60,6 +60,23 @@ void sysconf_write(struct sysconf_field *field, u64 value);
  */
 u64 sysconf_read(struct sysconf_field *field);
 
+/*
+ * sysconf_address: Return the address memory of sysconfig register
+ * @field: the sysconfig field to return
+ *
+ * This returns the address memory of sysconfig register
+ * @field must have been claimed using sysconf_claim().
+ */
+void *sysconf_address(struct sysconf_field *field);
+/*
+ * sysconf_mask: Return the bitmask of sysconfig register
+ * @field: the sysconfig field to return
+ *
+ * This returns the bitmask of sysconfig register
+ * @field must have been claimed using sysconf_claim().
+ */
+unsigned long sysconf_mask(struct sysconf_field *field);
+
 #define SYS_DEV 0
 #define SYS_STA 1
 #define SYS_CFG 2
-- 
1.5.6.3

