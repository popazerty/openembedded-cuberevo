This patch fixes the receive function, adds a new experimental optimization
based on sw timers.
It also adds some fixes for the Gmac and reviews the HW setup.

Signed-off-by: Giuseppe Cavallaro <peppe.cavallaro@st.com>

--- linux.orig/drivers/net/Kconfig	2008-04-17 18:21:13.000000000 +0200
+++ linux/drivers/net/Kconfig	2008-04-15 13:59:38.539998000 +0200
@@ -2516,14 +2516,37 @@ config STMMAC_DA
 	  (rx:tx priority is 1:1).
 
 config STMMAC_TIMER
-	depends on STMMAC_ETH && RTC_CLASS && EXPERIMENTAL
+	depends on STMMAC_ETH
 	bool "STMMAC Timer optimization (EXPERIMENTAL)"
 	default n
 	---help---
+		Timers-Driven Interrupts.
+
+choice
+        prompt "Select timer optimization"
+        depends on STMMAC_ETH && STMMAC_TIMER
+        default no
+	---help---
+
+config STMMAC_RTC_TIMER
+        bool "Real time clock to handle the reception"
+        depends on STMMAC_TIMER && RTC_CLASS && EXPERIMENTAL
+	---help---
 	  Real time clock device generates an interrupt at regular 
 	  intervals in order to notify the Ethernet driver about frame 
 	  receptions.
 
+config STMMAC_SW_TIMER
+        bool "Kernel timers to handle tx/rx processes"
+        depends on STMMAC_TIMER
+	---help---
+	   Kernel timer is used for handling both the transmission
+	   and the reception processes. This optimization can be 
+	   used for incrementing performance and saving the CPU
+	   utilization.
+
+endchoice
+
 endif # NETDEV_1000
 
 #
diff -uprN -X linux/Documentation/dontdiff linux.orig/drivers/net/stmmac/common.h linux/drivers/net/stmmac/common.h
--- linux.orig/drivers/net/stmmac/common.h	2008-04-17 18:21:13.000000000 +0200
+++ linux/drivers/net/stmmac/common.h	2008-04-15 13:59:24.799998000 +0200
@@ -80,8 +80,6 @@
 #define DMA_STATUS_TPS	0x00000002	/* Transmit Process Stopped */
 #define DMA_STATUS_TI	0x00000001	/* Transmit Interrupt */
 
-#define DMA_BUFFER_SIZE	2048
-
 /* Other defines */
 #define HASH_TABLE_SIZE 64
 #define PAUSE_TIME 0x200
@@ -188,12 +186,14 @@ struct device_ops {
 			  dma_desc * p, unsigned long ioaddr);
 	int (*rx_status) (void *data, struct stmmac_extra_stats * x,
 			  dma_desc * p);
+	int (*get_tx_len) (dma_desc * p); /* Get the frm len */
 	void (*tx_checksum) (struct sk_buff * skb, dma_desc * p);
 	int (*rx_checksum) (dma_desc * p);
 	void (*set_filter) (struct net_device * dev);
 	void (*flow_ctrl) (unsigned long ioaddr, unsigned int duplex,
 			   unsigned int fc, unsigned int pause_time);
 	void (*pmt) (unsigned long ioaddr, unsigned long mode);
+	void (*host_irq_status) (unsigned long ioaddr);
 };
 
 struct mac_link_t {
@@ -207,17 +207,18 @@ struct mii_regs_t {
 	unsigned int data;	/* MII Data */
 };
 
-struct mac_regs_t {
+struct hw_cap_t {
 	unsigned int addr_high;	/* Multicast Hash Table High */
 	unsigned int addr_low;	/* Multicast Hash Table Low */
 	unsigned int version;	/* Core Version register (GMAC) */
 	unsigned int pmt;	/* Power-Down mode (GMAC) */
 	unsigned int csum;	/* Checksum Offload */
+	unsigned int buf_size;	/* Buffer size */
 	struct mac_link_t link;
 	struct mii_regs_t mii;
 };
 
 struct device_info_t {
-	struct mac_regs_t hw;
+	struct hw_cap_t hw;
 	struct device_ops *ops;
 };
diff -uprN -X linux/Documentation/dontdiff linux.orig/drivers/net/stmmac/gmac.c linux/drivers/net/stmmac/gmac.c
--- linux.orig/drivers/net/stmmac/gmac.c	2008-04-17 18:21:13.000000000 +0200
+++ linux/drivers/net/stmmac/gmac.c	2008-04-15 13:59:24.850000000 +0200
@@ -40,12 +40,13 @@ static void gmac_dump_regs(unsigned long
 	       (unsigned int)ioaddr);
 
 	for (i = 0; i < 55; i++) {
-		if ((i < 12) || (i > 15)) {
-			int offset = i * 4;
-			printk("\tReg No. %d (offset 0x%x): 0x%08x\n", i,
-			       offset, readl(ioaddr + offset));
-		}
-	}
+		int offset = i * 4;
+		printk("\tReg No. %d (offset 0x%x): 0x%08x\n", i,
+		       offset, readl(ioaddr + offset));
+	}
+	printk("\tSTBus brigde: reg: 0x%x, 0x%08x\n",
+		(unsigned int)(ioaddr + STBUS_BRIDGE_OFFSET),
+		readl(ioaddr + STBUS_BRIDGE_OFFSET));
 	return;
 }
 
@@ -61,8 +62,9 @@ static int gmac_dma_init(unsigned long i
 	}
 
 	/* Enable Application Access by writing to DMA CSR0 */
-	value = DMA_BUS_MODE_4PBL | ((pbl << DMA_BUS_MODE_PBL_SHIFT) |
-				     (pbl << DMA_BUS_MODE_RPBL_SHIFT));
+	value = /* DMA_BUS_MODE_FB | */DMA_BUS_MODE_4PBL |
+		((pbl << DMA_BUS_MODE_PBL_SHIFT) |
+		(pbl << DMA_BUS_MODE_RPBL_SHIFT));
 
 #ifdef CONFIG_STMMAC_DA
 	value |= DMA_BUS_MODE_DA;	/* Rx has priority over tx */
@@ -230,6 +232,11 @@ static int gmac_get_tx_frame_status(void
 	return (ret);
 }
 
+static int gmac_get_tx_len(dma_desc * p)
+{
+	return (p->des01.etx.buffer1_size);
+}
+
 static int gmac_get_rx_frame_status(void *data, struct stmmac_extra_stats *x,
 				    dma_desc * p)
 {
@@ -285,6 +292,38 @@ static int gmac_get_rx_frame_status(void
 	return (ret);
 }
 
+/* It is necessary to handle other events (e.g.  power management interrupt) */
+static void gmac_irq_status(unsigned long ioaddr)
+{
+	unsigned int intr_status;
+
+        intr_status = (unsigned int)readl(ioaddr + GMAC_INT_STATUS);
+
+	/* Do not handle all the events, e.g. MMC interrupts 
+         * (not used by default). Indeed, to "clear" these events 
+	 * we should read the register that generated the interrupt.
+	 */
+	if ((intr_status & mmc_tx_irq)) {
+		printk("GMAC: MMC tx interrupt: 0x%08x\n",
+			readl(ioaddr + GMAC_MMC_TX_INTR));
+	}
+	if (unlikely(intr_status & mmc_rx_irq)) {
+		printk("GMAC: MMC rx interrupt: 0x%08x\n",
+			readl(ioaddr + GMAC_MMC_RX_INTR));
+	}
+	if (unlikely(intr_status & mmc_rx_csum_offload_irq))
+		printk("GMAC: MMC rx csum offload: 0x%08x\n",
+			readl(ioaddr + GMAC_MMC_RX_CSUM_OFFLOAD));
+	if (unlikely(intr_status & pmt_irq)){
+		printk(KERN_DEBUG "GMAC: received Magic frame\n");
+		/* clear the PMT bits 5 and 6 by reading the PMT
+		 * status register. */
+		readl(ioaddr + GMAC_PMT);
+	}
+
+	return;
+}
+
 static int gmac_rx_checksum(dma_desc * p)
 {
 	int ret = 0;
@@ -314,6 +353,12 @@ static void gmac_core_init(unsigned long
 #if defined(CONFIG_VLAN_8021Q) || defined(CONFIG_VLAN_8021Q_MODULE)
 	writel(ETH_P_8021Q, ioaddr + GMAC_VLAN);
 #endif
+	/* STBus Bridge Configuration */
+	writel(STBUS_BRIDGE_MAGIC, ioaddr + STBUS_BRIDGE_OFFSET);
+	/* Freeze MMC counters */
+	writel(0x8, ioaddr + GMAC_MMC_CTRL);
+	/* Mask GMAC interrupts */
+	writel(0x207, ioaddr + GMAC_INT_MASK);
 
 	return;
 }
@@ -395,8 +440,10 @@ static void gmac_pmt(unsigned long ioadd
 	unsigned int pmt = power_down;
 
 	if (mode == WAKE_MAGIC) {
+		DBG(KERN_DEBUG "GMAC: WOL Magic frame\n");
 		pmt |= magic_pkt_en;
 	} else if (mode == WAKE_UCAST) {
+		DBG(KERN_DEBUG "GMAC: WOL on global unicast\n");
 		pmt |= global_unicast;
 	}
 
@@ -503,6 +550,7 @@ struct device_ops gmac_driver = {
 	.dma_diagnostic_fr = gmac_dma_diagnostic_fr,
 	.tx_status = gmac_get_tx_frame_status,
 	.rx_status = gmac_get_rx_frame_status,
+	.get_tx_len = gmac_get_tx_len,
 	.rx_checksum = gmac_rx_checksum,
 	.set_filter = gmac_set_filter,
 	.flow_ctrl = gmac_flow_ctrl,
@@ -519,6 +567,7 @@ struct device_ops gmac_driver = {
 	.set_tx_owner = gmac_set_tx_owner,
 	.set_rx_owner = gmac_set_rx_owner,
 	.get_rx_frame_len = gmac_get_rx_frame_len,
+	.host_irq_status = gmac_irq_status,
 };
 
 struct device_info_t *gmac_setup(unsigned long ioaddr)
@@ -540,6 +589,7 @@ struct device_info_t *gmac_setup(unsigne
 #else
 	mac->hw.csum = NO_HW_CSUM;
 #endif
+	mac->hw.buf_size = DMA_BUFFER_SIZE;
 	mac->hw.addr_high = GMAC_ADDR_HIGH;
 	mac->hw.addr_low = GMAC_ADDR_LOW;
 	mac->hw.link.port = GMAC_CONTROL_PS;
diff -uprN -X linux/Documentation/dontdiff linux.orig/drivers/net/stmmac/gmac.h linux/drivers/net/stmmac/gmac.h
--- linux.orig/drivers/net/stmmac/gmac.h	2008-04-17 18:21:13.000000000 +0200
+++ linux/drivers/net/stmmac/gmac.h	2008-04-15 13:59:24.880002000 +0200
@@ -16,11 +16,22 @@
 /* GMAC ID */
 #define GMAC_VERSION	0x00000020	/* GMAC CORE Version */
 #define GMAC_INT_STATUS	0x00000038	/* interrupt status register */
-#define GMAC_INT_MASK	0x0000003c	/* interrupt status register */
+enum gmac_irq_status{
+        time_stamp_irq = 0x0200,
+        mmc_rx_csum_offload_irq = 0x0080,
+        mmc_tx_irq = 0x0040,
+        mmc_rx_irq= 0x0020,
+        mmc_irq= 0x0010,
+        pmt_irq= 0x0008,
+        pcs_ane_irq= 0x0004,
+        pcs_link_irq= 0x0002,
+        rgmii_irq= 0x0001,
+};
+#define GMAC_INT_MASK	0x0000003c	/* interrupt mask register */
 
 #define GMAC_WAKEUP_FILTER       0x00000028      /* Wake-up Frame Filter */
 
-/* PMT Control and Statu */
+/* PMT Control and Status */
 #define GMAC_PMT                 0x0000002c
 enum power_event{
 	pointer_reset  = 0x80000000,
@@ -172,8 +183,19 @@ enum rtc_control {
 
 #define DMA_CONTROL_OSF	0x00000004	/* operate on second frame */
 
+/* MMC registers offset */
+#define GMAC_MMC_CTRL      0x100
+#define GMAC_MMC_RX_INTR   0x104
+#define GMAC_MMC_TX_INTR   0x108
+#define GMAC_MMC_RX_CSUM_OFFLOAD   0x208
+
 /* Transmit COE type 2 cannot be done in cut-through mode */
 #undef GMAC_TX_STORE_AND_FORWARD
 #define GMAC_TX_STORE_AND_FORWARD
 #undef GMAC_RX_STORE_AND_FORWARD
 /*#define GMAC_RX_STORE_AND_FORWARD*/
+
+#define STBUS_BRIDGE_OFFSET	0x00007000
+#define STBUS_BRIDGE_MAGIC	0x25C608 /* from validation */
+
+#define DMA_BUFFER_SIZE	8192 /* To support Jumbo */
diff -uprN -X linux/Documentation/dontdiff linux.orig/drivers/net/stmmac/mac100.c linux/drivers/net/stmmac/mac100.c
--- linux.orig/drivers/net/stmmac/mac100.c	2008-04-17 18:21:13.000000000 +0200
+++ linux/drivers/net/stmmac/mac100.c	2008-04-15 13:59:24.930000000 +0200
@@ -2,7 +2,7 @@
  * drivers/net/stmmac/mac100.c
  *
  * This is a driver for the MAC 10/100 on-chip
- * Ethernet controller currently present on STb7109.
+ * Ethernet controller currently present on STb7109 and 7200 SoCs.
  *
  * Copyright (C) 2007 by STMicroelectronics
  * Author: Giuseppe Cavallaro <peppe.cavallaro@st.com>
@@ -23,12 +23,17 @@
 #include "common.h"
 #include "mac100.h"
 
+#undef MAC100_DEBUG
+/*#define MAC100_DEBUG*/
+#ifdef MAC100_DEBUG
+#define DBG(fmt,args...)  printk(fmt, ## args)
+#else
+#define DBG(fmt, args...)  do { } while(0)
+#endif
 static void mac100_core_init(unsigned long ioaddr)
 {
 	unsigned int value = 0;
 
-	printk(KERN_DEBUG "mac100_core_init");
-
 	/* Set the MAC control register with our default value */
 	value = (unsigned int)readl(ioaddr + MAC_CONTROL);
 	writel((value | MAC_CORE_INIT), ioaddr + MAC_CONTROL);
@@ -82,8 +87,6 @@ static int mac100_dma_init(unsigned long
 {
 	unsigned int value;
 
-	printk(KERN_DEBUG "GMAC: DMA Core setup\n");
-
 	/* DMA SW reset */
 	value = (unsigned int)readl(ioaddr + DMA_BUS_MODE);
 	value |= DMA_BUS_MODE_SFT_RESET;
@@ -129,15 +132,15 @@ static void mac100_dump_dma_regs(unsigne
 {
 	int i;
 
-	printk(KERN_DEBUG "MAC100 DMA CSR \n");
+	DBG(KERN_DEBUG "MAC100 DMA CSR \n");
 	for (i = 0; i < 9; i++) {
 		printk(KERN_DEBUG "\t CSR%d (offset 0x%x): 0x%08x\n", i,
 		       (DMA_BUS_MODE + i * 4),
 		       readl(ioaddr + DMA_BUS_MODE + i * 4));
 	}
-	printk(KERN_DEBUG "\t CSR20 (offset 0x%x): 0x%08x\n",
+	DBG(KERN_DEBUG "\t CSR20 (offset 0x%x): 0x%08x\n",
 	       DMA_CUR_TX_BUF_ADDR, readl(ioaddr + DMA_CUR_TX_BUF_ADDR));
-	printk(KERN_DEBUG "\t CSR21 (offset 0x%x): 0x%08x\n",
+	DBG(KERN_DEBUG "\t CSR21 (offset 0x%x): 0x%08x\n",
 	       DMA_CUR_RX_BUF_ADDR, readl(ioaddr + DMA_CUR_RX_BUF_ADDR));
 	return;
 }
@@ -214,6 +217,12 @@ static int mac100_get_tx_frame_status(vo
 	return (ret);
 }
 
+static int mac100_get_tx_len(dma_desc * p)
+{
+	return (p->des01.tx.buffer1_size);
+}
+
+
 /* This function verifies if the incoming frame has some errors 
  * and, if required, updates the multicast statistics. */
 static int mac100_get_rx_frame_status(void *data, struct stmmac_extra_stats *x,
@@ -266,11 +275,16 @@ static int mac100_get_rx_frame_status(vo
 	if (p->des01.rx.multicast_frame) {
 		x->rx_multicast++;
 		stats->multicast++;
-		/*no error!*/
+		/* no error! */
 	}
 	return (ret);
 }
 
+static void mac100_irq_status(unsigned long ioaddr)
+{
+	return;
+}
+
 static int mac100_rx_checksum(dma_desc * p)
 {
 	/* The device is not able to compute the csum in HW. */
@@ -324,7 +338,7 @@ static void mac100_set_filter(struct net
 
 	writel(value, ioaddr + MAC_CONTROL);
 
-	printk(KERN_DEBUG "%s: CTRL reg: 0x%08x Hash regs: "
+	DBG(KERN_INFO "%s: CTRL reg: 0x%08x Hash regs: "
 	       "HI 0x%08x, LO 0x%08x\n",
 	       __FUNCTION__, readl(ioaddr + MAC_CONTROL),
 	       readl(ioaddr + MAC_HASH_HIGH), readl(ioaddr + MAC_HASH_LOW));
@@ -446,6 +460,7 @@ struct device_ops mac100_driver = {
 	.dma_diagnostic_fr = mac100_dma_diagnostic_fr,
 	.tx_status = mac100_get_tx_frame_status,
 	.rx_status = mac100_get_rx_frame_status,
+	.get_tx_len = mac100_get_tx_len,
 	.rx_checksum = mac100_rx_checksum,
 	.set_filter = mac100_set_filter,
 	.flow_ctrl = mac100_flow_ctrl,
@@ -462,6 +477,7 @@ struct device_ops mac100_driver = {
 	.set_tx_owner = mac100_set_tx_owner,
 	.set_rx_owner = mac100_set_rx_owner,
 	.get_rx_frame_len = mac100_get_rx_frame_len,
+	.host_irq_status = mac100_irq_status,
 };
 
 struct device_info_t *mac100_setup(unsigned long ioaddr)
@@ -475,6 +491,7 @@ struct device_info_t *mac100_setup(unsig
 
 	mac->ops = &mac100_driver;
 	mac->hw.pmt = PMT_NOT_SUPPORTED;
+	mac->hw.buf_size = DMA_BUFFER_SIZE;
 	mac->hw.csum = NO_HW_CSUM;
 	mac->hw.addr_high = MAC_ADDR_HIGH;
 	mac->hw.addr_low = MAC_ADDR_LOW;
diff -uprN -X linux/Documentation/dontdiff linux.orig/drivers/net/stmmac/mac100.h linux/drivers/net/stmmac/mac100.h
--- linux.orig/drivers/net/stmmac/mac100.h	2008-04-17 18:21:13.000000000 +0200
+++ linux/drivers/net/stmmac/mac100.h	2008-04-15 13:59:24.949999000 +0200
@@ -101,3 +101,5 @@ enum ttc_control {
 #define DMA_MISSED_FRAME_OVE_CNTR 0x0ffe0000	/* Overflow Frame Counter */
 #define DMA_MISSED_FRAME_OVE_M	0x00010000	/* Missed Frame Overflow */
 #define DMA_MISSED_FRAME_M_CNTR	0x0000ffff	/* Missed Frame Couinter */
+
+#define DMA_BUFFER_SIZE	2048
diff -uprN -X linux/Documentation/dontdiff linux.orig/drivers/net/stmmac/Makefile linux/drivers/net/stmmac/Makefile
--- linux.orig/drivers/net/stmmac/Makefile	2008-04-17 18:21:13.000000000 +0200
+++ linux/drivers/net/stmmac/Makefile	2008-04-15 14:35:19.179999000 +0200
@@ -1,4 +1,4 @@
 obj-$(CONFIG_STMMAC_ETH) += stmmac.o 
-obj-$(CONFIG_STMMAC_TIMER) += stmmac_timer.o 
+stmmac-$(CONFIG_STMMAC_RTC_TIMER) += stmmac_timer.o 
 stmmac-objs:= stmmac_main.o stmmac_ethtool.o stmmac_mdio.o \
-		mac100.o  gmac.o
+		mac100.o  gmac.o $(stmmac-y)
diff -uprN -X linux/Documentation/dontdiff linux.orig/drivers/net/stmmac/stmmac_ethtool.c linux/drivers/net/stmmac/stmmac_ethtool.c
--- linux.orig/drivers/net/stmmac/stmmac_ethtool.c	2008-04-17 18:21:13.000000000 +0200
+++ linux/drivers/net/stmmac/stmmac_ethtool.c	2008-04-15 13:59:25.029998000 +0200
@@ -234,7 +234,7 @@ static struct {
 	"tx_payload_error"}, {
 	"tx_ip_header_error"}, {
 	"rx_missed_cntr"}, {
-"rx_overflow_cntr"},};
+	"rx_overflow_cntr"},};
 
 static int stmmac_stats_count(struct net_device *dev)
 {
diff -uprN -X linux/Documentation/dontdiff linux.orig/drivers/net/stmmac/stmmac.h linux/drivers/net/stmmac/stmmac.h
--- linux.orig/drivers/net/stmmac/stmmac.h	2008-04-17 18:21:13.000000000 +0200
+++ linux/drivers/net/stmmac/stmmac.h	2008-04-15 13:59:25.069999000 +0200
@@ -1,6 +1,6 @@
 #define ETH_RESOURCE_NAME	"stmmaceth"
 #define PHY_RESOURCE_NAME	"stmmacphy"
-#define DRV_MODULE_VERSION	"March_08"
+#define DRV_MODULE_VERSION	"April_08"
 
 #if defined(CONFIG_VLAN_8021Q) || defined(CONFIG_VLAN_8021Q_MODULE)
 #define STMMAC_VLAN_TAG_USED
@@ -56,6 +56,6 @@ struct eth_driver_local {
 	int wolopts;
 	int wolenabled;
 	int tx_aggregation;
-	int max_refill_threshold;
 	int has_timer;
+	struct timer_list timer;
 };
diff -uprN -X linux/Documentation/dontdiff linux.orig/drivers/net/stmmac/stmmac_main.c linux/drivers/net/stmmac/stmmac_main.c
--- linux.orig/drivers/net/stmmac/stmmac_main.c	2008-04-17 18:21:13.000000000 +0200
+++ linux/drivers/net/stmmac/stmmac_main.c	2008-04-15 14:30:03.860004000 +0200
@@ -11,6 +11,11 @@
  * ----------------------------------------------------------------------------
  *
  * Changelog:
+ * April 2008:
+ *	- Added kernel timer for handling interrupts.
+ *	- Reviewed the GMAC HW configuration.
+ *	- Frozen GMAC MMC counters in order to handle related interrupts.
+ *	- Fixed a bug within the stmmac_rx function (wrong owner checking).
  * March 2008:
  *	- Added Rx timer optimization (also mitigated by using the normal
  *	  interrupt on completion). See stmmac_timer.c file.
@@ -132,28 +137,47 @@ static int threshold_ctrl = TTC_DEFAULT;
 module_param(threshold_ctrl, int, S_IRUGO);
 MODULE_PARM_DESC(threshold_ctrl, "tranfer threshold control");
 
-#ifdef CONFIG_STMMAC_TIMER
-/* Using timer optimization, it's worth having some interrupts on frame 
- * reception. That makes safe the network activity especially for TCP traffic.*/
-#define RX_IRQ_THRESHOLD 10
-/* Please pay attention to tune the timer irq frequency; take care of both RTC
- * hardware capability and network stabitily/performance impact. */
+#define STMMAC_NAPI
+
+#if defined (CONFIG_STMMAC_TIMER)
+#define RX_IRQ_THRESHOLD 16
+#else
+#define RX_IRQ_THRESHOLD 1 /* always Interrupt on completion */
+#endif
+
+/* Using timer optimizations, it's worth having some interrupts on frame 
+ * reception. This makes safe the network activity especially for the TCP 
+ * traffic.
+ * Note that it is possible to tune this value passing the "rxmit" option 
+ * into the kernel command line. */
+static int rx_irq_mitigation = RX_IRQ_THRESHOLD;
+module_param(rx_irq_mitigation, int, S_IRUGO);
+MODULE_PARM_DESC(rx_irq_mitigation, "Rx irq mitigation threshold");
+
+/* Pay attention to tune timer parameters; take care of both
+ * hardware capability and network stabitily/performance impact. 
+ * Many tests showed that ~4ms latency seems to be good enough. */
+#ifdef CONFIG_STMMAC_RTC_TIMER
 #define DEFAULT_PERIODIC_RATE	256
 static int periodic_rate = DEFAULT_PERIODIC_RATE;
 module_param(periodic_rate, int, S_IRUGO | S_IWUSR);
 MODULE_PARM_DESC(periodic_rate, "Timer periodic rate (default: 256Hz)");
-#else
-#define RX_IRQ_THRESHOLD 1
 #endif
-static int rx_irq_mitigation = RX_IRQ_THRESHOLD;	/* use it with timer on */
-module_param(rx_irq_mitigation, int, S_IRUGO);
-MODULE_PARM_DESC(rx_irq_mitigation, "Rx irq mitigation threshold");
+
+#ifdef CONFIG_STMMAC_SW_TIMER
+#undef STMMAC_NAPI
+static int sw_timer_msec = 4;
+module_param(sw_timer_msec, int, S_IRUGO | S_IWUSR);
+MODULE_PARM_DESC(sw_timer_msec, "Expiration time in msec");
+#define STMMAC_SW_TIMER_EXP (jiffies + msecs_to_jiffies(sw_timer_msec))
+#endif
 
 static const u32 default_msg_level = (NETIF_MSG_DRV | NETIF_MSG_PROBE |
 				      NETIF_MSG_LINK | NETIF_MSG_IFUP |
 				      NETIF_MSG_IFDOWN | NETIF_MSG_TIMER);
 
 static irqreturn_t stmmac_interrupt(int irq, void *dev_id);
+static int stmmac_rx(struct net_device *dev, int limit);
 
 extern struct ethtool_ops stmmac_ethtool_ops;
 extern struct device_info_t *gmac_setup(unsigned long addr);
@@ -161,7 +185,8 @@ extern struct device_info_t *mac100_setu
 extern int stmmac_mdio_unregister(struct net_device *ndev);
 extern int stmmac_mdio_register(struct net_device *ndev);
 extern int stmmac_mdio_reset(struct mii_bus *bus);
-#ifdef CONFIG_STMMAC_TIMER
+
+#ifdef CONFIG_STMMAC_RTC_TIMER
 extern int stmmac_timer_close(void);
 extern int stmmac_timer_stop(void);
 extern int stmmac_timer_start(unsigned int freq);
@@ -197,7 +222,7 @@ static __inline__ void stmmac_verify_arg
 	return;
 }
 
-#ifdef STMMAC_DEBUG
+#if defined (STMMAC_XMIT_DEBUG) || defined (STMMAC_RX_DEBUG)
 static __inline__ void print_pkt(unsigned char *buf, int len)
 {
 	int j;
@@ -535,7 +560,8 @@ static void init_dma_desc_rings(struct n
 
 		lp->rx_skbuff[i] = skb;
 		lp->rx_skbuff_dma[i] = dma_map_single(lp->device, skb->data,
-						      bfsize, DMA_FROM_DEVICE);
+						      lp->dma_buf_sz, 
+						      DMA_FROM_DEVICE);
 		p->des2 = lp->rx_skbuff_dma[i];
 		DBG(probe, DEBUG, "[0x%08x]\t[0x%08x]\n",
 		    (unsigned int)lp->rx_skbuff[i],
@@ -552,7 +578,8 @@ static void init_dma_desc_rings(struct n
 	lp->dirty_tx = lp->cur_tx = 0;
 
 	/* Clear the Rx/Tx descriptors */
-	lp->mac_type->ops->init_rx_desc(lp->dma_rx, rxsize, rx_irq_mitigation);
+	lp->mac_type->ops->init_rx_desc(lp->dma_rx, rxsize, 
+			rx_irq_mitigation);
 	lp->mac_type->ops->init_tx_desc(lp->dma_tx, txsize);
 
 	if (netif_msg_hw(lp)) {
@@ -599,7 +626,7 @@ static void dma_free_tx_skbufs(struct ne
 		if (lp->tx_skbuff[i] != NULL) {
 			if ((lp->dma_tx + i)->des2) {
 				dma_unmap_single(lp->device, p->des2,
-						 DMA_BUFFER_SIZE,
+						lp->mac_type->ops->get_tx_len(p),
 						 DMA_TO_DEVICE);
 			}
 			dev_kfree_skb_any(lp->tx_skbuff[i]);
@@ -692,7 +719,7 @@ static __inline__ void stmmac_dma_enable
 	return;
 }
 
-void stmmac_dma_disable_irq_rx(unsigned long ioaddr)
+static __inline__ void stmmac_dma_disable_irq_rx(unsigned long ioaddr)
 {
 	writel(DMA_INTR_NO_RX, ioaddr + DMA_INTR_ENA);
 	return;
@@ -785,7 +812,7 @@ static void show_rx_process_state(unsign
  * @dev: net device structure
  * Description: reclaim resources after transmit completes.
  */
-static __inline__ void stmmac_tx(struct net_device *dev)
+static void stmmac_tx(struct net_device *dev)
 {
 	struct eth_driver_local *lp = netdev_priv(dev);
 	unsigned int txsize = lp->dma_tx_size;
@@ -814,7 +841,8 @@ static __inline__ void stmmac_tx(struct 
 		    lp->dirty_tx);
 
 		if (likely(p->des2)) {
-			dma_unmap_single(lp->device, p->des2, DMA_BUFFER_SIZE,
+			dma_unmap_single(lp->device, p->des2,
+					 lp->mac_type->ops->get_tx_len(p),
 					 DMA_TO_DEVICE);
 		}
 		if (likely(lp->tx_skbuff[entry] != NULL)) {
@@ -862,6 +890,51 @@ static __inline__ void stmmac_tx_err(str
 }
 
 /**
+ * stmmac_schedule_rx: 
+ * @dev: net device structure
+ * Description: it schedules the reception process.
+ */
+void stmmac_schedule_rx(struct net_device *dev)
+{
+	stmmac_dma_disable_irq_rx(dev->base_addr);
+
+	if (likely(netif_rx_schedule_prep(dev))) {
+#ifdef CONFIG_STMMAC_RTC_TIMER
+		stmmac_timer_stop();
+#endif
+		__netif_rx_schedule(dev);
+	}
+
+	return;
+}
+
+#ifdef CONFIG_STMMAC_SW_TIMER
+/**
+ * stmmac_timer_handler: 
+ * @dev: net device structure
+ * Description: this is the software timer handler.
+ * It reclaims the transmit resources and schedules the reception process.
+ */
+static void stmmac_timer_handler(unsigned long data)
+{
+        struct net_device *dev = (struct net_device *)data;
+	struct eth_driver_local *lp = netdev_priv(dev);
+	unsigned long flags;
+
+	spin_lock_irqsave(&lp->lock, flags);
+
+	stmmac_tx(dev);
+	stmmac_rx(dev, lp->dma_rx_size);
+
+	mod_timer(&lp->timer, STMMAC_SW_TIMER_EXP);
+
+	spin_unlock_irqrestore(&lp->lock, flags);
+
+	return;
+}
+#endif
+
+/**
  * stmmac_dma_interrupt - Interrupt handler for the STMMAC DMA
  * @dev: net device structure
  * Description: it determines if we have to call either the Rx or the Tx
@@ -933,19 +1006,20 @@ static void stmmac_dma_interrupt(struct 
 	}
 
 	/* NORMAL interrupts */
-	if (likely(intr_status & DMA_STATUS_NIS)) {
+	if (intr_status & DMA_STATUS_NIS) {
 		DBG(intr, INFO, " CSR5[16]: DMA NORMAL IRQ: ");
-		if (likely(intr_status & DMA_STATUS_RI)) {
+		if (intr_status & DMA_STATUS_RI) {
 
 			RX_DBG("Receive irq [buf: 0x%08x]\n",
 			       readl(ioaddr + DMA_CUR_RX_BUF_ADDR));
 			lp->xstats.rx_irq_n++;
-			stmmac_dma_disable_irq_rx(ioaddr);
-			if (likely(netif_rx_schedule_prep(dev))) {
-				__netif_rx_schedule(dev);
-			}
+#ifdef STMMAC_NAPI
+			stmmac_schedule_rx(dev);
+#else
+			stmmac_rx(dev, lp->dma_rx_size);
+#endif
 		}
-		if (likely(intr_status & (DMA_STATUS_TI))) {
+		if (unlikely(intr_status & (DMA_STATUS_TI))) {
 			DBG(intr, INFO, " Transmit irq [buf: 0x%08x]\n",
 			    readl(ioaddr + DMA_CUR_TX_BUF_ADDR));
 			lp->xstats.tx_irq_n++;
@@ -988,11 +1062,11 @@ static int stmmac_enable(struct net_devi
 		       __FUNCTION__, dev->irq, ret);
 		return ret;
 	}
-#ifdef CONFIG_STMMAC_TIMER
+#ifdef CONFIG_STMMAC_RTC_TIMER
 	lp->has_timer = stmmac_timer_open(dev, periodic_rate);
 	if (unlikely(lp->has_timer < 0)) {
 		printk(KERN_WARNING "stmmac: timer opt disabled\n");
-		rx_irq_mitigation = 1;	/* always interrupt on completion */
+		rx_irq_mitigation = 1;
 	}
 #endif
 
@@ -1021,7 +1095,6 @@ static int stmmac_enable(struct net_devi
 
 	/* Extra statistics */
 	memset(&lp->xstats, 0, sizeof(struct stmmac_extra_stats));
-	lp->max_refill_threshold = 0;
 	lp->xstats.threshold = threshold_ctrl;
 
 	/* Estabish the tx/rx operating modes and commands */
@@ -1032,7 +1105,17 @@ static int stmmac_enable(struct net_devi
 	    ETH_RESOURCE_NAME);
 	stmmac_dma_start_tx(ioaddr);
 	stmmac_dma_start_rx(ioaddr);
-#ifdef CONFIG_STMMAC_TIMER
+
+#ifdef CONFIG_STMMAC_SW_TIMER
+	/* Use a kernel timer for handling interrupts */
+	init_timer(&lp->timer);
+	lp->timer.expires = STMMAC_SW_TIMER_EXP;
+	lp->timer.data = (unsigned long)dev;
+        lp->timer.function = stmmac_timer_handler;
+        add_timer(&lp->timer);
+#endif
+
+#ifdef CONFIG_STMMAC_RTC_TIMER
 	if (likely(lp->has_timer == 0))
 		stmmac_timer_start(periodic_rate);
 #endif
@@ -1059,6 +1142,7 @@ static int stmmac_enable(struct net_devi
  */
 static int stmmac_open(struct net_device *dev)
 {
+
 	/* Check that the MAC address is valid.  If its not, refuse
 	 * to bring the device up. The user must specify an
 	 * address using the following linux command:
@@ -1084,7 +1168,11 @@ static int stmmac_shutdown(struct net_de
 	phy_disconnect(lp->phydev);
 	lp->phydev = NULL;
 
-#ifdef CONFIG_STMMAC_TIMER
+#ifdef CONFIG_STMMAC_SW_TIMER
+	del_timer_sync(&lp->timer);
+#endif
+
+#ifdef CONFIG_STMMAC_RTC_TIMER
 	if (likely(lp->has_timer == 0)) {
 		stmmac_timer_stop();
 		stmmac_timer_close();
@@ -1172,7 +1260,7 @@ static int stmmac_xmit(struct sk_buff *s
 	}
 
 	hwcsum = 0;
-	if (skb->ip_summed == CHECKSUM_PARTIAL) {
+	if (likely(skb->ip_summed == CHECKSUM_PARTIAL)) {
 		if (lp->mac_type->hw.csum == NO_HW_CSUM)
 			stmmac_tx_checksum(skb);
 		else
@@ -1182,17 +1270,18 @@ static int stmmac_xmit(struct sk_buff *s
 	/* Get the amount of non-paged data (skb->data). */
 	nopaged_len = skb_headlen(skb);
 #ifdef STMMAC_XMIT_DEBUG
-	if (nfrags > 0)
+	if (nfrags > 0) {
 		printk("stmmac xmit: len: %d, nopaged_len: %d n_frags: %d\n",
 		       skb->len, nopaged_len, nfrags);
+	}
 #endif
 
 	/* Handle non-paged data (skb->data) */
-	lp->mac_type->ops->prepare_tx_desc((p + entry), 1, nopaged_len, hwcsum);
-	lp->tx_skbuff[entry] = skb;
 	p[entry].des2 = dma_map_single(lp->device, skb->data,
-				       STMMAC_ALIGN(nopaged_len),
-				       DMA_TO_DEVICE);
+				       nopaged_len, DMA_TO_DEVICE);
+	lp->tx_skbuff[entry] = skb;
+	lp->mac_type->ops->prepare_tx_desc((p + entry), 1, nopaged_len, hwcsum);
+
 	/* Handle paged fragments */
 	for (i = 0; i < nfrags; i++) {
 		skb_frag_t *frag = &skb_shinfo(skb)->frags[i];
@@ -1204,24 +1293,28 @@ static int stmmac_xmit(struct sk_buff *s
 #ifdef STMMAC_XMIT_DEBUG
 		printk("\t[entry %d] segment len: %d\n", entry, len);
 #endif
-		lp->mac_type->ops->prepare_tx_desc((p + entry), 0, len, hwcsum);
-		lp->mac_type->ops->set_tx_owner(p + entry);
 		p[entry].des2 = dma_map_page(lp->device, frag->page,
 					     frag->page_offset,
-					     lp->dma_buf_sz, DMA_TO_DEVICE);
+					     len, DMA_TO_DEVICE);
 		lp->tx_skbuff[entry] = NULL;
+		lp->mac_type->ops->prepare_tx_desc((p + entry), 0, len, hwcsum);
+		lp->mac_type->ops->set_tx_owner(p + entry);
 	}
 
 	/* If there are more than one fragment, we set the interrupt
 	 * on completition bit in the latest segment. */
 	lp->mac_type->ops->set_tx_owner(p + first);	/* to avoid raise condition */
 	lp->mac_type->ops->set_tx_ls(p + entry);
+
+#ifndef CONFIG_STMMAC_SW_TIMER
 	lp->mac_type->ops->set_tx_ic(p + entry, 1);
+#endif
 
 	lp->cur_tx++;
 
 #ifdef STMMAC_XMIT_DEBUG
 	if (netif_msg_pktdata(lp)) {
+	{
 		printk("stmmac xmit: current=%d, dirty=%d, entry=%d, "
 		       "first=%d, nfrags=%d\n",
 		       (lp->cur_tx % txsize), (lp->dirty_tx % txsize), entry,
@@ -1231,11 +1324,12 @@ static int stmmac_xmit(struct sk_buff *s
 		print_pkt(skb->data, skb->len);
 	}
 #endif
-
 	if (TX_BUFFS_AVAIL(lp) <= (MAX_SKB_FRAGS + 1) ||
 	    (!(lp->mac_type->hw.link.duplex) && hwcsum)) {
 		netif_stop_queue(dev);
-	} else {
+	}
+#ifndef CONFIG_STMMAC_SW_TIMER
+	else {
 		/* Aggregation of Tx interrupts */
 		if (lp->tx_aggregation <= tx_aggregation) {
 			lp->tx_aggregation++;
@@ -1244,6 +1338,7 @@ static int stmmac_xmit(struct sk_buff *s
 			lp->tx_aggregation = 0;
 		}
 	}
+#endif
 
 	lp->stats.tx_bytes += skb->len;
 	lp->xstats.tx_bytes += skb->len;
@@ -1302,7 +1397,7 @@ static int stmmac_rx(struct net_device *
 	for (count = 0; count < limit; ++count) {
 		dma_desc *p = lp->dma_rx + entry;
 
-		if (lp->mac_type->ops->read_tx_owner(p))
+		if (lp->mac_type->ops->read_rx_owner(p))
 			break;
 		/* read the status of the incoming frame */
 		if (unlikely((lp->mac_type->ops->rx_status(&lp->stats,
@@ -1378,7 +1473,11 @@ static int stmmac_rx(struct net_device *
 				skb->ip_summed = CHECKSUM_NONE;
 			else
 				skb->ip_summed = CHECKSUM_UNNECESSARY;
+#ifdef STMMAC_NAPI
 			netif_receive_skb(skb);
+#else
+			netif_rx(skb);
+#endif
 
 			lp->stats.rx_packets++;
 			lp->stats.rx_bytes += frame_len;
@@ -1389,16 +1488,12 @@ static int stmmac_rx(struct net_device *
 		p = lp->dma_rx + entry;
 	}
 
-	lp->max_refill_threshold += count;
-	if (lp->max_refill_threshold >= (rxsize / 2)) {
-		RX_DBG("\t Rx Fill threshold: %d\n", lp->max_refill_threshold);
-		lp->max_refill_threshold = 0;
-		stmmac_rx_refill(dev);
-	}
+	stmmac_rx_refill(dev);
 
 	return count;
 }
 
+#ifdef STMMAC_NAPI
 /**
  *  stmmac_poll - stmmac poll method (NAPI)
  *  @dev : pointer to the netdev structure.
@@ -1412,7 +1507,7 @@ static int stmmac_rx(struct net_device *
 static int stmmac_poll(struct net_device *dev, int *budget)
 {
 	int work_done;
-#ifdef CONFIG_STMMAC_TIMER
+#ifdef CONFIG_STMMAC_RTC_TIMER
 	struct eth_driver_local *lp = netdev_priv(dev);
 #endif
 
@@ -1424,7 +1519,7 @@ static int stmmac_poll(struct net_device
 		RX_DBG(">>> rx work completed.\n");
 		__netif_rx_complete(dev);
 		stmmac_dma_enable_irq_rx(dev->base_addr);
-#ifdef CONFIG_STMMAC_TIMER
+#ifdef CONFIG_STMMAC_RTC_TIMER
 		if (likely(lp->has_timer == 0))
 			stmmac_timer_start(periodic_rate);
 #endif
@@ -1432,6 +1527,7 @@ static int stmmac_poll(struct net_device
 	}
 	return 1;
 }
+#endif
 
 /**
  *  stmmac_tx_timeout
@@ -1555,12 +1651,18 @@ static int stmmac_change_mtu(struct net_
 static irqreturn_t stmmac_interrupt(int irq, void *dev_id)
 {
 	struct net_device *dev = (struct net_device *)dev_id;
+	struct eth_driver_local *lp = netdev_priv(dev);
 
 	if (unlikely(!dev)) {
 		printk(KERN_ERR "%s: invalid dev pointer\n", __FUNCTION__);
 		return IRQ_NONE;
 	}
 
+	if (lp->is_gmac) {
+		unsigned long ioaddr = dev->base_addr;
+		/* To handle GMAC own interrupts */
+		lp->mac_type->ops->host_irq_status(ioaddr);
+	}
 	stmmac_dma_interrupt(dev);
 
 	return IRQ_HANDLED;
@@ -1666,20 +1768,22 @@ static int stmmac_probe(struct net_devic
 
 	lp->msg_enable = netif_msg_init(debug, default_msg_level);
 
-	if (lp->is_gmac)
+	if (lp->is_gmac){
 		lp->rx_csum = 1;
+	}
 
 	/* Just to keep aligned values. */
 	lp->dma_tx_size = STMMAC_ALIGN(dma_tx_size_param);
 	lp->dma_rx_size = STMMAC_ALIGN(dma_rx_size_param);
-	lp->dma_buf_sz = STMMAC_ALIGN(DMA_BUFFER_SIZE);
+	lp->dma_buf_sz = lp->mac_type->hw.buf_size;
 
 	if (flow_ctrl)
 		lp->flow_ctrl = FLOW_AUTO;	/* RX/TX pause on */
 
 	lp->pause = pause;
-
+#ifdef STMMAC_NAPI
 	dev->poll = stmmac_poll;
+#endif
 	dev->weight = lp->dma_rx_size;
 
 	/* Get the MAC address */
@@ -2087,7 +2191,11 @@ static int __init stmmac_cmdline_opt(cha
 			tx_aggregation = simple_strtoul(opt + 6, NULL, 0);
 		} else if (!strncmp(opt, "rxmit:", 6)) {
 			rx_irq_mitigation = simple_strtoul(opt + 6, NULL, 0);
-#ifdef CONFIG_STMMAC_TIMER
+#ifdef CONFIG_STMMAC_SW_TIMER
+		} else if (!strncmp(opt, "expire:", 7)) {
+			sw_timer_msec = simple_strtoul(opt + 7, NULL, 0);
+#endif
+#ifdef CONFIG_STMMAC_RTC_TIMER
 		} else if (!strncmp(opt, "period:", 7)) {
 			periodic_rate = simple_strtoul(opt + 7, NULL, 0);
 #endif
diff -uprN -X linux/Documentation/dontdiff linux.orig/drivers/net/stmmac/stmmac_timer.c linux/drivers/net/stmmac/stmmac_timer.c
--- linux.orig/drivers/net/stmmac/stmmac_timer.c	2008-04-17 18:21:13.000000000 +0200
+++ linux/drivers/net/stmmac/stmmac_timer.c	2008-04-15 13:59:25.270000000 +0200
@@ -1,7 +1,9 @@
 /* 
  * drivers/net/stmmac/stmmac_timer.c
  *
- * Timer-driver-interrupt optimization
+ * Real time clock device generates an interrupt at regular 
+ * intervals in order to notify the Ethernet driver about frame
+ * receptions.
  *
  * Copyright (C) 2007 by STMicroelectronics
  * Author: Giuseppe Cavallaro <peppe.cavallaro@st.com>
@@ -15,7 +17,7 @@
 struct rtc_device *stmmac_rtc;
 rtc_task_t stmmac_task;
 
-extern void stmmac_dma_disable_irq_rx(unsigned long ioaddr);
+extern void stmmac_schedule_rx(struct net_device *dev);
 
 int stmmac_timer_close(void)
 {
@@ -37,18 +39,14 @@ int stmmac_timer_stop(void)
 }
 
 /*
- * Use periodic interrupt for scheduling the reception process
+ * Use periodic interrupt for handling the reception process
  */
 static void stmmac_rtc_handler(void *priv)
 {
 	struct net_device *dev = (struct net_device *)priv;
-	unsigned long ioaddr = dev->base_addr;
 
-	if (likely(netif_rx_schedule_prep(dev))) {
-		stmmac_timer_stop();
-		stmmac_dma_disable_irq_rx(ioaddr);
-		__netif_rx_schedule(dev);
-	}
+	stmmac_schedule_rx(dev);
+
 	return;
 }
 
