From c91c17283181235bcb89ec3a5a4623d3e8c3084b Mon Sep 17 00:00:00 2001
From: Stuart Menefy <stuart.menefy@st.com>
Date: Thu, 11 Jun 2009 12:15:28 +0100
Subject: [PATCH] stm_pio: New stpio10 driver

STx7105 introduced a new style of PIO block, with 10 normal STM style
PIO ports, but with all the interrupts OR'ed together and a new register
indicating which PIO bank is currently asserting its interrupt.

Add support for this hardware, with a new device: stpio10. This makes
use of the stpio driver for most functionality, with a new top level
interrupt handler to decode the new status register.

Signed-off-by: Stuart Menefy <stuart.menefy@st.com>
Acked-by: Pawel Moll <pawel.moll@st.com>
---
 arch/sh/kernel/cpu/sh4/setup-stx7105.c |   12 +---
 arch/sh/mm/Kconfig                     |    1 +
 drivers/stm/Kconfig                    |    5 +
 drivers/stm/Makefile                   |    1 +
 drivers/stm/pio.c                      |    5 +-
 drivers/stm/pio10.c                    |  134 ++++++++++++++++++++++++++++++++
 drivers/stm/pio_i.h                    |    8 ++
 include/asm-sh/irq.h                   |    2 +-
 include/linux/stm/soc.h                |    6 ++
 include/linux/stm/soc_init.h           |   20 +++++
 10 files changed, 181 insertions(+), 13 deletions(-)
 create mode 100644 drivers/stm/pio10.c

diff --git a/arch/sh/kernel/cpu/sh4/setup-stx7105.c b/arch/sh/kernel/cpu/sh4/setup-stx7105.c
index b002403..bf65dac 100644
--- a/arch/sh/kernel/cpu/sh4/setup-stx7105.c
+++ b/arch/sh/kernel/cpu/sh4/setup-stx7105.c
@@ -1155,17 +1155,7 @@ static struct platform_device stpio_devices[] = {
 	STPIO_DEVICE(4, 0xfd024000, evt2irq(0x1040)),
 	STPIO_DEVICE(5, 0xfd025000, evt2irq(0x1020)),
 	STPIO_DEVICE(6, 0xfd026000, evt2irq(0x1000)),
-
-	STPIO_DEVICE(7, 0xfe010000, -1),
-	STPIO_DEVICE(8, 0xfe011000, -1),
-	STPIO_DEVICE(9, 0xfe012000, -1),
-	STPIO_DEVICE(10, 0xfe013000, -1),
-	STPIO_DEVICE(11, 0xfe014000, -1),
-	STPIO_DEVICE(12, 0xfe015000, -1),
-	STPIO_DEVICE(13, 0xfe016000, -1),
-	STPIO_DEVICE(14, 0xfe017000, -1),
-	STPIO_DEVICE(15, 0xfe018000, -1),
-	STPIO_DEVICE(16, 0xfe019000, -1),
+	STPIO10_DEVICE(0xfe010000, evt2irq(0xb40), 7, 10),
 };
 
 /* Standalone PIO at fe01 - fe01ffff */
diff --git a/arch/sh/mm/Kconfig b/arch/sh/mm/Kconfig
index 6585979..a2062ad 100644
--- a/arch/sh/mm/Kconfig
+++ b/arch/sh/mm/Kconfig
@@ -191,6 +191,7 @@ config CPU_SUBTYPE_STX7105
 	bool "Support STx7105 processors"
 	select CPU_ST40_300
 	select SUPPORTS_32BIT
+	select STM_PIO10
 	help
 	  Select STX7105 if you have an STx7105 CPU.
 
diff --git a/drivers/stm/Kconfig b/drivers/stm/Kconfig
index 1e041bf..77c54b9 100644
--- a/drivers/stm/Kconfig
+++ b/drivers/stm/Kconfig
@@ -18,6 +18,11 @@ config STM_PIO
 	  Driver for the PIO pins on STMicroelectronics ST40 and ST200
 	  based parts.
 
+config STM_PIO10
+	bool
+	depends on STM_PIO
+	default n
+
 config STM_DMA
 	bool "STMicroelectronics DMA API"
 	select SH_DMA_API
diff --git a/drivers/stm/Makefile b/drivers/stm/Makefile
index 59a86dd..ee3b95c 100644
--- a/drivers/stm/Makefile
+++ b/drivers/stm/Makefile
@@ -5,6 +5,7 @@
 obj-y				+= sysconf.o
 obj-$(CONFIG_STM_DMA)		+= fdma.o fdma-xbar.o
 obj-$(CONFIG_STM_PIO)		+= pio.o
+obj-$(CONFIG_STM_PIO10)		+= pio10.o
 obj-$(CONFIG_STM_COPROCESSOR_SUPPORT)	+= copro-st_socs.o
 obj-$(CONFIG_STM_COPROCESSOR)		+= stm-coprocessor.o
 obj-$(CONFIG_STM_COPROCESSOR_FRMW)	+= stm-coprocessor_frmw.o
diff --git a/drivers/stm/pio.c b/drivers/stm/pio.c
index 6955f32..1737aa2 100644
--- a/drivers/stm/pio.c
+++ b/drivers/stm/pio.c
@@ -766,7 +766,10 @@ void __init stpio_early_init(struct platform_device *pdev, int num, int irq)
 		if (stpio_get_resources(pdev, &start, &size, &irq))
 			continue;
 
-		stpio_init_port(pdev->id, start, pdev->dev.bus_id);
+		if (strcmp(pdev->name, "stpio10") == 0)
+			stpio10_early_init(pdev, start);
+		else
+			stpio_init_port(pdev->id, start, pdev->dev.bus_id);
 	}
 
 	stpio_irq_base = irq;
diff --git a/drivers/stm/pio10.c b/drivers/stm/pio10.c
new file mode 100644
index 0000000..ba57cdb
--- /dev/null
+++ b/drivers/stm/pio10.c
@@ -0,0 +1,134 @@
+/*
+ * drivers/stm/pio10.c
+ *
+ * (c) 2009 STMicroelectronics Limited
+ * Author: Stuart Menefy <stuart.menefy@st.com>
+ *
+ * Support for the "Standalone 10 banks PIO" block. See ADCS 8073738
+ * for details.
+ */
+
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/err.h>
+#include <linux/interrupt.h>
+#include <linux/platform_device.h>
+#include <linux/io.h>
+#include <linux/stm/pio.h>
+#include <linux/stm/soc.h>
+#include "pio_i.h"
+
+#define STPIO10_STATUS_BANK	0xf000
+#define STPIO10_STATUS_OFFSET	0x80
+
+struct stpio10_port {
+	void __iomem *base;
+	struct stpio_port *ports[0];
+};
+
+static void stpio10_irq_chip_handler(unsigned int irq, struct irq_desc *desc)
+{
+	const struct stpio10_port *port10 = get_irq_data(irq);
+	unsigned long status;
+	int portno;
+
+	status = readl(port10->base + STPIO10_STATUS_OFFSET);
+	while ((portno = ffs(status)) != 0) {
+		portno--;
+		stpio_irq_handler(port10->ports[portno]);
+		status &= ~(1<<portno);
+	}
+}
+
+void __init stpio10_early_init(struct platform_device *pdev,
+			       unsigned long start)
+{
+	int j;
+	struct stpio10_data *data = pdev->dev.platform_data;
+
+	for (j = 0; j < data->num_pio; j++)
+		stpio_init_port(data->start_pio+j,
+				start + (j*0x1000), pdev->dev.bus_id);
+}
+
+static int __devinit stpio10_probe(struct platform_device *pdev)
+{
+	struct stpio10_data *data = pdev->dev.platform_data;
+	int port10_size;
+	struct stpio10_port *port10;
+	struct device *dev = &pdev->dev;
+	unsigned long start, size;
+	int irq;
+	int j;
+
+	port10_size = sizeof(*port10);
+	port10_size += data->num_pio*sizeof(struct stpio_port *);
+	port10 = devm_kzalloc(dev, port10_size, GFP_KERNEL);
+	if (!port10)
+		return -ENOMEM;
+
+	if (stpio_get_resources(pdev, &start, &size, &irq))
+		return -EIO;
+
+	if (!devm_request_mem_region(dev, start, size, pdev->name))
+		return -EBUSY;
+
+	port10->base = devm_ioremap_nocache(dev, start + STPIO10_STATUS_BANK,
+					    0x100);
+	if (!port10->base)
+		return -ENOMEM;
+
+	for (j = 0; j < data->num_pio; j++) {
+		struct stpio_port *port;
+		port = stpio_init_port(data->start_pio+j,
+				       start + (j*0x1000), pdev->dev.bus_id);
+		if (IS_ERR(port))
+		    return PTR_ERR(port);
+		port10->ports[j] = port;
+	}
+
+	set_irq_chained_handler(irq, stpio10_irq_chip_handler);
+	set_irq_data(irq, port10);
+	for (j = 0; j < data->num_pio; j++)
+		stpio_init_irq(data->start_pio+j);
+
+	platform_set_drvdata(pdev, port10);
+
+	return 0;
+}
+
+static int __devexit stpio10_remove(struct platform_device *pdev)
+{
+	struct stpio10_data *data = pdev->dev.platform_data;
+	struct stpio10_port *port10 = platform_get_drvdata(pdev);
+	int j;
+	struct resource *resource;
+
+	for (j = 0; j < data->num_pio; j++)
+		stpio_remove_port(port10->ports[j]);
+
+	resource = platform_get_resource(pdev, IORESOURCE_IRQ, 0);
+	BUG_ON(!resource);
+	free_irq(resource->start, port10);
+
+	return 0;
+}
+
+static struct platform_driver stpio10_driver = {
+	.driver	= {
+		.name	= "stpio10",
+		.owner	= THIS_MODULE,
+	},
+	.probe		= stpio10_probe,
+	.remove		= __devexit_p(stpio10_remove),
+};
+
+static int __init stpio10_init(void)
+{
+	return platform_driver_register(&stpio10_driver);
+}
+subsys_initcall(stpio10_init);
+
+MODULE_AUTHOR("Stuart Menefy <stuart.menefy@st.com>");
+MODULE_DESCRIPTION("STMicroelectronics PIO driver");
+MODULE_LICENSE("GPL");
diff --git a/drivers/stm/pio_i.h b/drivers/stm/pio_i.h
index e28f579..d8df618 100644
--- a/drivers/stm/pio_i.h
+++ b/drivers/stm/pio_i.h
@@ -17,3 +17,11 @@ struct stpio_port *stpio_init_port(int portno, unsigned long start,
 				   char *name);
 void stpio_init_irq(int portno);
 int stpio_remove_port(struct stpio_port *port);
+
+#ifdef CONFIG_STM_PIO10
+void stpio10_early_init(struct platform_device *pdev, unsigned long start);
+#else
+static inline
+void stpio10_early_init(struct platform_device *pdev, unsigned long start)
+{}
+#endif
diff --git a/include/asm-sh/irq.h b/include/asm-sh/irq.h
index 79cd753..d9ee87a 100644
--- a/include/asm-sh/irq.h
+++ b/include/asm-sh/irq.h
@@ -8,7 +8,7 @@
  * advised to cap this at the hard limit that they're interested in
  * through the machvec.
  */
-#define NR_IRQS 400
+#define NR_IRQS 450
 
 /*
  * Convert back and forth between INTEVT and IRQ values.
diff --git a/include/linux/stm/soc.h b/include/linux/stm/soc.h
index 06149ce..9a31c80 100644
--- a/include/linux/stm/soc.h
+++ b/include/linux/stm/soc.h
@@ -4,6 +4,12 @@
 #include <linux/lirc.h>
 #include <linux/compiler.h>
 
+/* Private platform data for the stpio10 driver */
+struct stpio10_data {
+	int start_pio;
+	int num_pio;
+};
+
 /* This is the private platform data for the ssc driver */
 struct ssc_pio_t {
 	struct {
diff --git a/include/linux/stm/soc_init.h b/include/linux/stm/soc_init.h
index 5084db6..9c9a5b4 100644
--- a/include/linux/stm/soc_init.h
+++ b/include/linux/stm/soc_init.h
@@ -46,6 +46,26 @@
 	},								\
 }
 
+#define STPIO10_DEVICE(_base, _irq, _start_pio, _num_pio)		\
+{									\
+	.name		= "stpio10",					\
+	.id		= -1,						\
+	.num_resources	= 2,						\
+	.resource	= (struct resource[]) {				\
+		{							\
+			.start	= _base,				\
+			.end	= _base + 0xffff,			\
+			.flags	= IORESOURCE_MEM			\
+		}, {							\
+			.start	= _irq,					\
+			.flags	= IORESOURCE_IRQ			\
+		}							\
+	},								\
+	.dev.platform_data = &(struct stpio10_data) {			\
+		.start_pio	= _start_pio,				\
+		.num_pio	= _num_pio,				\
+	},								\
+}
 
 #define STASC_DEVICE(_base, _irq, _fdma_req_rx, _fdma_req_tx,		\
 		_pio_port, _ptx, _prx, _pcts, _prts, _dptx, _dprx,	\
-- 
1.6.0.6

