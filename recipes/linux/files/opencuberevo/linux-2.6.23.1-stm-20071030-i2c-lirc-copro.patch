STM LIRC
  * lirc common interface aligned to platform model for our plugin registration.
    Signed-off by Francesco Virlinzi <francesco.virlinzi@st.com>
    Signed-off by Angelo Castello <angelo.castello@st.com>

STM coprocessor
  * stb7100 coprocessor driver aligned to be compliant with sysconf interface.
  * coprocessor configurator able to be de/selected.
    Signed-off by Francesco Virlinzi <francesco.virlinzi@st.com>

STM i2c
  * fixes i2c-pio initialization values. Device name and udelay value.
    Signed-off by Francesco Virlinzi <francesco.virlinzi@st.com>
 
Index: linux-2.6.23.1-stm/drivers/char/lirc/lirc_dev.c
===================================================================
--- linux-2.6.23.1-stm.orig/drivers/char/lirc/lirc_dev.c
+++ linux-2.6.23.1-stm/drivers/char/lirc/lirc_dev.c
@@ -866,9 +866,9 @@ EXPORT_SYMBOL(lirc_register_plugin);
 EXPORT_SYMBOL(lirc_unregister_plugin);
 
 #if defined(CONFIG_ST_LIRC) || defined(MODULE)
-static int __init lirc_probe(struct device *dev)
+static int __init lirc_probe(struct platform_device *dev)
 {
-	lirc_platform_device=to_platform_device(dev);
+	lirc_platform_device=dev;
 
 	if (lirc_platform_device->name != NULL)
 		printk(KERN_INFO "lirc_dev: Device probe found data for platform device %s\n", 
@@ -879,10 +879,9 @@ static int __init lirc_probe(struct devi
         return 0;
 }
 
-static struct device_driver lirc_device_driver = {
-        .name           = IRCTL_DEV_NAME,
-        .bus            = &platform_bus_type,
-        .probe          = lirc_probe,
+static struct platform_driver lirc_device_driver = {
+        .driver.name  = IRCTL_DEV_NAME,
+        .probe        = lirc_probe,
 };
 
 void* lirc_get_config()
@@ -906,7 +905,7 @@ static int __init lirc_dev_init(void)
 	}
 
 #if defined(CONFIG_ST_LIRC) || defined(MODULE)
-	if(driver_register(&lirc_device_driver)) {
+	if(platform_driver_register(&lirc_device_driver)) {
 		printk(KERN_ERR "lirc_dev: driver_register failed\n");
 		goto out;
         }
@@ -940,7 +939,7 @@ out:
 void __exit lirc_dev_exit(void)
 {
 #if defined(CONFIG_ST_LIRC) || defined(MODULE)
-	driver_unregister(&lirc_device_driver);
+	platform_driver_unregister(&lirc_device_driver);
 #endif
 	unregister_chrdev(IRCTL_DEV_MAJOR, IRCTL_DEV_NAME);
 	class_destroy(lirc_class);
Index: linux-2.6.23.1-stm/drivers/i2c/busses/i2c-st40-pio.c
===================================================================
--- linux-2.6.23.1-stm.orig/drivers/i2c/busses/i2c-st40-pio.c
+++ linux-2.6.23.1-stm/drivers/i2c/busses/i2c-st40-pio.c
@@ -153,8 +153,8 @@ static int bit_st40_pio_init(void)
 		}
 
 
-		stpio_set_pin(i2c_busses[i].sda, 0);
-		stpio_set_pin(i2c_busses[i].scl, 0);
+		stpio_set_pin(i2c_busses[i].sda, 1);
+		stpio_set_pin(i2c_busses[i].scl, 1);
 	}
 
 	return 0;
@@ -185,7 +185,7 @@ static struct i2c_algo_bit_data bit_st40
 	.setscl		= bit_st40_pio_setscl,
 	.getsda		= bit_st40_pio_getsda,
 	.getscl		= bit_st40_pio_getscl,
-	.udelay		= 10,
+	.udelay		= 5,
 	.timeout	= HZ
 },
 #if NR_I2C_BUSSES > 1
@@ -195,7 +195,7 @@ static struct i2c_algo_bit_data bit_st40
 	.setscl		= bit_st40_pio_setscl,
 	.getsda		= bit_st40_pio_getsda,
 	.getscl		= bit_st40_pio_getscl,
-	.udelay		= 10,
+	.udelay		= 5,
 	.timeout	= HZ
 },
 #if NR_I2C_BUSSES > 2
@@ -205,7 +205,7 @@ static struct i2c_algo_bit_data bit_st40
         .setscl         = bit_st40_pio_setscl,
         .getsda         = bit_st40_pio_getsda,
         .getscl         = bit_st40_pio_getscl,
-        .udelay         = 10,
+        .udelay         = 5,
         .timeout        = HZ
 },
 #endif
@@ -215,21 +215,21 @@ static struct i2c_algo_bit_data bit_st40
 static struct i2c_adapter bit_st40_pio_ops[NR_I2C_BUSSES] = {
 {
 	.owner		= THIS_MODULE,
-	.name		= "ST40 (PIO based)",
+	.name		= "ST40_PIO_0",
 	.id		= I2C_HW_B_ST40_PIO,
 	.algo_data	= &bit_st40_pio_data[0],
 },
 #if NR_I2C_BUSSES > 1
 {
 	.owner		= THIS_MODULE,
-	.name		= "ST40 (PIO based)",
+	.name		= "ST40_PIO_1",
 	.id		= I2C_HW_B_ST40_PIO,
 	.algo_data	= &bit_st40_pio_data[1],
 },
 #if NR_I2C_BUSSES > 2
 {
 	.owner		= THIS_MODULE,
-	.name		= "ST40 (PIO based)",
+	.name		= "ST40_PIO_2",
 	.id		= I2C_HW_B_ST40_PIO,
 	.algo_data	= &bit_st40_pio_data[2],
 }
Index: linux-2.6.23.1-stm/drivers/stm/copro-stb7100.c
===================================================================
--- linux-2.6.23.1-stm.orig/drivers/stm/copro-stb7100.c
+++ linux-2.6.23.1-stm/drivers/stm/copro-stb7100.c
@@ -1,16 +1,14 @@
 #include <linux/kernel.h>
 #include <linux/module.h>
 #include <linux/init.h>
-#include <linux/mm.h>
-#include <linux/seq_file.h>
 #include <linux/delay.h>
+#include <linux/seq_file.h>i
 #include <linux/stm/coprocessor.h>
+#include <linux/stm/sysconf.h>
+#include <asm-generic/sections.h>
 #include <asm/io.h>
-#include <asm/irq.h>
-#include <asm/mach/coproc.h>
-#include <asm/sections.h>
-#include <asm/addrspace.h>
 
+#define N_COPROC	2
 struct coproc_board_info coproc_info = {
 	.name = "st231",
 	.max_coprs = N_COPROC,
@@ -18,48 +16,71 @@ struct coproc_board_info coproc_info = {
 
 coproc_t coproc[N_COPROC];
 
+static struct sysconf_field* copro_reset_out;
+
+struct cpu_reg {
+	struct sysconf_field* boot;
+	struct sysconf_field* reset;
+};
+static struct cpu_reg cpu_regs[N_COPROC];
+
 int coproc_cpu_open(coproc_t * cop)
 {
 	return (0);
 }
 
-int coproc_cpu_init(coproc_t * cop)
+int __init coproc_cpu_init(coproc_t * cop)
 {
-	BUG_ON(cop->id >= N_COPROC);
+	unsigned int id = cop->pdev.id;
 
-	/*
-	 * define for the STb7100 the ST231 view of the LMI base address
-	 */
-	return (0);
+	BUG_ON(id >= coproc_info.max_coprs);
+	if(!copro_reset_out)
+	if(!(copro_reset_out=sysconf_claim(SYS_CFG, 9, 27, 27, NULL))){
+		printk(KERN_ERR"Error on sysconf_claim SYS_CFG_9\n");
+		return 1;
+		}
+
+	if(!cpu_regs[id].boot)
+	if(!(cpu_regs[id].boot = sysconf_claim(SYS_CFG,26+id*2, 0, 31, NULL))){
+		printk(KERN_ERR"Error on sysconf_claim SYS_CFG_%u\n",26+id*2);
+		return 1;
+		}
+
+	if(!cpu_regs[id].reset)
+	if(!(cpu_regs[id].reset = sysconf_claim(SYS_CFG, 27+id*2, 0,31, NULL))){
+		printk(KERN_ERR"Error on sysconf_claim SYS_CFG_%u\n",27+id*2);
+		return 1;
+		}
+
+	return 0;
 }
 
 int coproc_cpu_grant(coproc_t * cop, unsigned long arg)
 {
 	u_long bootAddr;
-	u_long cpu = cop->id;
+	int id = cop->pdev.id;
 
-	BUG_ON(cpu >= N_COPROC);
+	BUG_ON(id >= coproc_info.max_coprs);
 
 	if (arg == 0)
 		bootAddr = COPR_ADDR(cop, 0);
 	else
 		bootAddr = arg;
-
 	/* Now set the less meaningful bit to trigger the ST231 start */
 	bootAddr |= 1;
-	DPRINTK(">>> %s: ST231-%ld start from 0x%lx...\n",
-		xstring(PLATFORM), cpu, bootAddr);
-
-	/* stick it into the System configuration and... good luck! */
-	writel((readl(SYSCFG_09) | 0x08000000), SYSCFG_09);
-	writel(bootAddr, SYSCFG_BOOT_REG(cpu));
-	writel((readl(SYSCFG_RESET_REG(cpu)) | 0x1), SYSCFG_RESET_REG(cpu));
-	writel((readl(SYSCFG_RESET_REG(cpu)) & ~0x1), SYSCFG_RESET_REG(cpu));
+	DPRINTK(">>> platform: st231.%u start from 0x%x...\n",id, bootAddr);
+	/* bypass the st40 to reset only the coprocessor */
+	sysconf_write(copro_reset_out, 1);
+
+	sysconf_write(cpu_regs[id].boot, bootAddr);
+
+	sysconf_write(cpu_regs[id].reset, sysconf_read(cpu_regs[id].reset) | 1) ;
+	msleep(5);
+	sysconf_write(cpu_regs[id].reset, sysconf_read(cpu_regs[id].reset) & ~1);
 
 	msleep(10);
-
-	writel((readl(SYSCFG_09) & ~0x18000000), SYSCFG_09);
-
+	/* remove the st40 bypass */
+	sysconf_write(copro_reset_out, 0);
 	cop->control |= COPROC_RUNNING;
 	return (0);
 }
@@ -72,20 +93,21 @@ int coproc_cpu_release(coproc_t * cop)
 
 int coproc_cpu_reset(coproc_t * cop)
 {
-	u_long cpu = cop->id;
-
-	/* Enable the ST231 CPUs to be resetted */
-	writel((readl(SYSCFG_09) | 0x08000000), SYSCFG_09);
-
-	writel((readl(SYSCFG_RESET_REG(cpu)) | 0x1), SYSCFG_RESET_REG(cpu));
-	writel((readl(SYSCFG_RESET_REG(cpu)) & ~0x1), SYSCFG_RESET_REG(cpu));
-
-	msleep(10);
-
-	/* Disable the ST231 CPUs to be resetted */
-	writel((readl(SYSCFG_09) & ~0x18000000), SYSCFG_09);
-
-	return 0;
+ 	int id = cop->pdev.id;
+
+ 	DPRINTK("\n");
+ 	/* bypass the st40 to reset only the coprocessor */
+ 	sysconf_write(copro_reset_out,  1);
+ 	msleep(5);
+ 	sysconf_write(cpu_regs[id].reset, sysconf_read(cpu_regs[id].reset) | 1);
+ 	msleep(5);
+ 	sysconf_write(cpu_regs[id].reset, sysconf_read(cpu_regs[id].reset) & ~1);
+ 	msleep(10);
+
+ 	/* remove the st40 bypass */
+ 	sysconf_write(copro_reset_out, 0);
+
+ 	return 0;
 }
 
 void coproc_proc_other_info(coproc_t * cop_dump, struct seq_file *s_file)
@@ -95,15 +117,13 @@ void coproc_proc_other_info(coproc_t * c
 
 int coproc_check_area(u_long addr, u_long size, int i, coproc_t * coproc)
 {
-#if 0
-        if (((addr >= CONFIG_MEMORY_START) && (addr < PHYSADDR(_end))) || \
-                (((addr + size) > CONFIG_MEMORY_START) && \
-		(addr < CONFIG_MEMORY_START)))
-        {
-                coproc[i].ram_offset = coproc[i].ram_size = 0;
-                return 1;
-        }
-#endif
-        return 0;
+       if (((addr >= CONFIG_MEMORY_START) && (addr < __pa(_end))) || \
+           (((addr + size) > CONFIG_MEMORY_START) && \
+            (addr < CONFIG_MEMORY_START)))
+       {
+           coproc[i].ram_offset = coproc[i].ram_size = 0;
+           return 1;
+       }
+       return 0;
 }
 
Index: linux-2.6.23.1-stm/drivers/stm/Kconfig
===================================================================
--- linux-2.6.23.1-stm.orig/drivers/stm/Kconfig
+++ linux-2.6.23.1-stm/drivers/stm/Kconfig
@@ -110,12 +110,11 @@ config STM_SPI_HW_FIFO
 	---help---
 	Enable this option to add the ssc-hardware fifo support
 
-
-choice
-	prompt "STMicroelectronics coprocessor support"
-        depends on CPU_SUBTYPE_STM8000 || CPU_SUBTYPE_STB7100
-	default STM_COPROCESSOR
-        ---help---
+config STM_COPROCESSOR_SUPPORT
+	bool "STMicroelectronics coprocessor support"
+	default y
+        depends on CPU_SUBTYPE_STB7100
+	---help---
         Many of the ST system-on-chip devices have multiple CPUs, where a
         master CPU running Linux has control over a number of slave CPUs,
         which are usually used to run dedicated algorithms.
@@ -130,6 +129,10 @@ choice
         size{n} defines the region size for the n.th slave core (max 16M).
 
         Example: coprocessor_mem=32m:16m,16m
+choice
+	prompt "STM coprocessor loading strategy"
+        depends on STM_COPROCESSOR_SUPPORT
+        default STM_COPROCESSOR
 
 config  STM_COPROCESSOR
 	bool "STM coprocessor support"
@@ -138,7 +141,6 @@ config  STM_COPROCESSOR
 	  found on many ST system-on-chip devices.
 
 config  STM_COPROCESSOR_FRMW
-	depends on CPU_SUBTYPE_STB7100
 	bool "The new STM coprocessor firmware support "
 	select FW_LOADER
 	help
Index: linux-2.6.23.1-stm/drivers/stm/stm-coprocessor.c
===================================================================
--- linux-2.6.23.1-stm.orig/drivers/stm/stm-coprocessor.c
+++ linux-2.6.23.1-stm/drivers/stm/stm-coprocessor.c
@@ -457,8 +457,6 @@ static int st_coproc_driver_probe(struct
 {
 	if (!strncmp("st2", dev->name, 3))
 		return 1;
-	if (!strncmp("lx2", dev->name, 3))
-		return 1;
 	return 0;
 }
 
@@ -506,10 +504,8 @@ static int __init st_coproc_init(void)
 	}
 
 	for (cop = &coproc[0], i = 0; i < coproc_info.max_coprs; i++, cop++) {
-		cop->id = i;
-
 		if (!cop->ram_offset) {
-			printk("st-coprocessor-%d: No RAM reserved\n", cop->id);
+			printk("st-coprocessor-%d: No RAM reserved\n", i);
 			cop->control &= ~COPROC_SPACE_ALLOCATE;
 		} else {
 			cop->control |= COPROC_SPACE_ALLOCATE;
@@ -518,10 +514,7 @@ static int __init st_coproc_init(void)
 		}
 		/*
 		 ** Nodes:
-		 **    STm8000/ST220Eval: /dev/st220-0    c   63   0
-		 **                       /dev/st220-1    c   63   1
-		 **                       /dev/st220-2    c   63   2
-		 **    STb7100          : /dev/st231-0    c   63   0
+		 **    STb7100         : /dev/st231-0    c   63   0
 		 **                    : /dev/st231-1    c   63   1
 		 ** if the device file system support is configured the above
 		 ** devices are autonatically generated
@@ -531,7 +524,12 @@ static int __init st_coproc_init(void)
 		pdev->name = coproc_info.name;
 		pdev->id   = i;
 		pdev->dev.driver = &st_coproc_driver.driver;
-
+		/* Now complete with the platform dependent init stage */
+		if (coproc_cpu_init(cop)){
+			printk(KERN_ERR
+				"CPU %d : HW dep. initialization failed!\n", i);
+			continue;
+		}
 		if (platform_device_register(pdev)<0)
 			printk(KERN_ERR
 			       "Error on ST-Coprocessor device registration\n");
Index: linux-2.6.23.1-stm/drivers/stm/stm-coprocessor_frmw.c
===================================================================
--- linux-2.6.23.1-stm.orig/drivers/stm/stm-coprocessor_frmw.c
+++ linux-2.6.23.1-stm/drivers/stm/stm-coprocessor_frmw.c
@@ -242,15 +242,11 @@ static int __init st_coproc_init(void)
 	for (cop = &coproc[0], i = 0; i < coproc_info.max_coprs; i++, cop++) {
        /**
         ** Nodes:
-        **    STm8000/ST220Eval: /dev/st220-0    c   63   0
-        **                       /dev/st220-1    c   63   1
-        **                       /dev/st220-2    c   63   2
         **    STb7100          : /dev/st231-0    c   63   0
         **                       /dev/st231-1    c   63   1
         **/
-		cop->id = i;
 		if (!cop->ram_offset) {
-			printk("st-coprocessor-%d: No RAM reserved\n", cop->id);
+			printk("st-coprocessor-%d: No RAM reserved\n", i);
 			cop->control &= ~COPROC_SPACE_ALLOCATE;
 		} else {
 			cop->control |= COPROC_SPACE_ALLOCATE;
@@ -262,12 +258,15 @@ static int __init st_coproc_init(void)
 		 */
 		pdev = &(cop->pdev);
 		memset(pdev, 0, sizeof(struct platform_device));
-//		sprintf(cop->dev.bus_id, "%s-%d", coproc_info.name, i);
 		pdev->name = coproc_info.name;
 		pdev->id   = i;
 		pdev->dev.driver = &st_coproc_driver.driver;
-//		dev->parent = &platform_bus;
-//		dev->bus = &platform_bus_type;
+		/* Now complete with the platform dependent init stage */
+		if (coproc_cpu_init(cop)){
+			printk(KERN_ERR
+				"CPU %d : HW dep. initialization failed!\n", i);
+			return (1);
+			}
 		if (platform_device_register(pdev))
 			printk(KERN_ERR
 			       "Error on ST-Coprocessor device registration\n");
@@ -277,13 +276,6 @@ static int __init st_coproc_init(void)
 			device_create_file(&pdev->dev, &dev_attr_mem_size);
 			device_create_file(&pdev->dev, &dev_attr_running);
 		}
-
-		/* Now complete with the platform dependent init stage */
-		if (coproc_cpu_init(cop)) {
-			printk(KERN_ERR
-			       "CPU %d : HW dep. initialization failed!\n", i);
-			return (1);
-		}
 	}
 
 #ifdef CONFIG_PROC_FS
Index: linux-2.6.23.1-stm/include/linux/stm/coprocessor.h
===================================================================
--- linux-2.6.23.1-stm.orig/include/linux/stm/coprocessor.h
+++ linux-2.6.23.1-stm/include/linux/stm/coprocessor.h
@@ -74,7 +74,6 @@ typedef struct {
 #define COPROC_RUNNING   	 0x0004	/* coproc. is running (ioctl GRANT) */
 
 typedef struct {
-	u_int	    id;			/* CPU ID, now the CPU N. 	    */
 	u_int	    control;		/* see flags above (driver control) */
 	/*
 	 * The base address of coprocessor region, both sides: host (ST40)
