From 82728c1b0d7e0eb80ad7a5c5e7ca77516f88fef2 Mon Sep 17 00:00:00 2001
From: Stuart Menefy <stuart.menefy@st.com>
Date: Wed, 11 Feb 2009 13:43:46 +0000
Subject: [PATCH] serial_stasc: handle stopped ports better

The previous code only checked whether the port had been stopped if
there was room in the Tx buffer. This could lead to a race condition
if the port had been closed and thus was stopped. In this case if
there was no space in the Tx FIFO the code would still try and call
uart_write_wakeup, causing a NULL Pointer dereference.

See bugzilla 5253.

Signed-off-by: Stuart Menefy <stuart.menefy@st.com>
---
 drivers/serial/stasc.c |   51 +++++++++++++++++++++++++++--------------------
 1 files changed, 29 insertions(+), 22 deletions(-)

diff --git a/drivers/serial/stasc.c b/drivers/serial/stasc.c
index 4b76b02..e68e159 100644
--- a/drivers/serial/stasc.c
+++ b/drivers/serial/stasc.c
@@ -154,8 +154,12 @@ static void asc_start_tx(struct uart_port *port)
 {
 	if (asc_fdma_enabled(port))
 		asc_fdma_tx_start(port);
-	else
+	else {
+		struct circ_buf *xmit = &port->info->xmit;
 		asc_transmit_chars(port);
+		if (!uart_circ_empty(xmit))
+			asc_enable_tx_interrupts(port);
+	}
 }
 
 /*
@@ -637,7 +641,6 @@ static void asc_transmit_chars(struct uart_port *port)
 {
 	struct circ_buf *xmit = &port->info->xmit;
 	int txroom;
-	unsigned long intenable;
 	unsigned char c;
 
 	txroom = asc_hw_txroom(port);
@@ -650,33 +653,37 @@ static void asc_transmit_chars(struct uart_port *port)
 		txroom = asc_hw_txroom(port);
 	}
 
-	while (txroom > 0) {
-		if (uart_tx_stopped(port) || uart_circ_empty(xmit)) {
-			break;
-		}
-
-		do {
-			c = xmit->buf[xmit->tail];
-			xmit->tail = (xmit->tail + 1) & (UART_XMIT_SIZE - 1);
-			asc_out (port, TXBUF, c);
-			port->icount.tx++;
-			txroom--;
-		} while ((txroom > 0) && (!uart_circ_empty(xmit)));
+	if (uart_tx_stopped(port)) {
+		/*
+		 * We should try and stop the hardware here, but I
+		 * don't think the ASC has any way to do that.
+		 */
+		asc_disable_tx_interrupts(port);
+		return;
+	}
 
-		txroom = asc_hw_txroom(port);
+	if (uart_circ_empty(xmit)) {
+		asc_disable_tx_interrupts(port);
+		return;
 	}
 
+	if (txroom == 0)
+		return;
+
+	do {
+		c = xmit->buf[xmit->tail];
+		xmit->tail = (xmit->tail + 1) & (UART_XMIT_SIZE - 1);
+		asc_out (port, TXBUF, c);
+		port->icount.tx++;
+		txroom--;
+	} while ((txroom > 0) && (!uart_circ_empty(xmit)));
+
 	if (uart_circ_chars_pending(xmit) < WAKEUP_CHARS) {
 		uart_write_wakeup(port);
 	}
 
-	intenable = asc_in(port, INTEN);
-	if (port->x_char || (!uart_circ_empty(xmit))) {
-		intenable |= ASC_INTEN_THE;
-	} else {
-		intenable &= ~ASC_INTEN_THE;
-	}
-	asc_out(port, INTEN, intenable);
+	if (uart_circ_empty(xmit))
+		asc_disable_tx_interrupts(port);
 }
 
 static inline void asc_receive_chars(struct uart_port *port)
-- 
1.5.6.3

