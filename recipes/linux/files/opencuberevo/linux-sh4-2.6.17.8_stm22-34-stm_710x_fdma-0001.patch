This patch gives an updated dma api and fdma driver.  The API is now
backwards copmpatible with the original sh-API, and has been extended
and fixed such that multiple controllers can now be present.  7109
support is added for the FDMA, and a rework of memory allocation to
improve on the malloc/free architecure for each transfer.  DMA
transactions can now be linked in an arbitary way, so the user can
create heterogeneous linked lists.  Full details of the API will be
provided on the STLinux web site.

Signed-off-by: Mark Glaisher <mark.glaisher@st.com>

Index: linux/arch/sh/boards/st/stb7100mboard/setup.c
===================================================================
--- linux.orig/arch/sh/boards/st/stb7100mboard/setup.c
+++ linux/arch/sh/boards/st/stb7100mboard/setup.c
@@ -19,6 +19,10 @@
 #include <linux/mtd/physmap.h>
 #include <asm/io.h>
 #include <asm/stb7100mboard/harp.h>
+#include <linux/stm/710x_fdma.h>
+#include <linux/stm/7100_fdma2_firmware.h>
+#include <linux/stm/7109_cut2_fdma2_firmware.h>
+#include <linux/stm/7109_cut3_fdma2_firmware.h>
 
 #define SYSCONF_BASE 0xb9001000
 #define SYSCONF_DEVICEID	(SYSCONF_BASE + 0x000)
@@ -528,6 +532,300 @@ static struct platform_device stm_pwm_de
 	}
 };
 
+/*
+ *  FDMA parameters
+ */
+
+static fdmareq_RequestConfig_t stb7100_fdma_req_config[] ={
+/*=========================== 7100 ============================================*/
+
+/*
+		Req  			RnW,    Opcode,  Transfer Incr addr,   Hold_off Initiator), */
+/*           	1-32     				 cnt 1-4  On/Off       0-2        Used) */
+
+/*0*/{STB7100_FDMA_REQ_SPDIF_TEST,  		WRITE,  OPCODE_4,  1,     ENABLE_FLG,  0,     1 },/* SPDIF Testing */
+/*1*/{STB7100_FDMA_REQ_NOT_CONN_1,   		UNUSED, UNUSED,    1,     UNUSED,      0,     1 },/* NOT CONNECTED */
+/*2*/{STB7100_FDMA_REQ_NOT_CONN_2,   		UNUSED, UNUSED,    1,     UNUSED,      0,     1 },/* NOT CONNECTED */
+/*3*/{STB7100_FDMA_REQ_VIDEO_HDMI,   		READ,   OPCODE_8,  1,     DISABLE_FLG, 0,     1 },/* Video HDMI */
+/*4*/{STB7100_FDMA_REQ_DISEQC_HALF_EMPTY,	WRITE,  OPCODE_4,  2,     DISABLE_FLG, 0,     1 },/* DiseqC half empty */
+/*5*/{STB7100_FDMA_REQ_DISEQC_HALF_FULL, 	READ,   OPCODE_4,  2,     DISABLE_FLG, 0,     1 },/* DiseqC half full */
+/*6*/{STB7100_FDMA_REQ_SH4_SCIF_RX,   		READ,   OPCODE_4,  2,     DISABLE_FLG, 0,     1 },  /* SH4/SCIF */
+/*7*/{STB7100_FDMA_REQ_SH4_SCIF_TX,   		WRITE,  OPCODE_4,  2,     DISABLE_FLG, 0,     1 },  /* SH4/SCIF */
+/*8*/{STB7100_FDMA_REQ_SSC_0_RX,   		READ,   OPCODE_2,  4,     DISABLE_FLG, 0,     1 },  /* SSC 0 rxbuff full */
+/*9*/{STB7100_FDMA_REQ_SSC_1_RX,   		READ,   OPCODE_2,  4,     DISABLE_FLG, 0,     1 },  /* SSC 1 rxbuff full */
+/*10*/{STB7100_FDMA_REQ_SSC_2_RX,  		READ,   OPCODE_2,  4,     DISABLE_FLG, 0,     1 },  /* SSC 2 rxbuff full */
+/*11*/{STB7100_FDMA_REQ_SSC_0_TX,  		WRITE,  OPCODE_2,  4,     DISABLE_FLG, 0,     1 },  /* SSC 0 txbuff empty */
+/*12*/{STB7100_FDMA_REQ_SSC_1_TX,  		WRITE,  OPCODE_2,  4,     DISABLE_FLG, 0,     1 },  /* SSC 1 txbuff empty */
+/*13*/{STB7100_FDMA_REQ_SSC_2_TX,  		WRITE,  OPCODE_2,  4,     DISABLE_FLG, 0,     1 },  /* SSC 2 txbuff empty */
+/*14*/{STB7100_FDMA_REQ_UART_0_RX,  		READ,   OPCODE_1,  4,     DISABLE_FLG, 0,     1 },  /* UART 0 rx half full */
+/*15*/{STB7100_FDMA_REQ_UART_1_RX,  		READ,   OPCODE_1,  4,     DISABLE_FLG, 0,     1 },  /* UART 1 rx half full */
+/*16*/{STB7100_FDMA_REQ_UART_2_RX,  		READ,   OPCODE_1,  4,     DISABLE_FLG, 0,     1 },  /* UART 2 rx half full */
+/*17*/{STB7100_FDMA_REQ_UART_3_RX,  		READ,   OPCODE_1,  4,     DISABLE_FLG, 0,     1 },  /* UART 3 rx half full */
+/*18*/{STB7100_FDMA_REQ_UART_0_TX,  		WRITE,  OPCODE_1,  1,     DISABLE_FLG, 0,     1 },  /* UART 0 tx half empty */
+/*19*/{STB7100_FDMA_REQ_UART_1_TX,  		WRITE,  OPCODE_1,  1,     DISABLE_FLG, 0,     1 },  /* UART 1 tx half empty */
+/*20*/{STB7100_FDMA_REQ_UART_2_TX,  		WRITE,  OPCODE_1,  1,     DISABLE_FLG, 0,     1 },  /* UART 2 tx half emtpy */
+/*21*/{STB7100_FDMA_REQ_UART_3_TX,  		WRITE,  OPCODE_1,  1,     DISABLE_FLG, 0,     1 },  /* UART 3 tx half empty */
+/*22*/{STB7100_FDMA_REQ_EXT_PIO_0,  		READ,   OPCODE_4,  1,     DISABLE_FLG, 0,     1 },  /* External 0 (PIO2bit5) hi priority */
+/*23*/{STB7100_FDMA_REQ_EXT_PIO_1,  		READ,   OPCODE_4,  1,     DISABLE_FLG, 0,     1 },  /* External 1 (PIO2bit6) hi priority */
+/*24*/{STB7100_FDMA_REQ_CPXM_DECRYPT,  		READ,   OPCODE_4,  4,     DISABLE_FLG, 0,     1 },  /* CPxM decrypted data request */
+/*25*/{STB7100_FDMA_REQ_CPXM_ENCRYPT,  		WRITE,  OPCODE_4,  4,     DISABLE_FLG, 0,     1 },  /* CPxm encrypted data request */
+/*26*/{STB7100_FDMA_REQ_PCM_0,  		WRITE,  OPCODE_4,  1,     DISABLE_FLG, 0,     1 },  /* Audio PCM Player 0 */
+/*27*/{STB7100_FDMA_REQ_PCM_1,  		WRITE,  OPCODE_4,  1,     DISABLE_FLG, 0,     1 },  /* Audio PCM Player 1 */
+/*28*/{STB7100_FDMA_REQ_PCM_READ,  		READ,   OPCODE_4,  1,     DISABLE_FLG, 1,     1 },  /* Audio PCM Reader */
+/*29*/{STB7100_FDMA_REQ_SPDIF,  		WRITE,  OPCODE_4,  2,     DISABLE_FLG, 0,     0 },  /* Audio SPDIF - 2xST4*/
+/*30*/{STB7100_FDMA_REQ_SWTS,  			WRITE,  OPCODE_16, 1,     DISABLE_FLG, 0,     1 },   /* SWTS */
+/*31*/{STB7100_FDMA_REQ_UNUSED,  		UNUSED, UNUSED,    1,     UNUSED,      0,     1 }, /* Reserved */
+
+};
+
+/*
+				Req  				RnW,    Opcode,  Transfer Incr addr,   Hold_off Initiator), */
+/*           	1-32     		 			cnt 1-4  On/Off       0-2        Used) */
+static  fdmareq_RequestConfig_t stb7109_fdma_req_config[]= {
+/*=========================== 7109 ============================================*/
+
+/*  {  Req  RnW, 						Opcode,    TransferCount  Inc,       Hold_off        Initiator), */
+/*  {               						1-32       1-4            On/Off       0-2           Used) */
+/*0*/	{STB7109_FDMA_REQ_UNUSED,			UNUSED, UNUSED,    1,     	  UNUSED,      0,     	     1 },/* NOT CONNECTED */
+/*1*/	{STB7109_FDMA_DMA_REQ_HDMI_AVI,			READ,   OPCODE_8,  1,             DISABLE_FLG, 0,            1 },  /* Video HDMI */
+/*2*/	{STB7109_FDMA_REQ_DISEQC_HALF_EMPTY,		WRITE,  OPCODE_4,  2,             DISABLE_FLG, 0,            1 },  /* DiseqC half empty */
+/*3*/	{STB7109_FDMA_REQ_DISEQC_HALF_FULL,		READ,   OPCODE_4,  2,             DISABLE_FLG, 0,            1 },  /* DiseqC half full */
+/*4*/	{STB7109_FDMA_REQ_SH4_SCIF_RX,			READ,   OPCODE_4,  2,             DISABLE_FLG, 0,            1 },  /* SH4/SCIF */
+/*5*/	{STB7109_FDMA_REQ_SH4_SCIF_TX,			WRITE,  OPCODE_4,  2,             DISABLE_FLG, 0,            1 },  /* SH4/SCIF */
+/*6*/	{STB7109_FDMA_REQ_SSC_0_RX,			READ,   OPCODE_2,  4,             DISABLE_FLG, 0,            1 },  /* SSC 0 rxbuff full */
+/*7*/	{STB7109_FDMA_REQ_SSC_1_RX,			READ,   OPCODE_2,  4,             DISABLE_FLG, 0,            1 },  /* SSC 1 rxbuff full */
+/*8*/	{STB7109_FDMA_REQ_SSC_2_RX,			READ,   OPCODE_2,  4,             DISABLE_FLG, 0,            1 },  /* SSC 2 rxbuff full */
+/*9*/	{STB7109_FDMA_REQ_SSC_0_TX,			WRITE,  OPCODE_2,  4,             DISABLE_FLG, 0,            1 },  /* SSC 0 txbuff empty */
+/*10*/	{STB7109_FDMA_REQ_SSC_1_TX,			WRITE,  OPCODE_2,  4,             DISABLE_FLG, 0,            1 },  /* SSC 1 txbuff empty */
+/*11*/	{STB7109_FDMA_REQ_SSC_2_TX,			WRITE,  OPCODE_2,  4,             DISABLE_FLG, 0,            1 },  /* SSC 1 txbuff empty */
+/*12*/  {STB7109_FDMA_REQ_UART_0_RX,			READ,   OPCODE_1,  4,             DISABLE_FLG, 0,            1 },  /* UART 0 rx half full */
+/*13*/	{STB7109_FDMA_REQ_UART_1_RX,			READ,   OPCODE_1,  4,             DISABLE_FLG, 0,            1 },  /* UART 1 rx half full */
+/*14*/	{STB7109_FDMA_REQ_UART_2_RX,			READ,   OPCODE_1,  4,             DISABLE_FLG, 0,            1 },  /* UART 2 rx half full */
+/*15*/	{STB7109_FDMA_REQ_UART_3_RX,			READ,   OPCODE_1,  4,             DISABLE_FLG, 0,            1 },  /* UART 3 rx half full */
+/*16*/	{STB7109_FDMA_REQ_UART_0_TX,			WRITE,  OPCODE_1,  1,             DISABLE_FLG, 0,            1 },  /* UART 0 tx half empty */
+/*17*/	{STB7109_FDMA_REQ_UART_1_TX,			WRITE,  OPCODE_1,  1,             DISABLE_FLG, 0,            1 },  /* UART 1 tx half empty */
+/*18*/	{STB7109_FDMA_REQ_UART_2_TX,			WRITE,  OPCODE_1,  1,             DISABLE_FLG, 0,            1 },  /* UART 2 tx half emtpy */
+/*19*/	{STB7109_FDMA_REQ_UART_3_TX,			WRITE,  OPCODE_1,  1,             DISABLE_FLG, 0,            1 },  /* UART 3 tx half empty */
+/*20*/	{STB7109_FDMA_REQ_REQ_EXT_PIO_0,		READ,   OPCODE_4,  1,             DISABLE_FLG, 0,            1 },  /* External 0 (PIO2bit5) hi priority */
+/*21*/	{STB7109_FDMA_REQ_REQ_EXT_PIO_1,		READ,   OPCODE_4,  1,             DISABLE_FLG, 0,            1 },  /* External 1 (PIO2bit6) hi priority */
+/*22*/	{STB7109_FDMA_REQ_CPXM_DECRYPT,  	     	READ,   OPCODE_4,  4,             DISABLE_FLG, 0,            1 },  /* CPxM decrypted data request */
+/*23*/  {STB7109_FDMA_REQ_CPXM_ENCRYPT,  	     	WRITE,  OPCODE_4,  4,             DISABLE_FLG, 0,            1 },  /* CPxm encrypted data request */
+/*24*/	{STB7109_FDMA_REQ_PCM_0,			WRITE,  OPCODE_4,  1,             DISABLE_FLG, 0,            0 },  /* Audio PCM Player 0 */
+/*25*/	{STB7109_FDMA_REQ_PCM_1,			WRITE,  OPCODE_4,  1,             DISABLE_FLG, 0,            0 },  /* Audio PCM Player 1 */
+/*26*/	{STB7109_FDMA_REQ_PCM_READ,			READ,   OPCODE_4,  1,             DISABLE_FLG, 0,            0 },  /* Audio PCM Reader */
+/*27*/	{STB7109_FDMA_REQ_SPDIF,			WRITE,  OPCODE_4,  1,             DISABLE_FLG, 0,            0 },  /* Audio SPDIF - 2xST4*/
+/*29*/	{STB7109_FDMA_REQ_SWTS_0,			WRITE,  OPCODE_32, 1,             DISABLE_FLG, 0,            0 },  /* SWTS 0 */
+/*29*/	{STB7109_FDMA_REQ_SWTS_1,			WRITE,  OPCODE_32, 1,             DISABLE_FLG, 0,            0 },  /* SWTS 1 */
+/*30*/	{STB7109_FDMA_REQ_SWTS_2,			WRITE,  OPCODE_32, 1,             DISABLE_FLG, 0,            0 },  /* SWTS 2 */
+/*31*/  {STB7109_FDMA_REQ_UNUSED,           		UNUSED, UNUSED,    1,             UNUSED,      0,            0 },  /* Reserved */
+};
+
+static fdma_regs_t stb7100_fdma_regs = {
+	 .fdma_id =     	  FDMA2_ID,
+	 .fdma_ver = 		  FDAM2_VER,
+	 .fdma_en= 		  FDMA2_ENABLE_REG,
+	 .fdma_clk_gate = 	  FDMA2_CLOCKGATE,
+	 .fdma_rev_id = 	  FDMA2_REV_ID,
+	 .fdma_cmd_statn = 	  STB7100_FDMA_CMD_STATn_REG,
+	 .fdma_ptrn = 		  STB7100_FDMA_PTR_REG,
+	 .fdma_cntn = 		  STB7100_FDMA_COUNT_REG,
+	 .fdma_saddrn = 	  STB7100_FDMA_SADDR_REG,
+	 .fdma_daddrn = 	  STB7100_FDMA_DADDR_REG,
+	 .fdma_req_ctln = 	  STB7100_FDMA_REQ_CTLn_REG,
+	 .fdma_cmd_sta =	  FDMA2_CMD_MBOX_STAT_REG,
+	 .fdma_cmd_set =	  FDMA2_CMD_MBOX_SET_REG,
+	 .fdma_cmd_clr = 	  FDMA2_CMD_MBOX_CLR_REG,
+	 .fdma_cmd_mask =	  FDMA2_CMD_MBOX_MASK_REG,
+	 .fdma_int_sta = 	  FDMA2_INT_STAT_REG,
+	 .fdma_int_set = 	  FDMA2_INT_SET_REG,
+	 .fdma_int_clr= 	  FDMA2_INT_CLR_REG,
+	 .fdma_int_mask= 	  FDMA2_INT_MASK_REG,
+	 .fdma_sync_reg= 	  FDMA2_SYNCREG,
+	 .fdma_dmem_region =  	  STB7100_DMEM_OFFSET,
+	 .fdma_imem_region =  	  STB7100_IMEM_OFFSET,
+};
+
+static fdma_regs_t stb7109_fdma_regs = {
+	.fdma_id= FDMA2_ID,
+	.fdma_ver = FDAM2_VER,
+	.fdma_en = FDMA2_ENABLE_REG,
+	.fdma_clk_gate = FDMA2_CLOCKGATE,
+	.fdma_rev_id = FDMA2_REV_ID,
+	.fdma_cmd_statn = STB7109_FDMA_CMD_STATn_REG,
+	.fdma_ptrn = STB7109_FDMA_PTR_REG,
+	.fdma_cntn = STB7109_FDMA_COUNT_REG,
+	.fdma_saddrn = STB7109_FDMA_SADDR_REG,
+	.fdma_daddrn = STB7109_FDMA_DADDR_REG,
+	.fdma_req_ctln = STB7109_FDMA_REQ_CTLn_REG,
+	.fdma_cmd_sta = FDMA2_CMD_MBOX_STAT_REG,
+	.fdma_cmd_set = FDMA2_CMD_MBOX_SET_REG,
+	.fdma_cmd_clr = FDMA2_CMD_MBOX_CLR_REG,
+	.fdma_cmd_mask = FDMA2_CMD_MBOX_MASK_REG,
+	.fdma_int_sta = FDMA2_INT_STAT_REG,
+	.fdma_int_set = FDMA2_INT_SET_REG,
+	.fdma_int_clr= FDMA2_INT_CLR_REG,
+	.fdma_int_mask= FDMA2_INT_MASK_REG,
+	.fdma_sync_reg= FDMA2_SYNCREG,
+	.fdma_dmem_region = STB7109_DMEM_OFFSET,
+	.fdma_imem_region = STB7109_IMEM_OFFSET,
+};
+
+static struct fdma_platform_device_data stb7109_C1_fdma_plat_data ={
+	.cpu_subtype = 7109,
+	.cpu_rev = 1,
+};
+
+
+static struct fdma_platform_device_data stb7109_C2_fdma_plat_data = {
+	.req_line_tbl_adr = (void*)&stb7109_fdma_req_config,
+	.registers_ptr =(void*) &stb7109_fdma_regs,
+	.cpu_subtype = 7109,
+	.cpu_rev = 2,
+	.min_ch_num = CONFIG_MIN_STM_DMA_CHANNEL_NR,
+	.max_ch_num  =CONFIG_MAX_STM_DMA_CHANNEL_NR,
+	.fdma_base  = STB7109_FDMA_BASE,
+	.irq_vect = LINUX_FDMA_STB7109_IRQ_VECT,
+	.fw_device_name = "STB7109_fdma_fw",
+	.nr_reqlines = (sizeof(stb7109_fdma_req_config) / sizeof(fdmareq_RequestConfig_t)),
+	.fw.data_reg = (unsigned long*)&STB7109_C2_DMEM_REGION,
+	.fw.imem_reg = (unsigned long*)&STB7109_C2_IMEM_REGION,
+	.fw.imem_fw_sz = STB7109_C2_IMEM_FIRMWARE_SZ,
+	.fw.dmem_fw_sz = STB7109_C2_DMEM_FIRMWARE_SZ,
+	.fw.dmem_len = STB7109_C2_DMEM_REGION_LENGTH,
+	.fw.imem_len = STB7109_C2_IMEM_REGION_LENGTH
+};
+
+static struct fdma_platform_device_data stb7109_C3_fdma_plat_data = {
+	.req_line_tbl_adr = (void*)&stb7109_fdma_req_config,
+	.registers_ptr =(void*) &stb7109_fdma_regs,
+	.cpu_subtype = 7109,
+	.cpu_rev = 3,
+	.min_ch_num = CONFIG_MIN_STM_DMA_CHANNEL_NR,
+	.max_ch_num  =CONFIG_MAX_STM_DMA_CHANNEL_NR,
+	.fdma_base  = STB7109_FDMA_BASE,
+	.irq_vect = LINUX_FDMA_STB7109_IRQ_VECT,
+	.fw_device_name = "STB7109_C3_fdma_fw",
+	.nr_reqlines = (sizeof(stb7109_fdma_req_config) / sizeof(fdmareq_RequestConfig_t)),
+	.fw.data_reg = (unsigned long*)&STB7109_C3_DMEM_REGION,
+	.fw.imem_reg = (unsigned long*)&STB7109_C3_IMEM_REGION,
+	.fw.imem_fw_sz = STB7109_C3_IMEM_FIRMWARE_SZ,
+	.fw.dmem_fw_sz = STB7109_C3_DMEM_FIRMWARE_SZ,
+	.fw.dmem_len = STB7109_C3_DMEM_REGION_LENGTH,
+	.fw.imem_len = STB7109_C3_IMEM_REGION_LENGTH
+
+};
+
+static struct fdma_platform_device_data stb7100_Cx_fdma_plat_data = {
+	.req_line_tbl_adr = (void*)&stb7100_fdma_req_config,
+	.registers_ptr =(void*) &stb7100_fdma_regs,
+	.cpu_subtype = 7100,
+/*	.cpu_rev = ! defined at runtime */
+	.min_ch_num = CONFIG_MIN_STM_DMA_CHANNEL_NR,
+	.max_ch_num  =CONFIG_MAX_STM_DMA_CHANNEL_NR,
+	.fdma_base  = STB7100_FDMA_BASE,
+	.irq_vect = LINUX_FDMA_STB7100_IRQ_VECT,
+	.fw_device_name = "STB7100_Cx_fdma_fw",
+	.nr_reqlines = (sizeof(stb7100_fdma_req_config) / sizeof(fdmareq_RequestConfig_t)),
+	.fw.data_reg = (unsigned long*)&STB7100_DMEM_REGION,
+	.fw.imem_reg = (unsigned long*)&STB7100_IMEM_REGION,
+	.fw.imem_fw_sz = STB7100_IMEM_FIRMWARE_SZ,
+	.fw.dmem_fw_sz = STB7100_DMEM_FIRMWARE_SZ,
+	.fw.dmem_len = STB7100_DMEM_REGION_LENGTH,
+	.fw.imem_len = STB7100_IMEM_REGION_LENGTH
+};
+
+
+static struct platform_device fdma_710x_device = {
+        .name           = "710x_FDMA",
+        .id             = -1,
+};
+
+
+static struct resource alsa_710x_resource_pcm0[2] = {
+
+	[0] = {/* allocatable channels*/
+		/*.start = runtime dependant*/
+		/*.end   = runtime dependant*/
+		.flags 	= IORESOURCE_IRQ
+	},
+	[1]= {/*fdma reqline*/
+		/*.start = runtime dependant*/
+		/*.end   = runtime dependant*/
+		.flags = IORESOURCE_IRQ
+	}};
+
+
+static struct resource alsa_710x_resource_pcm1[2] = {
+
+	[0] = {/* allocatable channels*/
+		/*.start = runtime dependant*/
+		/*.end   = runtime dependant*/
+		.flags 	= IORESOURCE_IRQ,
+	},
+	[1]= {/*fdma reqline*/
+		/*.start = runtime dependant*/
+		/*.end   = runtime dependant*/
+		.flags = IORESOURCE_IRQ,
+	}};
+
+static struct resource alsa_710x_resource_spdif[2] = {
+
+	[0] = {/*min allocatable channels*/
+		.start = 2,
+		.end   =2,
+		.flags = IORESOURCE_IRQ
+	},
+	[1] = {/*fdma reqline*/
+		/*.start = runtime dependant*/
+		/*.end   = runtime dependant*/
+		.flags = IORESOURCE_IRQ
+	}};
+
+
+static struct resource alsa_710x_resource_cnv[2] = {
+
+	[0] = {/*min allocatable channels*/
+		.start = 10,
+		.end   =10,
+		.flags = IORESOURCE_IRQ,
+	},
+	[1] = {/*fdma reqline*/
+		/*.start = runtime dependant*/
+		/*.end   = runtime dependant*/
+		.flags = IORESOURCE_IRQ,
+	}};
+
+
+static struct platform_device alsa_710x_device_pcm0 = {
+	.name			= "710x_ALSA_PCM0",
+	.id 			= -1,
+	.num_resources	= 	ARRAY_SIZE(alsa_710x_resource_pcm0),
+	.resource		= alsa_710x_resource_pcm0,
+};
+
+
+static struct platform_device alsa_710x_device_pcm1 = {
+	.name			= "710x_ALSA_PCM1",
+	.id 			= -1,
+	.num_resources	= 	ARRAY_SIZE(alsa_710x_resource_pcm1),
+	.resource		= alsa_710x_resource_pcm1,
+};
+
+static struct platform_device alsa_710x_device_spdif = {
+	.name			= "710x_ALSA_SPD",
+	.id 			= -1,
+	.num_resources	= 	ARRAY_SIZE(alsa_710x_resource_spdif),
+	.resource		= alsa_710x_resource_spdif,
+};
+
+static struct platform_device alsa_710x_device_cnv = {
+	.name			= "710x_ALSA_CNV",
+	.id 			= -1,
+	.num_resources	= 	ARRAY_SIZE(alsa_710x_resource_cnv),
+	.resource		= alsa_710x_resource_cnv,
+};
+
+
 static struct platform_device *stb7100mboard_devices[] __initdata = {
 	&smc91x_device,
 	&stb7109eth_device,
@@ -540,6 +838,11 @@ static struct platform_device *stb7100mb
 	&rtc_device,
 	&physmap_flash,
 	&stm_pwm_device,
+	&fdma_710x_device,
+	&alsa_710x_device_pcm0,
+	&alsa_710x_device_pcm1,
+ 	&alsa_710x_device_spdif,
+	&alsa_710x_device_cnv,
 };
 
 static int __init device_init(void)
@@ -577,6 +880,73 @@ static int __init device_init(void)
 		}
         }
 
+	if(chip_7109){
+		switch (chip_revision) {
+		case 1:
+			fdma_710x_device.dev.platform_data =(void*) &stb7109_C1_fdma_plat_data;
+			break;
+		case 2:
+			fdma_710x_device.dev.platform_data =(void*) &stb7109_C2_fdma_plat_data;
+			break;
+		default:
+			/* 7109 cut >= 3.0 */
+			fdma_710x_device.dev.platform_data =(void*) &stb7109_C3_fdma_plat_data;
+			break;
+		}
+
+		alsa_710x_resource_pcm0[0].start = 2;
+		alsa_710x_resource_pcm0[0].end = 10;
+
+		alsa_710x_resource_pcm1[0].start = 2;
+		alsa_710x_resource_pcm1[0].end 	= 2;
+
+		alsa_710x_resource_pcm0[1].start = STB7109_FDMA_REQ_PCM_0;
+		alsa_710x_resource_pcm0[1].end = STB7109_FDMA_REQ_PCM_0;
+
+		alsa_710x_resource_pcm1[1].start = STB7109_FDMA_REQ_PCM_1;
+		alsa_710x_resource_pcm1[1].end = STB7109_FDMA_REQ_PCM_1;
+
+		alsa_710x_resource_spdif[1].start = STB7109_FDMA_REQ_SPDIF;
+		alsa_710x_resource_spdif[1].end =   STB7109_FDMA_REQ_SPDIF;
+
+		alsa_710x_resource_cnv[0].start =2;
+		alsa_710x_resource_cnv[0].end = 10;
+		alsa_710x_resource_cnv[1].start = STB7109_FDMA_REQ_PCM_0;
+		alsa_710x_resource_cnv[1].end = STB7109_FDMA_REQ_PCM_0;
+	}
+	else {
+		stb7100_Cx_fdma_plat_data.cpu_rev = chip_revision;
+		fdma_710x_device.dev.platform_data =(void*) &stb7100_Cx_fdma_plat_data;
+
+		if(chip_revision >=3){
+			alsa_710x_resource_pcm0[0].start = 2;
+			alsa_710x_resource_pcm0[0].end = 10;
+			alsa_710x_resource_pcm1[0].start =2;
+			alsa_710x_resource_pcm1[0].end 	= 2;
+			alsa_710x_resource_cnv[0].start =2;
+			alsa_710x_resource_cnv[0].end = 10;
+		}
+		else {
+			alsa_710x_resource_pcm0[0].start = 10;
+			alsa_710x_resource_pcm0[0].end = 10;
+			alsa_710x_resource_pcm1[0].start = 10;
+			alsa_710x_resource_pcm1[0].end 	= 10;
+			alsa_710x_resource_cnv[0].start =10;
+			alsa_710x_resource_cnv[0].end = 10;
+		}
+
+		alsa_710x_resource_pcm0[1].start = STB7100_FDMA_REQ_PCM_0;
+		alsa_710x_resource_pcm0[1].end = STB7100_FDMA_REQ_PCM_0;
+
+		alsa_710x_resource_pcm1[1].start = STB7100_FDMA_REQ_PCM_1;
+		alsa_710x_resource_pcm1[1].end = STB7100_FDMA_REQ_PCM_1;
+
+		alsa_710x_resource_spdif[1].start =  STB7100_FDMA_REQ_SPDIF;
+		alsa_710x_resource_spdif[1].end =  STB7100_FDMA_REQ_SPDIF;
+
+		alsa_710x_resource_cnv[1].start = STB7100_FDMA_REQ_PCM_0;
+		alsa_710x_resource_cnv[1].end = STB7100_FDMA_REQ_PCM_0;
+	}
 	ret = platform_add_devices(stb7100mboard_devices, ARRAY_SIZE(stb7100mboard_devices));
 	return ret;
 }
Index: linux/arch/sh/boards/st/stb7100ref/setup.c
===================================================================
--- linux.orig/arch/sh/boards/st/stb7100ref/setup.c
+++ linux/arch/sh/boards/st/stb7100ref/setup.c
@@ -19,6 +19,10 @@
 #include <linux/platform_device.h>
 #include <linux/mtd/physmap.h>
 #include <asm/io.h>
+#include <linux/stm/710x_fdma.h>
+#include <linux/stm/7100_fdma2_firmware.h>
+#include <linux/stm/7109_cut2_fdma2_firmware.h>
+#include <linux/stm/7109_cut3_fdma2_firmware.h>
 
 #define SYSCONF_BASE 0xb9001000
 #define SYSCONF_DEVICEID	(SYSCONF_BASE + 0x000)
@@ -526,6 +530,299 @@ static struct platform_device physmap_fl
 	.resource	= &physmap_flash_resource,
 };
 
+/*
+ *  FDMA parameters
+ */
+
+static fdmareq_RequestConfig_t stb7100_fdma_req_config[] ={
+/*=========================== 7100 ============================================*/
+
+/*
+		Req  			RnW,    Opcode,  Transfer Incr addr,   Hold_off Initiator), */
+/*           	1-32     				 cnt 1-4  On/Off       0-2        Used) */
+
+/*0*/{STB7100_FDMA_REQ_SPDIF_TEST,  		WRITE,  OPCODE_4,  1,     ENABLE_FLG,  0,     1 },/* SPDIF Testing */
+/*1*/{STB7100_FDMA_REQ_NOT_CONN_1,   		UNUSED, UNUSED,    1,     UNUSED,      0,     1 },/* NOT CONNECTED */
+/*2*/{STB7100_FDMA_REQ_NOT_CONN_2,   		UNUSED, UNUSED,    1,     UNUSED,      0,     1 },/* NOT CONNECTED */
+/*3*/{STB7100_FDMA_REQ_VIDEO_HDMI,   		READ,   OPCODE_8,  1,     DISABLE_FLG, 0,     1 },/* Video HDMI */
+/*4*/{STB7100_FDMA_REQ_DISEQC_HALF_EMPTY,	WRITE,  OPCODE_4,  2,     DISABLE_FLG, 0,     1 },/* DiseqC half empty */
+/*5*/{STB7100_FDMA_REQ_DISEQC_HALF_FULL, 	READ,   OPCODE_4,  2,     DISABLE_FLG, 0,     1 },/* DiseqC half full */
+/*6*/{STB7100_FDMA_REQ_SH4_SCIF_RX,   		READ,   OPCODE_4,  2,     DISABLE_FLG, 0,     1 },  /* SH4/SCIF */
+/*7*/{STB7100_FDMA_REQ_SH4_SCIF_TX,   		WRITE,  OPCODE_4,  2,     DISABLE_FLG, 0,     1 },  /* SH4/SCIF */
+/*8*/{STB7100_FDMA_REQ_SSC_0_RX,   		READ,   OPCODE_2,  4,     DISABLE_FLG, 0,     1 },  /* SSC 0 rxbuff full */
+/*9*/{STB7100_FDMA_REQ_SSC_1_RX,   		READ,   OPCODE_2,  4,     DISABLE_FLG, 0,     1 },  /* SSC 1 rxbuff full */
+/*10*/{STB7100_FDMA_REQ_SSC_2_RX,  		READ,   OPCODE_2,  4,     DISABLE_FLG, 0,     1 },  /* SSC 2 rxbuff full */
+/*11*/{STB7100_FDMA_REQ_SSC_0_TX,  		WRITE,  OPCODE_2,  4,     DISABLE_FLG, 0,     1 },  /* SSC 0 txbuff empty */
+/*12*/{STB7100_FDMA_REQ_SSC_1_TX,  		WRITE,  OPCODE_2,  4,     DISABLE_FLG, 0,     1 },  /* SSC 1 txbuff empty */
+/*13*/{STB7100_FDMA_REQ_SSC_2_TX,  		WRITE,  OPCODE_2,  4,     DISABLE_FLG, 0,     1 },  /* SSC 2 txbuff empty */
+/*14*/{STB7100_FDMA_REQ_UART_0_RX,  		READ,   OPCODE_1,  1,     DISABLE_FLG, 0,     1 },  /* UART 0 rx half full */
+/*15*/{STB7100_FDMA_REQ_UART_1_RX,  		READ,   OPCODE_1,  1,     DISABLE_FLG, 0,     1 },  /* UART 1 rx half full */
+/*16*/{STB7100_FDMA_REQ_UART_2_RX,  		READ,   OPCODE_1,  1,     DISABLE_FLG, 0,     1 },  /* UART 2 rx half full */
+/*17*/{STB7100_FDMA_REQ_UART_3_RX,  		READ,   OPCODE_1,  1,     DISABLE_FLG, 0,     1 },  /* UART 3 rx half full */
+/*18*/{STB7100_FDMA_REQ_UART_0_TX,  		WRITE,  OPCODE_1,  1,     DISABLE_FLG, 0,     1 },  /* UART 0 tx half empty */
+/*19*/{STB7100_FDMA_REQ_UART_1_TX,  		WRITE,  OPCODE_1,  1,     DISABLE_FLG, 0,     1 },  /* UART 1 tx half empty */
+/*20*/{STB7100_FDMA_REQ_UART_2_TX,  		WRITE,  OPCODE_1,  1,     DISABLE_FLG, 0,     1 },  /* UART 2 tx half emtpy */
+/*21*/{STB7100_FDMA_REQ_UART_3_TX,  		WRITE,  OPCODE_1,  1,     DISABLE_FLG, 0,     1 },  /* UART 3 tx half empty */
+/*22*/{STB7100_FDMA_REQ_EXT_PIO_0,  		READ,   OPCODE_4,  1,     DISABLE_FLG, 0,     1 },  /* External 0 (PIO2bit5) hi priority */
+/*23*/{STB7100_FDMA_REQ_EXT_PIO_1,  		READ,   OPCODE_4,  1,     DISABLE_FLG, 0,     1 },  /* External 1 (PIO2bit6) hi priority */
+/*24*/{STB7100_FDMA_REQ_CPXM_DECRYPT,  		READ,   OPCODE_4,  4,     DISABLE_FLG, 0,     1 },  /* CPxM decrypted data request */
+/*25*/{STB7100_FDMA_REQ_CPXM_ENCRYPT,  		WRITE,  OPCODE_4,  4,     DISABLE_FLG, 0,     1 },  /* CPxm encrypted data request */
+/*26*/{STB7100_FDMA_REQ_PCM_0,  		WRITE,  OPCODE_4,  1,     DISABLE_FLG, 0,     1 },  /* Audio PCM Player 0 */
+/*27*/{STB7100_FDMA_REQ_PCM_1,  		WRITE,  OPCODE_4,  1,     DISABLE_FLG, 0,     1 },  /* Audio PCM Player 1 */
+/*28*/{STB7100_FDMA_REQ_PCM_READ,  		READ,   OPCODE_4,  1,     DISABLE_FLG, 1,     1 },  /* Audio PCM Reader */
+/*29*/{STB7100_FDMA_REQ_SPDIF,  		WRITE,  OPCODE_4,  2,     DISABLE_FLG, 0,     0 },  /* Audio SPDIF - 2xST4*/
+/*30*/{STB7100_FDMA_REQ_SWTS,  			WRITE,  OPCODE_16, 1,     DISABLE_FLG, 0,     1 },   /* SWTS */
+/*31*/{STB7100_FDMA_REQ_UNUSED,  		UNUSED, UNUSED,    1,     UNUSED,      0,     1 }, /* Reserved */
+
+};
+
+/*
+				Req  				RnW,    Opcode,  Transfer Incr addr,   Hold_off Initiator), */
+/*           	1-32     		 			cnt 1-4  On/Off       0-2        Used) */
+static  fdmareq_RequestConfig_t stb7109_fdma_req_config[]= {
+/*=========================== 7109 ============================================*/
+
+/*  {  Req  RnW, 						Opcode,    TransferCount  Inc,       Hold_off        Initiator), */
+/*  {               						1-32       1-4            On/Off       0-2           Used) */
+/*0*/	{STB7109_FDMA_REQ_UNUSED,			UNUSED, UNUSED,    1,     	  UNUSED,      0,     	     1 },/* NOT CONNECTED */
+/*1*/	{STB7109_FDMA_DMA_REQ_HDMI_AVI,			READ,   OPCODE_8,  1,             DISABLE_FLG, 0,            1 },  /* Video HDMI */
+/*2*/	{STB7109_FDMA_REQ_DISEQC_HALF_EMPTY,		WRITE,  OPCODE_4,  2,             DISABLE_FLG, 0,            1 },  /* DiseqC half empty */
+/*3*/	{STB7109_FDMA_REQ_DISEQC_HALF_FULL,		READ,   OPCODE_4,  2,             DISABLE_FLG, 0,            1 },  /* DiseqC half full */
+/*4*/	{STB7109_FDMA_REQ_SH4_SCIF_RX,			READ,   OPCODE_4,  2,             DISABLE_FLG, 0,            1 },  /* SH4/SCIF */
+/*5*/	{STB7109_FDMA_REQ_SH4_SCIF_TX,			WRITE,  OPCODE_4,  2,             DISABLE_FLG, 0,            1 },  /* SH4/SCIF */
+/*6*/	{STB7109_FDMA_REQ_SSC_0_RX,			READ,   OPCODE_2,  4,             DISABLE_FLG, 0,            1 },  /* SSC 0 rxbuff full */
+/*7*/	{STB7109_FDMA_REQ_SSC_1_RX,			READ,   OPCODE_2,  4,             DISABLE_FLG, 0,            1 },  /* SSC 1 rxbuff full */
+/*8*/	{STB7109_FDMA_REQ_SSC_2_RX,			READ,   OPCODE_2,  4,             DISABLE_FLG, 0,            1 },  /* SSC 2 rxbuff full */
+/*9*/	{STB7109_FDMA_REQ_SSC_0_TX,			WRITE,  OPCODE_2,  4,             DISABLE_FLG, 0,            1 },  /* SSC 0 txbuff empty */
+/*10*/	{STB7109_FDMA_REQ_SSC_1_TX,			WRITE,  OPCODE_2,  4,             DISABLE_FLG, 0,            1 },  /* SSC 1 txbuff empty */
+/*11*/	{STB7109_FDMA_REQ_SSC_2_TX,			WRITE,  OPCODE_2,  4,             DISABLE_FLG, 0,            1 },  /* SSC 1 txbuff empty */
+/*12*/  {STB7109_FDMA_REQ_UART_0_RX,			READ,   OPCODE_1,  4,             DISABLE_FLG, 0,            1 },  /* UART 0 rx half full */
+/*13*/	{STB7109_FDMA_REQ_UART_1_RX,			READ,   OPCODE_1,  4,             DISABLE_FLG, 0,            1 },  /* UART 1 rx half full */
+/*14*/	{STB7109_FDMA_REQ_UART_2_RX,			READ,   OPCODE_1,  4,             DISABLE_FLG, 0,            1 },  /* UART 2 rx half full */
+/*15*/	{STB7109_FDMA_REQ_UART_3_RX,			READ,   OPCODE_1,  4,             DISABLE_FLG, 0,            1 },  /* UART 3 rx half full */
+/*16*/	{STB7109_FDMA_REQ_UART_0_TX,			WRITE,  OPCODE_1,  1,             DISABLE_FLG, 0,            1 },  /* UART 0 tx half empty */
+/*17*/	{STB7109_FDMA_REQ_UART_1_TX,			WRITE,  OPCODE_1,  1,             DISABLE_FLG, 0,            1 },  /* UART 1 tx half empty */
+/*18*/	{STB7109_FDMA_REQ_UART_2_TX,			WRITE,  OPCODE_1,  1,             DISABLE_FLG, 0,            1 },  /* UART 2 tx half emtpy */
+/*19*/	{STB7109_FDMA_REQ_UART_3_TX,			WRITE,  OPCODE_1,  1,             DISABLE_FLG, 0,            1 },  /* UART 3 tx half empty */
+/*20*/	{STB7109_FDMA_REQ_REQ_EXT_PIO_0,		READ,   OPCODE_4,  1,             DISABLE_FLG, 0,            1 },  /* External 0 (PIO2bit5) hi priority */
+/*21*/	{STB7109_FDMA_REQ_REQ_EXT_PIO_1,		READ,   OPCODE_4,  1,             DISABLE_FLG, 0,            1 },  /* External 1 (PIO2bit6) hi priority */
+/*22*/	{STB7109_FDMA_REQ_CPXM_DECRYPT,  	     	READ,   OPCODE_4,  4,             DISABLE_FLG, 0,            1 },  /* CPxM decrypted data request */
+/*23*/  {STB7109_FDMA_REQ_CPXM_ENCRYPT,  	     	WRITE,  OPCODE_4,  4,             DISABLE_FLG, 0,            1 },  /* CPxm encrypted data request */
+/*24*/	{STB7109_FDMA_REQ_PCM_0,			WRITE,  OPCODE_4,  1,             DISABLE_FLG, 0,            0 },  /* Audio PCM Player 0 */
+/*25*/	{STB7109_FDMA_REQ_PCM_1,			WRITE,  OPCODE_4,  1,             DISABLE_FLG, 0,            0 },  /* Audio PCM Player 1 */
+/*26*/	{STB7109_FDMA_REQ_PCM_READ,			READ,   OPCODE_4,  1,             DISABLE_FLG, 0,            0 },  /* Audio PCM Reader */
+/*27*/	{STB7109_FDMA_REQ_SPDIF,			WRITE,  OPCODE_4,  1,             DISABLE_FLG, 0,            0 },  /* Audio SPDIF - 2xST4*/
+/*29*/	{STB7109_FDMA_REQ_SWTS_0,			WRITE,  OPCODE_32, 1,             DISABLE_FLG, 0,            0 },  /* SWTS 0 */
+/*29*/	{STB7109_FDMA_REQ_SWTS_1,			WRITE,  OPCODE_32, 1,             DISABLE_FLG, 0,            0 },  /* SWTS 1 */
+/*30*/	{STB7109_FDMA_REQ_SWTS_2,			WRITE,  OPCODE_32, 1,             DISABLE_FLG, 0,            0 },  /* SWTS 2 */
+/*31*/  {STB7109_FDMA_REQ_UNUSED,           		UNUSED, UNUSED,    1,             UNUSED,      0,            0 },  /* Reserved */
+};
+
+static fdma_regs_t stb7100_fdma_regs = {
+	 .fdma_id =     	  FDMA2_ID,
+	 .fdma_ver = 		  FDAM2_VER,
+	 .fdma_en= 		  FDMA2_ENABLE_REG,
+	 .fdma_clk_gate = 	  FDMA2_CLOCKGATE,
+	 .fdma_rev_id = 	  FDMA2_REV_ID,
+	 .fdma_cmd_statn = 	  STB7100_FDMA_CMD_STATn_REG,
+	 .fdma_ptrn = 		  STB7100_FDMA_PTR_REG,
+	 .fdma_cntn = 		  STB7100_FDMA_COUNT_REG,
+	 .fdma_saddrn = 	  STB7100_FDMA_SADDR_REG,
+	 .fdma_daddrn = 	  STB7100_FDMA_DADDR_REG,
+	 .fdma_req_ctln = 	  STB7100_FDMA_REQ_CTLn_REG,
+	 .fdma_cmd_sta =	  FDMA2_CMD_MBOX_STAT_REG,
+	 .fdma_cmd_set =	  FDMA2_CMD_MBOX_SET_REG,
+	 .fdma_cmd_clr = 	  FDMA2_CMD_MBOX_CLR_REG,
+	 .fdma_cmd_mask =	  FDMA2_CMD_MBOX_MASK_REG,
+	 .fdma_int_sta = 	  FDMA2_INT_STAT_REG,
+	 .fdma_int_set = 	  FDMA2_INT_SET_REG,
+	 .fdma_int_clr= 	  FDMA2_INT_CLR_REG,
+	 .fdma_int_mask= 	  FDMA2_INT_MASK_REG,
+	 .fdma_sync_reg= 	  FDMA2_SYNCREG,
+	 .fdma_dmem_region =  	  STB7100_DMEM_OFFSET,
+	 .fdma_imem_region =  	  STB7100_IMEM_OFFSET,
+};
+
+static fdma_regs_t stb7109_fdma_regs = {
+	.fdma_id= FDMA2_ID,
+	.fdma_ver = FDAM2_VER,
+	.fdma_en = FDMA2_ENABLE_REG,
+	.fdma_clk_gate = FDMA2_CLOCKGATE,
+	.fdma_rev_id = FDMA2_REV_ID,
+	.fdma_cmd_statn = STB7109_FDMA_CMD_STATn_REG,
+	.fdma_ptrn = STB7109_FDMA_PTR_REG,
+	.fdma_cntn = STB7109_FDMA_COUNT_REG,
+	.fdma_saddrn = STB7109_FDMA_SADDR_REG,
+	.fdma_daddrn = STB7109_FDMA_DADDR_REG,
+	.fdma_req_ctln = STB7109_FDMA_REQ_CTLn_REG,
+	.fdma_cmd_sta = FDMA2_CMD_MBOX_STAT_REG,
+	.fdma_cmd_set = FDMA2_CMD_MBOX_SET_REG,
+	.fdma_cmd_clr = FDMA2_CMD_MBOX_CLR_REG,
+	.fdma_cmd_mask = FDMA2_CMD_MBOX_MASK_REG,
+	.fdma_int_sta = FDMA2_INT_STAT_REG,
+	.fdma_int_set = FDMA2_INT_SET_REG,
+	.fdma_int_clr= FDMA2_INT_CLR_REG,
+	.fdma_int_mask= FDMA2_INT_MASK_REG,
+	.fdma_sync_reg= FDMA2_SYNCREG,
+	.fdma_dmem_region = STB7109_DMEM_OFFSET,
+	.fdma_imem_region = STB7109_IMEM_OFFSET,
+};
+
+static struct fdma_platform_device_data stb7109_C1_fdma_plat_data ={
+	.cpu_subtype = 7109,
+	.cpu_rev = 1,
+};
+
+
+static struct fdma_platform_device_data stb7109_C2_fdma_plat_data = {
+	.req_line_tbl_adr = (void*)&stb7109_fdma_req_config,
+	.registers_ptr =(void*) &stb7109_fdma_regs,
+	.cpu_subtype = 7109,
+	.cpu_rev = 2,
+	.min_ch_num = CONFIG_MIN_STM_DMA_CHANNEL_NR,
+	.max_ch_num  =CONFIG_MAX_STM_DMA_CHANNEL_NR,
+	.fdma_base  = STB7109_FDMA_BASE,
+	.irq_vect = LINUX_FDMA_STB7109_IRQ_VECT,
+	.fw_device_name = "STB7109_fdma_fw",
+	.nr_reqlines = (sizeof(stb7109_fdma_req_config) / sizeof(fdmareq_RequestConfig_t)),
+	.fw.data_reg = (unsigned long*)&STB7109_C2_DMEM_REGION,
+	.fw.imem_reg = (unsigned long*)&STB7109_C2_IMEM_REGION,
+	.fw.imem_fw_sz = STB7109_C2_IMEM_FIRMWARE_SZ,
+	.fw.dmem_fw_sz = STB7109_C2_DMEM_FIRMWARE_SZ,
+	.fw.dmem_len = STB7109_C2_DMEM_REGION_LENGTH,
+	.fw.imem_len = STB7109_C2_IMEM_REGION_LENGTH
+};
+
+static struct fdma_platform_device_data stb7109_C3_fdma_plat_data = {
+	.req_line_tbl_adr = (void*)&stb7109_fdma_req_config,
+	.registers_ptr =(void*) &stb7109_fdma_regs,
+	.cpu_subtype = 7109,
+	.cpu_rev = 3,
+	.min_ch_num = CONFIG_MIN_STM_DMA_CHANNEL_NR,
+	.max_ch_num  =CONFIG_MAX_STM_DMA_CHANNEL_NR,
+	.fdma_base  = STB7109_FDMA_BASE,
+	.irq_vect = LINUX_FDMA_STB7109_IRQ_VECT,
+	.fw_device_name = "STB7109_C3_fdma_fw",
+	.nr_reqlines = (sizeof(stb7109_fdma_req_config) / sizeof(fdmareq_RequestConfig_t)),
+	.fw.data_reg = (unsigned long*)&STB7109_C3_DMEM_REGION,
+	.fw.imem_reg = (unsigned long*)&STB7109_C3_IMEM_REGION,
+	.fw.imem_fw_sz = STB7109_C3_IMEM_FIRMWARE_SZ,
+	.fw.dmem_fw_sz = STB7109_C3_DMEM_FIRMWARE_SZ,
+	.fw.dmem_len = STB7109_C3_DMEM_REGION_LENGTH,
+	.fw.imem_len = STB7109_C3_IMEM_REGION_LENGTH
+
+};
+
+static struct fdma_platform_device_data stb7100_Cx_fdma_plat_data = {
+	.req_line_tbl_adr = (void*)&stb7100_fdma_req_config,
+	.registers_ptr =(void*) &stb7100_fdma_regs,
+	.cpu_subtype = 7100,
+/*	.cpu_rev = ! defined at runtime */
+	.min_ch_num = CONFIG_MIN_STM_DMA_CHANNEL_NR,
+	.max_ch_num  =CONFIG_MAX_STM_DMA_CHANNEL_NR,
+	.fdma_base  = STB7100_FDMA_BASE,
+	.irq_vect = LINUX_FDMA_STB7100_IRQ_VECT,
+	.fw_device_name = "STB7100_Cx_fdma_fw",
+	.nr_reqlines = (sizeof(stb7100_fdma_req_config) / sizeof(fdmareq_RequestConfig_t)),
+	.fw.data_reg = (unsigned long*)&STB7100_DMEM_REGION,
+	.fw.imem_reg = (unsigned long*)&STB7100_IMEM_REGION,
+	.fw.imem_fw_sz = STB7100_IMEM_FIRMWARE_SZ,
+	.fw.dmem_fw_sz = STB7100_DMEM_FIRMWARE_SZ,
+	.fw.dmem_len = STB7100_DMEM_REGION_LENGTH,
+	.fw.imem_len = STB7100_IMEM_REGION_LENGTH
+};
+
+
+static struct platform_device fdma_710x_device = {
+        .name           = "710x_FDMA",
+        .id             = -1,
+};
+
+
+static struct resource alsa_710x_resource_pcm0[2] = {
+
+	[0] = {/* allocatable channels*/
+		/*.start = runtime dependant*/
+		/*.end   = runtime dependant*/
+		.flags 	= IORESOURCE_IRQ
+	},
+	[1]= {/*fdma reqline*/
+		/*.start = runtime dependant*/
+		/*.end   = runtime dependant*/
+		.flags = IORESOURCE_IRQ
+	}};
+
+
+static struct resource alsa_710x_resource_pcm1[2] = {
+
+	[0] = {/* allocatable channels*/
+		/*.start = runtime dependant*/
+		/*.end   = runtime dependant*/
+		.flags 	= IORESOURCE_IRQ,
+	},
+	[1]= {/*fdma reqline*/
+		/*.start = runtime dependant*/
+		/*.end   = runtime dependant*/
+		.flags = IORESOURCE_IRQ,
+	}};
+
+static struct resource alsa_710x_resource_spdif[2] = {
+
+	[0] = {/*min allocatable channels*/
+		.start = 2,
+		.end   =2,
+		.flags = IORESOURCE_IRQ
+	},
+	[1] = {/*fdma reqline*/
+		/*.start = runtime dependant*/
+		/*.end   = runtime dependant*/
+		.flags = IORESOURCE_IRQ
+	}};
+
+
+static struct resource alsa_710x_resource_cnv[2] = {
+
+	[0] = {/*min allocatable channels*/
+		/*.start = runtime dependant*/
+		/*.end   = runtime dependant*/
+		.flags = IORESOURCE_IRQ,
+	},
+	[1] = {/*fdma reqline*/
+		/*.start = runtime dependant*/
+		/*.end   = runtime dependant*/
+		.flags = IORESOURCE_IRQ,
+	}};
+
+
+static struct platform_device alsa_710x_device_pcm0 = {
+	.name			= "710x_ALSA_PCM0",
+	.id 			= -1,
+	.num_resources	= 	ARRAY_SIZE(alsa_710x_resource_pcm0),
+	.resource		= alsa_710x_resource_pcm0,
+};
+
+
+static struct platform_device alsa_710x_device_pcm1 = {
+	.name			= "710x_ALSA_PCM1",
+	.id 			= -1,
+	.num_resources	= 	ARRAY_SIZE(alsa_710x_resource_pcm1),
+	.resource		= alsa_710x_resource_pcm1,
+};
+
+static struct platform_device alsa_710x_device_spdif = {
+	.name			= "710x_ALSA_SPD",
+	.id 			= -1,
+	.num_resources	= 	ARRAY_SIZE(alsa_710x_resource_spdif),
+	.resource		= alsa_710x_resource_spdif,
+};
+
+static struct platform_device alsa_710x_device_cnv = {
+	.name			= "710x_ALSA_CNV",
+	.id 			= -1,
+	.num_resources	= 	ARRAY_SIZE(alsa_710x_resource_cnv),
+	.resource		= alsa_710x_resource_cnv,
+};
+
 static struct platform_device *stb7100ref_devices[] __initdata = {
 	&smc91x_device,
 	&stb7109eth_device,
@@ -538,6 +835,11 @@ static struct platform_device *stb7100re
 	&rtc_device,
 	&stm_pwm_device,
 	&physmap_flash,
+	&fdma_710x_device,
+	&alsa_710x_device_pcm0,
+	&alsa_710x_device_pcm1,
+ 	&alsa_710x_device_spdif,
+	&alsa_710x_device_cnv,
 };
 
 static int __init device_init(void)
@@ -575,6 +877,73 @@ static int __init device_init(void)
 		}
 	}
 
+	if(chip_7109){
+		switch (chip_revision) {
+		case 1:
+			fdma_710x_device.dev.platform_data =(void*) &stb7109_C1_fdma_plat_data;
+			break;
+		case 2:
+			fdma_710x_device.dev.platform_data =(void*) &stb7109_C2_fdma_plat_data;
+			break;
+		default:
+			/* 7109 cut >= 3.0 */
+			fdma_710x_device.dev.platform_data =(void*) &stb7109_C3_fdma_plat_data;
+			break;
+		}
+
+		alsa_710x_resource_pcm0[0].start = 2;
+		alsa_710x_resource_pcm0[0].end = 10;
+
+		alsa_710x_resource_pcm1[0].start = 2;
+		alsa_710x_resource_pcm1[0].end 	= 2;
+
+		alsa_710x_resource_pcm0[1].start = STB7109_FDMA_REQ_PCM_0;
+		alsa_710x_resource_pcm0[1].end = STB7109_FDMA_REQ_PCM_0;
+
+		alsa_710x_resource_pcm1[1].start = STB7109_FDMA_REQ_PCM_1;
+		alsa_710x_resource_pcm1[1].end = STB7109_FDMA_REQ_PCM_1;
+
+		alsa_710x_resource_spdif[1].start = STB7109_FDMA_REQ_SPDIF;
+		alsa_710x_resource_spdif[1].end =   STB7109_FDMA_REQ_SPDIF;
+
+		alsa_710x_resource_cnv[0].start =2;
+		alsa_710x_resource_cnv[0].end = 10;
+		alsa_710x_resource_cnv[1].start = STB7109_FDMA_REQ_PCM_0;
+		alsa_710x_resource_cnv[1].end = STB7109_FDMA_REQ_PCM_0;
+	}
+	else {
+		stb7100_Cx_fdma_plat_data.cpu_rev = chip_revision;
+		fdma_710x_device.dev.platform_data =(void*) &stb7100_Cx_fdma_plat_data;
+
+		if(chip_revision >=3){
+			alsa_710x_resource_pcm0[0].start = 2;
+			alsa_710x_resource_pcm0[0].end = 10;
+			alsa_710x_resource_pcm1[0].start = 2;
+			alsa_710x_resource_pcm1[0].end 	= 2;
+			alsa_710x_resource_cnv[0].start =2;
+			alsa_710x_resource_cnv[0].end = 10;
+		}
+		else {
+			alsa_710x_resource_pcm0[0].start = 10;
+			alsa_710x_resource_pcm0[0].end = 10;
+			alsa_710x_resource_pcm1[0].start = 10;
+			alsa_710x_resource_pcm1[0].end 	= 10;
+			alsa_710x_resource_cnv[0].start =10;
+			alsa_710x_resource_cnv[0].end = 10;
+		}
+
+		alsa_710x_resource_pcm0[1].start = STB7100_FDMA_REQ_PCM_0;
+		alsa_710x_resource_pcm0[1].end = STB7100_FDMA_REQ_PCM_0;
+
+		alsa_710x_resource_pcm1[1].start = STB7100_FDMA_REQ_PCM_1;
+		alsa_710x_resource_pcm1[1].end = STB7100_FDMA_REQ_PCM_1;
+
+		alsa_710x_resource_spdif[1].start =  STB7100_FDMA_REQ_SPDIF;
+		alsa_710x_resource_spdif[1].end =  STB7100_FDMA_REQ_SPDIF;
+
+		alsa_710x_resource_cnv[1].start = STB7100_FDMA_REQ_PCM_0;
+		alsa_710x_resource_cnv[1].end = STB7100_FDMA_REQ_PCM_0;
+	}
 	ret = platform_add_devices(stb7100ref_devices, ARRAY_SIZE(stb7100ref_devices));
 	return ret;
 }
Index: linux/arch/sh/boards/st/stb7109eref/setup.c
===================================================================
--- linux.orig/arch/sh/boards/st/stb7109eref/setup.c
+++ linux/arch/sh/boards/st/stb7109eref/setup.c
@@ -20,6 +20,10 @@
 #include <linux/mtd/physmap.h>
 #include <asm/io.h>
 
+#include <linux/stm/710x_fdma.h>
+#include <linux/stm/7109_cut2_fdma2_firmware.h>
+#include <linux/stm/7109_cut3_fdma2_firmware.h>
+
 #define SYSCONF_BASE 0xb9001000
 #define SYSCONF_DEVICEID	(SYSCONF_BASE + 0x000)
 #define SYSCONF_SYS_STA(n)	(SYSCONF_BASE + 0x008 + ((n) * 4))
@@ -472,6 +476,206 @@ static struct platform_device physmap_fl
 	.num_resources	= 1,
 	.resource	= &physmap_flash_resource,
 };
+/*
+Re							RnW,    Opcode,  Transfer Incr addr,   Hold_off Initiator), */
+/*        						1-32   	cnt 1-4  On/Off       0-2        Used) */
+static  fdmareq_RequestConfig_t stb7109_fdma_req_config[]= {
+/*=========================== 7109 ============================================*/
+
+/*  {  Req  RnW, 						Opcode,    TransferCount  Inc,       Hold_off        Initiator), */
+/*  {               						1-32       1-4            On/Off       0-2           Used) */
+/*0*/	{STB7109_FDMA_REQ_UNUSED,			UNUSED, UNUSED,    1,     	  UNUSED,      0,     	     1 },/* NOT CONNECTED */
+/*1*/	{STB7109_FDMA_DMA_REQ_HDMI_AVI,			READ,   OPCODE_8,  1,             DISABLE_FLG, 0,            1 },  /* Video HDMI */
+/*2*/	{STB7109_FDMA_REQ_DISEQC_HALF_EMPTY,		WRITE,  OPCODE_4,  2,             DISABLE_FLG, 0,            1 },  /* DiseqC half empty */
+/*3*/	{STB7109_FDMA_REQ_DISEQC_HALF_FULL,		READ,   OPCODE_4,  2,             DISABLE_FLG, 0,            1 },  /* DiseqC half full */
+/*4*/	{STB7109_FDMA_REQ_SH4_SCIF_RX,			READ,   OPCODE_4,  2,             DISABLE_FLG, 0,            1 },  /* SH4/SCIF */
+/*5*/	{STB7109_FDMA_REQ_SH4_SCIF_TX,			WRITE,  OPCODE_4,  2,             DISABLE_FLG, 0,            1 },  /* SH4/SCIF */
+/*6*/	{STB7109_FDMA_REQ_SSC_0_RX,			READ,   OPCODE_2,  4,             DISABLE_FLG, 0,            1 },  /* SSC 0 rxbuff full */
+/*7*/	{STB7109_FDMA_REQ_SSC_1_RX,			READ,   OPCODE_2,  4,             DISABLE_FLG, 0,            1 },  /* SSC 1 rxbuff full */
+/*8*/	{STB7109_FDMA_REQ_SSC_2_RX,			READ,   OPCODE_2,  4,             DISABLE_FLG, 0,            1 },  /* SSC 2 rxbuff full */
+/*9*/	{STB7109_FDMA_REQ_SSC_0_TX,			WRITE,  OPCODE_2,  4,             DISABLE_FLG, 0,            1 },  /* SSC 0 txbuff empty */
+/*10*/	{STB7109_FDMA_REQ_SSC_1_TX,			WRITE,  OPCODE_2,  4,             DISABLE_FLG, 0,            1 },  /* SSC 1 txbuff empty */
+/*11*/	{STB7109_FDMA_REQ_SSC_2_TX,			WRITE,  OPCODE_2,  4,             DISABLE_FLG, 0,            1 },  /* SSC 1 txbuff empty */
+/*12*/  {STB7109_FDMA_REQ_UART_0_RX,			READ,   OPCODE_1,  4,             DISABLE_FLG, 0,            1 },  /* UART 0 rx half full */
+/*13*/	{STB7109_FDMA_REQ_UART_1_RX,			READ,   OPCODE_1,  4,             DISABLE_FLG, 0,            1 },  /* UART 1 rx half full */
+/*14*/	{STB7109_FDMA_REQ_UART_2_RX,			READ,   OPCODE_1,  4,             DISABLE_FLG, 0,            1 },  /* UART 2 rx half full */
+/*15*/	{STB7109_FDMA_REQ_UART_3_RX,			READ,   OPCODE_1,  4,             DISABLE_FLG, 0,            1 },  /* UART 3 rx half full */
+/*16*/	{STB7109_FDMA_REQ_UART_0_TX,			WRITE,  OPCODE_1,  1,             DISABLE_FLG, 0,            1 },  /* UART 0 tx half empty */
+/*17*/	{STB7109_FDMA_REQ_UART_1_TX,			WRITE,  OPCODE_1,  1,             DISABLE_FLG, 0,            1 },  /* UART 1 tx half empty */
+/*18*/	{STB7109_FDMA_REQ_UART_2_TX,			WRITE,  OPCODE_1,  1,             DISABLE_FLG, 0,            1 },  /* UART 2 tx half emtpy */
+/*19*/	{STB7109_FDMA_REQ_UART_3_TX,			WRITE,  OPCODE_1,  1,             DISABLE_FLG, 0,            1 },  /* UART 3 tx half empty */
+/*20*/	{STB7109_FDMA_REQ_REQ_EXT_PIO_0,		READ,   OPCODE_4,  1,             DISABLE_FLG, 0,            1 },  /* External 0 (PIO2bit5) hi priority */
+/*21*/	{STB7109_FDMA_REQ_REQ_EXT_PIO_1,		READ,   OPCODE_4,  1,             DISABLE_FLG, 0,            1 },  /* External 1 (PIO2bit6) hi priority */
+/*22*/	{STB7109_FDMA_REQ_CPXM_DECRYPT,  	     	READ,   OPCODE_4,  4,             DISABLE_FLG, 0,            1 },  /* CPxM decrypted data request */
+/*23*/  {STB7109_FDMA_REQ_CPXM_ENCRYPT,  	     	WRITE,  OPCODE_4,  4,             DISABLE_FLG, 0,            1 },  /* CPxm encrypted data request */
+/*24*/	{STB7109_FDMA_REQ_PCM_0,			WRITE,  OPCODE_4,  1,             DISABLE_FLG, 0,            0 },  /* Audio PCM Player 0 */
+/*25*/	{STB7109_FDMA_REQ_PCM_1,			WRITE,  OPCODE_4,  1,             DISABLE_FLG, 0,            0 },  /* Audio PCM Player 1 */
+/*26*/	{STB7109_FDMA_REQ_PCM_READ,			READ,   OPCODE_4,  1,             DISABLE_FLG, 0,            0 },  /* Audio PCM Reader */
+/*27*/	{STB7109_FDMA_REQ_SPDIF,			WRITE,  OPCODE_4,  1,             DISABLE_FLG, 0,            0 },  /* Audio SPDIF - 2xST4*/
+/*29*/	{STB7109_FDMA_REQ_SWTS_0,			WRITE,  OPCODE_32, 1,             DISABLE_FLG, 0,            0 },  /* SWTS 0 */
+/*29*/	{STB7109_FDMA_REQ_SWTS_1,			WRITE,  OPCODE_32, 1,             DISABLE_FLG, 0,            0 },  /* SWTS 1 */
+/*30*/	{STB7109_FDMA_REQ_SWTS_2,			WRITE,  OPCODE_32, 1,             DISABLE_FLG, 0,            0 },  /* SWTS 2 */
+/*31*/  {STB7109_FDMA_REQ_UNUSED,           		UNUSED, UNUSED,    1,             UNUSED,      0,            0 },  /* Reserved */
+};
+
+static fdma_regs_t stb7109_fdma_regs = {
+	.fdma_id= FDMA2_ID,
+	.fdma_ver = FDAM2_VER,
+	.fdma_en = FDMA2_ENABLE_REG,
+	.fdma_clk_gate = FDMA2_CLOCKGATE,
+	.fdma_rev_id = FDMA2_REV_ID,
+	.fdma_cmd_statn = STB7109_FDMA_CMD_STATn_REG,
+	.fdma_ptrn = STB7109_FDMA_PTR_REG,
+	.fdma_cntn = STB7109_FDMA_COUNT_REG,
+	.fdma_saddrn = STB7109_FDMA_SADDR_REG,
+	.fdma_daddrn = STB7109_FDMA_DADDR_REG,
+	.fdma_req_ctln = STB7109_FDMA_REQ_CTLn_REG,
+	.fdma_cmd_sta = FDMA2_CMD_MBOX_STAT_REG,
+	.fdma_cmd_set = FDMA2_CMD_MBOX_SET_REG,
+	.fdma_cmd_clr = FDMA2_CMD_MBOX_CLR_REG,
+	.fdma_cmd_mask = FDMA2_CMD_MBOX_MASK_REG,
+	.fdma_int_sta = FDMA2_INT_STAT_REG,
+	.fdma_int_set = FDMA2_INT_SET_REG,
+	.fdma_int_clr= FDMA2_INT_CLR_REG,
+	.fdma_int_mask= FDMA2_INT_MASK_REG,
+	.fdma_sync_reg= FDMA2_SYNCREG,
+	.fdma_dmem_region = STB7109_DMEM_OFFSET,
+	.fdma_imem_region = STB7109_IMEM_OFFSET,
+};
+
+static struct fdma_platform_device_data stb7109_C1_fdma_plat_data ={
+	.cpu_subtype = 7109,
+	.cpu_rev = 1,
+};
+
+static struct fdma_platform_device_data stb7109_C2_fdma_plat_data = {
+	.req_line_tbl_adr = (void*)&stb7109_fdma_req_config,
+	.registers_ptr =(void*) &stb7109_fdma_regs,
+	.cpu_subtype = 7109,
+	.cpu_rev = 2,
+	.min_ch_num = CONFIG_MIN_STM_DMA_CHANNEL_NR,
+	.max_ch_num  =CONFIG_MAX_STM_DMA_CHANNEL_NR,
+	.fdma_base  = STB7109_FDMA_BASE,
+	.irq_vect = LINUX_FDMA_STB7109_IRQ_VECT,
+	.fw_device_name = "STB7109_fdma_fw",
+	.nr_reqlines = (sizeof(stb7109_fdma_req_config) / sizeof(fdmareq_RequestConfig_t)),
+	.fw.data_reg = (unsigned long*)&STB7109_C2_DMEM_REGION,
+	.fw.imem_reg = (unsigned long*)&STB7109_C2_IMEM_REGION,
+	.fw.imem_fw_sz = STB7109_C2_IMEM_FIRMWARE_SZ,
+	.fw.dmem_fw_sz = STB7109_C2_DMEM_FIRMWARE_SZ,
+	.fw.dmem_len = STB7109_C2_DMEM_REGION_LENGTH,
+	.fw.imem_len = STB7109_C2_IMEM_REGION_LENGTH
+};
+
+static struct fdma_platform_device_data stb7109_C3_fdma_plat_data = {
+	.req_line_tbl_adr = (void*)&stb7109_fdma_req_config,
+	.registers_ptr =(void*) &stb7109_fdma_regs,
+	.cpu_subtype = 7109,
+	.cpu_rev = 3,
+	.min_ch_num = CONFIG_MIN_STM_DMA_CHANNEL_NR,
+	.max_ch_num  =CONFIG_MAX_STM_DMA_CHANNEL_NR,
+	.fdma_base  = STB7109_FDMA_BASE,
+	.irq_vect = LINUX_FDMA_STB7109_IRQ_VECT,
+	.fw_device_name = "STB7109_C3_fdma_fw",
+	.nr_reqlines = (sizeof(stb7109_fdma_req_config) / sizeof(fdmareq_RequestConfig_t)),
+	.fw.data_reg = (unsigned long*)&STB7109_C3_DMEM_REGION,
+	.fw.imem_reg = (unsigned long*)&STB7109_C3_IMEM_REGION,
+	.fw.imem_fw_sz = STB7109_C3_IMEM_FIRMWARE_SZ,
+	.fw.dmem_fw_sz = STB7109_C3_DMEM_FIRMWARE_SZ,
+	.fw.dmem_len = STB7109_C3_DMEM_REGION_LENGTH,
+	.fw.imem_len = STB7109_C3_IMEM_REGION_LENGTH
+
+};
+
+static struct platform_device fdma_710x_device = {
+        .name           = "710x_FDMA",
+        .id             = -1,
+};
+
+static struct resource alsa_710x_resource_pcm0[2] = {
+
+	[0] = {/* allocatable channels*/
+		.start =2,
+		.end   = 10,
+		.flags 	= IORESOURCE_IRQ
+	},
+	[1]= {/*fdma reqline*/
+		.start = STB7109_FDMA_REQ_PCM_0,
+		.end   = STB7109_FDMA_REQ_PCM_0,
+		.flags = IORESOURCE_IRQ
+	}};
+
+
+static struct resource alsa_710x_resource_pcm1[2] = {
+
+	[0] = {/* allocatable channels*/
+		.start = 2,
+		.end   = 2,
+		.flags 	= IORESOURCE_IRQ,
+	},
+	[1]= {/*fdma reqline*/
+		.start =STB7109_FDMA_REQ_PCM_1,
+		.end   =STB7109_FDMA_REQ_PCM_1,
+		.flags = IORESOURCE_IRQ,
+	}};
+
+static struct resource alsa_710x_resource_spdif[2] = {
+
+	[0] = {/*min allocatable channels*/
+		.start = 2,
+		.end   =2,
+		.flags = IORESOURCE_IRQ
+	},
+	[1] = {/*fdma reqline*/
+		.start =STB7109_FDMA_REQ_SPDIF,
+		.end   = STB7109_FDMA_REQ_SPDIF,
+		.flags = IORESOURCE_IRQ
+	}};
+
+static struct resource alsa_710x_resource_cnv[2] = {
+
+	[0] = {/*min allocatable channels*/
+		.start = 2,
+		.end   =10,
+		.flags = IORESOURCE_IRQ,
+	},
+	[1] = {/*fdma reqline*/
+		.start = STB7109_FDMA_REQ_PCM_0,
+		.end   = STB7109_FDMA_REQ_PCM_0,
+		.flags = IORESOURCE_IRQ,
+	}};
+
+
+static struct platform_device alsa_710x_device_pcm0 = {
+	.name			= "710x_ALSA_PCM0",
+	.id 			= -1,
+	.num_resources	= 	ARRAY_SIZE(alsa_710x_resource_pcm0),
+	.resource		= alsa_710x_resource_pcm0,
+};
+
+
+static struct platform_device alsa_710x_device_pcm1 = {
+	.name			= "710x_ALSA_PCM1",
+	.id 			= -1,
+	.num_resources	= 	ARRAY_SIZE(alsa_710x_resource_pcm1),
+	.resource		= alsa_710x_resource_pcm1,
+};
+
+static struct platform_device alsa_710x_device_spdif = {
+	.name			= "710x_ALSA_SPD",
+	.id 			= -1,
+	.num_resources	= 	ARRAY_SIZE(alsa_710x_resource_spdif),
+	.resource		= alsa_710x_resource_spdif,
+};
+
+static struct platform_device alsa_710x_device_cnv = {
+	.name			= "710x_ALSA_CNV",
+	.id 			= -1,
+	.num_resources	= 	ARRAY_SIZE(alsa_710x_resource_cnv),
+	.resource		= alsa_710x_resource_cnv,
+};
+
+
 
 static struct platform_device *stb7109eref_devices[] __initdata = {
 	&smc91x_device,
@@ -485,6 +689,11 @@ static struct platform_device *stb7109er
 	&ssc_device,
 	&rtc_device,
 	&physmap_flash,
+	&fdma_710x_device,
+	&alsa_710x_device_pcm0,
+	&alsa_710x_device_pcm1,
+ 	&alsa_710x_device_spdif,
+	&alsa_710x_device_cnv
 };
 
 static int __init device_init(void)
@@ -508,6 +717,39 @@ static int __init device_init(void)
 		sata_private_info.pc_glue_logic_init = 0x100ff;
 	}
 
+	switch (chip_revision) {
+	case 1:
+		fdma_710x_device.dev.platform_data = (void*)&stb7109_C1_fdma_plat_data;
+		break;
+	case 2:
+		fdma_710x_device.dev.platform_data =(void*) &stb7109_C2_fdma_plat_data;
+		break;
+	default:
+		/* 7109 cut >= 3.0 */
+		fdma_710x_device.dev.platform_data =(void*) &stb7109_C3_fdma_plat_data;
+		break;
+	}
+
+	alsa_710x_resource_pcm0[0].start = 2;
+	alsa_710x_resource_pcm0[0].end = 10;
+
+	alsa_710x_resource_pcm1[0].start = 2;
+	alsa_710x_resource_pcm1[0].end 	= 2;
+
+	alsa_710x_resource_pcm0[1].start = STB7109_FDMA_REQ_PCM_0;
+	alsa_710x_resource_pcm0[1].end = STB7109_FDMA_REQ_PCM_0;
+
+	alsa_710x_resource_pcm1[1].start = STB7109_FDMA_REQ_PCM_1;
+	alsa_710x_resource_pcm1[1].end = STB7109_FDMA_REQ_PCM_1;
+
+	alsa_710x_resource_spdif[1].start = STB7109_FDMA_REQ_SPDIF;
+	alsa_710x_resource_spdif[1].end =   STB7109_FDMA_REQ_SPDIF;
+
+	alsa_710x_resource_cnv[0].start =10;
+	alsa_710x_resource_cnv[0].end = 10;
+	alsa_710x_resource_cnv[1].start = STB7109_FDMA_REQ_PCM_0;
+	alsa_710x_resource_cnv[1].end = STB7109_FDMA_REQ_PCM_0;
+
 	ret = platform_add_devices(stb7109eref_devices, ARRAY_SIZE(stb7109eref_devices));
 	return ret;
 }
Index: linux/arch/sh/drivers/dma/dma-api.c
===================================================================
--- linux.orig/arch/sh/drivers/dma/dma-api.c
+++ linux/arch/sh/drivers/dma/dma-api.c
@@ -60,18 +60,15 @@ static LIST_HEAD(registered_dmac_list);
 struct dma_info *get_dma_info(unsigned int chan)
 {
 	struct dma_info *info;
-	unsigned int total = 0;
-
 	/*
 	 * Look for each DMAC's range to determine who the owner of
 	 * the channel is.
 	 */
-	list_for_each_entry(info, &registered_dmac_list, list) {
-		total += info->nr_channels;
-		if (chan > total)
-			continue;
+	list_for_each_entry(info, &registered_dmac_list, list)
+		if 	((chan >= info->first_channel_nr) &&
+			(chan <= info->first_channel_nr + info->nr_channels )){
+			return info;
 
-		return info;
 	}
 
 	return NULL;
@@ -94,17 +91,23 @@ static unsigned int get_nr_channels(void
 struct dma_channel *get_dma_channel(unsigned int chan)
 {
 	struct dma_info *info = get_dma_info(chan);
-
+	struct dma_channel * channel;
+	int i=0;
 	if (!info)
 		return ERR_PTR(-EINVAL);
 
-	return info->channels + chan;
+	for(;i < info->nr_channels;i++){
+		channel= &info->channels[i];
+		if(channel->chan == chan)
+			return channel;
+	}
+	return NULL;
 }
 
 int get_dma_residue(unsigned int chan)
 {
 	struct dma_info *info = get_dma_info(chan);
-	struct dma_channel *channel = &info->channels[chan];
+	struct dma_channel *channel = get_dma_channel(chan);
 
 	if (info->ops->get_residue)
 		return info->ops->get_residue(channel);
@@ -112,65 +115,139 @@ int get_dma_residue(unsigned int chan)
 	return 0;
 }
 
-int request_dma(unsigned int chan, const char *dev_id)
+static int search_cap(const char **haystack, const char* needle)
 {
-#ifdef CONFIG_STM_DMA
-	struct dma_info *info = { 0 };
-	struct dma_channel *channel = 0;
-	int ch_id = 0;
-	int i = 0;
-	if (chan == ANY_CHANNEL) {
-		do {
-			info = get_dma_info(i);
-			if (!info)
-				return -ENODEV;
-			channel = &info->channels[i];
-			i++;
-		} while (atomic_read(&channel->busy) == 1);
-	} else {
-		info = get_dma_info(chan);
-		channel = &info->channels[chan];
-	}
-	/*we should always find the channel free as it can only be used once requested */
-	if (info->ops->request)
-		ch_id = info->ops->request(channel);
-	else
-		return -ENODEV;
+	const char** p;
+	for (p=haystack; *p; p++) {
+		if (strcmp(*p, needle) == 0)
+			return 1;
+	}
 
-	down(&channel->sem);
-	atomic_set(&channel->busy, 1);
-	strlcpy(channel->dev_id, dev_id, sizeof(channel->dev_id));
-	up(&channel->sem);
-	return ch_id;
+	return 0;
+}
+struct dma_info * get_dma_info_by_name(const char * dmac_name)
+{
+	struct dma_info *info;
+	list_for_each_entry(info, &registered_dmac_list, list) {
+		if ((dmac_name != NULL) && (strcmp(dmac_name, info->name)!=0))
+			continue;
+		else return info;
+	}
+	return NULL;
+}
 
-#else
-	struct dma_info *info = get_dma_info(chan);
+/**
+ * request_dma_bycap - Allocate a DMA channel based on its capabilities
+ * @dmac: List of DMA controllers to search
+ * @caps: List of capabilites
+ *
+ * Search all channels of all DMA controllers to find a channel which
+ * matches the requested capabilities. The result is the channel
+ * number if a match is found, or %-ENODEV if no match is found.
+ * If @dmac is NULL, then any DMA controller will match. Similarly if
+ * @cap is NULL, then any channel will match.
+ *
+ * Note that not all DMA controllers export capabilities, in which
+ * case they can never be allocated using this API, and so
+ * request_dma() must be used specifying the channel number.
+ */
+int request_dma_bycap(const char** dmac, const char** caps, const char* dev_id)
+{
+	const char** p;
+	int i=0;
+	int chan_nr;
+	struct dma_info *info;
 
-	struct dma_channel *channel = &info->channels[chan];
-	down(&channel->sem);
+	if(dmac==NULL)
+		return -EINVAL;
 
-	if (!info->ops || chan >= MAX_DMA_CHANNELS) {
-		up(&channel->sem);
-		return -ENODEV;
+	list_for_each_entry(info, &registered_dmac_list, list) {
+		if (strcmp(*dmac, info->name)==0){
+			for (; i < info->nr_channels; i++) {
+				struct dma_channel* channel =&info->channels[i];
+				chan_nr = channel->chan;
+				if (channel->caps == NULL)
+					goto next;
+				if (caps) {
+					for (p=caps; *p; p++) {
+						if (! search_cap(channel->caps, *p))
+							goto next;
+						else {
+							if(request_dma(chan_nr, dev_id)==0)
+								goto found;
+
+						}
+					}
+				}
+				else if (request_dma(chan_nr, dev_id) == 0)
+					goto found;
+			next:
+				;
+			}
+		}
 	}
+	chan_nr = -ENODEV;
+found:
+	return chan_nr;
 
-	atomic_set(&channel->busy, 1);
+}
 
-	strlcpy(channel->dev_id, dev_id, sizeof(channel->dev_id));
 
-	up(&channel->sem);
+inline int dmac_search_free_channel(const char * dev_id)
+{
+	struct dma_channel *channel={0};
 
-	if (info->ops->request)
-		return info->ops->request(channel);
-	else
-		return -ENODEV;
+	struct dma_info *info = get_dma_info(0);
+
+	int i=0;
+	for(;i < info->nr_channels;i++){
+		channel = &info->channels[i];
+		if (!channel)
+			return -ENODEV;
+		if(atomic_read(&channel->busy) == 0)
+			break;
+	}
+	if (info->ops->request) {
+		int result = info->ops->request(channel);
+		if (result)
+			return result;
+
+		atomic_set(&channel->busy, 1);
+		return channel->chan;
+	}
+	else return -ENOSYS;
+}
+
+int request_dma(unsigned int chan, const char *dev_id)
+{
+	struct dma_channel *channel={0};
+	struct dma_info *info = get_dma_info(chan);
+	int result=0;
+
+#if defined(CONFIG_STM_DMA)
+	if(DMA_REQ_ANY_CHANNEL == chan)
+		return dmac_search_free_channel(dev_id);
 #endif
+
+	channel =get_dma_channel(chan);
+	if (atomic_xchg(&channel->busy, 1))
+		return -EBUSY;
+
+	strlcpy(channel->dev_id, dev_id, sizeof(channel->dev_id));
+
+	if (info->ops->request) {
+		result = info->ops->request(channel);
+		if (result)
+			atomic_set(&channel->busy, 0);
+		return result;
+	}
+	return 0;
 }
 
 void free_dma(unsigned int chan)
 {
 	struct dma_info *info = get_dma_info(chan);
-	struct dma_channel *channel = &info->channels[chan];
+	struct dma_channel *channel =  get_dma_channel(chan);
 
 	if (info->ops->free)
 		info->ops->free(channel);
@@ -181,7 +258,7 @@ void free_dma(unsigned int chan)
 void dma_wait_for_completion(unsigned int chan)
 {
 	struct dma_info *info = get_dma_info(chan);
-	struct dma_channel *channel = &info->channels[chan];
+	struct dma_channel *channel =  get_dma_channel(chan);
 
 	if (channel->flags & DMA_TEI_CAPABLE) {
 		wait_event(channel->wait_queue,
@@ -193,82 +270,72 @@ void dma_wait_for_completion(unsigned in
 		cpu_relax();
 }
 
-extern int dma_pause_channel(int flags, unsigned int chan)
+int register_chan_caps(const char *dmac,struct dma_chan_caps *  caps)
 {
-
-	struct dma_info *info = get_dma_info(chan);
-	struct dma_channel *channel = &info->channels[chan];
-
-	if (info->ops->pause)
-		return info->ops->pause(flags, channel);
-
+	/*first get the dmac */
+	int i,max_chans=0,assigned=0;
+	struct dma_channel* channel={0};
+	struct dma_info *info;
+	list_for_each_entry(info, &registered_dmac_list, list) {
+		if(strcmp( dmac, info->name)==0)
+			goto dmac_match;
+	}
 	return -ENODEV;
-}
 
-extern void dma_unpause_channel(unsigned int chan)
-{
-	struct dma_info *info = get_dma_info(chan);
-	struct dma_channel *channel = &info->channels[chan];
-
-	if (info->ops->unpause)
-		info->ops->unpause(channel);
-}
-
-extern int dma_stop_channel(unsigned int chan)
-{
-	struct dma_info *info = get_dma_info(chan);
-	struct dma_channel *channel = &info->channels[chan];
+dmac_match:
 
-	if (info->ops->stop)
-		return info->ops->stop(channel);
+	if(info->first_channel_nr ==0)
+		max_chans  =( (info->nr_channels-1));
+	else
+		max_chans  =( (info->nr_channels));
 
-	return -ENODEV;
+	for(;caps;caps++){
+		assigned =0;
+		for(i=0; i <= max_chans; i++) {
+			channel = &info->channels[i];
+			if(channel->chan  == caps->ch_num){
+				channel->caps = caps->caplist;
+				assigned=1;
+				break;
+			}
+		}
+		if(!assigned)
+			return  -ENODEV;
+		if(i >= max_chans)
+			return 0;
+	}
+	return -EINVAL;
 }
 
-#ifdef CONFIG_STM_DMA
-int dma_configure_channel(struct dma_channel *channel)
-{
-	struct dma_info *info = get_dma_info(channel->chan);
-	if (info->ops->configure)
-		return info->ops->configure(channel, channel->flags);
-
-	else
-		return -ENODEV;
-}
-#else
 
 void dma_configure_channel(unsigned int chan, unsigned long flags)
 {
-
 	struct dma_info *info = get_dma_info(chan);
-	struct dma_channel *channel = &info->channels[chan];
+	struct dma_channel *channel = get_dma_channel(chan);
+
 	if (info->ops->configure)
 		info->ops->configure(channel, flags);
 }
-#endif
-#ifdef CONFIG_STM_DMA
 
-int dma_xfer(unsigned int chan)
-{
-	struct dma_info *info = get_dma_info(chan);
-	struct dma_channel *channel = &info->channels[chan];
-	return info->ops->xfer(channel);
-}
-#else
+
 int dma_xfer(unsigned int chan, unsigned long from,
 	     unsigned long to, size_t size, unsigned int mode)
 {
 	struct dma_info *info = get_dma_info(chan);
-	struct dma_channel *channel = &info->channels[chan];
+	struct dma_channel *channel =  get_dma_channel(chan);
+
+	return info->ops->xfer(channel, from, to, size, mode);
+}
 
-	channel->sar = from;
-	channel->dar = to;
-	channel->count = size;
-	channel->mode = mode;
+int dma_extend(unsigned int chan, unsigned long op, void* param)
+{
+	struct dma_info *info = get_dma_info(chan);
+	struct dma_channel *channel = get_dma_channel(chan);
+	if (info->ops->extend)
+		return info->ops->extend(channel, op, param);
 
-	return info->ops->xfer(channel);
+	return -ENOSYS;
 }
-#endif
 
 #ifdef CONFIG_PROC_FS
 static int dma_read_proc(char *buf, char **start, off_t off,
@@ -304,7 +371,7 @@ static int dma_read_proc(char *buf, char
 }
 #endif
 
-int register_dmac(struct dma_info *info)
+extern int register_dmac(struct dma_info *info, int first_chan)
 {
 	unsigned int total_channels, i;
 
@@ -334,14 +401,15 @@ int register_dmac(struct dma_info *info)
 
 		memset(info->channels, 0, size);
 	}
-
+	info->first_channel_nr = first_chan;
 	total_channels = get_nr_channels();
-	for (i = 0; i < info->nr_channels; i++) {
-		struct dma_channel *chan = info->channels + i;
 
-		chan->chan = i;
-		chan->vchan = i + total_channels;
+	for (i =0; i < info->nr_channels; i++) {
 
+		struct dma_channel *chan = &info->channels[i];
+		atomic_set(&chan->busy, 0);
+		chan->chan = info->first_channel_nr + i;
+		chan->vchan =info->first_channel_nr + i + total_channels;
 		memcpy(chan->dev_id, "Unused", 7);
 
 		if (info->flags & DMAC_CHANNELS_TEI_CAPABLE)
@@ -392,12 +460,14 @@ MODULE_LICENSE("GPL");
 EXPORT_SYMBOL(request_dma);
 EXPORT_SYMBOL(free_dma);
 EXPORT_SYMBOL(register_dmac);
+EXPORT_SYMBOL(unregister_dmac);
 EXPORT_SYMBOL(get_dma_residue);
 EXPORT_SYMBOL(get_dma_info);
 EXPORT_SYMBOL(get_dma_channel);
 EXPORT_SYMBOL(dma_xfer);
 EXPORT_SYMBOL(dma_wait_for_completion);
 EXPORT_SYMBOL(dma_configure_channel);
-EXPORT_SYMBOL(dma_pause_channel);
-EXPORT_SYMBOL(dma_unpause_channel);
-EXPORT_SYMBOL(dma_stop_channel);
+EXPORT_SYMBOL(request_dma_bycap);
+EXPORT_SYMBOL(dma_extend);
+EXPORT_SYMBOL(register_chan_caps);
+EXPORT_SYMBOL(get_dma_info_by_name);
Index: linux/arch/sh/drivers/dma/dma-sysfs.c
===================================================================
--- linux.orig/arch/sh/drivers/dma/dma-sysfs.c
+++ linux/arch/sh/drivers/dma/dma-sysfs.c
@@ -80,11 +80,7 @@ static ssize_t dma_store_config(struct s
 	unsigned long config;
 
 	config = simple_strtoul(buf, NULL, 0);
-#ifdef CONFIG_STM_DMA
-	dma_configure_channel(channel);
-#else
 	dma_configure_channel(channel->vchan, config);
-#endif
 	return count;
 }
 
Index: linux/drivers/stm/7100_fdma2.c
===================================================================
--- linux.orig/drivers/stm/7100_fdma2.c
+++ /dev/null
@@ -1,1266 +0,0 @@
-/*
- *  STb7100 FDMA Driver
- *  Copyright (c) Mark Glaisher <Mark.Glaisher@st.com>
- *
- *   This program is free software; you can redistribute it and/or modify
- *   it under the terms of the GNU General Public License as published by
- *   the Free Software Foundation; either version 2 of the License, or
- *   (at your option) any later version.
- *
- *   This program is distributed in the hope that it will be useful,
- *   but WITHOUT ANY WARRANTY; without even the implied warranty of
- *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- *   GNU General Public License for more details.
- *
- *   You should have received a copy of the GNU General Public License
- *   along with this program; if not, write to the Free Software
- *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
- *
- */
-
-
-#include <asm/io.h>
-#include <linux/config.h>
-#include <linux/init.h>
-#include <linux/interrupt.h>
-#include <linux/proc_fs.h>
-#include <linux/wait.h>
-#include <linux/module.h>
-#ifdef CONFIG_BIGPHYS_AREA
-
-#include <linux/sched.h>
-#include <linux/slab.h>
-#include <linux/fb.h>
-#include <linux/interrupt.h>
-
-#include <asm/uaccess.h>
-#include <asm/irq.h>
-#include <asm/semaphore.h>
-#include <asm/cacheflush.h>
-
-#include <linux/bigphysarea.h>
-#define STM_USE_BIGPHYS_AREA 1
-#include <linux/delay.h>
-#else
-
-/* Private dummy defines so we do not have to ifdef the code */
-static caddr_t  bigphysarea_alloc(int size) { return NULL; }
-static void     bigphysarea_free(caddr_t addr, int size) {}
-
-#endif
-
-#include <linux/stm/7100_fdma2.h>
-#include "7100_fdma2_firmware.h"
-#include <asm-sh/dma.h>
-
-#define STB7100_DMA_CHANNELS 16
-
-static struct tasklet_struct fdma_complete[STB7100_DMA_CHANNELS];
-static struct tasklet_struct fdma_error[STB7100_DMA_CHANNELS];
-
-typedef int (*fp)(struct dma_channel *,unsigned long);
-static fdma_llu_entry static_llu[STB7100_DMA_CHANNELS] __attribute__((__aligned__(32)));
-
-typedef struct channel_status{
-	char    locked;
-	pf 	comp_callback;
-	void   *comp_callback_param;
-	pf	err_callback;
-	void   *err_callback_param;
-	u32    *llu_virt_addr;
-	u32	llu_bus_addr;
-	u32	transfer_sz;
-	u32	alloc_mem_sz;/*number of bytes of dynamic mem alloced for llu*/
-	u32 	list_len;
-	char    cb_in_interrupt;
-	char	dynamic_mem;
-	char	ch_term;
-	char	ch_pause;
-	char	is_xferring;
-
-/*This must be the last structure member to prevent scribbling
- * over the initialied queue * at the end of transfer*/
-/* This is done by the memset in free_fdma_channel() */
-	wait_queue_head_t cfg_blk;
-}channel_status;
-
-typedef struct fdma_chip{
-	channel_status channel[STB7100_DMA_CHANNELS];
-	spinlock_t fdma_lock;
-	spinlock_t channel_lock;
-	u32 	io_base;
-}fdma_chip;
-
-static fdma_chip chip;
-
-#define DUMP_FDMA_CHANNEL(chan)\
-	(printk("CHANNEL%d is \n CMD_STAT %x\n PTR %x\n CNT %x\n SADDR %x\n DADDR %x\n REQ_CTL %x\n", \
-		chan, \
-		(int)readl(chip.io_base + FDMA2_CMD_STATn + (chan * CMD_STAT_OFFSET)), \
-		(int)readl((chip.io_base + NODE_DATA_OFFSET * chan) + FDMA2_PTR_REG), \
-		(int)readl((chip.io_base + NODE_DATA_OFFSET * chan) + FDMA2_COUNT_REG), \
-		(int)readl((chip.io_base + NODE_DATA_OFFSET * chan) + FDMA2_SADDR_REG), \
-		(int)readl((chip.io_base + NODE_DATA_OFFSET * chan) + FDMA2_DADDR_REG), \
-		(int)readl((chip.io_base + CMD_STAT_OFFSET * chan) + FDMA2_REQ_CTL_REG)))
-
-#define DUMP_FDMA_INTERFACE()(\
-	printk(" FDMA_CMD_STA %x\n FDMA_CMD_SET %x\n FDMA_CMD_CLR %x\n FDMA_CMD_MASK FDMA_INT_STA %x\n FDMA_INT_SET %x\n FDMA_INT_CLR %x\n FDMA_INT_MASK %x\n", \
-		(int)readl(chip.io_base + FDMA2_CMD_MBOX_STAT_REG),\
-		(int)readl(chip.io_base + FDMA2_CMD_MBOX_SET_REG),\
-		(int)readl(chip.io_base + FDMA2_CMD_MBOX_CLR_REG),\
-		(int)readl(chip.io_base + FDMA2_CMD_MBOX_MASK_REG),\
-		(int)readl(chip.io_base + FDMA2_INT_STAT_REG),\
-		(int)readl(chip.io_base + FDMA2_INT_SET_REG),\
-		(int)readl(chip.io_base + FDMA2_INT_CLR_REG),\
-		(int)readl(chip.io_base + FDMA2_INT_MASK_REG)))
-
-
-#define DUMP_NODE_FROM_EXTMEM(addr)(\
-	printk("NODE @ %x\n NEXT %x\n CTL %x\n NBYTES %x\n SADDR %x\n DADDR %x\n\n",\
-		(int)virt_to_phys(addr), \
-		(int)readl(addr), \
-		(int)readl(addr+0x04),\
-		(int)readl(addr+0x08),\
-		(int)readl(addr+0xc),\
-		(int)readl(addr+0x10)))
-
-#define DUMP_SPDIF_NODE_DATA(addr)(\
-	printk(" PA_PB %x\n PC_PD %x\n BST_PER %x\n CHALO %x\n CHAHI %x\n CHBLO %x\n CHBHI%x\n\n", \
-		(int)readl(addr+0x14), \
-		(int)readl(addr+0x18),\
-		(int)readl(addr+0x1c),\
-		(int)readl(addr+0x20),\
-		(int)readl(addr+0x24),\
-		(int)readl(addr+0x28),\
-		(int)readl(addr+0x2c)))
-
-
-#define NUM_FDMA_REQ_LINES 32
-static fdmareq_RequestConfig_t fdmareq_RequestLines[NUM_FDMA_REQ_LINES] ={
-/*=========================== 7100 ============================================*/
-
-/*
-Req  RnW,    Opcode,  Transfer  Inc,       Hold_off  Initiator), */
-/*           1-32     count 1-4            On/Off       0-2     Used) */
-
-{0,   WRITE,  OPCODE_4,  1,     ENABLE_FLG,  0,     1 },/* SPDIF Testing */
-{1,   UNUSED, UNUSED,    1,     UNUSED,      0,     1 },/* NOT CONNECTED */
-{2,   UNUSED, UNUSED,    1,     UNUSED,      0,     1 },/* NOT CONNECTED */
-{3,   READ,   OPCODE_8,  1,     DISABLE_FLG, 0,     1 },/* Video HDMI */
-{4,   WRITE,  OPCODE_4,  2,     DISABLE_FLG, 0,     1 },/* DiseqC half empty */
-{5,   READ,   OPCODE_4,  2,     DISABLE_FLG, 0,     1 },/* DiseqC half full */
-{6,   READ,   OPCODE_4,  2,     DISABLE_FLG, 0,     1 },  /* SH4/SCIF */
-{7,   WRITE,  OPCODE_4,  2,     DISABLE_FLG, 0,     1 },  /* SH4/SCIF */
-{8,   READ,   OPCODE_2,  4,     DISABLE_FLG, 0,     1 },  /* SSC 0 rxbuff full */
-{9,   READ,   OPCODE_2,  4,     DISABLE_FLG, 0,     1 },  /* SSC 1 rxbuff full */
-{10,  READ,   OPCODE_2,  4,     DISABLE_FLG, 0,     1 },  /* SSC 2 rxbuff full */
-{11,  WRITE,  OPCODE_2,  4,     DISABLE_FLG, 0,     1 },  /* SSC 0 txbuff empty */
-{12,  WRITE,  OPCODE_2,  4,     DISABLE_FLG, 0,     1 },  /* SSC 1 txbuff empty */
-{13,  WRITE,  OPCODE_2,  4,     DISABLE_FLG, 0,     1 },  /* SSC 1 txbuff empty */
-{14,  READ,   OPCODE_1,  1,     DISABLE_FLG, 0,     1 },  /* UART 0 rx half full */
-{15,  READ,   OPCODE_1,  1,     DISABLE_FLG, 0,     1 },  /* UART 1 rx half full */
-{16,  READ,   OPCODE_1,  1,     DISABLE_FLG, 0,     1 },  /* UART 2 rx half full */
-{17,  READ,   OPCODE_1,  1,     DISABLE_FLG, 0,     1 },  /* UART 3 rx half full */
-{18,  WRITE,  OPCODE_1,  1,     DISABLE_FLG, 0,     1 },  /* UART 0 tx half empty */
-{19,  WRITE,  OPCODE_1,  1,     DISABLE_FLG, 0,     1 },  /* UART 1 tx half empty */
-{20,  WRITE,  OPCODE_1,  1,     DISABLE_FLG, 0,     1 },  /* UART 2 tx half emtpy */
-{21,  WRITE,  OPCODE_1,  1,     DISABLE_FLG, 0,     1 },  /* UART 3 tx half empty */
-{22,  READ,   OPCODE_4,  1,     DISABLE_FLG, 0,     1 },  /* External 0 (PIO2bit5) hi priority */
-{23,  READ,   OPCODE_4,  1,     DISABLE_FLG, 0,     1 },  /* External 1 (PIO2bit6) hi priority */
-{24,  READ,   OPCODE_4,  4,     DISABLE_FLG, 0,     1 },  /* CPxM decrypted data request */
-{25,  WRITE,  OPCODE_4,  4,     DISABLE_FLG, 0,     1 },  /* CPxm encrypted data request */
-{26,  WRITE,  OPCODE_4,  1,     DISABLE_FLG, 1,     1 },  /* Audio PCM Player 0 */
-{27,  WRITE,  OPCODE_4,  1,     DISABLE_FLG, 1,     1 },  /* Audio PCM Player 1 */
-{28,  READ,   OPCODE_4,  1,     DISABLE_FLG, 0,     1 },  /* Audio PCM Reader */
-{29,  WRITE,  OPCODE_4,  2,     DISABLE_FLG, 0,     1 },  /* Audio SPDIF - 2xST4*/
-{30,  WRITE,  OPCODE_16, 1,     DISABLE_FLG, 0,     1 },  /* SWTS */
-{31,  UNUSED, UNUSED,    1,     UNUSED,      0,     1 },  /* Reserved */
-
-};
-
-int get_fdma_chan_status(int channel)
-{
-	return (readl(chip.io_base + FDMA2_CMD_STATn + (channel* CMD_STAT_OFFSET)) & 3);
-}
-
-typedef volatile unsigned long device_t;
-
-static void stb7100_bootload_fdma(void* addr)
-{
-
-	/*we need to load the IMEM & DMEM regions for the slim core*/
-	u32 unused_ibytes=IMEM_REGION_LENGTH - IMEM_FIRMWARE_SZ;
-	u32 unused_dbytes =DMEM_REGION_LENGTH - DMEM_FIRMWARE_SZ;
-
-	device_t* ptr=0;
-	printk("STB7100_FDMA Loading Firmaware Rev%s.....",FIRMWARE_REVISION);
-
-	spin_lock(&chip.fdma_lock);
-	ptr = (device_t*) ((char*) addr +DMEM_OFFSET);
-	memcpy((void*)ptr,&DATA_REGION[0],DMEM_FIRMWARE_SZ * sizeof(u32) );
-
-	if(unused_dbytes){
-		ptr =(device_t*) ((char*)addr +DMEM_OFFSET +(DMEM_FIRMWARE_SZ*
-							sizeof(u32)));
-		memset((void*)ptr ,0, (DMEM_REGION_LENGTH-DMEM_FIRMWARE_SZ));
-	}
-
-	ptr = (device_t*) ((char*) addr +IMEM_OFFSET);
-	memcpy((void*)ptr,&IMEM_REGION[0],IMEM_FIRMWARE_SZ* sizeof(u32));
-
-
-	if(unused_ibytes){
-		ptr =(device_t*) ((char*)addr +IMEM_OFFSET +(IMEM_FIRMWARE_SZ*
-								sizeof(u32)));
-		memset((void*)ptr,0, (IMEM_REGION_LENGTH-IMEM_FIRMWARE_SZ));
-	}
-	spin_unlock(&chip.fdma_lock);
-	printk("OK\n");
-}
-
-
-
-static void initialise_fdma2(void)
-{
-/*These pokes come from the current STAPI tree.
- * The three magic vals are pokes to undocumented regs so
- * we don't know what they mean.
- *
- * The effect is to turn on and initialise the clocks
- * and set all channels off*/
-
-	/*clear the status regs MBOX & IRQ*/
-	writel(CLEAR_WORD, chip.io_base+FDMA2_INT_CLR_REG);
-	writel(CLEAR_WORD, chip.io_base+FDMA2_CMD_MBOX_CLR_REG);
-
-    /* Enable the FDMA block */
-	writel(1,chip.io_base+FDMA2_SYNCREG);
-	writel(5,chip.io_base+FDMA2_CLOCKGATE);
-	writel(0,chip.io_base+FDMA2_CLOCKGATE);
-
-}
-/*this function enables messaging and intr generation for all channels &
- * starts the fdma running*/
-static int enable_all_channels(void){
-
-	writel(CLEAR_WORD,chip.io_base + FDMA2_INT_MASK_REG);
-	writel(CLEAR_WORD,chip.io_base + FDMA2_CMD_MBOX_MASK_REG);
-	writel(ENABLE_FLG ,chip.io_base +FDMA2_ENABLE_REG);
-	return (readl(chip.io_base + FDMA2_ENABLE_REG) &1);
-}
-
-static void reset_channels(void)
-{
-	int channel=0;
-	for(;channel <(STB7100_DMA_CHANNELS-1);channel++)
-		writel(0,chip.io_base+FDMA2_CMD_STATn+(channel*CMD_STAT_OFFSET));
-}
-
-static void initialise_req_ctl(void)
-{
-	unsigned long ReqC=0;
-	int i=0;
-	for(;i < 31;i++){
-
-	  	ReqC = (u32)(fdmareq_RequestLines[i].HoldOff   & 0x0f) <<  0;
-	  	 /* Bits 3...0 */
-        	ReqC |= (u32)(fdmareq_RequestLines[i].OpCode    & 0x0f) <<  4;
-        	/*  " 7...4 */
-        	ReqC |= (u32)(fdmareq_RequestLines[i].Access    & 0x01) << 14;
-        	 /*  " 14 */
- 	        ReqC |= (u32)(fdmareq_RequestLines[i].Initiator & 0x03) << 22;
- 	        /*  " 23...22 */
-       		ReqC |= (u32)((fdmareq_RequestLines[i].Count-1) & 0x1F) << 24;
-       		 /*  " 28...24 */
-        	ReqC|= (u32)(fdmareq_RequestLines[i].Increment & 0x01) << 29;
-        	/*  " 29 */
-            /* Write to device */
-
-        writel(ReqC,
-        	chip.io_base+FDMA2_REQ_CTL_REG+(fdmareq_RequestLines[i].Index *
-        						CMD_STAT_OFFSET));
-	}
-}
-
-static int claim_fdma_channel(int channel)
-{
-	spin_lock(&chip.channel_lock);
-
-	if(!chip.channel[channel].locked){
-		chip.channel[channel].locked=1;
-		spin_unlock(&chip.channel_lock);
-		return channel;
-	}
-	else{
-		spin_unlock(&chip.channel_lock);
-		return -ENODEV;
-	}
-}
-
-static void free_fdma_channel(int channel)
-{
-	unsigned long irqflags;
-
-	spin_lock_irqsave(&chip.channel_lock, irqflags);
-	if(chip.channel[channel].dynamic_mem){
-		bigphysarea_free((void*)chip.channel[channel].llu_virt_addr,
-			chip.channel[channel].alloc_mem_sz);
-	}
-	memset(&chip.channel[channel],0,sizeof(channel_status)-
-						sizeof(wait_queue_head_t));
-	spin_unlock_irqrestore(&chip.channel_lock, irqflags);
-}
-
-static int get_next_free_channel(void)
-{
-	unsigned long irqflags;
-	int channel=0;
-	do{
-		if(get_fdma_chan_status(channel) == FDMA_CHANNEL_IDLE)
-		{
-			spin_lock_irqsave(&chip.channel_lock, irqflags);
-
-			if(!chip.channel[channel].locked)
-			{
-				spin_unlock_irqrestore(&chip.channel_lock, irqflags);
-				if(claim_fdma_channel(channel)<0)
-					return -ENODEV;
-				else return channel;
-			}
-			spin_unlock_irqrestore(&chip.channel_lock, irqflags);
-		}
-	}while(channel++ < STB7100_DMA_CHANNELS);
-	return -ENODEV;
-}
-
-
-/*will start an idle channel otherwise nothing
- *channel must be 0-15
- * start_addr must be 32 byte aligned and uncached
- * */
-static int start_fdma_channel(int channel,unsigned long * start_addr)
-{
-/*first we must check if the sel channel is available*/
-	if((channel < 0) && (channel >15) )
-		return -EINVAL;
-
-	if(((u32)start_addr & 0x1F)!=0){
-		printk(KERN_CRIT"FDMA CH%d adr not aligned -transfer aborted \n"
-								,channel);
-		return -EINVAL;
-	}
-
-	spin_lock(&chip.fdma_lock);
-
-	writel((u32)start_addr  | CMDSTAT_FDMA_START_CHANNEL,
-		   chip.io_base+ FDMA2_CMD_STATn + (channel * CMD_STAT_OFFSET)
-		  );
-	/*start channel*/
-	writel((MBOX_CMD_START_CHANNEL << (channel*2)),chip.io_base +
-						FDMA2_CMD_MBOX_SET_REG);
-	spin_unlock(&chip.fdma_lock);
-	return 0;
-
-}
-
-
-static void setup_node_strides(fdma_llu_entry * node,
-				struct dma_channel * chan,
-				unsigned long flags)
-{
-	/*a flag value below the 1F range indicates a paced transfer is configured
-	 * so no notion of dimensionality is applied.  Therefore line length == total bytes*/
-	if(flags & 0x1F){
-		node->node_dstride	=0;
-		node->node_sstride	=0;
-		node->length 		= chan->count;
-	}
-	else {
-		/*source x Destination*/
-		if(flags & DIM_0_x_0){
-			node->node_sstride 	=0;
-			node->node_dstride 	=0;
-			node->length 		=chan->src_sz;
-		}
-		else if(flags & DIM_0_x_1){
-			node->node_sstride 	=0;
-			node->node_dstride 	=chan->src_sz;
-			node->length 		=chan->src_sz;
-		}
-		else if(flags & DIM_0_x_2){
-			node->node_sstride 	=0;
-			node->node_dstride 	=chan->dstride;
-			node->length 		=chan->src_sz;
-		}
-		else if(flags & DIM_1_x_0){
-			node->node_sstride 	= chan->src_sz;
-			node->node_dstride 	=0;
-			node->length 		= chan->src_sz;
-		}
-		else if(flags & DIM_1_x_1){
-			node->node_sstride 	=0;
-			node->node_dstride 	=0;
-			node->length 		=chan->src_sz;
-		}
-		else if(flags & DIM_1_x_2){
-			node->node_sstride 	=chan->dst_sz;
-			node->node_dstride 	=chan->dstride;
-			node->length		=chan->dst_sz;
-		}
-		else if(flags & DIM_2_x_0){
-			node->node_sstride 	=chan->sstride;
-			node->node_dstride 	=0;
-			node->length 		=chan->src_sz;
-		}
-		else if(flags & DIM_2_x_1){
-			node->node_sstride = chan->sstride;
-			node->node_dstride 	=chan->src_sz;
-			node->length 		=chan->src_sz;
-		}
-		else if(flags & DIM_2_x_2){
-			node->node_sstride 	=chan->sstride;
-			node->node_dstride 	=chan->dstride;
-			node->length 		=chan->dst_sz;
-		}
-		else{
-			printk(" NO stride setup specified-using def config\n");
-			node->node_sstride 	=0;
-			node->node_dstride 	=0;
-			node->length 		=chan->src_sz;
-			/*we take the default config -simple mem -> mem move 1x1 */
-		}
-	}
-}
-
-
-int setup_freerunning_nodelist(struct dma_channel *chan,unsigned long flags)
-{
-	unsigned long irqflags;
-	int i=0;
-	fdma_llu_entry llu[chan->list_len];
-	unsigned long current_addr=chip.channel[chan->chan].llu_bus_addr;
-	struct dma_channel * channel = chan;
-
-	memset(&llu[0],0,sizeof(fdma_llu_entry)* chan->list_len);
-	while(i++ < channel->list_len){
-
-		current_addr +=sizeof(fdma_llu_entry);
-
-		llu[i-1].next_item = (u32)virt_to_phys((u32*)current_addr);
-		llu[i-1].saddr = chan->sar;
-		llu[i-1].daddr = chan->dar;
-		llu[i-1].size_bytes = chan->count;
-
-		if(flags & NODE_PAUSE_ISR)
-			llu[i-1].control |=  SET_NODE_COMP_PAUSE;
-
-		if(flags  & NODE_DONE_ISR)
-			llu[i-1].control |= SET_NODE_COMP_IRQ;
-
-		/*FREERUNNING TRANSFER SELECTED*/
-		/*due to a wierdness in the FDMA design,
-		freerunning xfers must alwyas set increment
-		addr for source/dest. This is an overloaded
-		parameter for the slim core and will not actually
-		produce incrementing addresses !! :-\ */
-		llu[i-1].control |= 	NODE_ADDR_INCR <<SOURCE_ADDR;
-		llu[i-1].control |= 	NODE_ADDR_INCR <<DEST_ADDR;
-		setup_node_strides(&llu[i-1],chan,flags);
-		chan++;
-
-	}
-
-	if(flags & LIST_TYPE_LINKED)
-		llu[channel->list_len-1].next_item =
-		(u32)virt_to_phys((u32*)chip.channel[channel->chan].
-								llu_bus_addr);
-	else
-		llu[channel->list_len-1].next_item = 0;
-
-	spin_lock_irqsave(&chip.channel_lock, irqflags);
-	memcpy_toio((volatile void __iomem *)chip.channel[channel->chan].llu_bus_addr,&llu[0],
-			sizeof(fdma_llu_entry)*channel->list_len);
-	spin_unlock_irqrestore(&chip.channel_lock, irqflags);
-
-
-	dma_cache_wback(chip.channel[channel->chan].llu_virt_addr,
-				(sizeof(fdma_llu_entry)*channel->list_len));
-
-	return 0;
-}
-
-
-int setup_spdif_nodelist(struct dma_channel *chan,unsigned long flags)
-{
-	unsigned long irqflags;
-	fdma_spdif_entry llu[chan->list_len];
-	unsigned long req_line = flags & REQ_LINE_MASK;
-	int i=0;
-	struct dma_channel * channel = chan;
-	unsigned long current_addr=chip.channel[chan->chan].llu_bus_addr;
-	memset(&llu[0],0,sizeof(fdma_llu_entry)* chan->list_len);
-
-	while(i++ < chan->list_len){
-
-		current_addr +=sizeof(fdma_spdif_entry);
-
-		llu[i-1].next_item = (u32)virt_to_phys((u32*)current_addr);
-		llu[i-1].saddr = ALIGN(chan->sar,32);
-		llu[i-1].daddr = chan->dar;
-		llu[i-1].size_bytes = chan->count;
-		llu[i-1].control  = EXTENDED_NODE_TYPE
-				    | NODE_TYPE_SPDIF
-				    | (req_line << 8);
-
-		if(flags & NODE_PAUSE_ISR)
-			llu[i-1].control |=  SET_NODE_COMP_PAUSE;
-
-		if(flags  & NODE_DONE_ISR)
-			llu[i-1].control |= SET_NODE_COMP_IRQ;
-
-		if(chan->spdif.valid)
-			llu[i-1].control |= SPDIF_NODE_VALID;
-
-		if(chan->spdif.burst_end)
-			llu[i-1].control |= SPDIF_BURST_END;
-
-		llu[i-1].control =(llu[i-1].control & ZERO_PAD_MASK);
-
-		llu[i-1].node_pa_pb = chan->spdif.pa_pb;
-		llu[i-1].node_pc_pd =chan->spdif.pc_pd;
-		llu[i-1].node_bst_prd= chan->spdif.bst_prd;
-		llu[i-1].node_chn0_sta_low=chan->spdif.chn0_sta_low;
-		llu[i-1].node_chn0_sta_high=
-			(chan->spdif.chn0_sta_high & CHHI_STA_ZERO_PAD_MASK);
-		llu[i-1].node_chn1_sta_low=chan->spdif.chn1_sta_low;
-		llu[i-1].node_chn1_sta_high=
-			(chan->spdif.chn1_sta_high & CHHI_STA_ZERO_PAD_MASK);
-		chan++;
-	}
-	if(flags & LIST_TYPE_LINKED)
-		llu[channel->list_len-1].next_item =
-		(u32)virt_to_phys((u32*)chip.channel
-				[channel->chan].llu_virt_addr);
-	else
-		llu[chan->list_len-1].next_item = 0;
-
-	spin_lock_irqsave(&chip.channel_lock, irqflags);
-	memcpy_toio((volatile void __iomem *)chip.channel[channel->chan].llu_bus_addr,&llu[0],
-			sizeof(fdma_spdif_entry)*channel->list_len);
-
-	spin_unlock_irqrestore(&chip.channel_lock, irqflags);
-	dma_cache_wback(chip.channel[channel->chan].llu_virt_addr,
-					(sizeof(fdma_spdif_entry)*
-						channel->list_len));
-	return 0;
-}
-
-int setup_paced_nodelist(struct dma_channel *chan,unsigned long flags)
-{
-	unsigned long irqflags;
-	int i=0;
-	fdma_llu_entry llu[chan->list_len];
-	unsigned long req_line = flags & REQ_LINE_MASK;
-	unsigned long current_addr=chip.channel[chan->chan].llu_bus_addr;
-	struct dma_channel * channel = chan;
-
-	memset(&llu[0],0,sizeof(fdma_llu_entry)* chan->list_len);
-	while(i++ < channel->list_len){
-
-		current_addr +=sizeof(fdma_llu_entry);
-
-		llu[i-1].next_item = (u32)virt_to_phys((u32*)current_addr);
-		llu[i-1].saddr = chan->sar;
-		llu[i-1].daddr = chan->dar;
-		llu[i-1].size_bytes = chan->count;
-
-		if(flags & NODE_PAUSE_ISR)
-			llu[i-1].control |=  SET_NODE_COMP_PAUSE;
-
-		if(flags  & NODE_DONE_ISR)
-			llu[i-1].control |= SET_NODE_COMP_IRQ;
-
-
-		req_line = flags & REQ_LINE_MASK;
-		if(! req_line){
-			printk("STB7100 FDMA PACED MODE but no req config\n");
-			return -EINVAL;
-		}
-		/*PACED TRANSFER SELECTED*/
-		llu[i-1].control |= req_line;
-
-		if(flags & DIM_1_x_0 ){
-			llu[i-1].control |= 	NODE_ADDR_INCR <<SOURCE_ADDR;
-			llu[i-1].control |=     NODE_ADDR_STATIC <<DEST_ADDR;
-		}
-		else if(flags & DIM_0_x_1){
-			llu[i-1].control |= 	NODE_ADDR_STATIC <<SOURCE_ADDR;
-			llu[i-1].control |= 	NODE_ADDR_INCR <<DEST_ADDR;
-		}
-		else {
-			printk("STB7100 FDMA PACED MODE bad dimensionality \n");
-			return -EINVAL;
-		}
-
-		setup_node_strides(&llu[i-1],chan,flags);
-		chan++;
-	}
-
-	if(flags & LIST_TYPE_LINKED)
-		llu[channel->list_len-1].next_item =
-				(u32)virt_to_phys((u32*)chip.channel
-				[channel->chan].llu_virt_addr);
-
-	else
-	    llu[channel->list_len-1].next_item = 0;
-
-	spin_lock_irqsave(&chip.channel_lock, irqflags);
-	memcpy_toio((volatile void __iomem *)chip.channel[channel->chan].llu_bus_addr,&llu[0],
-			sizeof(fdma_llu_entry)*channel->list_len);
-	spin_unlock_irqrestore(&chip.channel_lock, irqflags);
-
-	dma_cache_wback(chip.channel[channel->chan].llu_virt_addr,
-					(sizeof(fdma_llu_entry)*
-					channel->list_len));
-
-	return 0;
-}
-
-
-static int setup_sg_nodelist(struct dma_channel *chan,unsigned long flags)
-{
-	unsigned long irqflags;
-	int i=0;
-	unsigned long current_addr=chip.channel[chan->chan].llu_bus_addr;
-	struct dma_channel * channel = chan;
-	struct scatterlist * src_sg=chan->src_sg;
-	struct scatterlist * dst_sg= chan->dst_sg;
-	static u32 llu_len=0;
-
-	fdma_llu_entry llu[ flags & DIM_SG_x_0 ?
-				chan->src_sg_len:
-				chan->dst_sg_len  ];
-
-	if(flags & DIM_SG_x_0)
-		llu_len = chan->src_sg_len;
-	else if (flags & DIM_0_x_SG)
-		llu_len = chan->dst_sg_len;
-	else if (flags & DIM_SG_x_SG) {}
-
-
-	memset(&llu[0],0,sizeof(fdma_llu_entry)* llu_len);
-
-	while(i++ < llu_len){
-		current_addr +=sizeof(fdma_llu_entry);
-
-		llu[i-1].next_item = (u32)virt_to_phys((u32*)current_addr);
-		if(flags & DIM_0_x_SG){
-			if((!dst_sg->dma_address) || (! dst_sg->length))
-				return -EINVAL;
-
-			llu[i-1].node_sstride 	=0;
-			llu[i-1].node_dstride 	=channel->src_sz;
-			llu[i-1].length 	=channel->src_sz;
-			/*this is essentially a 0x1 xfer */
-			llu[i-1].saddr = 	channel->sar;
-			llu[i-1].daddr = 	dst_sg->dma_address;
-			llu[i-1].size_bytes	= dst_sg->length;
-			chip.channel[chan->chan].list_len = dst_sg->length;
-			dst_sg++;
-
-		}
-		else if(flags & DIM_SG_x_0){
-			/** 1x0*/
-			if((!src_sg->dma_address) || (! src_sg->length))
-				return -EINVAL;
-
-			llu[i-1].node_sstride 	= channel->src_sz;
-			llu[i-1].node_dstride 	=0;
-			llu[i-1].length 	= channel->src_sz;
-			llu[i-1].daddr = channel->dar;
-			llu[i-1].saddr = src_sg->dma_address;
-			llu[i-1].size_bytes	=src_sg->length;
-			chip.channel[chan->chan].list_len = dst_sg->length;
-			src_sg++;
-		}
-		else{
-			return -EINVAL;
-			printk(" bad ip flags specified\n");
-		}
-		if(flags & NODE_PAUSE_ISR)
-			llu[i-1].control |=  SET_NODE_COMP_PAUSE;
-
-		if(flags  & NODE_DONE_ISR)
-			llu[i-1].control |= SET_NODE_COMP_IRQ;
-
-		/*FREERUNNING TRANSFER SELECTED*/
-		/*due to a wierdness in the FDMA design,
-		freerunning xfers must alwyas set increment
-		addr for source/dest. This is an overloaded
-		parameter for the slim core and will not actually
-		produce incrementing addresses !! :-\ */
-		llu[i-1].control |= 	NODE_ADDR_INCR <<SOURCE_ADDR;
-		llu[i-1].control |= 	NODE_ADDR_INCR <<DEST_ADDR;
-	}
-	if(flags & LIST_TYPE_LINKED)
-		llu[llu_len-1].next_item =
-		(u32)virt_to_phys((u32*)chip.channel[channel->chan].
-								llu_bus_addr);
-	else
-		llu[llu_len-1].next_item = 0;
-
-	spin_lock_irqsave(&chip.channel_lock, irqflags);
-	memcpy_toio((volatile void __iomem *)chip.channel[channel->chan].llu_bus_addr,&llu[0],
-			sizeof(fdma_llu_entry)*llu_len);
-	spin_unlock_irqrestore(&chip.channel_lock, irqflags);
-
-
-	dma_cache_wback(chip.channel[channel->chan].llu_virt_addr,
-					(sizeof(fdma_llu_entry)*llu_len));
-
-
-	return 0;
-}
-
-/*must only be called when channel is in pasued state*/
-static void stb7100_fdma_unpause(struct dma_channel * chan)
-{
-	if(chan->chan < 0 || chan->chan >15)return;
-
-	if(get_fdma_chan_status(chan->chan) == FDMA_CHANNEL_PAUSED){
-
-		spin_lock(&chip.fdma_lock);
-		/*x2 as two data bits per channel*/
-		/*we want ot continue the current transfer*/
-		writel(	MBOX_CMD_START_CHANNEL << (chan->chan*2),chip.io_base +
-					FDMA2_CMD_MBOX_SET_REG);
-		spin_unlock(&chip.fdma_lock);
-	}
-}
-
-int stb7100_fdma_pause(int flush,struct dma_channel * chan)
-{
-	if(chan->chan < 0 || chan->chan >15)return -EINVAL;
-
-	spin_lock(&chip.channel_lock);
-	chip.channel[chan->chan].ch_pause =1;
-	spin_unlock	(&chip.channel_lock);
-
-	spin_lock(&chip.fdma_lock);
-
-	if(get_fdma_chan_status(chan->chan) == FDMA_CHANNEL_RUNNING){
-		if(flush)
-			writel(MBOX_CMD_PAUSE_FLUSH_CHANNEL << (chan->chan*2),chip.io_base + FDMA2_CMD_MBOX_SET_REG);
-		else{
-			writel(MBOX_CMD_PAUSE_CHANNEL << (chan->chan*2),chip.io_base +FDMA2_CMD_MBOX_SET_REG);
-			spin_unlock(&chip.fdma_lock);
-			return (get_fdma_chan_status(chan->chan) == FDMA_CHANNEL_PAUSED) ? 0: -ENODEV;
-		}
-	}
-	else{
-		spin_unlock(&chip.fdma_lock);
-		return 0;
-	}
-	return -EINVAL;
-}
-
-
-
-
-void completion_ok(int  channel)
-{
-	/* preserve the callback pointer which will be clobbered when we call
-	 * free_fdma_channel().
-	 */
-	void (*comp_callback)(void*) = (chip.channel[channel]).comp_callback;
-	void *comp_callback_param = (chip.channel[channel]).comp_callback_param;
-
-	struct dma_channel * dma_chan = get_dma_channel(channel);
-
-        wake_up(&dma_chan->wait_queue);
-
-	/* do not re-order these or it will be impossible to configure another
-	 * DMA transfer from the callback.
-	 */
-	free_fdma_channel(channel);
-	if (comp_callback)
-		comp_callback(comp_callback_param);
-}
-
-void error_completion(int channel)
-{
-
-	void (*err_callback)(void*) = (chip.channel[channel]).err_callback;
-	void *err_callback_param = (chip.channel[channel]).err_callback_param;
-
-	/* TODO: Do we need a wake up here? */
-	/* If so, how would the caller know an error occurred? */
-
-	free_fdma_channel(channel);
-	if(err_callback)
-		err_callback(err_callback_param);
-}
-
-void handle_completion(int channel)
-{
-	unsigned long irqflags;
-	spin_lock_irqsave(&(chip.channel_lock), irqflags);
-	if(chip.channel[channel].cb_in_interrupt){
-		spin_unlock_irqrestore(&(chip.channel_lock), irqflags);
-		completion_ok(channel);
-	}
-	else{
-		spin_unlock_irqrestore(&(chip.channel_lock), irqflags);
-		fdma_complete[channel].data = channel;
-		tasklet_schedule(&fdma_complete[channel]);
-	}
-}
-
-void handle_err_completion(int channel)
-{
-	unsigned long irqflags;
-	spin_lock_irqsave(&(chip.channel_lock), irqflags);
-	if(chip.channel[channel].cb_in_interrupt==1){
-		spin_unlock_irqrestore(&(chip.channel_lock), irqflags);
-		error_completion(channel);
-	}
-	else{
-		spin_unlock_irqrestore(&(chip.channel_lock), irqflags);
-		tasklet_schedule(&fdma_error[channel]);
-	}
-}
-
-static void stb7100_cb_continue(int channel)
-{
-	unsigned long irqflags;
-	spin_lock_irqsave(&chip.channel_lock, irqflags);
-	if(chip.channel[channel].comp_callback){
-		if(chip.channel[channel].cb_in_interrupt){
-			spin_unlock_irqrestore(&chip.channel_lock, irqflags);
-			(chip.channel[channel]).comp_callback(
-				(chip.channel[channel]).comp_callback_param);
-            	}
-            	else{
-               		spin_unlock_irqrestore(&(chip.channel_lock), irqflags);
-			fdma_complete[channel].data = channel;
-			tasklet_schedule(&fdma_complete[channel]);
-            	}
-	}
-	if(chip.channel[channel].ch_pause){ /*usr signals pause*/
-		chip.channel[channel].ch_pause=0;
-		spin_unlock_irqrestore(&chip.channel_lock, irqflags);
-		/*we want ot continue the current transfer*/
-		spin_lock(&chip.fdma_lock);
-		writel(	MBOX_CMD_START_CHANNEL <<
-			(channel*2),chip.io_base + FDMA2_CMD_MBOX_SET_REG);
-		spin_unlock(&chip.fdma_lock);
-	}
-	else{
-		spin_unlock_irqrestore(&chip.channel_lock, irqflags);
-		/*we need to load the next tranfer*/
-		spin_lock(&chip.fdma_lock);
-		writel( readl(chip.io_base + FDMA2_PTR_REG + (
-			channel *NODE_DATA_OFFSET))
-			| CMDSTAT_FDMA_START_CHANNEL,
-			chip.io_base+ FDMA2_CMD_STATn +
-			(channel * CMD_STAT_OFFSET));
-		writel(	MBOX_CMD_START_CHANNEL << (channel*2),chip.io_base +
-						FDMA2_CMD_MBOX_SET_REG);
-		spin_unlock(&chip.fdma_lock);
-	}
-}
-
-
-static inline void __handle_fdma_err_irq(int channel)
-{
-	u32 status = get_fdma_chan_status(channel);
-	u32 err =(status & 0x1c) >>2; /*err is bits 2-4*/
-	switch(err){
-		case 0:
-			printk(KERN_CRIT"FDMA MISSED IRQ ERR ON CHANNEL %d CMD_STAT is %x \n",channel,status);
-			break;
-		case 1:
-			printk(KERN_CRIT"FDMA START CODE LIST OVERFLOW ERROR CHANNEL %d CMD_STAT is %x \n",channel,status);
-			break;
-		case 2:
-			printk(KERN_CRIT"FDMA ES BUFFER OVERFLOW ON CHANNEL %d CMD_STAT is %x \n",channel,status);
-			break;
-		default:
-			printk(KERN_CRIT"FDMA UNDEFINED ERR ON CHANNEL %d CMD_STAT is %x \n",channel,status);
-			break;
-	}
-	writel(0, chip.io_base+FDMA2_CMD_STATn + (channel* CMD_STAT_OFFSET  ));
-	handle_err_completion(channel);
-}
-
-static inline void __handle_fdma_completion_irq(int channel)
-{
-	unsigned long irqflags;
-
-	/*now we look for reason of int may be*/
-	switch(get_fdma_chan_status(channel)){
-  	case FDMA_CHANNEL_PAUSED:
-		spin_lock_irqsave(&(chip.channel_lock), irqflags);
-		if(chip.channel[channel].ch_term==1) {
-			spin_unlock_irqrestore(&(chip.channel_lock), irqflags);
-			handle_completion(channel);
-     	 	} else if(chip.channel[channel].ch_pause) {
-      			chip.channel[channel].ch_pause=0;
-			spin_unlock_irqrestore(&(chip.channel_lock), irqflags);
-      		}
-      		else {
-			spin_unlock_irqrestore(&(chip.channel_lock), irqflags);
-			stb7100_cb_continue(channel);
-      		}
-   		break;
-	case FDMA_CHANNEL_IDLE:
-		handle_completion(channel);
-		break;
-	case FDMA_CHANNEL_RUNNING:
-		break;
-	default:
-		printk(KERN_CRIT"FMDA2 unknown interrupt status \n");
-		handle_err_completion(channel);
-	}
-}
-
-
-static irqreturn_t fdma_irq(int irq, void *dev_id, struct pt_regs *regs)
-{
-	int channel=0;
-	u32 int_stat_val =0;
-
-	int_stat_val = readl(chip.io_base + FDMA2_INT_STAT_REG);
-	writel(int_stat_val, chip.io_base +FDMA2_INT_CLR_REG);
-
-	for(;channel<STB7100_DMA_CHANNELS;channel++){
-		if(0x03 == (int_stat_val & 0x03)){
-			u32 reg_val = readl(chip.io_base+FDMA2_CMD_STATn
-					+ (channel* CMD_STAT_OFFSET  ));
-			u32 cmd_stat_reg = chip.io_base+FDMA2_CMD_STATn
-					+ (channel* CMD_STAT_OFFSET  );
-
-			/*clear the error (2-4) bits from the CMD_STAT reg*/
-			writel(0xffffffe3 | reg_val, cmd_stat_reg);
-
-			__handle_fdma_completion_irq(channel);
-		}
-		if(0x02 == (int_stat_val & 0x02))
-			__handle_fdma_err_irq(channel);
-		else if(0x01 == (int_stat_val & 0x01))
-			__handle_fdma_completion_irq(channel);
-
-		int_stat_val = int_stat_val>>2;
-	}
-	return IRQ_HANDLED;
-}
-
-/*
- * Linux SH-DMA-API hooks
- * */
-/*returns the number of bytes left to transfer for the current node*/
-extern int stb7100_fdma_get_residue(struct dma_channel *chan)
-{
-	unsigned long irqflags;
-	u32 chan_base = chip.io_base + (chan->chan * NODE_DATA_OFFSET);
-	unsigned long total = 0,count=0;
-	void *first_ptr=0;
-	fdma_llu_entry *cur_ptr;
-
-	spin_lock_irqsave(&chip.fdma_lock, irqflags);
-	count=readl(chan_base + FDMA2_COUNT_REG);
-	/*first read the current node data*/
-	first_ptr = (void *) readl(chan_base + FDMA2_PTR_REG);
-	if(! first_ptr)
-		goto list_complete;
-
-	first_ptr = P2SEGADDR(first_ptr);
-	/* Accumulate the bytes remaining in the list */
-	cur_ptr = P2SEGADDR(first_ptr);
-	do {
-		if(first_ptr >=(void*)P2SEGADDR(cur_ptr->next_item)
-		   || cur_ptr->next_item ==0)
-			goto list_complete;
-
-		total += cur_ptr->size_bytes;
-	} while ((cur_ptr = P2SEGADDR((fdma_llu_entry *) cur_ptr->next_item))!=0);
-list_complete:
-	total+=count;
- 	spin_unlock_irqrestore(&chip.fdma_lock, irqflags);
-	return total;
-}
-
-static int stb7100_fdma_request(struct dma_channel *chan)
-{
-	if(chan->chan == ANY_CHANNEL){/*get the next available*/
-		chan->chan = get_next_free_channel();
-		return ( !(chan->chan >15) || (!(chan->chan <0))) ?
-							chan->chan:
-							-ENODEV;
-	}
-	else return claim_fdma_channel(chan->chan);
-}
-
-
-static int stb7100_fdma_stop(struct dma_channel *chan)
-{
-	unsigned long irqflags;
-	spin_lock_irqsave(&(chip.channel_lock), irqflags);
-	chip.channel[chan->chan].ch_term=1;
-	spin_unlock_irqrestore(&(chip.channel_lock), irqflags);
-	//Issuing a pause on an inactive channel results in the FDMA
-	// * attempting to load the next ptr
-
-	if(get_fdma_chan_status(chan->chan) != FDMA_CHANNEL_IDLE){
-		spin_lock(&(chip.fdma_lock));
-		writel((MBOX_CMD_PAUSE_CHANNEL << (chan->chan*2)),chip.io_base
-			+ FDMA2_CMD_MBOX_SET_REG);
-		spin_unlock(&(chip.fdma_lock));
-		return 0;
-	}/*throw an error if trying to stop an inactive channel*/
-	else return -ENODEV;
-}
-
-
-static void stb7100_fdma_free(struct dma_channel *chan){
-
-
-	if(get_fdma_chan_status(chan->chan) !=  FDMA_CHANNEL_IDLE){
-		stb7100_fdma_stop(chan);
-
-		printk(KERN_CRIT"STB7100 FDMA BLOCKING in free on ch %d\n",
-				chan->chan);
-
-		wait_event(chip.channel[chan->chan].cfg_blk,
-			(chip.channel[chan->chan].is_xferring==0));
-
-	}
-	fdma_complete[chan->chan].data = chan->chan;
-	tasklet_schedule(&fdma_complete[chan->chan]);
-}
-
-static int stb7100_fdma_configure(struct dma_channel *channel,
-					unsigned long flags)
-{
-	unsigned long irqflags;
-	unsigned long start_addr=0;
-	struct dma_channel *chan = channel;
-	unsigned long node_sz_bytes =0;
-	fp nodelist_configure=0;
-	int list_len=0;
-	int ret=0;
-
-	if(channel->chan <0 || channel->chan >15)
-		return -ENODEV;
-
-	switch(chan->mode){
-		case MODE_PACED:
-			list_len = channel->list_len;
-			node_sz_bytes= sizeof(fdma_llu_entry);
-			nodelist_configure =  setup_paced_nodelist;
-			break;
-		default:
-			printk("FDMA no mode specified -Using Freerunning\n");
-		case MODE_FREERUNNING:
-			if(flags & DIM_0_x_SG ){
-				list_len = channel->dst_sg_len;
-				nodelist_configure = setup_sg_nodelist;
-			}
-			else if(flags & DIM_SG_x_0){
-				list_len = channel->src_sg_len;
-				nodelist_configure = setup_sg_nodelist;
-			}
-			else if (flags & DIM_SG_x_SG){
-				printk(KERN_CRIT" SG To SG Not Supported\n");
-				return -EINVAL;
-			}
-			else{
-				list_len = channel->list_len;
-				nodelist_configure =  setup_freerunning_nodelist;
-			}
-			node_sz_bytes= sizeof(fdma_llu_entry);
-			break;
-		case MODE_SPDIF:
-			node_sz_bytes= sizeof(fdma_spdif_entry);
-			nodelist_configure =  setup_spdif_nodelist;
-			list_len = channel->list_len;
-			break;
-		case MODE_PES:
-			printk("  PES Parsing unsupported\n");
-			return -ENODEV;
-	}
-
-	spin_lock_irqsave(&chip.channel_lock, irqflags);
-	if(chip.channel[chan->chan].is_xferring){
-		spin_unlock_irqrestore(&chip.channel_lock, irqflags);
-		return -EBUSY;
-	}
-	/*we are reconfiguring a channel with alloced mem,
-	 * but we haven't started zn xfer so it is ok to re-config*/
-	else if(chip.channel[chan->chan].dynamic_mem){
-		printk(KERN_CRIT"FDMA_CH%d reconfiguring configured channel\n",
-					chan->chan);
-		 free_fdma_channel(chan->chan);
-	}
-
-	if(list_len >1 ){ /*we are doing SG so we must alloc some mem for the llu*/
-		chip.channel[chan->chan].dynamic_mem =1;
-		start_addr = (unsigned long)
-				bigphysarea_alloc(node_sz_bytes*list_len);
-	}
-	else
-		start_addr = (unsigned long)&static_llu[chan->chan];
-
-	if(!start_addr){
-		spin_unlock_irqrestore(&chip.channel_lock, irqflags);
-		return -ENOMEM;
-	}
-
-	if(chan->comp_callback) {
-		chip.channel[chan->chan].comp_callback = chan->comp_callback;
-		chip.channel[chan->chan].comp_callback_param = chan->comp_callback_param;
-	}
-	if(chan->err_callback) {
-		chip.channel[chan->chan].err_callback = chan->err_callback;
-		chip.channel[chan->chan].err_callback_param = chan->err_callback_param;
-	}
-	if((CALLBACK_CONTEXT_INTERRUPT  & flags) == CALLBACK_CONTEXT_INTERRUPT)
-		chip.channel[chan->chan].cb_in_interrupt=1;
-	else
-		chip.channel[chan->chan].cb_in_interrupt=0;
-
-	chip.channel[chan->chan].alloc_mem_sz = node_sz_bytes * list_len;
-	chip.channel[chan->chan].list_len = chan->list_len;
-	chip.channel[chan->chan].llu_virt_addr = (u32*)start_addr;
-	chip.channel[chan->chan].llu_bus_addr  = (u32) ioremap(start_addr,32);
-
-	spin_unlock_irqrestore(&chip.channel_lock, irqflags);
-
-	ret = nodelist_configure(chan,flags);
-	channel->flags = DMA_CONFIGURED;
-
-	dma_cache_wback(chip.channel[chan->chan].llu_virt_addr,
-			chip.channel[chan->chan].alloc_mem_sz);
-
-	return ret;
-}
-
-
-
-/*optimised for a mem->mem move*/
-static int stb7100_fdma_xfer(struct dma_channel *chan)
-{
-	unsigned long irqflags;
-	unsigned long flags =0;
-	if( (!(chan->chan >=0) && (chan->chan <= 15)))
-		return -EINVAL;
-
-	if ((chan->flags != DMA_CONFIGURED)){
-		 printk("FDMA CH%d not configured - Using default(1x1)\n",chan->chan);
-		 flags=	DIM_1_x_1 |LIST_TYPE_UNLINKED;
-		 chan->src_sz = chan->count;
-
-		 chan->list_len =1;
- 		 /*fdma specific data not set by api */
-
- 		 stb7100_fdma_configure(chan,flags);
-	}
-	spin_lock_irqsave(&chip.channel_lock, irqflags);
-	if(chip.channel[chan->chan].is_xferring) {
-
-		spin_unlock_irqrestore(&chip.channel_lock, irqflags);
-		if(chan->flags & DMA_SETUP_NOBLOCK)
-			return -EBUSY;
-
-		else{
-			printk(" FDMA CH%d is busy XFER BLOCKING\n",
-					chan->chan);
-
-			wait_event(chip.channel[chan->chan].cfg_blk,
-			(chip.channel[chan->chan].is_xferring==0));
-			spin_lock_irqsave(&chip.channel_lock, irqflags);
-		}
-		/*now our channel is free*/
-	}
-	//spin_lock_irqsave(&chip.channel_lock, irqflags);
-	chip.channel[chan->chan].is_xferring=1;
-	spin_unlock_irqrestore(&chip.channel_lock, irqflags);
-	return start_fdma_channel(chan->chan,(unsigned long *)
-		(virt_to_phys((u32*)chip.channel[chan->chan].llu_bus_addr)));
-
-}
-/*---------------------------------------------------------------------*
- *---------------------------------------------------------------------*
- * MODULE INIT & REGISTRATION
- *---------------------------------------------------------------------*
- *---------------------------------------------------------------------*
- *--------------------------------------------------------------------*/
-
-
-static struct dma_ops stb7100_fdma_ops = {
-	.request		= stb7100_fdma_request,
-	.free			= stb7100_fdma_free,
-	.get_residue		= stb7100_fdma_get_residue,
-	.xfer			= stb7100_fdma_xfer,
-	.configure		= stb7100_fdma_configure,
-	.pause			= stb7100_fdma_pause,
-	.unpause		= stb7100_fdma_unpause,
-	.stop			= stb7100_fdma_stop,
-};
-
-static struct dma_info stb7100_fdma_info = {
-	.name			= "ST40 STB7100 FDMAC",
-	.nr_channels	= STB7100_DMA_CHANNELS,
-	.ops			= &stb7100_fdma_ops,
-	.flags			= DMAC_CHANNELS_TEI_CAPABLE,
-};
-
-
-static void __exit deinitialise_7100_fdma2(void)
-{
-
-	writel(0,chip.io_base + FDMA2_ENABLE_REG);
-	iounmap((u32*)chip.io_base);
-	free_irq(LINUX_FDMA_MESSAGE_PEND,(void *)NULL);
-}
-
-
-static int __init initialise_7100_fdma2(void)
-{
-	int irq_val=0;
-	static struct dma_info *info = &stb7100_fdma_info;
-	int channel=0;
-
-	spin_lock_init(&chip.channel_lock);
-	spin_lock_init(&chip.fdma_lock);
-	chip.io_base  =(u32) ioremap(FDMA_BASE,0);
-	memset((u32*)&chip.channel[0],0,sizeof(channel_status)* STB7100_DMA_CHANNELS);
-
-	if((irq_val = request_irq(LINUX_FDMA_MESSAGE_PEND,
-							  fdma_irq,SA_INTERRUPT,
-           					  "STB7100 FDMA",
-           					  (void*)NULL ))
-    )
-        panic(" Cant Register irq %d for FDMA engine %d\n",LINUX_FDMA_MESSAGE_PEND,irq_val);
-
-	 stb7100_bootload_fdma((char*)chip.io_base);
-	 initialise_fdma2();
- 	 reset_channels();
-	 initialise_req_ctl();
-	for(channel=0;channel < STB7100_DMA_CHANNELS;channel++)
-	{
-		init_waitqueue_head(&chip.channel[channel].cfg_blk);
-		tasklet_init(&fdma_error[channel],(void*)error_completion,channel);
-		tasklet_init(&fdma_complete[channel],(void*)completion_ok,channel);
-	}
-
-	if(!enable_all_channels())
-		printk(KERN_CRIT"CANT ENABLE FDMA MESSAGING ");
-
-	register_dmac(info);
-
-	return 0;
-}
-
-module_init(initialise_7100_fdma2)
-module_exit(deinitialise_7100_fdma2)
Index: linux/drivers/stm/7100_fdma2_firmware.h
===================================================================
--- linux.orig/drivers/stm/7100_fdma2_firmware.h
+++ /dev/null
@@ -1,735 +0,0 @@
-/*
- *  STb7100 FDMA Driver
- *  Copyright (c) 2005 STMicroelectronics Limited.
- *  Author: Mark Glaisher <Mark.Glaisher@st.com>
- *
- *   This program is free software; you can redistribute it and/or modify
- *   it under the terms of the GNU General Public License as published by
- *   the Free Software Foundation; either version 2 of the License, or
- *   (at your option) any later version.
- *
- *   This program is distributed in the hope that it will be useful,
- *   but WITHOUT ANY WARRANTY; without even the implied warranty of
- *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- *   GNU General Public License for more details.
- *
- *   You should have received a copy of the GNU General Public License
- *   along with this program; if not, write to the Free Software
- *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
- *
- */
-
-
-
-#ifndef FMDA_7100_FIRMWARE
-#define FMDA_7100_FIRMWARE
-/*This firmware version 2.2*/
-#define FIRMWARE_REVISION "2.2.0"
-static unsigned long DATA_REGION[]=
-{
-  0x00030202, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x23104052, 0x00000000, 0x00000000, 0x21100051, 0x00000000,
-  0x020701b2, 0x020a01b5, 0x020d01b8, 0x021001bb, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x0000031e, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x0000007e, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x000000fe, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00002438, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00001441,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00001446, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x0000144b, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00001450,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00001455, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x0000145a, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0000145f,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00001464, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00001469, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0000146e,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00001473, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00001478, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0000147d,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00001482, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00001487, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0000222e, 0x05800580,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x0000222e, 0x05a005a0, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x0000222e, 0x05c005c0, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0xffffff00, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000
-};
-
-//#define DATA_REGION_LENGTH (0x00000600)
-
-
-static unsigned long IMEM_REGION[]=
-{
-  0x00f51000, 0x00ef0013, 0x00e10001, 0x00ee0170, 0x00b010ea, 0x00f01000,
-  0x00ef0013, 0x00a300e0, 0x00aa000b, 0x00433a00, 0x009c1526, 0x009b332b,
-  0x009a2251, 0x00d00090, 0x00a70005, 0x00177030, 0x009c1230, 0x00d00090,
-  0x00a00006, 0x009c1497, 0x00d00090, 0x00a70002, 0x009c1603, 0x00d00090,
-  0x00a70004, 0x009c179e, 0x00d00090, 0x00a70021, 0x009c185f, 0x00d00090,
-  0x00a90003, 0x009c1036, 0x00d00090, 0x00a20001, 0x009c1481, 0x00d00090,
-  0x00f00000, 0x00d00017, 0x00452003, 0x00461003, 0x00355600, 0x00755461,
-  0x00a6040e, 0x00555001, 0x00765080, 0x00d00090, 0x00b0640e, 0x00755c23,
-  0x00761c62, 0x00266500, 0x007564ca, 0x00d00090, 0x00b0540b, 0x00840d00,
-  0x00b0deff, 0x003ee001, 0x00799e00, 0x00d19040, 0x00ea0460, 0x00721484,
-  0x00222a00, 0x00f00000, 0x00aa020e, 0x00ac020f, 0x00a50a0c, 0x00ab0a0e,
-  0x00b050e9, 0x00d0b070, 0x009c106c, 0x00d00090, 0x00a70a0d, 0x00a40003,
-  0x0074003f, 0x00840700, 0x00a50a04, 0x00b04003, 0x00d7c070, 0x0098106c,
-  0x0044507f, 0x009c10a9, 0x00d7c070, 0x00177002, 0x0098106c, 0x00407080,
-  0x00981125, 0x00ed0060, 0x008c812b, 0x009c812b, 0x00e70020, 0x00af0007,
-  0x005f0500, 0x00a82c00, 0x005f0800, 0x00b080eb, 0x00255004, 0x009a80e4,
-  0x00377001, 0x008c305b, 0x00a600e9, 0x00b0c20f, 0x00a80a02, 0x00a70a05,
-  0x00605800, 0x009c1069, 0x0005073c, 0x00b06a0c, 0x00b05a04, 0x00b0ba0e,
-  0x00a70a01, 0x0098111f, 0x00d00090, 0x00a50a00, 0x00d6b070, 0x0088108f,
-  0x0099109d, 0x00d00090, 0x00a40201, 0x00ef4042, 0x00744d10, 0x00144008,
-  0x004f50f0, 0x00a32b00, 0x009c2082, 0x00d00090, 0x005f4001, 0x00a72b00,
-  0x00af2b00, 0x004f3001, 0x000f073c, 0x00d00816, 0x005f0400, 0x00af2b00,
-  0x000f033c, 0x005f0000, 0x00a70a01, 0x00255010, 0x00377010, 0x00b05a00,
-  0x00b07a01, 0x0098311f, 0x00d0b070, 0x009c1072, 0x00d00090, 0x00a00003,
-  0x00b0ba0e, 0x00982046, 0x00d00090, 0x00a00202, 0x0098109d, 0x00d00090,
-  0x00e30027, 0x00d0c370, 0x009c212b, 0x00d00090, 0x00a60003, 0x00b00003,
-  0x00b06002, 0x00b0ba0e, 0x00d4b070, 0x00d7c070, 0x00544700, 0x008c112b,
-  0x00d00090, 0x00a70202, 0x009c112b, 0x00ed00a7, 0x008c04d8, 0x00b00003,
-  0x00d0121b, 0x0099112b, 0x00ed00ca, 0x00d7c070, 0x00177002, 0x0098106c,
-  0x00d00090, 0x00a00202, 0x009810b3, 0x00307020, 0x0098208f, 0x0044501f,
-  0x00234700, 0x004030e0, 0x009810b8, 0x00e30020, 0x00333001, 0x003734ff,
-  0x007430a8, 0x00ef4252, 0x005f0400, 0x004f50e0, 0x00764c62, 0x009810c5,
-  0x005f0000, 0x00366001, 0x009c30c0, 0x00d00090, 0x00d00090, 0x00a82c00,
-  0x005f0800, 0x00b080eb, 0x00255004, 0x009a80e4, 0x00377004, 0x009c30c5,
-  0x00764ca8, 0x00d00090, 0x003606e1, 0x0016603e, 0x009810d5, 0x005f0000,
-  0x00366001, 0x009c30d1, 0x00d00090, 0x00b0c20f, 0x00a600e9, 0x00a80a02,
-  0x00a70a05, 0x00605800, 0x009c10dc, 0x0005073c, 0x00b06a0c, 0x00b05a04,
-  0x00b0ba0e, 0x00d4c070, 0x0098106c, 0x0044507f, 0x009c10a9, 0x00d0061c,
-  0x00a30a00, 0x00433001, 0x00941d00, 0x00d00090, 0x00b06eff, 0x00b07efe,
-  0x00b08efd, 0x00b09efc, 0x00b0cefb, 0x003ee005, 0x00a60a07, 0x00a70a08,
-  0x00a800e9, 0x00ec0000, 0x00788d00, 0x00106001, 0x009c2103, 0x00796d08,
-  0x003c9800, 0x00796d00, 0x00398900, 0x005cc900, 0x006cc600, 0x009c2103,
-  0x007c6c3d, 0x007cc43e, 0x00666c00, 0x007c7c3d, 0x007cc43e, 0x00577c00,
-  0x00d01112, 0x00107001, 0x009c2119, 0x00797d08, 0x003c9800, 0x00797d00,
-  0x00398900, 0x005cc900, 0x006cc700, 0x009c2119, 0x007c7c3d, 0x007cc43e,
-  0x00677c00, 0x007c6c3d, 0x007cc43e, 0x00566c00, 0x00a900e9, 0x00b06a07,
-  0x00b07a08, 0x00799c48, 0x002995fc, 0x00b28b00, 0x00b29b00, 0x00ac1e01,
-  0x00a91e01, 0x00a81e01, 0x00a71e01, 0x00a61e01, 0x00840d00, 0x00a40a00,
-  0x007b0210, 0x00544001, 0x00d00090, 0x00b04a00, 0x00d0081f, 0x00a30202,
-  0x009810a9, 0x00d00090, 0x00a60003, 0x00b00003, 0x00b06002, 0x00ad1e01,
-  0x00d00211, 0x00a50a04, 0x00b04003, 0x00d7c070, 0x0098106c, 0x0044507f,
-  0x009c1151, 0x00d7c070, 0x00177002, 0x0098106c, 0x00407080, 0x009811ed,
-  0x00ed0143, 0x008c81f3, 0x009c81f3, 0x00e70020, 0x00af0007, 0x005f0500,
-  0x00a82c00, 0x005f0800, 0x00b080eb, 0x00255004, 0x009a818b, 0x00377001,
-  0x008c313e, 0x00a600e9, 0x00b0c20f, 0x00a80a02, 0x00a70a05, 0x00605800,
-  0x009c114c, 0x0005073c, 0x00b06a0c, 0x00b05a04, 0x00b0ba0e, 0x008c006c,
-  0x008c008f, 0x009911f3, 0x00ed0172, 0x00d7c070, 0x00177002, 0x0098106c,
-  0x00d00090, 0x00a00202, 0x0098115b, 0x00307020, 0x0098208f, 0x0044501f,
-  0x00234700, 0x004030e0, 0x00981160, 0x00e30020, 0x00333001, 0x003734ff,
-  0x007430a8, 0x00ef4252, 0x005f0400, 0x004f50e0, 0x00764c62, 0x0098116d,
-  0x005f0000, 0x00366001, 0x009c3168, 0x00d00090, 0x00d00090, 0x00a82c00,
-  0x005f0800, 0x00b080eb, 0x00255004, 0x009a818b, 0x00377004, 0x009c316d,
-  0x00764ca8, 0x00d00090, 0x003606e1, 0x0016603e, 0x0098117d, 0x005f0000,
-  0x00366001, 0x009c3179, 0x00d00090, 0x00b0c20f, 0x00a600e9, 0x00a80a02,
-  0x00a70a05, 0x00605800, 0x009c1184, 0x0005073c, 0x00b06a0c, 0x00b05a04,
-  0x00d4c070, 0x0098106c, 0x0044507f, 0x009c1151, 0x00d0061c, 0x00a30a00,
-  0x00433001, 0x00941d00, 0x00d00090, 0x00b08a10, 0x00b01eff, 0x00b04efe,
-  0x00b07efd, 0x00b08efc, 0x00b09efb, 0x00b0cefa, 0x003ee006, 0x00a800e9,
-  0x00788d00, 0x0047801f, 0x00d00090, 0x00ac0e00, 0x00a900e9, 0x00778ca0,
-  0x00799c48, 0x0003093c, 0x002995fc, 0x00e44400, 0x00144710, 0x009c21ce,
-  0x00d00090, 0x00d0c070, 0x009c11ad, 0x00d00090, 0x00d00090, 0x00e401f5,
-  0x00b09a11, 0x00b04a0d, 0x00d01e10, 0x00a7030c, 0x00777e00, 0x00a42c00,
-  0x00a10a10, 0x00840700, 0x00714100, 0x00011001, 0x00d01b1c, 0x00714200,
-  0x00011002, 0x00d01b1c, 0x00714300, 0x00011003, 0x00d01b1c, 0x0001043c,
-  0x00011040, 0x00d41040, 0x00ac0a12, 0x003404e1, 0x00111400, 0x002404e1,
-  0x00111400, 0x00311001, 0x00d00090, 0x00b01a12, 0x00301c00, 0x009831d8,
-  0x00d00090, 0x00a10a08, 0x00211001, 0x00d00090, 0x00b01a08, 0x00d01e10,
-  0x00e40270, 0x00144710, 0x009821d8, 0x00d00090, 0x00d00090, 0x00780327,
-  0x00d00090, 0x00b28b00, 0x00b29b00, 0x00d01e10, 0x00ac0a08, 0x00b00a08,
-  0x002cc001, 0x0078c308, 0x00780027, 0x00d00090, 0x00b28b00, 0x00b29b00,
-  0x00ac1e01, 0x00a91e01, 0x00a81e01, 0x00a71e01, 0x00a41e01, 0x00a11e01,
-  0x00840d00, 0x00a40a00, 0x007b0210, 0x00544001, 0x00d00090, 0x00b04a00,
-  0x00d0081f, 0x00a30202, 0x00981151, 0x00d00090, 0x00a60003, 0x00b00003,
-  0x00b06002, 0x00ad1e01, 0x00d00211, 0x00b01eff, 0x00b02efe, 0x00b03efd,
-  0x00b04efc, 0x00b0befb, 0x00b0cefa, 0x003ee006, 0x00e2012d, 0x00a32c00,
-  0x00b02a0d, 0x00a20a0c, 0x00742c48, 0x00d00090, 0x00a4040c, 0x00744e10,
-  0x00a10a10, 0x00d00090, 0x00840400, 0x00713100, 0x00011001, 0x00d02111,
-  0x00713200, 0x00011002, 0x00d02111, 0x00713300, 0x00011003, 0x00d02111,
-  0x0001033c, 0x00011040, 0x00d41040, 0x00a30a12, 0x003404e1, 0x00111400,
-  0x002404e1, 0x00111400, 0x00311001, 0x00a40a08, 0x00b01a12, 0x00244001,
-  0x00301300, 0x00983221, 0x00d00090, 0x00b04a08, 0x00d02219, 0x00a10a0c,
-  0x00a30a11, 0x00b00a08, 0x00714308, 0x00710027, 0x00d00090, 0x00b21b00,
-  0x00b23b00, 0x00ac1e01, 0x00a01e01, 0x00a41e01, 0x00a31e01, 0x00a21e01,
-  0x00a11e01, 0x00d0121d, 0x00f00000, 0x00d87040, 0x0098224b, 0x00e10460,
-  0x00198004, 0x00299100, 0x00e10000, 0x00aa0900, 0x00ed023a, 0x008c04bf,
-  0x0098124b, 0x00e4033d, 0x007445f0, 0x00544850, 0x00a1000a, 0x00b04300,
-  0x005f1200, 0x004fa0e0, 0x00ea0001, 0x00ab090f, 0x001aa800, 0x007b01f0,
-  0x00677a00, 0x00e10040, 0x00b0b90f, 0x00b0190b, 0x00d02311, 0x00aa0005,
-  0x00d00090, 0x007a7210, 0x00d00090, 0x00b0a005, 0x00d00112, 0x00ac00f0,
-  0x00a80005, 0x00d1c040, 0x00982329, 0x0011103f, 0x001a1001, 0x00320a00,
-  0x0013c200, 0x00193a00, 0x00e20261, 0x00222300, 0x006cc900, 0x00eb0460,
-  0x0005013c, 0x00155004, 0x00255b00, 0x00840200, 0x00d02c1f, 0x00d02910,
-  0x00a40501, 0x00724ca0, 0x00981290, 0x00e405e0, 0x00244200, 0x00c0201f,
-  0x00981290, 0x00eb0001, 0x00a20400, 0x00702c2e, 0x009c1290, 0x001bb100,
-  0x00588b00, 0x00a2050f, 0x00aa050c, 0x00ab050b, 0x007bbd00, 0x009c1253,
-  0x00d22070, 0x00981299, 0x00f00000, 0x00991253, 0x00122002, 0x00b0050c,
-  0x00ab050d, 0x00b0250d, 0x003bb200, 0x00b0deff, 0x00b01efe, 0x00b05efd,
-  0x003ee003, 0x00ed0285, 0x008c08f8, 0x00a51e01, 0x00a11e01, 0x00ad1e01,
-  0x00a2050d, 0x00b0a50c, 0x0098128f, 0x002bb200, 0x00d00090, 0x00b0b50d,
-  0x00d02513, 0x00b0b50d, 0x00a2050b, 0x00722d00, 0x009c1253, 0x00e20001,
-  0x00122100, 0x00ab0022, 0x004bb200, 0x009c1253, 0x00588200, 0x00a40501,
-  0x00eb0001, 0x007a4ca0, 0x001bba00, 0x004bb0fe, 0x009812ab, 0x009c22a6,
-  0x007a4d00, 0x00c0a03f, 0x009c12ab, 0x007a4ca8, 0x00eb0001, 0x001bba00,
-  0x00a3000b, 0x006bb0ff, 0x00433b00, 0x00d00090, 0x00b0300b, 0x00ab050b,
-  0x007bbd00, 0x009c1253, 0x00722210, 0x006220ff, 0x00ab0001, 0x00a40002,
-  0x004bb200, 0x00444200, 0x00b0b001, 0x00ab0006, 0x00b04002, 0x00a40004,
-  0x004bb200, 0x00444200, 0x00488200, 0x00b0b006, 0x00b04004, 0x00a40021,
-  0x00444200, 0x00eb0003, 0x00b04021, 0x00a40110, 0x0074b0a0, 0x00a300f4,
-  0x001b1001, 0x00e20001, 0x00122b00, 0x00402300, 0x009812cb, 0x00122001,
-  0x00740062, 0x00b020f5, 0x00b04110, 0x00b090f2, 0x00d02513, 0x00e40001,
-  0x00144100, 0x006440ff, 0x00488400, 0x00a60110, 0x0042601f, 0x004660e0,
-  0x00566002, 0x00c02000, 0x00b06110, 0x009812e0, 0x00e20001, 0x00122110,
-  0x00588200, 0x00b06500, 0x00b090f2, 0x00d02513, 0x00a00502, 0x009c12eb,
-  0x0002053c, 0x00b0ceff, 0x00b08efe, 0x003ee002, 0x00ed02e8, 0x008c04d8,
-  0x00a81e01, 0x00ac1e01, 0x00d02513, 0x00a40501, 0x00b06110, 0x0042401f,
-  0x00981309, 0x0042403f, 0x00c0201f, 0x00981310, 0x00c0203f, 0x00981317,
-  0x00e605e0, 0x0042401f, 0x00e40001, 0x00144200, 0x00a3000b, 0x00533400,
-  0x00266200, 0x00b0300b, 0x00a20600, 0x00721088, 0x00742c2e, 0x00b02600,
-  0x00144004, 0x00244100, 0x00e60001, 0x00166400, 0x00a20006, 0x00522600,
-  0x00b090f2, 0x00b02006, 0x00d02513, 0x00a20001, 0x00eb0001, 0x001bb100,
-  0x00522b00, 0x00b090f2, 0x00b02001, 0x00d02513, 0x00a20002, 0x00eb0001,
-  0x001bb100, 0x00522b00, 0x00b090f2, 0x00b02002, 0x00d02513, 0x00a20004,
-  0x00704c2d, 0x0098131c, 0x00d00090, 0x00a20021, 0x00eb0001, 0x001bb100,
-  0x00522b00, 0x00b090f2, 0x00704c2d, 0x009c1324, 0x00d00090, 0x00b02004,
-  0x00704c2d, 0x00981328, 0x00d00090, 0x00b02021, 0x00d02513, 0x00b08005,
-  0x00d0001e, 0x00d80050, 0x00788c4c, 0x0098100c, 0x00da8040, 0x00e60140,
-  0x0076a023, 0x00a70aec, 0x00767060, 0x00d00090, 0x00a10600, 0x00b06009,
-  0x00731c80, 0x00741df0, 0x00751c64, 0x00e20460, 0x00793484, 0x00299200,
-  0x00840400, 0x00f00000, 0x0007093c, 0x00d00090, 0x00d00008, 0x00b1f701,
-  0x00a00902, 0x00981475, 0x00d00090, 0x00a70903, 0x00a20904, 0x00a60901,
-  0x0040601f, 0x00b06901, 0x00981351, 0x0047603f, 0x00c0701f, 0x0098136b,
-  0x00c0703f, 0x0098138d, 0x00d0451f, 0x00e70001, 0x00d00008, 0x00400f00,
-  0x00a60001, 0x00177300, 0x00566700, 0x00d00090, 0x00b06001, 0x00a60905,
-  0x00a70902, 0x00307600, 0x008c235e, 0x0006073c, 0x00a10903, 0x00b0690c,
-  0x00b0690d, 0x00a20904, 0x00b01909, 0x00b0290a, 0x0004093c, 0x00b0deff,
-  0x003ee001, 0x00ed0369, 0x008c0026, 0x00ad1e01, 0x00d0471b, 0x00d00008,
-  0x00400f00, 0x00a70002, 0x00e20001, 0x00122300, 0x00577200, 0x007a6c88,
-  0x001aa005, 0x00e20560, 0x002aa200, 0x00b07002, 0x00b0a90e, 0x00b0090b,
-  0x00a00a0d, 0x008c147b, 0x00a60a0e, 0x00760210, 0x00a20a0f, 0x00b06a0e,
-  0x00722a10, 0x00e60001, 0x00b02a0f, 0x00a2090f, 0x00e7004a, 0x00a60a07,
-  0x00706c3c, 0x00881388, 0x00e7012d, 0x00b00a08, 0x00720210, 0x00b07a0d,
-  0x00b0290f, 0x00b00a13, 0x00d0471b, 0x00706c2d, 0x009c142a, 0x00d00090,
-  0x00ac090f, 0x007c0210, 0x00eb05c0, 0x00b0c90f, 0x00a00b09, 0x009813b0,
-  0x00d00090, 0x00ad0903, 0x007ddc62, 0x00a2090e, 0x00522001, 0x00762c23,
-  0x002dd600, 0x00b0290e, 0x001dd00a, 0x00d00090, 0x00d00008, 0x00500f00,
-  0x00b0d90b, 0x00ad0902, 0x00a20901, 0x00702c3d, 0x009813aa, 0x00d00090,
-  0x00b0d90c, 0x00d03c19, 0x00ed0001, 0x0072d03c, 0x00b0090c, 0x00b02901,
-  0x00ed0000, 0x00d03c19, 0x00080b3c, 0x00a10903, 0x00d00004, 0x00b1f801,
-  0x00d00004, 0x00500f00, 0x00a20904, 0x0004093c, 0x00ed03ba, 0x008c0026,
-  0x00ad0902, 0x00a20901, 0x00b0d90c, 0x00702c3d, 0x009c13c9, 0x00d00090,
-  0x00ad0310, 0x004dd0e0, 0x0002093c, 0x00b0d310, 0x00b00900, 0x0001033c,
-  0x00ed03c8, 0x008c04d8, 0x00d0471b, 0x002dd003, 0x001dd03e, 0x001dd003,
-  0x00d00090, 0x00b0d90d, 0x00b0d902, 0x00a00b09, 0x009c1412, 0x00d00090,
-  0x00ad0907, 0x003dd002, 0x00a20b03, 0x00b0db09, 0x00782c44, 0x0042200f,
-  0x00188002, 0x00b02b03, 0x00b08909, 0x00a20b01, 0x00762c44, 0x0042200f,
-  0x00166002, 0x00b02b01, 0x00b06908, 0x00ad0b00, 0x00a20b02, 0x00b0db04,
-  0x00b02b06, 0x00ad0b01, 0x00a20b03, 0x00b0db05, 0x00ed00be, 0x00b02b07,
-  0x00b0db08, 0x00a50b00, 0x00a70905, 0x000d073c, 0x007d6200, 0x007d5021,
-  0x0015503f, 0x00b2dc00, 0x00a40b02, 0x001d7010, 0x007d8200, 0x007d4021,
-  0x0014403f, 0x00b2dc00, 0x00a70906, 0x000d073c, 0x007d6200, 0x007d5021,
-  0x0015503f, 0x00b2dc00, 0x001d7010, 0x007d8200, 0x007d4021, 0x0014403f,
-  0x00b2dc00, 0x00ad0b01, 0x0075d21e, 0x001dd03e, 0x00b05b00, 0x00b0db01,
-  0x00a20b03, 0x0074221e, 0x0012203e, 0x00ad090d, 0x002dd010, 0x00b04b02,
-  0x00b02b03, 0x00b0d90d, 0x00b0d902, 0x00b0c90f, 0x00ad0901, 0x0072dca8,
-  0x00e80001, 0x00a00900, 0x009c1418, 0x007d803c, 0x00168200, 0x00a5000b,
-  0x00555600, 0x00148300, 0x00b0500b, 0x00b0d901, 0x00b04004, 0x00ed05e0,
-  0x002dd200, 0x00a60310, 0x00ab0d00, 0x007b3088, 0x004660e0, 0x00566002,
-  0x00b0bd00, 0x00b06310, 0x00010a3c, 0x00d0471b, 0x00ac090f, 0x007c0210,
-  0x00b0090b, 0x00eb05c0, 0x00080b3c, 0x00b0c90f, 0x00d00004, 0x00b1f801,
-  0x00d00004, 0x00500f00, 0x00a10902, 0x00a20b03, 0x00b0190c, 0x00b0190d,
-  0x00782c49, 0x00722d20, 0x00188002, 0x00b02b03, 0x00b02b07, 0x00b08909,
-  0x00a20b01, 0x00762c49, 0x00722d20, 0x00166002, 0x00b02b01, 0x00b02b05,
-  0x00b06908, 0x00a10b00, 0x00a20b02, 0x00b01b04, 0x00e100c0, 0x00b02b06,
-  0x00b01b08, 0x00a10901, 0x00721ca8, 0x00e80001, 0x00168200, 0x00a5000b,
-  0x00555600, 0x00148300, 0x00b0500b, 0x00b04021, 0x00e105e0, 0x00211200,
-  0x00a60310, 0x00ab0100, 0x007b3088, 0x004660e0, 0x00566002, 0x00b0b100,
-  0x00b06310, 0x00010a3c, 0x00d0471b, 0x00d00008, 0x00400f00, 0x00e805e0,
-  0x004a601f, 0x00268a00, 0x00a2000b, 0x00a70600, 0x00e50001, 0x00773088,
-  0x00155a00, 0x00b07600, 0x00777c2e, 0x00177004, 0x00233700, 0x00e70001,
-  0x00177300, 0x00aa0006, 0x00522500, 0x005aa700, 0x00b0200b, 0x00b0a006,
-  0x00d03519, 0x0001033c, 0x0002093c, 0x00d00008, 0x00500f00, 0x00ed047b,
-  0x008c04d8, 0x00a20009, 0x00712c23, 0x00722c60, 0x00ed0480, 0x008c04cf,
-  0x00d0321b, 0x00a30005, 0x00142030, 0x008c1485, 0x00722210, 0x00733210,
-  0x006330ff, 0x00422300, 0x00981024, 0x00d12040, 0x00e30001, 0x00133100,
-  0x00622300, 0x00311010, 0x00b02001, 0x00b01eff, 0x003ee001, 0x00ed0493,
-  0x008c0890, 0x00a11e01, 0x00ed0496, 0x008c08f8, 0x00d00214, 0x00a20006,
-  0x00722e10, 0x009c149b, 0x00d04a1b, 0x00d12040, 0x00e30001, 0x00133100,
-  0x00622300, 0x00b01eff, 0x00b02efe, 0x00b0defd, 0x003ee003, 0x00ed04a5,
-  0x008c0890, 0x00ad1e01, 0x00a21e01, 0x00a11e01, 0x00500200, 0x009c149b,
-  0x00d00090, 0x00a20006, 0x00722e00, 0x009c14af, 0x00d00115, 0x00d12040,
-  0x00e30001, 0x00133100, 0x00622300, 0x00b01eff, 0x00b02efe, 0x00b0defd,
-  0x003ee003, 0x00ed04b9, 0x008c08f8, 0x00ad1e01, 0x00a21e01, 0x00a11e01,
-  0x00500200, 0x009c14af, 0x00d00115, 0x00e30140, 0x00731023, 0x00e40001,
-  0x00a10300, 0x00d21040, 0x009c34c7, 0x00422000, 0x00840d00, 0x00144200,
-  0x00611400, 0x00742c22, 0x00b01300, 0x00533200, 0x0072244c, 0x0072403e,
-  0x00840d00, 0x00e30140, 0x00731023, 0x00e40001, 0x00144200, 0x00a10300,
-  0x00511400, 0x00d00090, 0x00b01300, 0x00840d00, 0x00a30201, 0x0007033c,
-  0x0077005e, 0x00ea05e0, 0x00b07201, 0x00773d00, 0x00c0703f, 0x009c14e2,
-  0x00773ca8, 0x00d04e16, 0x0047301f, 0x00c0701f, 0x009c14e6, 0x00e70000,
-  0x00a9000b, 0x00e80001, 0x00188700, 0x0078003f, 0x00780020, 0x006880ff,
-  0x00499800, 0x00a40110, 0x00b0900b, 0x00a60005, 0x00e70001, 0x00177100,
-  0x00777210, 0x006770ff, 0x00a80001, 0x00a90002, 0x00aa0006, 0x00488700,
-  0x00499700, 0x004aa700, 0x00b08001, 0x00a80004, 0x00b09002, 0x00488700,
-  0x00a90021, 0x00b0a006, 0x00499700, 0x00b08004, 0x00b09021, 0x00a00200,
-  0x00d50050, 0x00455001, 0x00773c3f, 0x00555700, 0x00981511, 0x00d00090,
-  0x00a700f4, 0x00181001, 0x00155800, 0x00407500, 0x00981511, 0x00155001,
-  0x00740062, 0x00a70200, 0x0098151a, 0x00773c3e, 0x0098151a, 0x00177100,
-  0x00566700, 0x00e70003, 0x00747040, 0x00d05212, 0x00a70200, 0x009c151e,
-  0x00740040, 0x00d05212, 0x00547002, 0x00e70001, 0x00177110, 0x00566700,
-  0x00b04110, 0x00b06005, 0x00b050f5, 0x00840d00, 0x00ec0001, 0x00da3040,
-  0x008c252a, 0x00d0001b, 0x0016ca00, 0x00eb05e0, 0x00633600, 0x002bba00,
-  0x00e40460, 0x00ab0b00, 0x0079bc88, 0x00169004, 0x00244600, 0x0076bc2e,
-  0x009c157d, 0x00d00090, 0x00a7040b, 0x00a1040e, 0x00401001, 0x009c153c,
-  0x00500700, 0x009c1527, 0x004110fe, 0x0076bc84, 0x00a8040c, 0x00b0140e,
-  0x00981527, 0x0075bcb8, 0x00255001, 0x00a1040f, 0x0016563e, 0x009c1547,
-  0x00e60001, 0x00751cc9, 0x00155002, 0x00d11070, 0x00211001, 0x00355100,
-  0x00305600, 0x00982527, 0x000a043c, 0x00b03eff, 0x003ee001, 0x0071bc56,
-  0x00981556, 0x00f40000, 0x0099255b, 0x00d05518, 0x00f00000, 0x0099155b,
-  0x00ed055a, 0x008c04bf, 0x009c155f, 0x00d00090, 0x00d00090, 0x00a31e01,
-  0x00d05217, 0x0075bc84, 0x00e409a3, 0x007445f0, 0x00544900, 0x00745064,
-  0x00725084, 0x00b04300, 0x0071bcb8, 0x0098156a, 0x007210b8, 0x0072c034,
-  0x00211001, 0x00111500, 0x0075bc3d, 0x0072503d, 0x005f2c00, 0x00a20a03,
-  0x005f0200, 0x0075bc3d, 0x00981574, 0x00222100, 0x00a80a0c, 0x00388100,
-  0x009c2578, 0x0008003c, 0x00b02a03, 0x00b01a0b, 0x00b08a0c, 0x00a31e01,
-  0x00d05217, 0x00a8040d, 0x009835e5, 0x0008093c, 0x00a70402, 0x009835e5,
-  0x0077bc84, 0x0075bcb8, 0x00255001, 0x00a9040f, 0x0016573e, 0x00d59670,
-  0x00982527, 0x00307002, 0x009c258e, 0x00e60004, 0x00370700, 0x00166700,
-  0x0007043c, 0x00b03eff, 0x003ee001, 0x0071bc56, 0x00981596, 0x00f50000,
-  0x0099159b, 0x00d05918, 0x00f00000, 0x0099259b, 0x00ed059a, 0x008c04bf,
-  0x009c159f, 0x00d00090, 0x00d00090, 0x00a31e01, 0x00d05217, 0x0075bc84,
-  0x00e40836, 0x007445f0, 0x00544800, 0x00745064, 0x00746127, 0x0015c800,
-  0x00b04300, 0x00a80022, 0x00588500, 0x0004073c, 0x00b08022, 0x0070bc65,
-  0x009815e6, 0x00e54002, 0x0071bcb8, 0x009815b2, 0x007510b8, 0x0075c034,
-  0x0071bc84, 0x007510a4, 0x0071bc3d, 0x0075103d, 0x005f2500, 0x00a20404,
-  0x0005063c, 0x005f0200, 0x00af2900, 0x00355001, 0x009835be, 0x00d05b1a,
-  0x00156002, 0x0070bc3d, 0x008815c2, 0x00222500, 0x00a70402, 0x00a8040d,
-  0x00377500, 0x00388500, 0x009c35db, 0x00d00090, 0x00a80405, 0x00308700,
-  0x009825cc, 0x0008073c, 0x00a50401, 0x00b0840c, 0x00705c26, 0x009815db,
-  0x0079022f, 0x00a50406, 0x00a10409, 0x00211500, 0x00b0deff, 0x003ee001,
-  0x00b01409, 0x00b01403, 0x00ed05da, 0x008c0026, 0x00ad1e01, 0x00a1000b,
-  0x0016ca00, 0x00611600, 0x00b02404, 0x00b0100b, 0x00b0840d, 0x00b0940f,
-  0x00b07402, 0x00a31e01, 0x00d05217, 0x00d05217, 0x0071bc84, 0x00c01000,
-  0x009c15f7, 0x00e14102, 0x00e50310, 0x00715210, 0x005f2100, 0x00a20404,
-  0x00efeeee, 0x005f0200, 0x00a12900, 0x001f1000, 0x001f1038, 0x001f1030,
-  0x001f1028, 0x00e50004, 0x00d05b1f, 0x00e14112, 0x00e50110, 0x00715210,
-  0x005f2100, 0x00a20404, 0x00efffcc, 0x005f0200, 0x00a12900, 0x001f1000,
-  0x001f1030, 0x00e50004, 0x00d05b1f, 0x00a20005, 0x00722210, 0x006220ff,
-  0x00477200, 0x00d87040, 0x0098262a, 0x00e20001, 0x00122800, 0x0009083c,
-  0x00199004, 0x00e20460, 0x00299200, 0x00677200, 0x00a0090b, 0x009c162a,
-  0x00f00000, 0x00aa0903, 0x00ab0902, 0x0099162a, 0x00983607, 0x00e10147,
-  0x00e2062b, 0x00a00100, 0x009c1018, 0x00548050, 0x00742210, 0x00e26310,
-  0x00b04100, 0x00e33051, 0x00732210, 0x005f0300, 0x005f0a00, 0x00e20080,
-  0x002aa200, 0x0013203e, 0x003bb200, 0x00b0a903, 0x00b0390b, 0x00b0b902,
-  0x00d00118, 0x00ad090e, 0x00ab090b, 0x00ac090f, 0x00fa1000, 0x00a40d0a,
-  0x00a80d09, 0x00b040e9, 0x007f8c61, 0x00fa3000, 0x004f8080, 0x00b0e008,
-  0x00ae0d0f, 0x00a20d0b, 0x00981645, 0x00d00090, 0x00d00090, 0x00ad1e01,
-  0x00aa1e01, 0x00a81e01, 0x00a71e01, 0x00a61e01, 0x00a51e01, 0x00a41e01,
-  0x00a31e01, 0x00a11e01, 0x00840200, 0x00e2064a, 0x00a400ec, 0x00c04007,
-  0x009c171a, 0x00d00090, 0x00d00090, 0x00080f3c, 0x003bb001, 0x00b080eb,
-  0x00d00090, 0x009a865c, 0x00d00090, 0x00a00d13, 0x009c2658, 0x00d00090,
-  0x00d00090, 0x00b2ac00, 0x000a083c, 0x00d06416, 0x00e4ffff, 0x000a083c,
-  0x00b04d13, 0x00d06416, 0x00a50d06, 0x00105001, 0x009c2651, 0x00d00090,
-  0x00a100e9, 0x00745d08, 0x00b01d0a, 0x00761d00, 0x00374600, 0x00745d00,
-  0x00366400, 0x00577600, 0x00677500, 0x0098266b, 0x00d06511, 0x00a70d09,
-  0x00b000e9, 0x00711c48, 0x00777c41, 0x003771fb, 0x00fa1000, 0x00a40d09,
-  0x00747041, 0x004f7003, 0x00b04d09, 0x00307004, 0x009c267f, 0x00d00090,
-  0x00a400ec, 0x00e2067d, 0x00c04007, 0x009c171a, 0x00d00090, 0x003bb001,
-  0x00000f3c, 0x00307007, 0x00983689, 0x00fa2000, 0x00d00090, 0x00d00090,
-  0x00d00090, 0x00080f3c, 0x00fa3000, 0x000f083c, 0x00d06910, 0x00a400ec,
-  0x00e2068d, 0x00c04007, 0x009c171a, 0x00d00090, 0x003bb001, 0x00080f3c,
-  0x00b0c90f, 0x00738d10, 0x00333001, 0x00705c3d, 0x009816b8, 0x00303004,
-  0x009826b8, 0x00708610, 0x009c26b8, 0x00d00090, 0x00a400ec, 0x00e2069e,
-  0x00c04007, 0x009c171a, 0x003bb001, 0x00333004, 0x00040f3c, 0x00044040,
-  0x00744201, 0x00748859, 0x001440be, 0x00788c5a, 0x00588001, 0x001880bf,
-  0x00a5090f, 0x00a20d0e, 0x00d55070, 0x00155002, 0x00255101, 0x00a00d13,
-  0x009826b0, 0x00355004, 0x00d00090, 0x00d00090, 0x00b28200, 0x00a80d04,
-  0x00255800, 0x00b24200, 0x00b25200, 0x00b02d0e, 0x00c01003, 0x009c16c4,
-  0x00d00090, 0x00a40d13, 0x009826be, 0x00d06c11, 0x00444001, 0x00b2ac00,
-  0x00b04d13, 0x00e5fffc, 0x00e1ffff, 0x00d06c16, 0x002510fd, 0x00d00090,
-  0x00303504, 0x009826d1, 0x00d00090, 0x00a400ec, 0x00e206cd, 0x00c04007,
-  0x009c171a, 0x003bb001, 0x00333004, 0x00080f3c, 0x00d06c16, 0x00477003,
-  0x00357300, 0x00255101, 0x00fa1000, 0x00a40d09, 0x00745041, 0x004f5003,
-  0x00b04d09, 0x00301303, 0x00981707, 0x00c05004, 0x009c16fc, 0x00fa2000,
-  0x00d00090, 0x00d00090, 0x00d00090, 0x00080f3c, 0x00fa3000, 0x000f083c,
-  0x00d07017, 0x00fa2000, 0x00d00090, 0x00d00090, 0x00d00090, 0x00040f3c,
-  0x00fa3000, 0x000f043c, 0x00155003, 0x00144500, 0x0015503d, 0x00330300,
-  0x009c26f2, 0x00e30000, 0x00357500, 0x00355004, 0x00155003, 0x00144500,
-  0x00350500, 0x00144500, 0x00355020, 0x00188500, 0x00588400, 0x00d07017,
-  0x00455003, 0x00305700, 0x009826e5, 0x00e20704, 0x00a400ec, 0x00c04007,
-  0x009c171a, 0x00d00090, 0x003bb001, 0x00080f3c, 0x00d00090, 0x00500100,
-  0x009c270a, 0x00ea0000, 0x00211001, 0x00111003, 0x00310100, 0x00188100,
-  0x00211020, 0x001aa100, 0x00310100, 0x001aa100, 0x00211020, 0x00188100,
-  0x00e40001, 0x00588a00, 0x00b04d13, 0x00b080eb, 0x00e20646, 0x00d0641f,
-  0x00b0c90f, 0x00b02d0b, 0x00b0b90b, 0x00fa2000, 0x00b01eff, 0x00b03efe,
-  0x00b04efd, 0x00b05efc, 0x00b06efb, 0x00b07efa, 0x00b08ef9, 0x00b0aef8,
-  0x00b0def7, 0x003ee009, 0x00a100e9, 0x00a40d09, 0x00b01d0a, 0x00b0ed0f,
-  0x00050f3c, 0x00754100, 0x00ae0008, 0x00b05d09, 0x00a0090b, 0x009c132b,
-  0x00e40147, 0x00e80001, 0x00b00400, 0x00a10002, 0x0071803f, 0x00b00002,
-  0x00b01003, 0x00d0321b, 0x00a2090e, 0x00ff1000, 0x007f2c61, 0x00ff3000,
-  0x005f0200, 0x00500a00, 0x009c1742, 0x00fa0000, 0x00ec05c0, 0x00ed0008,
-  0x00a4090b, 0x00a6090f, 0x00774cca, 0x0088174c, 0x003dd700, 0x00500f00,
-  0x00377001, 0x009c3749, 0x00402001, 0x009c1751, 0x00d00090, 0x00772c41,
-  0x00244700, 0x00774cc2, 0x00a0090c, 0x008c1758, 0x00774d00, 0x0005073c,
-  0x00277003, 0x0017703e, 0x003dd700, 0x00a10c09, 0x00ab0c00, 0x00311700,
-  0x00a20c01, 0x00b01c09, 0x00a40c02, 0x00a10c03, 0x00aa0909, 0x00a80908,
-  0x00500700, 0x0098378b, 0x00d00090, 0x00d00090, 0x00a30c08, 0x009c176e,
-  0x00e300c0, 0x00ab0c04, 0x00a20c05, 0x00a40c06, 0x00b03c08, 0x00a10c07,
-  0x00333001, 0x00d00090, 0x00b03c08, 0x00530f00, 0x00a0090c, 0x008c177a,
-  0x003505fc, 0x0098277a, 0x00155003, 0x00133500, 0x00350500, 0x00133500,
-  0x00350500, 0x00783210, 0x0078b021, 0x001bb03f, 0x007b203f, 0x0012203f,
-  0x00133030, 0x007a3210, 0x007a4021, 0x0014403f, 0x0074103f, 0x0011103f,
-  0x00b28600, 0x00b2a600, 0x00377001, 0x009c3766, 0x00d00090, 0x00b0bc00,
-  0x00b02c01, 0x00b04c02, 0x00b01c03, 0x003dd001, 0x00982795, 0x00d00090,
-  0x00d00090, 0x00500f00, 0x00d0781f, 0x00fa2000, 0x00a2090e, 0x0042200e,
-  0x00b0090b, 0x0047f080, 0x00522700, 0x00b0690f, 0x00b0290e, 0x00d0471b,
-  0x00d77040, 0x00e90460, 0x007c7484, 0x002cc900, 0x00e90016, 0x00a50c0b,
-  0x00705d00, 0x009c1802, 0x00d00090, 0x00ab0c0c, 0x008c37e1, 0x00a20c01,
-  0x00702c3c, 0x00981802, 0x00eb05c0, 0x00a90c0f, 0x00a30c0d, 0x00a80b09,
-  0x009817e0, 0x00e20016, 0x00a40b00, 0x00a50b01, 0x00a60b02, 0x00a70b03,
-  0x00d09270, 0x009c27e0, 0x00e20008, 0x00308008, 0x009c27bc, 0x0002083c,
-  0x00aa0b08, 0x009c17c4, 0x00ea00c0, 0x00a50b05, 0x00b0ab08, 0x00a40b04,
-  0x00a60b06, 0x00a70b07, 0x003aa001, 0x00d00090, 0x00b0ab08, 0x00aa0c08,
-  0x007a4021, 0x0014403f, 0x0074503f, 0x0015503f, 0x00b2a900, 0x00aa0c09,
-  0x007a6021, 0x0016603f, 0x0076703f, 0x0017703f, 0x00b2a900, 0x00233008,
-  0x00388001, 0x00322001, 0x009c37bc, 0x00d00090, 0x00b04b00, 0x00b05b01,
-  0x00b06b02, 0x00b07b03, 0x00b03c02, 0x00b03c0d, 0x00b08b09, 0x00b09c0f,
-  0x00d08012, 0x00aa0c0f, 0x00a10c01, 0x00711c3b, 0x009817e8, 0x00f40000,
-  0x00992802, 0x00d07e1a, 0x00f00000, 0x00991802, 0x00d0a970, 0x009c2802,
-  0x00d00090, 0x00ed07ef, 0x008c04bf, 0x00981802, 0x00e4073a, 0x007445f0,
-  0x00544750, 0x00a90c03, 0x00b04300, 0x005f2051, 0x0046901f, 0x004f90e0,
-  0x003606e0, 0x00306b00, 0x009837fc, 0x00060b3c, 0x00756100, 0x003bb600,
-  0x00299600, 0x00b0bc0c, 0x00b09c03, 0x00b05c0b, 0x00d0011b, 0x00f50000,
-  0x00500a00, 0x009c1807, 0x00f00000, 0x00ec05c0, 0x00a7090b, 0x00a50c0a,
-  0x007d7ca3, 0x00ab0c00, 0x00a20c01, 0x00a40c02, 0x00a10c03, 0x00a70c08,
-  0x009c381a, 0x00e700c0, 0x00ab0c04, 0x00a20c05, 0x00a40c06, 0x00a10c07,
-  0x00b0bc00, 0x00b02c01, 0x00b04c02, 0x00b01c03, 0x00377001, 0x00a30908,
-  0x00a60909, 0x00b07c08, 0x0048f500, 0x004af500, 0x00783880, 0x007a6880,
-  0x0078b021, 0x007a4021, 0x001bb03f, 0x0014403f, 0x007b203f, 0x0074103f,
-  0x00a6090f, 0x0011103f, 0x0012203f, 0x00b28600, 0x00b2a600, 0x003dd001,
-  0x00b0690f, 0x008c180f, 0x00b0bc00, 0x00b02c01, 0x00b04c02, 0x00b01c03,
-  0x00b0090b, 0x00d0471b, 0x00f50000, 0x00500a00, 0x009c183a, 0x00f00000,
-  0x00761d27, 0x00000f3c, 0x00366001, 0x009c183b, 0x00d00090, 0x00a40901,
-  0x00724ca0, 0x0030201f, 0x009c1844, 0x00724ca8, 0x00e60001, 0x00a8000b,
-  0x001b6200, 0x00568b00, 0x00e80001, 0x00b0600b, 0x00ab0022, 0x00188300,
-  0x006bb800, 0x00a70902, 0x00b0b022, 0x009c385d, 0x00d00090, 0x00b00902,
-  0x00b01eff, 0x00b02efe, 0x00b0aefd, 0x003ee003, 0x0001033c, 0x0002093c,
-  0x00ed085a, 0x008c04d8, 0x00aa1e01, 0x00a21e01, 0x00a11e01, 0x00010a3c,
-  0x00d0471b, 0x00d77040, 0x00e10460, 0x007b7484, 0x002bb100, 0x00d00090,
-  0x00a40b0b, 0x009c188f, 0x00d00090, 0x00a10b0f, 0x00a80b03, 0x00d91070,
-  0x00a50b01, 0x002009e0, 0x009c288f, 0x00d00090, 0x00ea0004, 0x00a90b0c,
-  0x0088388f, 0x00329020, 0x008c2874, 0x007a9c43, 0x00715c3b, 0x00981879,
-  0x00f40000, 0x0099288f, 0x00d0871b, 0x00f00000, 0x0099188f, 0x00ed087d,
-  0x008c04bf, 0x0098188f, 0x00e40803, 0x007445f0, 0x00544730, 0x00e10000,
-  0x00b04300, 0x00a30b06, 0x005f2031, 0x004f80f8, 0x00211008, 0x00288300,
-  0x003aa001, 0x008c3884, 0x00399100, 0x00741500, 0x00b09b0c, 0x00b08b03,
-  0x00b04b0b, 0x00d0011e, 0x00b0deff, 0x003ee001, 0x00771484, 0x00e50460,
-  0x00277500, 0x0005013c, 0x00ab0701, 0x0071bc3b, 0x0098189c, 0x00f40000,
-  0x009928ce, 0x00d0891f, 0x00f00000, 0x009918ce, 0x00d00090, 0x00a90703,
-  0x00a3070b, 0x00a8070f, 0x00a4070e, 0x00404001, 0x009c18a8, 0x00500300,
-  0x009c18ce, 0x00d00090, 0x00aa070c, 0x009818ce, 0x00738d07, 0x004330fc,
-  0x00303022, 0x009828d8, 0x0040a080, 0x009818d8, 0x0040907f, 0x009c18d8,
-  0x00d48070, 0x00d00090, 0x00303421, 0x009838d2, 0x00ed08b8, 0x008c04bf,
-  0x009818ce, 0x00e409a3, 0x007445f0, 0x00544550, 0x00a10007, 0x00611003,
-  0x0071002e, 0x00b04300, 0x005f1200, 0x005f0900, 0x00a4070e, 0x00740020,
-  0x00a30701, 0x00b0470e, 0x00733c26, 0x00133007, 0x00299300, 0x00e30080,
-  0x003aa300, 0x00b09703, 0x00b0a70c, 0x00b0370b, 0x00ad1e01, 0x00d00090,
-  0x00d00090, 0x00840d00, 0x00ab0701, 0x007bbca0, 0x00e40001, 0x0074403f,
-  0x00144b00, 0x009828ce, 0x00d48070, 0x003043f6, 0x009c28ce, 0x00ed08dd,
-  0x008c04bf, 0x009818ce, 0x00e4096d, 0x007445f0, 0x00544550, 0x005f2051,
-  0x004f90e0, 0x00b04300, 0x0043901f, 0x00a4070e, 0x00740020, 0x00d00090,
-  0x00b0470e, 0x00a40701, 0x00744c26, 0x009818ed, 0x003993e0, 0x003403e0,
-  0x003aa400, 0x009c28f1, 0x000a003c, 0x00a3070b, 0x00743cca, 0x00d00090,
-  0x003304f8, 0x00133002, 0x007340ca, 0x00d08c1b, 0x00741484, 0x00e70460,
-  0x00244700, 0x00e20020, 0x00a70401, 0x00707c3a, 0x009c1902, 0x00f00000,
-  0x00991943, 0x00d09014, 0x00f50000, 0x00992943, 0x00d00090, 0x00a6040f,
-  0x00a50404, 0x0043501f, 0x009c1944, 0x00d76270, 0x00982944, 0x008c8943,
-  0x009c8943, 0x00e20080, 0x00d00090, 0x00af0007, 0x005f0500, 0x00d02000,
-  0x00af2600, 0x00a70402, 0x00b0640f, 0x00255200, 0x00377200, 0x00b05404,
-  0x00b07402, 0x009c3923, 0x00d00090, 0x00b00402, 0x0002043c, 0x00b0deff,
-  0x003ee001, 0x00ed0921, 0x008c04d8, 0x00ad1e01, 0x00d09413, 0x00a3040d,
-  0x00333200, 0x009c1942, 0x00d00090, 0x00a20405, 0x00760210, 0x00302700,
-  0x0088292c, 0x0002073c, 0x00b0640f, 0x00b0240c, 0x00b0240d, 0x00b07402,
-  0x00a2040a, 0x00a70409, 0x00a30407, 0x00a50406, 0x00222300, 0x00277500,
-  0x00b0240a, 0x00b07409, 0x00b02404, 0x00b07403, 0x0003013c, 0x0001073c,
-  0x00b0deff, 0x003ee001, 0x00ed0940, 0x008c0026, 0x00ad1e01, 0x00d09413,
-  0x00b0340d, 0x00840d00, 0x00a2040d, 0x00a0040b, 0x009c1943, 0x00222300,
-  0x00d86070, 0x00981943, 0x00188002, 0x00288300, 0x004880fc, 0x00308020,
-  0x00983950, 0x00e80020, 0x00308200, 0x00982955, 0x00392001, 0x0008023c,
-  0x00d09516, 0x00398001, 0x00ef4252, 0x000f9337, 0x004f50e0, 0x004a30fc,
-  0x003b8a00, 0x00500a00, 0x00981962, 0x005f0000, 0x003aa004, 0x009c395d,
-  0x00d00090, 0x00d00090, 0x00af2600, 0x003bb004, 0x009c3962, 0x003a08e0,
-  0x004aa0fc, 0x0098196b, 0x005f0000, 0x003aa004, 0x009c3968, 0x00328300,
-  0x00d09113, 0x00a2090e, 0x00ff1000, 0x007f2c61, 0x00ff3000, 0x005f0200,
-  0x00500a00, 0x009c1975, 0x00fa0000, 0x00ab090b, 0x004220fe, 0x00a8090f,
-  0x00b0290e, 0x0075bcca, 0x00981980, 0x00d00090, 0x00d00090, 0x00500f00,
-  0x00355001, 0x008c397d, 0x0075bcc2, 0x00981987, 0x00d00090, 0x00d00090,
-  0x00b2f800, 0x00355001, 0x008c3984, 0x00b0090b, 0x0002073c, 0x00010a3c,
-  0x00ed098c, 0x008c04cf, 0x00a5090e, 0x009819a1, 0x00ff2000, 0x0045500f,
-  0x00d00090, 0x00d00090, 0x004bf080, 0x00555b00, 0x00a4090c, 0x00981999,
-  0x00d00090, 0x00b0590e, 0x00d09a11, 0x00755c41, 0x00d00090, 0x003505fc,
-  0x00155003, 0x00350500, 0x001bb500, 0x00d00090, 0x00b2b800, 0x00b0890f,
-  0x00d0321b, 0x00a2090e, 0x00ff1000, 0x007f2c61, 0x00ff3000, 0x005f0200,
-  0x00500a00, 0x009c19ab, 0x00fa0000, 0x004220fe, 0x00a8090f, 0x00b0290e,
-  0x00eb09b4, 0x007c1c64, 0x002ccb00, 0x00ab090b, 0x00a20908, 0x00840c00,
-  0x00d09d15, 0x00d09c1c, 0x00d09c18, 0x00d09c13, 0x00d09b1e, 0x00ec09ba,
-  0x00d00008, 0x00b2f800, 0x003bb020, 0x00d09d1e, 0x00ec09bf, 0x00d00004,
-  0x00b2f800, 0x003bb010, 0x00d09d1e, 0x00ec09c4, 0x00d00002, 0x00b2f800,
-  0x003bb008, 0x00d09d1e, 0x00ec09c9, 0x00b2f800, 0x003bb004, 0x00d09d1e,
-  0x00ec09cd, 0x00122030, 0x0072f210, 0x003bb002, 0x008c19de, 0x00d00090,
-  0x00d00090, 0x00b22800, 0x00d09d1e, 0x00ec09d6, 0x00122038, 0x0072f118,
-  0x003bb001, 0x008c19de, 0x00d00090, 0x00d00090, 0x00b22800, 0x00d09d1e,
-  0x00a50aec, 0x00355700, 0x00801c00, 0x00b02908, 0x00b0b90b, 0x00500b00,
-  0x009c19e9, 0x0002073c, 0x00010a3c, 0x00ed09e9, 0x008c04cf, 0x00a5090e,
-  0x009819fe, 0x00ff2000, 0x00d00090, 0x00d00090, 0x0045500f, 0x004bf080,
-  0x00a4090c, 0x009819f6, 0x00555b00, 0x00d00090, 0x00b0590e, 0x00d09f1e,
-  0x00755c41, 0x00d00090, 0x003505fc, 0x00155003, 0x00350500, 0x001bb500,
-  0x00d00090, 0x00b2b800, 0x00b0890f, 0x00d0321b
-};
-
-#define DMEM_OFFSET             0x8000     /* Contains the control word interface */
-#define IMEM_OFFSET             0xC000     /* Contains config data */
-
-#define TABLE_LENGTH(x) (sizeof(x)/sizeof(*(x)))
-#define IMEM_REGION_LENGTH  0xa00
-
-#define DMEM_REGION_LENGTH  0x600
-
-#define IMEM_FIRMWARE_SZ  TABLE_LENGTH(IMEM_REGION)
-#define DMEM_FIRMWARE_SZ  TABLE_LENGTH(DATA_REGION)
-
-#endif
-
-
Index: linux/drivers/stm/710x_fdma2.c
===================================================================
--- /dev/null
+++ linux/drivers/stm/710x_fdma2.c
@@ -0,0 +1,1055 @@
+/*
+ *  STb710x FDMA Driver
+ *  Copyright (c) 2005 STMicroelectronics Limited.
+ *  Authors: 	Mark Glaisher <Mark.Glaisher@st.com>
+ * 		Stuart Menefy <Stuart.Menefy@st.com>
+ *
+ *   This program is free software; you can redistribute it and/or modify
+ *   it under the terms of the GNU General Public License as published by
+ *   the Free Software Foundation; either version 2 of the License, or
+ *   (at your option) any later version.
+ *
+ *   This program is distributed in the hope that it will be useful,
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *   GNU General Public License for more details.
+ *
+ *   You should have received a copy of the GNU General Public License
+ *   along with this program; if not, write to the Free Software
+ *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
+ *
+ */
+#include <linux/stm/710x_fdma.h>
+#include <linux/platform_device.h>
+static fdma_chip chip;
+
+int setup_freerunning_node(struct stm_dma_params *params)
+{
+	fdma_llu_entry* llu = params->priv.node->virt_addr;
+	memset(llu, 0, sizeof(*llu));
+
+	if (params->node_pause)
+		llu->control |=  SET_NODE_COMP_PAUSE | SET_NODE_COMP_IRQ;
+
+	if (params->node_interrupt)
+		llu->control |= SET_NODE_COMP_IRQ;
+
+	if (params->dim & DIM_1_x_0 ){
+		llu->control |= NODE_ADDR_INCR <<SOURCE_ADDR;
+		llu->control |= NODE_ADDR_STATIC <<DEST_ADDR;
+	}
+	else if (params->dim & DIM_0_x_1){
+		llu->control |= NODE_ADDR_STATIC <<SOURCE_ADDR;
+		llu->control |= NODE_ADDR_INCR <<DEST_ADDR;
+	}
+
+	/*correct parms for the dimension ar set by API layer*/
+	llu->line_len		= params->line_len;
+	llu->sstride 		= params->sstride;
+	llu->dstride 		= params->dstride;
+	return 0;
+}
+
+int setup_paced_node(struct stm_dma_params *params)
+{
+	fdma_llu_entry* llu = params->priv.node->virt_addr;
+	struct fmdareq_RequestConfig_s *prq  = &chip.req_tbl[ params->req_line];
+
+	memset(llu, 0, sizeof(*llu));
+
+	llu->control= params->req_line;
+	llu->size_bytes= params->node_bytes;
+	llu->line_len = params->node_bytes;
+
+	if (params->node_pause)
+		/*in order to recieve the pause interrupt
+		 *  we must also enable end of node interrupts*/
+		llu->control |=  SET_NODE_COMP_PAUSE | SET_NODE_COMP_IRQ;
+
+	if (params->node_interrupt)
+		llu->control |= SET_NODE_COMP_IRQ;
+
+	if (prq->Access == WRITE) {
+		llu->control |= NODE_ADDR_INCR <<SOURCE_ADDR;
+		llu->control |= NODE_ADDR_STATIC <<DEST_ADDR;
+	}
+	else if (prq->Access == READ) {
+		llu->control |= NODE_ADDR_STATIC <<SOURCE_ADDR;
+		llu->control |= NODE_ADDR_INCR <<DEST_ADDR;
+	}
+	else return -EINVAL;
+
+	return 0;
+}
+int stb710x_get_engine_status(int channel)
+{
+	return readl(CMD_STAT_REG(channel))&3;
+}
+
+static void extrapolate_simple(struct stm_dma_params *xfer)
+{
+	struct fdma_llu_entry* dest_llu =xfer->priv.node->virt_addr;
+	/* next_item is filled in create_llu_list */
+	dest_llu->size_bytes = xfer->node_bytes;
+	dest_llu->saddr = xfer->sar;
+	dest_llu->daddr = xfer->dar;
+}
+
+static void extrapolate_sg_src(struct stm_dma_params *xfer)
+{
+	int i;
+	struct scatterlist * sg = xfer->srcsg;
+	struct fdma_llu_entry* dest_llu=0;
+	struct llu_node * cur_node = xfer->priv.node;
+	unsigned long control =xfer->priv.node->virt_addr->control;
+
+	for (i=0; i<xfer->priv.sublist_nents; i++) {
+		/* next_item is filled in in create_llu_list */
+		dest_llu = cur_node->virt_addr;
+		dest_llu->control = control;
+		dest_llu->size_bytes = sg_dma_len(sg);
+		dest_llu->saddr = sg_dma_address(sg);
+		dest_llu->daddr = xfer->dar;
+		dest_llu->sstride = xfer->sstride;
+		dest_llu->line_len = xfer->line_len;
+		dest_llu->dstride=0;
+		cur_node++;
+		dest_llu->next_item = cur_node->dma_addr;
+		sg++;
+	}
+	dest_llu->next_item=0;
+}
+static void extrapolate_sg_dst(struct stm_dma_params *xfer)
+{
+	int i;
+	struct scatterlist * sg = xfer->dstsg;
+	struct fdma_llu_entry* dest_llu=0;
+	struct llu_node * cur_node = xfer->priv.node;
+	unsigned long control =xfer->priv.node->virt_addr->control;
+
+	/*always >=1 iter through here*/
+	for (i=0; i<xfer->priv.sublist_nents; i++) {
+		dest_llu= cur_node->virt_addr;
+		/* next_item is filled in in create_llu_list */
+		dest_llu->control = control;
+		dest_llu->size_bytes = sg_dma_len(sg);
+		dest_llu->saddr = xfer->sar;
+		dest_llu->daddr = sg_dma_address(sg);
+		dest_llu->sstride = 0;
+		dest_llu->line_len =xfer->line_len;
+		dest_llu->dstride=xfer->dstride;
+		cur_node++;
+		dest_llu->next_item = cur_node->dma_addr;
+
+		sg++;
+	}
+	dest_llu->next_item=0;
+}
+
+static inline void set_to_sublist_end(struct stm_dma_params *transfer,unsigned addr)
+{
+	struct llu_node * cur_node = transfer->priv.node;
+	struct fdma_llu_entry* dest_llu=0;
+	int i;
+
+	for (i=0; i<transfer->priv.sublist_nents; i++)
+		dest_llu = (cur_node++)->virt_addr;
+
+	dest_llu->next_item = addr;
+}
+
+static void create_llu_list(struct stm_dma_params *transfer)
+{
+	struct stm_dma_params * this = transfer;
+	struct stm_dma_params * next = transfer->next;
+
+	while(this->next){
+		if(this->mode == MODE_SRC_SCATTER || this->mode == MODE_DST_SCATTER)
+			set_to_sublist_end(this,next->priv.node->dma_addr);
+		else
+			this->priv.node->virt_addr->next_item = next->priv.node->dma_addr;
+		this = next;
+		next = next->next;
+	};
+
+	if(transfer->circular_llu)
+		set_to_sublist_end(this,transfer->priv.node->dma_addr);
+	else
+		set_to_sublist_end(this,0);
+}
+
+static int alloc_nodelist_mem(struct stm_dma_params *transfer,int nents)
+{
+	int res=0;
+	int i=0;
+	int list_size = sizeof(struct llu_node)*nents;
+	unsigned long first=0;
+	struct llu_node* new_node = kmalloc(list_size,transfer->context);
+
+	if (new_node == NULL)
+		return -ENOMEM;
+
+	first = (unsigned long )new_node;
+
+	for(;i<nents;i++){
+		new_node->virt_addr = dma_pool_alloc(
+					chip.llu_pool,
+					transfer->context,
+					&new_node->dma_addr);
+
+		if (new_node->virt_addr == NULL){
+			kfree(new_node);
+			return -ENOMEM;
+		}
+		new_node++;
+	}
+	transfer->priv.node =(struct llu_node*) first;
+	transfer->priv.alloced_nents = transfer->priv.sublist_nents;
+	return res;
+}
+
+static inline int fdma_sh_compatibility_setup(struct dma_channel *channel,
+					struct channel_status * chan,
+					unsigned long sar, unsigned long dar,
+					size_t count, unsigned int mode)
+{
+	struct stm_dma_params dmap= {0};
+	dmap.mode =mode;
+	dmap.dim = (channel->flags & 0xf0);
+	dmap.context =(channel->flags & STM_DMA_SETUP_CONTEXT_ISR) ?
+						GFP_ATOMIC:GFP_KERNEL;
+	dmap.sar =sar;
+	dmap.dar =dar;
+	dmap.node_bytes = count;
+	dmap.line_len = count;
+	dmap.priv.extrapolate_fn = extrapolate_simple;
+	dmap.priv.nodelist_setup =setup_freerunning_node;
+	if (alloc_nodelist_mem(&dmap,1) != 0){
+		fdma_log("%s Cant allocate memory for xfer\n",__FUNCTION__);
+		return -ENOMEM;
+	}
+	dmap.priv.nodelist_setup(&dmap);
+	dmap.priv.extrapolate_fn(&dmap);
+	create_llu_list(&dmap);
+	memcpy(&chan->params,&dmap,sizeof(struct stm_dma_params));
+	return 0;
+}
+
+static inline void fdma_check_xfer_params(stm_dma_params * params)
+{
+	BUG_ON((params->priv.node->dma_addr & 0x1F)!=0);
+	BUG_ON(ASSERT_NODE_BUS_ADDR(params->priv.node->virt_addr->saddr)==0);
+	BUG_ON(ASSERT_NODE_BUS_ADDR(params->priv.node->virt_addr->daddr)==0);
+	BUG_ON(params->priv.node->virt_addr->size_bytes==0);
+}
+
+static void completion_ok(int channel)
+{
+	unsigned long irqflags=0;
+	struct channel_status *chan= &chip.channel[channel];
+	void (*comp_cb)(void*) = chan->params.comp_cb;
+	void *comp_cb_parm = chan->params.comp_cb_parm;
+
+	if((!chan->callback_only) || chan->ch_term){
+		spin_lock_irqsave(&chip.channel_lock,irqflags);
+		memset(&chip.channel[channel].params,0,sizeof(struct stm_dma_params));
+		chan->is_xferring = 0;
+		chan->ch_term=0;
+		spin_unlock_irqrestore(&chip.channel_lock,irqflags);
+	}
+	chan->callback_only=0;
+
+	wake_up(&chan->cur_cfg->wait_queue);
+	if (comp_cb)
+		comp_cb(comp_cb_parm);
+}
+
+static void completion_err(int channel)
+{
+	unsigned long irqflags=0;
+	struct channel_status *chan= &chip.channel[channel];
+	void (*err_cb)(void*) = chan->params.err_cb;
+	void *err_cb_parm = chan->params.err_cb_parm;
+
+	if((!chan->callback_only)  || chan->ch_term){
+		spin_lock_irqsave(&chip.channel_lock,irqflags);
+		memset(&chan->params,0,sizeof(struct stm_dma_params));
+		chan->is_xferring = 0;
+		chan->ch_term=0;
+		spin_unlock_irqrestore(&chip.channel_lock,irqflags);
+	}
+	chan->callback_only=0;
+	wake_up(&chan->cur_cfg->wait_queue);
+	if(err_cb)
+		err_cb(err_cb_parm);
+}
+
+void handle_completion(int channel,int comp_code)
+{
+	struct channel_status *chan = &chip.channel[channel];
+
+	if(FDMA_COMPLETE_OK == comp_code) {
+		if(chan->params.comp_cb_isr)
+			completion_ok(channel);
+		else{
+			chan->fdma_complete.data = channel;
+			tasklet_schedule(&chan->fdma_complete);
+		}
+	} else {
+		if(chan->params.err_cb_isr)
+			completion_err(channel);
+		else{
+			chan->fdma_error.data = channel;
+			tasklet_schedule(&chan->fdma_error);
+		}
+	}
+}
+
+static int fdma_start_channel(int ch_num,
+			      unsigned long start_addr)
+{
+	unsigned long irqflags=0;
+	u32 cmd_sta_value = (start_addr  | CMDSTAT_FDMA_START_CHANNEL);
+
+	spin_lock_irqsave(&chip.fdma_lock,irqflags);
+	writel(cmd_sta_value,CMD_STAT_REG(ch_num));
+	writel(MBOX_STR_CMD(ch_num),chip.io_base +chip.regs.fdma_cmd_set);
+	spin_unlock_irqrestore(&chip.fdma_lock,irqflags);
+	return 0;
+}
+
+static void fdma_cb_continue(int channel)
+{
+	unsigned long irqflags=0;
+	unsigned long new_reg_val=0;
+	struct channel_status * ch = &chip.channel[channel];
+	if(ch->comp_cb && ch->comp_cb_isr)
+		ch->comp_cb(ch->comp_cb_param);
+	else{
+		ch->fdma_complete.data = channel;
+		if(!ch->ch_term)
+			ch->callback_only = 1;
+		tasklet_schedule(&ch->fdma_complete);
+	}
+	if(ch->ch_pause){ /*usr signals pause*/
+		ch->ch_pause=0;
+		/*we want to continue the current transfer*/
+		writel(MBOX_STR_CMD(channel),chip.io_base + chip.regs.fdma_cmd_set);
+	} else {
+		/*we need to load the next node*/
+		spin_lock_irqsave(&chip.fdma_lock,irqflags);
+		new_reg_val = (readl(CH_PTR_REG(channel))|CMDSTAT_FDMA_START_CHANNEL);
+		writel( new_reg_val,CMD_STAT_REG(channel) );
+		writel(MBOX_STR_CMD(channel) ,chip.io_base + chip.regs.fdma_cmd_set);
+		spin_unlock_irqrestore(&chip.fdma_lock,irqflags);
+	}
+}
+
+static inline void __handle_fdma_err_irq(int channel)
+{
+	fdma_log("%s ERROR CH_%d err %d\n",
+		__FUNCTION__,
+		channel,
+		(int)( readl(CMD_STAT_REG(channel))& 0x1c) >>2);
+			/*err is bits 2-4*/
+	/*clearing the channel interface here will stop further
+	 * transactions after the err and reset the channel*/
+	writel(0,CMD_STAT_REG(channel));
+	writel(readl(chip.io_base + chip.regs.fdma_cmd_sta),chip.io_base + chip.regs.fdma_cmd_clr);
+	handle_completion(channel,FDMA_COMPLETE_ERR);
+}
+
+static inline void __handle_fdma_completion_irq(int channel)
+{
+	/*now we look for reason of int may be*/
+	switch(stb710x_get_engine_status(channel)){
+		case FDMA_CHANNEL_PAUSED:
+			if(chip.channel[channel].ch_term==1){
+				writel(0,CMD_STAT_REG(channel));
+				handle_completion(channel,FDMA_COMPLETE_OK);
+			}
+			else if(chip.channel[channel].ch_pause)
+				chip.channel[channel].ch_pause=0;
+			else
+				fdma_cb_continue(channel);
+			break;
+		case FDMA_CHANNEL_IDLE:
+			handle_completion(channel,FDMA_COMPLETE_OK);
+			break;
+		case FDMA_CHANNEL_RUNNING:
+			break;
+		default:
+			fdma_log("ERR::FDMA2 unknown interrupt status \n");
+			handle_completion(channel,FDMA_COMPLETE_ERR);
+	}
+}
+
+static irqreturn_t fdma_irq(int irq, void *dev_id, struct pt_regs *regs)
+{
+	int channel=chip.ch_min;
+	/*we need a channnel mask to only clear interrupts on channels
+	 *  assoc'd to this dmac*/
+	u32 channel_mask =(0x1 << (channel*2));
+
+	u32 int_stat_val = readl(chip.io_base + chip.regs.fdma_int_sta);
+	writel(int_stat_val|channel_mask, chip.io_base +chip.regs.fdma_int_clr);
+
+	/*we need to shift down to our first channel*/
+	int_stat_val >>= (channel*2);
+
+	for(;channel<chip.ch_max+1;channel++){
+		if (int_stat_val & 1) {
+			if (int_stat_val & 2)
+				__handle_fdma_err_irq(channel);
+			else
+				__handle_fdma_completion_irq(channel);
+		}
+		int_stat_val = int_stat_val>>2;
+	}
+	return IRQ_HANDLED;
+}
+
+/*---------------------------------------------------------------------*
+ *---------------------------------------------------------------------*
+ * FIRMWARE DOWNLOAD & ENGINE INIT
+ *---------------------------------------------------------------------*
+ *---------------------------------------------------------------------*/
+
+static int fdma_get_fw_revision(char* revision, int major, int minor)
+{
+	int reg = readl(chip.io_base + chip.regs.fdma_dmem_region);
+	major  = (reg &  0xff00) >>8;
+	minor  = reg &  0xff;
+
+	if(! (major || minor))
+		return -ENODEV;
+
+	sprintf(revision,"FDMA_FW V%d.%d",major,minor);
+	return 0;
+}
+
+static int fdma_get_hw_revision(char * revision,int major, int minor)
+{
+	major = readl(chip.io_base + chip.regs.fdma_id);
+	minor = readl(chip.io_base + chip.regs.fdma_ver);
+	sprintf(revision,"SLIMCORE_HW V%d.%d",major,minor);
+	return 0;
+}
+
+static int fdma_do_bootload(void)
+{
+	int major=0,minor=0;
+	char fw_revision[20];
+	char hw_revision[20];
+	device_t* ptr=0;
+	fdma_fw_data_t fw=chip.fw;
+	unsigned long unused_ibytes;
+	unsigned long unused_dbytes;
+	unsigned long irqflags;
+	void * addr =(char*)chip.io_base;
+
+	fdma_log("FDMA: Loading Firmware...");
+	unused_ibytes= fw.imem_len - fw.imem_fw_sz;
+	unused_dbytes= fw.dmem_len - fw.dmem_fw_sz;
+
+	spin_lock_irqsave(&chip.fdma_lock,irqflags);
+	ptr = (device_t*) ((char*) addr +chip.regs.fdma_dmem_region);
+	memcpy((void*)ptr,&fw.data_reg[0],fw.dmem_fw_sz * sizeof(u32));
+	if(unused_dbytes){
+		ptr =(device_t*) ((char*)addr +chip.regs.fdma_dmem_region
+				  +(fw.dmem_fw_sz*sizeof(u32)));
+		memset((void*)ptr ,0, unused_dbytes);
+	}
+
+	ptr = (device_t*) ((char*) addr +chip.regs.fdma_imem_region);
+	memcpy((void*)ptr,&fw.imem_reg[0],fw.imem_fw_sz* sizeof(u32));
+	if(unused_ibytes){
+		ptr =(device_t*) ((char*)addr +chip.regs.fdma_imem_region
+				  +(fw.imem_fw_sz*sizeof(u32)));
+		memset((void*)ptr,0, unused_ibytes);
+	}
+	spin_unlock_irqrestore(&chip.fdma_lock,irqflags);
+
+	chip.firmware_loaded=1;
+	fdma_get_fw_revision(&fw_revision[0],major,minor);
+	fdma_get_hw_revision(&hw_revision[0],major,minor);
+	wake_up(&chip.fw_load_q);
+
+	fdma_log("   STB_%dC%d %s %s \n",
+		 chip.cpu_subtype,chip.cpu_rev,hw_revision,fw_revision);
+	return 0;
+}
+
+static void fdma_initialise(void)
+{
+/*These pokes come from the current STAPI tree.
+ * The three magic vals are pokes to undocumented regs so
+ * we don't know what they mean.
+ *
+ * The effect is to turn on and initialise the clocks
+ * and set all channels off*/
+
+	/*clear the status regs MBOX & IRQ*/
+	writel(CLEAR_WORD, chip.io_base+chip.regs.fdma_int_clr);
+	writel(CLEAR_WORD, chip.io_base+chip.regs.fdma_cmd_clr);
+
+	/* Enable the FDMA block */
+	writel(1,chip.io_base+chip.regs.fdma_sync_reg);
+	writel(5,chip.io_base+chip.regs.fdma_clk_gate);
+	writel(0,chip.io_base+chip.regs.fdma_clk_gate);
+
+}
+/*this function enables messaging and intr generation for all channels &
+ * starts the fdma running*/
+static int fdma_enable_all_channels(void)
+{
+	writel(CLEAR_WORD,chip.io_base + chip.regs.fdma_int_mask);
+	writel(CLEAR_WORD,chip.io_base + chip.regs.fdma_cmd_mask);
+	writel(ENABLE_FLG ,chip.io_base +chip.regs.fdma_en);
+	return (readl(chip.io_base + chip.regs.fdma_en) &1);
+}
+
+static void fdma_reset_channels(void)
+{
+	int channel=0;
+	for(;channel <(chip.ch_max-1);channel++)
+		writel(0,CMD_STAT_REG(0));
+}
+
+static void fdma_initialise_req_ctl(void)
+{
+	unsigned long ReqC=0;
+	unsigned long req_base_reg = chip.io_base+chip.regs.fdma_req_ctln;
+	int i=0,index=0;;
+
+	for(;i < (chip.num_req_lines -1 );i++){
+		ReqC = (u32)(chip.req_tbl[i].HoldOff    & 0x0f) <<  0;/*Bits 3.0*/
+		ReqC |= (u32)(chip.req_tbl[i].OpCode    & 0x0f) <<  4;/*7..4*/
+		ReqC |= (u32)(chip.req_tbl[i].Access    & 0x01) << 14;/*14*/
+		ReqC |= (u32)(chip.req_tbl[i].Initiator & 0x03) << 22;/*23..22*/
+		ReqC |= (u32)((chip.req_tbl[i].Count-1) & 0x1F) << 24;/*28..24*/
+		ReqC |= (u32)(chip.req_tbl[i].Increment & 0x01) << 29;/*29*/
+		index = chip.req_tbl[i].Index;/* Write to device */
+		writel(ReqC,req_base_reg+(index *CMD_STAT_OFFSET));
+	}
+}
+
+static int fdma_register_caps(void)
+{
+	int channel = chip.ch_min;
+	int res=0;
+	struct dma_chan_caps  dmac_caps[chip.ch_max];
+	const char  * dmac_id = (const char *)STM_DMAC_ID;
+	static const char* hb_caps[] = {STM_DMA_CAP_HIGH_BW,NULL};
+	static const char* lb_caps[] = {STM_DMA_CAP_LOW_BW,NULL};
+
+	for (;channel <= chip.ch_max;channel++) {
+		dmac_caps[channel].ch_num = channel;
+		dmac_caps[channel].caplist =
+			(channel < 4) ? hb_caps : lb_caps;
+	}
+	res= register_chan_caps(dmac_id,&dmac_caps[chip.ch_min]);
+
+	if(res!=0){
+		fdma_log("%s %s failed to register capabilities\n",
+			__FUNCTION__,dmac_id);
+		return -ENODEV;
+	}
+	else return 0;
+}
+
+static int fdma_run_initialise_sequence(void)
+{
+	int i=0;
+	chip.llu_pool = dma_pool_create("STB710X FDMA", NULL,
+					sizeof(struct fdma_llu_entry),32,0);
+	if (chip.llu_pool == NULL) {
+		fdma_log("%s Can't allocate dma_pool memory",__FUNCTION__);
+		return -ENOMEM;
+	}
+	fdma_initialise();
+	fdma_reset_channels();
+	fdma_initialise_req_ctl();
+
+	for(i=0;i < chip.ch_max+1;i++){
+		tasklet_init(&chip.channel[i].fdma_error,(void*)completion_err,i);
+		tasklet_init(&chip.channel[i].fdma_complete,(void*)completion_ok,i);
+	}
+	if(!fdma_enable_all_channels())
+		return -ENODEV;
+	else return  0;
+}
+
+static int fdma_load_firmware(void)
+{
+	unsigned long irqflags=0;
+	spin_lock_irqsave(&chip.channel_lock,irqflags);
+	switch ( chip.firmware_loaded ) {
+		case 0:
+			chip.firmware_loaded = -1;
+			spin_unlock_irqrestore(&chip.channel_lock,irqflags);
+			if (fdma_do_bootload()!=0 ){
+				chip.firmware_loaded=0;
+				return  -ENOMEM;
+			}
+			if(fdma_run_initialise_sequence()!=0)
+				return -ENODEV;
+
+			return (chip.firmware_loaded==1) ? 0:-ENODEV;
+		case 1:
+			spin_unlock_irqrestore(&chip.channel_lock,irqflags);
+			return 0;
+		default:
+		case -1:
+			spin_unlock_irqrestore(&chip.channel_lock,irqflags);
+			wait_event_interruptible(chip.fw_load_q,(chip.firmware_loaded==1));
+			if(!chip.firmware_loaded)
+				return -ENODEV;
+			else return 0;
+	}
+	return 0;
+}
+
+static int fdma_check_firmware_state(void)
+{
+	return (chip.firmware_loaded) ? 0:fdma_load_firmware();
+}
+
+/*---------------------------------------------------------------------*
+ *---------------------------------------------------------------------*
+ * Linux -SH DMA API hooks
+ *---------------------------------------------------------------------*
+ *---------------------------------------------------------------------*/
+
+/*returns the number of bytes left to transfer for the current node*/
+extern int stb710x_fdma_get_residue(struct dma_channel *chan)
+{
+	unsigned long irqflags;
+	u32 chan_base = chip.io_base + (chan->chan * NODE_DATA_OFFSET);
+	unsigned long total = 0,count=0;
+	void *first_ptr=0;
+	fdma_llu_entry *cur_ptr;
+
+	spin_lock_irqsave(&chip.fdma_lock, irqflags);
+	count = readl(chan_base +chip.regs.fdma_cntn);
+	/*first read the current node data*/
+	first_ptr = (void *) readl(chan_base + chip.regs.fdma_ptrn);
+	if(! first_ptr)
+		goto list_complete;
+
+	first_ptr = P2SEGADDR(first_ptr);
+	/* Accumulate the bytes remaining in the list */
+	cur_ptr = first_ptr;
+	do {
+		if(first_ptr >=(void*)P2SEGADDR(cur_ptr->next_item)
+		   || cur_ptr->next_item ==0)
+			goto list_complete;
+
+		total += cur_ptr->size_bytes;
+	} while ((cur_ptr = P2SEGADDR((fdma_llu_entry *) cur_ptr->next_item))!=0);
+list_complete:
+	spin_unlock_irqrestore(&chip.fdma_lock, irqflags);
+	total+= count;
+	return total;
+}
+
+
+
+/*must only be called when channel is in pasued state*/
+static int stb710x_fdma_unpause(struct dma_channel * chan)
+{
+	if(IS_CHANNEL_PAUSED(chan->chan)){
+		writel(MBOX_CMD_START_CHANNEL << (chan->chan*2),
+				chip.io_base +chip.regs.fdma_cmd_set);
+		return 0;
+	}
+	return -EBUSY;
+}
+
+static int stb710x_fdma_pause(struct dma_channel * chan,int flush)
+{
+	unsigned long irqflags=0;
+	spin_lock_irqsave(&chip.fdma_lock,irqflags);
+	if(IS_CHANNEL_RUNNING(chan->chan)){
+		chip.channel[chan->chan].ch_pause =1;
+		if(flush)
+			writel( MBOX_CMD_PAUSE_FLUSH_CHANNEL << (chan->chan*2),
+					chip.io_base + chip.regs.fdma_cmd_set);
+		else
+			writel( MBOX_CMD_PAUSE_CHANNEL << (chan->chan*2),
+					chip.io_base + chip.regs.fdma_cmd_set);
+
+		spin_unlock_irqrestore(&chip.fdma_lock,irqflags);
+		return IS_CHANNEL_PAUSED (chan->chan) ? 0:
+			-ENODEV;
+	}
+	spin_unlock_irqrestore(&chip.fdma_lock,irqflags);
+	fdma_log("%s Cant Pause - CH_%d not running\n",__FUNCTION__,chan->chan);
+	return -EBUSY;
+}
+
+
+static int stb710x_fdma_request(struct dma_channel *ch)
+{
+	if(fdma_check_firmware_state()==0){
+		if(!(IS_CHANNEL_RESERVED(ch->chan))){
+			chip.channel[ch->chan].reserved=1;
+			chip.channel[ch->chan].cur_cfg = ch;
+			return 0;
+		}
+	/*the upper level API code requires a positive err code*/
+		else return EBUSY;
+	}
+	return ENOSYS;
+}
+
+
+static int stb710x_fdma_stop(struct dma_channel *chan)
+{
+	unsigned long cmd_val = (MBOX_CMD_PAUSE_CHANNEL << (chan->chan*2));
+	unsigned long irqflags=0;
+
+	/*Issuing a pause on an inactive channel results in the FDMA
+	* attempting to load the next ptr*/
+	spin_lock_irqsave(&chip.fdma_lock,irqflags);
+	if(!(IS_CHANNEL_IDLE(chan->chan))){
+		chip.channel[chan->chan].ch_term=1;
+		writel(cmd_val,(chip.io_base +chip.regs.fdma_cmd_set));
+		spin_unlock_irqrestore(&chip.fdma_lock,irqflags);
+		return 0;
+	}
+	else{/*throw an error if trying to stop an inactive channel*/
+		fdma_log("%s Cant stop Idle Channel %d \n",__FUNCTION__,chan->chan);
+		spin_unlock_irqrestore(&chip.fdma_lock,irqflags);
+		return -ENODEV;
+	}
+}
+
+static int stb710x_list_mem_free(stm_dma_params * xfer_ptr)
+{
+	if(xfer_ptr->priv.node){
+		int i=0;
+		for(;i<xfer_ptr->priv.alloced_nents;i++){
+			dma_pool_free(
+				chip.llu_pool,
+				xfer_ptr->priv.node[i].virt_addr,
+				xfer_ptr->priv.node[i].dma_addr);
+		}
+		kfree(xfer_ptr->priv.node);
+		xfer_ptr->priv.alloced_nents =0;
+		return 0;
+	}
+	else return -ENOMEM;
+}
+
+/*not be be called with locks held !*/
+static int handle_ch_busy(int channel)
+{
+	struct channel_status *chan = &chip.channel[channel];
+
+	if(chan->is_xferring){
+		fdma_log("%s Channel_%d Busy - xfer %s \n",__FUNCTION__,
+			channel,(chan->params.blocking ?"BLOCK":"ABORT"));
+		if(chan->params.blocking){
+			BUG_ON(in_interrupt());
+			wait_event(chan->cur_cfg->wait_queue,(chan->is_xferring==0));
+		}
+		else return -EBUSY;
+	}
+	return 0;
+}
+
+static int stb710x_fdma_compile_params(struct stm_dma_params *params)
+{
+	struct stm_dma_params * this =  params;
+
+	if(unlikely((params->context == GFP_ATOMIC) && params->blocking)){
+		fdma_log("%s Cant specify blocking transfers from isr ctx\n",__FUNCTION__);
+		return -EINVAL;
+	}
+	do{
+		/*here we are looking for a re/un-used node - if so then we must alloc enough mem
+		for the dma node or nodes(sg only).*/
+		if( (!IS_NODE_MALLOCED(this->priv)) ||(!IS_NODELIST_EQUAL(this->priv))) {
+
+			if( IS_NODE_MALLOCED(this->priv) &&(!IS_NODELIST_EQUAL(this->priv)))
+				stb710x_list_mem_free(this);
+
+			if (alloc_nodelist_mem(this,this->priv.sublist_nents) != 0){
+				fdma_log("%s Cant allocate memory for xfer\n",__FUNCTION__);
+				return -ENOMEM;
+			}
+			if(IS_TRANSFER_SG(this)){
+
+				if(this->srcsg)
+					this->priv.extrapolate_fn = extrapolate_sg_src;
+				else if(this->dstsg)
+					this->priv.extrapolate_fn = extrapolate_sg_dst;
+				else return -EINVAL;
+			}
+			else this->priv.extrapolate_fn = extrapolate_simple;
+
+			this->priv.nodelist_setup =(this->mode == MODE_PACED) ?
+					setup_paced_node:
+					setup_freerunning_node;
+		}
+		if (this->priv.nodelist_setup(this) < 0)
+			return -EINVAL;
+
+		this->priv.extrapolate_fn(this);
+		this = this->next;
+	}while(this);
+
+	create_llu_list(params);
+	return 0;
+}
+
+static void stb710x_fdma_free(struct dma_channel *channel)
+{
+	struct channel_status *this_ch = &chip.channel[channel->chan];
+	if(CHAN_OTB(channel->chan)!=0)
+		return;
+
+	if(!IS_CHANNEL_RESERVED(channel->chan))
+		return;
+	else this_ch->reserved=0;
+
+	if(!(IS_CHANNEL_IDLE(channel->chan))){
+		stb710x_fdma_stop(channel);
+		if(handle_ch_busy(channel->chan)==-EBUSY){
+			fdma_log("%s Cant free memory on active channel %d sts %d\n",
+				__FUNCTION__,channel->chan,stb710x_get_engine_status(channel->chan));
+			return;
+		}
+	}
+        if(IS_NODE_MALLOCED(this_ch->params.priv))
+	       stb710x_list_mem_free(&this_ch->params);
+
+        memset(this_ch,0,sizeof(struct channel_status));
+}
+
+static int stb710x_fdma_configure(struct dma_channel *channel,
+				  unsigned long flags)
+{
+	struct channel_status *chan;
+	struct stm_dma_params * params;
+	unsigned long irq_flags=0;
+	BUG_ON( CHAN_OTB(channel->chan)==0);
+
+	if(handle_ch_busy(channel->chan)==-EBUSY)
+		return -EBUSY;
+
+	if(unlikely(flags & MODE_SH_COMPATIBILITY)){
+	/*nothing to do here - we setup our llu when we
+	 * have the data on the call to xfer*/
+		channel->flags = flags;
+		return 0;
+	}
+	spin_lock_irqsave(&chip.channel_lock,irq_flags);
+	chan = &chip.channel[channel->chan];
+
+	if(channel->priv_data != NULL)
+		params  = (stm_dma_params *) channel->priv_data;
+	else{
+		 fdma_log("%s Channel %d not compiled - xfer abort ! \n",
+			  __FUNCTION__,channel->chan);
+		 spin_unlock_irqrestore(&chip.channel_lock,irq_flags);
+		 return -EINVAL;
+	}
+	if(!params->priv.node->dma_addr){
+		fdma_log("%s no nodelist allocation !\n",__FUNCTION__);
+		spin_unlock_irqrestore(&chip.channel_lock,irq_flags);
+		return -ENOMEM;
+	}
+	/*Nodelist Not Configured to channel or memory badness*/
+	/*now we are associating the compiled transfer llu & parms to the channel*/
+	memcpy(&chan->params,params,sizeof(struct stm_dma_params));
+	chan->is_xferring=1;
+	spin_unlock_irqrestore(&chip.channel_lock,irq_flags);
+	return 0;
+}
+
+
+static int stb710x_fdma_xfer(struct dma_channel *channel, unsigned long sar,
+			     unsigned long dar, size_t count, unsigned int mode)
+{
+	struct channel_status *chan = &chip.channel[channel->chan];
+	unsigned long irqflags=0;
+
+	BUG_ON(CHAN_OTB(channel->chan)==0);
+	if(unlikely(MODE_SH_COMPATIBILITY == mode)){
+		if(fdma_sh_compatibility_setup(channel,chan,sar,dar,count,mode)!=0)
+			return -ENOMEM;
+	}
+	/*we need to check that the compile has been completed*/
+	spin_lock_irqsave(&chip.channel_lock, irqflags);
+
+	if(!IS_NODE_MALLOCED(chan->params.priv)){
+		spin_unlock_irqrestore(&chip.channel_lock, irqflags);
+		fdma_log("%s CH_%d invalid descriptor\n",__FUNCTION__,channel->chan);
+		return -EINVAL;
+	}
+	if(!(IS_CHANNEL_IDLE(channel->chan))){
+		spin_unlock_irqrestore(&chip.channel_lock, irqflags);
+		fdma_log("%s FDMA engine not ready - status %d\n",
+			__FUNCTION__,
+			stb710x_get_engine_status(channel->chan));
+		return -ENODEV;
+	}
+	fdma_check_xfer_params(&chan->params);
+
+	spin_unlock_irqrestore(&chip.channel_lock, irqflags);
+	return fdma_start_channel(channel->chan, chan->params.priv.node->dma_addr);
+}
+
+static int stb710x_fdma_extended_op(struct dma_channel *  ch,
+				    unsigned long opcode,
+				    void * parm)
+{
+	switch(opcode){
+		case STM_DMA_OP_PAUSE:
+			return stb710x_fdma_pause(ch,(int) parm);
+		case STM_DMA_OP_UNPAUSE:
+			return  stb710x_fdma_unpause(ch);
+		case STM_DMA_OP_STOP:
+			return stb710x_fdma_stop(ch);
+		case STM_DMA_OP_COMPILE:
+			return stb710x_fdma_compile_params((struct stm_dma_params *)parm);
+		case STM_DMA_OP_STATUS:
+			return stb710x_get_engine_status(ch->chan);
+		case STM_DMA_OP_MEM_FREE:
+			return stb710x_list_mem_free((struct stm_dma_params *)parm);
+		default:
+			return -ENOSYS;
+	}
+}
+
+/*---------------------------------------------------------------------*
+ *---------------------------------------------------------------------*
+ * MODULE INIT & REGISTRATION
+ *---------------------------------------------------------------------*
+ *---------------------------------------------------------------------*/
+
+static struct dma_ops stb710x_fdma_ops = {
+	.request		= stb710x_fdma_request,
+	.free			= stb710x_fdma_free,
+	.get_residue		= stb710x_fdma_get_residue,
+	.xfer			= stb710x_fdma_xfer,
+	.configure		= stb710x_fdma_configure,
+	.extend			= stb710x_fdma_extended_op,
+};
+
+static struct dma_info stb710x_fdma_info = {
+	.name			= (char*)STM_DMAC_ID,
+/*	.nr_channels		= defined at probe time*/
+	.ops			= &stb710x_fdma_ops,
+	.flags			= DMAC_CHANNELS_TEI_CAPABLE,
+};
+
+static int __init stb710x_platform_fdma_probe(struct device *dev)
+{
+	fdma_platform_device_data * plat_data;
+	chip.platform_dev = to_platform_device(dev);
+
+	if (!chip.platform_dev->name){
+		fdma_log("FDMA probe failed. Check your kernel SoC config\n");
+		return -EINVAL;
+	}
+	plat_data = chip.platform_dev->dev.platform_data;
+	if((plat_data->cpu_subtype ==7109)&& (plat_data->cpu_rev==1)){
+		panic("%s Unsupportable CPU revision STB_%d C%d. "
+		      "Try Disabling CONFIG_STM_DMA.",
+		      __FUNCTION__, plat_data->cpu_subtype, plat_data->cpu_rev);
+		return -EINVAL;
+	}
+	else return 0;
+}
+
+static struct device_driver fdma_driver = {
+	.name  = "710x_FDMA",
+	.owner = THIS_MODULE,
+	.bus   = &platform_bus_type,
+	.probe = stb710x_platform_fdma_probe,
+};
+
+static int fdma_do_platform_device_setup(void)
+{
+	fdma_platform_device_data * plat_data={0};
+	unsigned long req_tbl_sz=0;
+
+	sprintf(chip.dev.bus_id,"fdma_710x");
+	chip.dev.parent   = &platform_bus ;
+	chip.dev.bus      = &platform_bus_type;
+	chip.dev.driver   = &fdma_driver;
+
+	if(device_register(&chip.dev)){
+		fdma_log("%s Error on FDMA device registration\n",__FUNCTION__);
+		return -EINVAL;
+	}
+	if(!chip.platform_dev) {
+		fdma_log("%s No FDMA device available\n",__FUNCTION__);
+		return -ENODEV;
+	}
+
+	plat_data  = chip.platform_dev->dev.platform_data;
+	chip.io_base = (u32)ioremap_nocache(plat_data->fdma_base,
+					    plat_data->fdma_base +0x100);
+	chip.irq_val = plat_data->irq_vect;
+	chip.num_req_lines = plat_data->nr_reqlines;
+	chip.ch_min = plat_data->min_ch_num;
+	chip.ch_max = plat_data->max_ch_num;
+
+	req_tbl_sz = sizeof( fdmareq_RequestConfig_t)* chip.num_req_lines;
+	chip.req_tbl =(fdmareq_RequestConfig_t*)kmalloc(req_tbl_sz,GFP_KERNEL);
+	memcpy(chip.req_tbl,(u32*)plat_data->req_line_tbl_adr,req_tbl_sz);
+
+	memcpy(&chip.regs,(u32*)plat_data->registers_ptr,sizeof(fdma_regs_t));
+	chip.cpu_subtype = plat_data->cpu_subtype;
+	chip.cpu_rev= plat_data->cpu_rev;
+	chip.fw_name = plat_data->fw_device_name;
+	chip.fw = plat_data->fw;
+	return 0;
+}
+
+static void __exit deinitialise_710x_fdma2(void)
+{
+	writel(0,chip.io_base + chip.regs.fdma_en);
+	kfree(chip.req_tbl);
+	iounmap((u32*)chip.io_base);
+	device_unregister(&chip.dev);
+	unregister_dmac(chip.info);
+	dma_pool_destroy(chip.llu_pool);
+	free_irq(chip.irq_val,(void *)NULL);
+}
+
+static int __init initialise_710x_fdma2(void)
+{
+	int err=0;
+
+	memset(&chip,0,sizeof(struct fdma_chip));
+	chip.info = &stb710x_fdma_info;
+	driver_register(&fdma_driver);
+	spin_lock_init(&chip.channel_lock);
+	spin_lock_init(&chip.fdma_lock);
+	init_waitqueue_head(&chip.fw_load_q);
+
+	if(fdma_do_platform_device_setup()!=0)
+		return -ENOSYS;
+
+	/*must take accoutn of CH 0*/
+	chip.info->nr_channels = (chip.ch_max+1) -chip.ch_min;
+
+	err =request_irq(chip.irq_val,fdma_irq,
+			SA_INTERRUPT,
+			"STB710x FDMA",
+			(void*)NULL );
+	if(err <0)
+		panic(" Cant Register irq %d for FDMA engine err %d\n",
+					chip.irq_val,err);
+
+	register_dmac(chip.info,chip.ch_min);
+	fdma_register_caps();
+	return 0;
+}
+module_init(initialise_710x_fdma2)
+module_exit(deinitialise_710x_fdma2)
Index: linux/drivers/stm/Kconfig
===================================================================
--- linux.orig/drivers/stm/Kconfig
+++ linux/drivers/stm/Kconfig
@@ -27,6 +27,27 @@ config STM_DMA
 	  If you have a device from STMicroelectronics, then say Y here.
 	  Otherwise say N.
 
+config MIN_STM_DMA_CHANNEL_NR
+	depends on STM_DMA
+	int "Lowest STM-FDMAC channel"
+	default "0"
+	help
+	  This allows you to specify the low boundary FDMA channel number to
+	  use with STM-DMA
+
+config MAX_STM_DMA_CHANNEL_NR
+	depends on STM_DMA
+	int "Highest STM-FDMAC channel"
+	default "15"
+	help
+	  This allows you to specify the high boundary FDMA channel number to
+	  use with STM-DMA
+
+config STM_DMA_DEBUG
+	bool "STMicroelectronics DMA Debug"
+	depends on STM_DMA
+	default n
+
 config STB7100_FDMA
 	def_bool STM_DMA && CPU_SUBTYPE_STB7100
 
Index: linux/drivers/stm/Makefile
===================================================================
--- linux.orig/drivers/stm/Makefile
+++ linux/drivers/stm/Makefile
@@ -2,7 +2,7 @@
 # Makefile for the STMicroelectronics device drivers.
 #
 
-obj-$(CONFIG_STB7100_FDMA)	+= 7100_fdma2.o
+obj-$(CONFIG_STB7100_FDMA)	+= 710x_fdma2.o
 obj-$(CONFIG_STM_GPDMA)		+= gpdma.o
 obj-$(CONFIG_STM_SSC)           += stm_ssc.o
 obj-$(CONFIG_STM_SPI)           += stm_spi.o
Index: linux/include/linux/stm/7100_fdma2.h
===================================================================
--- linux.orig/include/linux/stm/7100_fdma2.h
+++ /dev/null
@@ -1,225 +0,0 @@
-/*
- *  STb7100 FDMA Driver
- *  Copyright (c) 2005 STMicroelectronics Limited.
- *  Author: Mark Glaisher <Mark.Glaisher@st.com>
- *
- *   This program is free software; you can redistribute it and/or modify
- *   it under the terms of the GNU General Public License as published by
- *   the Free Software Foundation; either version 2 of the License, or
- *   (at your option) any later version.
- *
- *   This program is distributed in the hope that it will be useful,
- *   but WITHOUT ANY WARRANTY; without even the implied warranty of
- *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- *   GNU General Public License for more details.
- *
- *   You should have received a copy of the GNU General Public License
- *   along with this program; if not, write to the Free Software
- *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
- *
- */
-
-#ifndef STB7100_FDMA_H
-#define STB7100_FDMA_H
-
-/* Memory section offsets from FDMA base address */
-#define FDMA_BASE 0x19220000
-#define DMEM_OFFSET             		0x8000     /* Contains the control word interface */
-#define IMEM_OFFSET             		0xC000     /* Contains config data */
-
-#define FDMA2_ID						0x0000   /* Block Id */
-#define FDAM2_VER						0x0004
-#define FDMA2_ENABLE_REG				0x0008
-#define FDMA2_CLOCKGATE					0x000C       /* Clock enable control */
-
-#define FDMA2_REV_ID					0x8000
-#define FDMA2_CMD_STATn 				0x8040 //( +n * 4)
-
-#define NODE_DATA_OFFSET				0x40
-/*here our our current node params region */
-#define FDMA2_PTR_REG 					0x9180  /* ( + n * 0x40*/
-#define FDMA2_COUNT_REG					0x9188
-#define FDMA2_SADDR_REG					0x918c
-#define FDMA2_DADDR_REG					0x9190
-#define FDMA2_REQ_CTL_REG				0x9780 /* (+ n *0x04) */
-
-#define FDMA2_SYNCREG                 			0xBF88
-#define FDMA2_CMD_MBOX_STAT_REG				0xBFC0
-#define FDMA2_CMD_MBOX_SET_REG				0xBFC4
-#define FDMA2_CMD_MBOX_CLR_REG				0xBFC8
-#define FDMA2_CMD_MBOX_MASK_REG 			0xBFCC
-
-#define FDMA2_INT_STAT_REG				0xBFD0
-#define FDMA2_INT_SET_REG				0xBFD4
-#define FDMA2_INT_CLR_REG				0xBFD8
-#define FDMA2_INT_MASK_REG				0xBFDC
-
-/*our reg values*/
-#define CMD_STAT_OFFSET       			0x04
-
-#define CHANNEL_NOFLUSH 				0
-#define CHANNEL_FLUSH   				1
-#define CHAN_ALL_ENABLE 				3
-
-/**cmd stat vals*/
-#define SET_NODE_COMP_PAUSE		    		1 <<30
-#define SET_NODE_COMP_IRQ				1 <<31
-#define NODE_ADDR_STATIC 				0x01
-#define NODE_ADDR_INCR	 				0x02
-
-#define SOURCE_ADDR 	0x05
-#define DEST_ADDR   	0x07
-
-#define NODE_TYPE_SPDIF  		1 << 5
-#define SPDIF_NODE_VALID 		1 << 29
-#define SPDIF_BURST_END  		1 << 28
-#define EXTENDED_NODE_TYPE 		0x1f
-#define CHHI_STA_ZERO_PAD_MASK 		0x3f
-#define ZERO_PAD_MASK 			0xF0001FFF
-
-#define CMDSTAT_FDMA_START_CHANNEL  1
-#define CMDSTAT_FDMA_PAUSE_CHANNEL  3
-
-
-#define LINUX_FDMA_MESSAGE_PEND		140
-
-/*******************************/
-/*MBOX SETUP VALUES*/
-
-#define MBOX_CMD_PAUSE_FLUSH_CHANNEL 		3
-#define MBOX_CMD_PAUSE_CHANNEL		 	2
-#define MBOX_CMD_START_CHANNEL       		1
-#define CLEAR_WORD				0XFFFFFFFF
-
-
-typedef struct _fdma_llu_entry {
-	u32 next_item;
-	u32 control;
-	u32 size_bytes;
-	u32 saddr;
-	u32 daddr;
-	u32 length;
-	u32 node_sstride;
-	u32 node_dstride;
-}fdma_llu_entry;
-
-typedef struct _fdma_spdif_entry {
-	u32 next_item;
-	u32 control;
-	u32 size_bytes;
-	u32 saddr;
-	u32 daddr;
-	u32 node_pa_pb;
-	u32 node_pc_pd;
-	u32 node_bst_prd;
-	u32 node_chn0_sta_low;
-	u32 node_chn0_sta_high;
-	u32 node_chn1_sta_low;
-	u32 node_chn1_sta_high;
-	u32 align_pad0;
-	u32 align_pad1;
-	u32 align_pad2;
-	u32 align_pad3;
-}fdma_spdif_entry;
-
-
-typedef struct _fdma_pes_scdc_entry{
-	u32 next_item;
-	u32 control;
-	u32 node_nbytes;
-	u32 pes_buff;
-	u32 sc_write_n;
-	u32 sc_size_n;
-	u32 esbuf_top_n;
-	u32 esbuf_read_n;
-	u32 esbuf_write_n;
-	u32 esbuf_bot_n;
-	u32 pes_ctl_n;
-	u32 sc1_ctl_n;
-	u32 sc2_ctl_n;
-	u32 scd_sta_n;
-	u32 sc_type;
-	u32 sc_addr;
-	u32 sc_val;
-	u32 pts_type;
-	u32 pts_addr;
-	u32 pts_hi;
-	u32 pts_lo;
-}fdma_pes_scdc_entry;
-
-
-typedef void (*pf)(void * data);
-
-#define CHANNEL_ERR_IRQ 		3
-#define CHANNEL_IRQ     		1
-
-#define FDMA_CHANNEL_IDLE 		0
-#define FDMA_CHANNEL_RUNNING 		2
-#define FDMA_CHANNEL_PAUSED 		3
-
-
-
-/*FDMA Channel FLAGS*/
-/*values below D28 are reserved for REQ_LINE parameter*/
-#define REQ_LINE_MASK 	0x1f
-
-
-typedef struct _spdif_data
-{
-	u32 valid;
-	u32 burst_end;
-	u32 pa_pb;
-	u32 pc_pd;
-	u32 bst_prd;
-	u32 chn0_sta_low;
-	u32 chn0_sta_high;
-	u32 chn1_sta_low;
-	u32 chn1_sta_high;
-}spdif_data;
-
-
-typedef struct fmdareq_RequestConfig_s
-{
-    char Index;         /* Request line index number */
-    char Access;        /* Access type: Read or Write */
-    char OpCode;        /* Size of word access */
-    char Count;         /* Number of transfers per request */
-    char Increment;     /* Whether to increment. On 5517, number of bytes to increment per request */
-    char HoldOff;       /* Holdoff value between req signal samples (clock cycles)*/
-    char Initiator;     /* Use the default value */
-}fdmareq_RequestConfig_t;
-/*---- Constants for use in defining the request signals -----*/
-
-/* Access */
-#define ENABLE_FLG      1
-#define DISABLE_FLG     0
-
-/* Access */
-#define READ            0
-#define WRITE           1
-
-/* Opcodes */
-#define OPCODE_1        0x00
-#define OPCODE_2        0x01
-#define OPCODE_4        0x02
-#define OPCODE_8        0x03
-#define OPCODE_16       0x04
-#define OPCODE_32       0x05
-/* Increment Size */
-#define INCSIZE_0       0
-#define INCSIZE_4       4
-#define INCSIZE_8       8
-#define INCSIZE_16      16
-#define INCSIZE_32      32
-/* Utility values */
-#define UNUSED       0xff
-#define EOT          	0xfe
-
-/* Indicator for end of request signal table */
-#define REQUEST_SIGNAL_TABLE_END   EOT
-
-/* Indicator for unused request signal */
-#define REQUEST_SIGNAL_UNUSED      UNUSED
-
-
-#endif
Index: linux/include/linux/stm/7100_fdma2_firmware.h
===================================================================
--- /dev/null
+++ linux/include/linux/stm/7100_fdma2_firmware.h
@@ -0,0 +1,733 @@
+/*
+ *  STb710x FDMA Driver
+ *  Copyright (c) 2006 STMicroelectronics Limited.
+ *  Author: Mark Glaisher <Mark.Glaisher@st.com>
+ *
+ *   This program is free software; you can redistribute it and/or modify
+ *   it under the terms of the GNU General Public License as published by
+ *   the Free Software Foundation; either version 2 of the License, or
+ *   (at your option) any later version.
+ *
+ *   This program is distributed in the hope that it will be useful,
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *   GNU General Public License for more details.
+ *
+ *   You should have received a copy of the GNU General Public License
+ *   along with this program; if not, write to the Free Software
+ *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
+ *
+ */
+
+
+
+#ifndef FDMA_7100_FIRMWARE
+#define FDMA_7100_FIRMWARE
+/*This firmware version 2.2*/
+
+static unsigned long STB7100_DMEM_REGION[]=
+{
+  0x00030205, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x23104052, 0x00000000, 0x00000000, 0x21100051, 0x00000000,
+  0x01fe01ae, 0x020101b1, 0x020401b4, 0x020701b7, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x0000031e, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x0000007e, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x000000fe, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00002438, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00001441,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00001446, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x0000144b, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00001450,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00001455, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x0000145a, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0000145f,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00001464, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00001469, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0000146e,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00002473, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x0000107c, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00001080,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00001084, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00001088, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0000222e, 0x05800580,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x0000222e, 0x05a005a0, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x0000222e, 0x05c005c0, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000
+};
+
+
+
+
+static unsigned long STB7100_IMEM_REGION[]=
+{
+  0x00f51000, 0x00ef0013, 0x00e10001, 0x00ee0170, 0x00b010ea, 0x00f01000,
+  0x00ef0013, 0x00a300e0, 0x00aa000b, 0x00433a00, 0x009c151e, 0x009b3321,
+  0x009a2247, 0x00d00090, 0x00a70005, 0x00177030, 0x009c1226, 0x00d00090,
+  0x00a00006, 0x009c148f, 0x00d00090, 0x00a70002, 0x009c15fb, 0x00d00090,
+  0x00a70004, 0x009c1799, 0x00d00090, 0x00a70021, 0x009c1859, 0x00d00090,
+  0x00a90003, 0x009c1036, 0x00d00090, 0x00a20001, 0x009c1477, 0x00d00090,
+  0x00f00000, 0x00d00017, 0x00452003, 0x00461003, 0x00355600, 0x00755461,
+  0x00a6040e, 0x00555001, 0x00765080, 0x00d00090, 0x00b0640e, 0x00755c23,
+  0x00761c62, 0x00266500, 0x007564ca, 0x00d00090, 0x00b0540b, 0x00840d00,
+  0x00b0deff, 0x003ee001, 0x00799e00, 0x00d19040, 0x00ea0460, 0x00721484,
+  0x00222a00, 0x00f00000, 0x00aa020e, 0x00ac020f, 0x00a50a0c, 0x00ab0a0e,
+  0x00b050e9, 0x00d0b070, 0x009c106c, 0x00d00090, 0x00a70a0d, 0x00a40003,
+  0x0074003f, 0x00840700, 0x00a50a04, 0x00b04003, 0x00d7c070, 0x0098106c,
+  0x0044507f, 0x009c10a9, 0x00d7c070, 0x00177002, 0x0098106c, 0x00407080,
+  0x00981125, 0x00ed0060, 0x008c812b, 0x009c812b, 0x00e70020, 0x00af0007,
+  0x005f0500, 0x00a82c00, 0x005f0800, 0x00b080eb, 0x00255004, 0x009a80e4,
+  0x00377001, 0x008c305b, 0x00a600e9, 0x00b0c20f, 0x00a80a02, 0x00a70a05,
+  0x00605800, 0x009c1069, 0x0005073c, 0x00b06a0c, 0x00b05a04, 0x00b0ba0e,
+  0x00a70a01, 0x0098111f, 0x00d00090, 0x00a50a00, 0x00d6b070, 0x0088108f,
+  0x0099109d, 0x00d00090, 0x00a40201, 0x00ef4042, 0x00744d10, 0x00144008,
+  0x004f50f0, 0x00a32b00, 0x009c2082, 0x00d00090, 0x005f4001, 0x00a72b00,
+  0x00af2b00, 0x004f3001, 0x000f073c, 0x00d00816, 0x005f0400, 0x00af2b00,
+  0x000f033c, 0x005f0000, 0x00a70a01, 0x00255010, 0x00377010, 0x00b05a00,
+  0x00b07a01, 0x0098311f, 0x00d0b070, 0x009c1072, 0x00d00090, 0x00a00003,
+  0x00b0ba0e, 0x00982046, 0x00d00090, 0x00a00202, 0x0098109d, 0x00d00090,
+  0x00e30027, 0x00d0c370, 0x009c212b, 0x00d00090, 0x00a60003, 0x00b00003,
+  0x00b06002, 0x00b0ba0e, 0x00d4b070, 0x00d7c070, 0x00544700, 0x008c112b,
+  0x00d00090, 0x00a70202, 0x009c112b, 0x00ed00a7, 0x008c04d0, 0x00b00003,
+  0x00d0121b, 0x0099112b, 0x00ed00ca, 0x00d7c070, 0x00177002, 0x0098106c,
+  0x00d00090, 0x00a00202, 0x009810b3, 0x00307020, 0x0098208f, 0x0044501f,
+  0x00234700, 0x004030e0, 0x009810b8, 0x00e30020, 0x00333001, 0x003734ff,
+  0x007430a8, 0x00ef4252, 0x005f0400, 0x004f50e0, 0x00764c62, 0x009810c5,
+  0x005f0000, 0x00366001, 0x009c30c0, 0x00d00090, 0x00d00090, 0x00a82c00,
+  0x005f0800, 0x00b080eb, 0x00255004, 0x009a80e4, 0x00377004, 0x009c30c5,
+  0x00764ca8, 0x00d00090, 0x003606e1, 0x0016603e, 0x009810d5, 0x005f0000,
+  0x00366001, 0x009c30d1, 0x00d00090, 0x00b0c20f, 0x00a600e9, 0x00a80a02,
+  0x00a70a05, 0x00605800, 0x009c10dc, 0x0005073c, 0x00b06a0c, 0x00b05a04,
+  0x00b0ba0e, 0x00d4c070, 0x0098106c, 0x0044507f, 0x009c10a9, 0x00d0061c,
+  0x00a30a00, 0x00433001, 0x00941d00, 0x00d00090, 0x00b06eff, 0x00b07efe,
+  0x00b08efd, 0x00b09efc, 0x00b0cefb, 0x003ee005, 0x00a60a07, 0x00a70a08,
+  0x00a800e9, 0x00ec0000, 0x00788d00, 0x00106001, 0x009c2103, 0x00796d08,
+  0x003c9800, 0x00796d00, 0x00398900, 0x005cc900, 0x006cc600, 0x009c2103,
+  0x007c6c3d, 0x007cc43e, 0x00666c00, 0x007c7c3d, 0x007cc43e, 0x00577c00,
+  0x00d01112, 0x00107001, 0x009c2119, 0x00797d08, 0x003c9800, 0x00797d00,
+  0x00398900, 0x005cc900, 0x006cc700, 0x009c2119, 0x007c7c3d, 0x007cc43e,
+  0x00677c00, 0x007c6c3d, 0x007cc43e, 0x00566c00, 0x00a900e9, 0x00b06a07,
+  0x00b07a08, 0x00799c48, 0x002995fc, 0x00b28b00, 0x00b29b00, 0x00ac1e01,
+  0x00a91e01, 0x00a81e01, 0x00a71e01, 0x00a61e01, 0x00840d00, 0x00a40a00,
+  0x007b0210, 0x00544001, 0x00d00090, 0x00b04a00, 0x00d0081f, 0x00a30202,
+  0x009810a9, 0x00d00090, 0x00a60003, 0x00b00003, 0x00b06002, 0x00ad1e01,
+  0x00d00211, 0x00a50a04, 0x00b04003, 0x00d7c070, 0x0098106c, 0x0044507f,
+  0x009c1151, 0x00d7c070, 0x00177002, 0x0098106c, 0x00407080, 0x009811e4,
+  0x00ed0143, 0x008c81ea, 0x009c81ea, 0x00e70020, 0x00af0007, 0x005f0500,
+  0x00a82c00, 0x005f0800, 0x00b080eb, 0x00255004, 0x009a818b, 0x00377001,
+  0x008c313e, 0x00a600e9, 0x00b0c20f, 0x00a80a02, 0x00a70a05, 0x00605800,
+  0x009c114c, 0x0005073c, 0x00b06a0c, 0x00b05a04, 0x00b0ba0e, 0x008c006c,
+  0x008c008f, 0x009911ea, 0x00ed0172, 0x00d7c070, 0x00177002, 0x0098106c,
+  0x00d00090, 0x00a00202, 0x0098115b, 0x00307020, 0x0098208f, 0x0044501f,
+  0x00234700, 0x004030e0, 0x00981160, 0x00e30020, 0x00333001, 0x003734ff,
+  0x007430a8, 0x00ef4252, 0x005f0400, 0x004f50e0, 0x00764c62, 0x0098116d,
+  0x005f0000, 0x00366001, 0x009c3168, 0x00d00090, 0x00d00090, 0x00a82c00,
+  0x005f0800, 0x00b080eb, 0x00255004, 0x009a818b, 0x00377004, 0x009c316d,
+  0x00764ca8, 0x00d00090, 0x003606e1, 0x0016603e, 0x0098117d, 0x005f0000,
+  0x00366001, 0x009c3179, 0x00d00090, 0x00b0c20f, 0x00a600e9, 0x00a80a02,
+  0x00a70a05, 0x00605800, 0x009c1184, 0x0005073c, 0x00b06a0c, 0x00b05a04,
+  0x00d4c070, 0x0098106c, 0x0044507f, 0x009c1151, 0x00d0061c, 0x00a30a00,
+  0x00433001, 0x00941d00, 0x00d00090, 0x00b08a10, 0x00b01eff, 0x00b04efe,
+  0x00b07efd, 0x00b08efc, 0x00b09efb, 0x00b0cefa, 0x003ee006, 0x00a900e9,
+  0x00789d00, 0x00ac0e00, 0x00778ca0, 0x00799c48, 0x0003093c, 0x002995fc,
+  0x00e44400, 0x00144710, 0x009c21c9, 0x00d00090, 0x00d0c070, 0x009c11a9,
+  0x00d00090, 0x00e401ec, 0x00b09a11, 0x00b04a0d, 0x00d01d18, 0x00a7030c,
+  0x00777e00, 0x00a42c00, 0x00a10a10, 0x00840700, 0x00714100, 0x00011001,
+  0x00d01b18, 0x00714200, 0x00011002, 0x00d01b18, 0x00714300, 0x00011003,
+  0x00d01b18, 0x0001043c, 0x00011040, 0x00d41040, 0x00ac0a12, 0x003404e1,
+  0x00111400, 0x002404e1, 0x00111400, 0x00311001, 0x00301c00, 0x00b01a12,
+  0x009831d1, 0x00d00090, 0x00a10a08, 0x00211001, 0x00d00090, 0x00b01a08,
+  0x00d01d18, 0x00e40270, 0x00144710, 0x009821d1, 0x00780327, 0x00d00090,
+  0x00b28b00, 0x00b29b00, 0x00d01d18, 0x00ac0a08, 0x002cc001, 0x0078c308,
+  0x00780027, 0x00b00a08, 0x00b28b00, 0x00b29b00, 0x00ac1e01, 0x00a91e01,
+  0x00a81e01, 0x00a71e01, 0x00a41e01, 0x00a11e01, 0x00840d00, 0x00a40a00,
+  0x00544001, 0x007b0210, 0x00b04a00, 0x00d0081f, 0x00a30202, 0x00981151,
+  0x00d00090, 0x00a60003, 0x00b00003, 0x00b06002, 0x00ad1e01, 0x00d00211,
+  0x00b01eff, 0x00b02efe, 0x00b03efd, 0x00b04efc, 0x00b0befb, 0x00b0cefa,
+  0x003ee006, 0x00e2012d, 0x00a32c00, 0x00b02a0d, 0x00a20a0c, 0x00742c48,
+  0x00d00090, 0x00a4040c, 0x00744e10, 0x00a10a10, 0x00d00090, 0x00840400,
+  0x00713100, 0x00011001, 0x00d02018, 0x00713200, 0x00011002, 0x00d02018,
+  0x00713300, 0x00011003, 0x00d02018, 0x0001033c, 0x00011040, 0x00d41040,
+  0x00a30a12, 0x003404e1, 0x00111400, 0x002404e1, 0x00111400, 0x00311001,
+  0x00a40a08, 0x00b01a12, 0x00244001, 0x00301300, 0x00983218, 0x00d00090,
+  0x00b04a08, 0x00d0211f, 0x00a10a0c, 0x00b00a08, 0x00714308, 0x00710027,
+  0x00a30a11, 0x00b21b00, 0x00b23b00, 0x00ac1e01, 0x00a01e01, 0x00a41e01,
+  0x00a31e01, 0x00a21e01, 0x00a11e01, 0x00d0121d, 0x00f00000, 0x00d87040,
+  0x00982241, 0x00e10460, 0x00198004, 0x00299100, 0x00e10000, 0x00aa0900,
+  0x00ed0230, 0x008c04b7, 0x00981241, 0x00e40333, 0x007445f0, 0x00544850,
+  0x00a1000a, 0x00b04300, 0x005f1200, 0x004fa0e0, 0x00ea0001, 0x00ab090f,
+  0x001aa800, 0x007b01f0, 0x00677a00, 0x00e10040, 0x00b0b90f, 0x00b0190b,
+  0x00d02217, 0x00aa0005, 0x00d00090, 0x007a7210, 0x00d00090, 0x00b0a005,
+  0x00d00112, 0x00ac00f0, 0x00a80005, 0x00d1c040, 0x0098231f, 0x0011103f,
+  0x001a1001, 0x00320a00, 0x0013c200, 0x00193a00, 0x00e20257, 0x00222300,
+  0x006cc900, 0x00eb0460, 0x0005013c, 0x00155004, 0x00255b00, 0x00840200,
+  0x00d02c15, 0x00d02816, 0x00a40501, 0x00724ca0, 0x00981286, 0x00e405e0,
+  0x00244200, 0x00c0201f, 0x00981286, 0x00eb0001, 0x00a20400, 0x00702c2e,
+  0x009c1286, 0x001bb100, 0x00588b00, 0x00a2050f, 0x00aa050c, 0x00ab050b,
+  0x007bbd00, 0x009c1249, 0x00d22070, 0x0098128f, 0x00f00000, 0x00991249,
+  0x00122002, 0x00b0050c, 0x00ab050d, 0x00b0250d, 0x003bb200, 0x00b0deff,
+  0x00b01efe, 0x00b05efd, 0x003ee003, 0x00ed027b, 0x008c08f2, 0x00a51e01,
+  0x00a11e01, 0x00ad1e01, 0x00a2050d, 0x00b0a50c, 0x00981285, 0x002bb200,
+  0x00d00090, 0x00b0b50d, 0x00d02419, 0x00b0b50d, 0x00a2050b, 0x00722d00,
+  0x009c1249, 0x00e20001, 0x00122100, 0x00ab0022, 0x004bb200, 0x009c1249,
+  0x00588200, 0x00a40501, 0x00eb0001, 0x007a4ca0, 0x001bba00, 0x004bb0fe,
+  0x009812a1, 0x009c229c, 0x007a4d00, 0x00c0a03f, 0x009c12a1, 0x007a4ca8,
+  0x00eb0001, 0x001bba00, 0x00a3000b, 0x006bb0ff, 0x00433b00, 0x00d00090,
+  0x00b0300b, 0x00ab050b, 0x007bbd00, 0x009c1249, 0x00722210, 0x006220ff,
+  0x00ab0001, 0x00a40002, 0x004bb200, 0x00444200, 0x00b0b001, 0x00ab0006,
+  0x00b04002, 0x00a40004, 0x004bb200, 0x00444200, 0x00488200, 0x00b0b006,
+  0x00b04004, 0x00a40021, 0x00444200, 0x00eb0003, 0x00b04021, 0x00a40110,
+  0x0074b0a0, 0x00a300f4, 0x001b1001, 0x00e20001, 0x00122b00, 0x00402300,
+  0x009812c1, 0x00122001, 0x00740062, 0x00b020f5, 0x00b04110, 0x00b090f2,
+  0x00d02419, 0x00e40001, 0x00144100, 0x006440ff, 0x00488400, 0x00a60110,
+  0x0042601f, 0x004660e0, 0x00566002, 0x00c02000, 0x00b06110, 0x009812d6,
+  0x00e20001, 0x00122110, 0x00588200, 0x00b06500, 0x00b090f2, 0x00d02419,
+  0x00a00502, 0x009c12e1, 0x0002053c, 0x00b0ceff, 0x00b08efe, 0x003ee002,
+  0x00ed02de, 0x008c04d0, 0x00a81e01, 0x00ac1e01, 0x00d02419, 0x00a40501,
+  0x00b06110, 0x0042401f, 0x009812ff, 0x0042403f, 0x00c0201f, 0x00981306,
+  0x00c0203f, 0x0098130d, 0x00e605e0, 0x0042401f, 0x00e40001, 0x00144200,
+  0x00a3000b, 0x00533400, 0x00266200, 0x00b0300b, 0x00a20600, 0x00721088,
+  0x00742c2e, 0x00b02600, 0x00144004, 0x00244100, 0x00e60001, 0x00166400,
+  0x00a20006, 0x00522600, 0x00b090f2, 0x00b02006, 0x00d02419, 0x00a20001,
+  0x00eb0001, 0x001bb100, 0x00522b00, 0x00b090f2, 0x00b02001, 0x00d02419,
+  0x00a20002, 0x00eb0001, 0x001bb100, 0x00522b00, 0x00b090f2, 0x00b02002,
+  0x00d02419, 0x00a20004, 0x00704c2d, 0x00981312, 0x00d00090, 0x00a20021,
+  0x00eb0001, 0x001bb100, 0x00522b00, 0x00b090f2, 0x00704c2d, 0x009c131a,
+  0x00d00090, 0x00b02004, 0x00704c2d, 0x0098131e, 0x00d00090, 0x00b02021,
+  0x00d02419, 0x00b08005, 0x00d0001e, 0x00d80050, 0x00788c4c, 0x0098100c,
+  0x00da8040, 0x00e60140, 0x0076a023, 0x00a70aec, 0x00767060, 0x00d00090,
+  0x00a10600, 0x00b06009, 0x00731c80, 0x00741df0, 0x00751c64, 0x00e20460,
+  0x00793484, 0x00299200, 0x00840400, 0x00f00000, 0x0007093c, 0x00d00090,
+  0x00d00008, 0x00b1f701, 0x00a00902, 0x0098146b, 0x00d00090, 0x00a70903,
+  0x00a20904, 0x00a60901, 0x0040601f, 0x00b06901, 0x00981347, 0x0047603f,
+  0x00c0701f, 0x00981361, 0x00c0703f, 0x00981383, 0x00d04515, 0x00e70001,
+  0x00d00008, 0x00400f00, 0x00a60001, 0x00177300, 0x00566700, 0x00d00090,
+  0x00b06001, 0x00a60905, 0x00a70902, 0x00307600, 0x008c2354, 0x0006073c,
+  0x00a10903, 0x00b0690c, 0x00b0690d, 0x00a20904, 0x00b01909, 0x00b0290a,
+  0x0004093c, 0x00b0deff, 0x003ee001, 0x00ed035f, 0x008c0026, 0x00ad1e01,
+  0x00d04711, 0x00d00008, 0x00400f00, 0x00a70002, 0x00e20001, 0x00122300,
+  0x00577200, 0x007a6c88, 0x001aa005, 0x00e20560, 0x002aa200, 0x00b07002,
+  0x00b0a90e, 0x00b0090b, 0x00a00a0d, 0x008c1471, 0x00a60a0e, 0x00760210,
+  0x00a20a0f, 0x00b06a0e, 0x00722a10, 0x00e60001, 0x00b02a0f, 0x00a2090f,
+  0x00e7004a, 0x00a60a07, 0x00706c3c, 0x0088137e, 0x00e7012d, 0x00b00a08,
+  0x00720210, 0x00b07a0d, 0x00b0290f, 0x00b00a13, 0x00d04711, 0x00706c2d,
+  0x009c1420, 0x00d00090, 0x00ac090f, 0x007c0210, 0x00eb05c0, 0x00b0c90f,
+  0x00a00b09, 0x009813a6, 0x00d00090, 0x00ad0903, 0x007ddc62, 0x00a2090e,
+  0x00522001, 0x00762c23, 0x002dd600, 0x00b0290e, 0x001dd00a, 0x00d00090,
+  0x00d00008, 0x00500f00, 0x00b0d90b, 0x00ad0902, 0x00a20901, 0x00702c3d,
+  0x009813a0, 0x00d00090, 0x00b0d90c, 0x00d03b1f, 0x00ed0001, 0x0072d03c,
+  0x00b0090c, 0x00b02901, 0x00ed0000, 0x00d03b1f, 0x00080b3c, 0x00a10903,
+  0x00d00004, 0x00b1f801, 0x00d00004, 0x00500f00, 0x00a20904, 0x0004093c,
+  0x00ed03b0, 0x008c0026, 0x00ad0902, 0x00a20901, 0x00b0d90c, 0x00702c3d,
+  0x009c13bf, 0x00d00090, 0x00ad0310, 0x004dd0e0, 0x0002093c, 0x00b0d310,
+  0x00b00900, 0x0001033c, 0x00ed03be, 0x008c04d0, 0x00d04711, 0x002dd003,
+  0x001dd03e, 0x001dd003, 0x00d00090, 0x00b0d90d, 0x00b0d902, 0x00a00b09,
+  0x009c1408, 0x00d00090, 0x00ad0907, 0x003dd002, 0x00a20b03, 0x00b0db09,
+  0x00782c44, 0x0042200f, 0x00188002, 0x00b02b03, 0x00b08909, 0x00a20b01,
+  0x00762c44, 0x0042200f, 0x00166002, 0x00b02b01, 0x00b06908, 0x00ad0b00,
+  0x00a20b02, 0x00b0db04, 0x00b02b06, 0x00ad0b01, 0x00a20b03, 0x00b0db05,
+  0x00ed00be, 0x00b02b07, 0x00b0db08, 0x00a50b00, 0x00a70905, 0x000d073c,
+  0x007d6200, 0x007d5021, 0x0015503f, 0x00b2dc00, 0x00a40b02, 0x001d7010,
+  0x007d8200, 0x007d4021, 0x0014403f, 0x00b2dc00, 0x00a70906, 0x000d073c,
+  0x007d6200, 0x007d5021, 0x0015503f, 0x00b2dc00, 0x001d7010, 0x007d8200,
+  0x007d4021, 0x0014403f, 0x00b2dc00, 0x00ad0b01, 0x0075d21e, 0x001dd03e,
+  0x00b05b00, 0x00b0db01, 0x00a20b03, 0x0074221e, 0x0012203e, 0x00ad090d,
+  0x002dd010, 0x00b04b02, 0x00b02b03, 0x00b0d90d, 0x00b0d902, 0x00b0c90f,
+  0x00ad0901, 0x0072dca8, 0x00e80001, 0x00a00900, 0x009c140e, 0x007d803c,
+  0x00168200, 0x00a5000b, 0x00555600, 0x00148300, 0x00b0500b, 0x00b0d901,
+  0x00b04004, 0x00ed05e0, 0x002dd200, 0x00a60310, 0x00ab0d00, 0x007b3088,
+  0x004660e0, 0x00566002, 0x00b0bd00, 0x00b06310, 0x00010a3c, 0x00d04711,
+  0x00ac090f, 0x007c0210, 0x00b0090b, 0x00eb05c0, 0x00080b3c, 0x00b0c90f,
+  0x00d00004, 0x00b1f801, 0x00d00004, 0x00500f00, 0x00a10902, 0x00a20b03,
+  0x00b0190c, 0x00b0190d, 0x00782c49, 0x00722d20, 0x00188002, 0x00b02b03,
+  0x00b02b07, 0x00b08909, 0x00a20b01, 0x00762c49, 0x00722d20, 0x00166002,
+  0x00b02b01, 0x00b02b05, 0x00b06908, 0x00a10b00, 0x00a20b02, 0x00b01b04,
+  0x00e100c0, 0x00b02b06, 0x00b01b08, 0x00a10901, 0x00721ca8, 0x00e80001,
+  0x00168200, 0x00a5000b, 0x00555600, 0x00148300, 0x00b0500b, 0x00b04021,
+  0x00e105e0, 0x00211200, 0x00a60310, 0x00ab0100, 0x007b3088, 0x004660e0,
+  0x00566002, 0x00b0b100, 0x00b06310, 0x00010a3c, 0x00d04711, 0x00d00008,
+  0x00400f00, 0x00e805e0, 0x004a601f, 0x00268a00, 0x00a2000b, 0x00a70600,
+  0x00e50001, 0x00773088, 0x00155a00, 0x00b07600, 0x00777c2e, 0x00177004,
+  0x00233700, 0x00e70001, 0x00177300, 0x00aa0006, 0x00522500, 0x005aa700,
+  0x00b0200b, 0x00b0a006, 0x00d0341f, 0x0001033c, 0x0002093c, 0x00d00008,
+  0x00500f00, 0x00ed0471, 0x008c04d0, 0x00a20009, 0x00712c23, 0x00722c60,
+  0x00ed0476, 0x008c04c7, 0x00d03211, 0x00a50024, 0x00a30025, 0x00355001,
+  0x00d00090, 0x00b05024, 0x009c3024, 0x00142030, 0x008c1480, 0x00722210,
+  0x00b03024, 0x00d12040, 0x00e30001, 0x00133100, 0x00622300, 0x00311010,
+  0x00b02001, 0x00b01eff, 0x003ee001, 0x00ed048b, 0x008c088a, 0x00a11e01,
+  0x00ed048e, 0x008c08f2, 0x00d00214, 0x00a20006, 0x00722e10, 0x009c1493,
+  0x00d04a13, 0x00d12040, 0x00e30001, 0x00133100, 0x00622300, 0x00b01eff,
+  0x00b02efe, 0x00b0defd, 0x003ee003, 0x00ed049d, 0x008c088a, 0x00ad1e01,
+  0x00a21e01, 0x00a11e01, 0x00500200, 0x009c1493, 0x00d00090, 0x00a20006,
+  0x00722e00, 0x009c14a7, 0x00d00115, 0x00d12040, 0x00e30001, 0x00133100,
+  0x00622300, 0x00b01eff, 0x00b02efe, 0x00b0defd, 0x003ee003, 0x00ed04b1,
+  0x008c08f2, 0x00ad1e01, 0x00a21e01, 0x00a11e01, 0x00500200, 0x009c14a7,
+  0x00d00115, 0x00e30140, 0x00731023, 0x00e40001, 0x00a10300, 0x00d21040,
+  0x009c34bf, 0x00422000, 0x00840d00, 0x00144200, 0x00611400, 0x00742c22,
+  0x00b01300, 0x00533200, 0x0072244c, 0x0072403e, 0x00840d00, 0x00e30140,
+  0x00731023, 0x00e40001, 0x00144200, 0x00a10300, 0x00511400, 0x00d00090,
+  0x00b01300, 0x00840d00, 0x00a30201, 0x0007033c, 0x0077005e, 0x00ea05e0,
+  0x00b07201, 0x00773d00, 0x00c0703f, 0x009c14da, 0x00773ca8, 0x00d04d1e,
+  0x0047301f, 0x00c0701f, 0x009c14de, 0x00e70000, 0x00a9000b, 0x00e80001,
+  0x00188700, 0x0078003f, 0x00780020, 0x006880ff, 0x00499800, 0x00a40110,
+  0x00b0900b, 0x00a60005, 0x00e70001, 0x00177100, 0x00777210, 0x006770ff,
+  0x00a80001, 0x00a90002, 0x00aa0006, 0x00488700, 0x00499700, 0x004aa700,
+  0x00b08001, 0x00a80004, 0x00b09002, 0x00488700, 0x00a90021, 0x00b0a006,
+  0x00499700, 0x00b08004, 0x00b09021, 0x00a00200, 0x00d50050, 0x00455001,
+  0x00773c3f, 0x00555700, 0x00981509, 0x00d00090, 0x00a700f4, 0x00181001,
+  0x00155800, 0x00407500, 0x00981509, 0x00155001, 0x00740062, 0x00a70200,
+  0x00981512, 0x00773c3e, 0x00981512, 0x00177100, 0x00566700, 0x00e70003,
+  0x00747040, 0x00d0511a, 0x00a70200, 0x009c1516, 0x00740040, 0x00d0511a,
+  0x00547002, 0x00e70001, 0x00177110, 0x00566700, 0x00b04110, 0x00b06005,
+  0x00b050f5, 0x00840d00, 0x00ec0001, 0x00da3040, 0x008c2522, 0x00d0001b,
+  0x0016ca00, 0x00eb05e0, 0x00633600, 0x002bba00, 0x00e40460, 0x00ab0b00,
+  0x0079bc88, 0x00169004, 0x00244600, 0x0076bc2e, 0x009c1575, 0x00d00090,
+  0x00a7040b, 0x00a1040e, 0x00401001, 0x009c1534, 0x00500700, 0x009c151f,
+  0x004110fe, 0x0076bc84, 0x00a8040c, 0x00b0140e, 0x0098151f, 0x0075bcb8,
+  0x00255001, 0x00a1040f, 0x0016563e, 0x009c153f, 0x00e60001, 0x00751cc9,
+  0x00155002, 0x00d11070, 0x00211001, 0x00355100, 0x00305600, 0x0098251f,
+  0x000a043c, 0x00b03eff, 0x003ee001, 0x0071bc56, 0x0098154e, 0x00f40000,
+  0x00992553, 0x00d05510, 0x00f00000, 0x00991553, 0x00ed0552, 0x008c04b7,
+  0x009c1557, 0x00d00090, 0x00d00090, 0x00a31e01, 0x00d0511f, 0x0075bc84,
+  0x00e409a0, 0x007445f0, 0x00544900, 0x00745064, 0x00725084, 0x00b04300,
+  0x0071bcb8, 0x00981562, 0x007210b8, 0x0072c034, 0x00211001, 0x00111500,
+  0x0075bc3d, 0x0072503d, 0x005f2c00, 0x00a20a03, 0x005f0200, 0x0075bc3d,
+  0x0098156c, 0x00222100, 0x00a80a0c, 0x00388100, 0x009c2570, 0x0008003c,
+  0x00b02a03, 0x00b01a0b, 0x00b08a0c, 0x00a31e01, 0x00d0511f, 0x00a8040d,
+  0x009835dd, 0x0008093c, 0x00a70402, 0x009835dd, 0x0077bc84, 0x0075bcb8,
+  0x00255001, 0x00a9040f, 0x0016573e, 0x00d59670, 0x0098251f, 0x00307002,
+  0x009c2586, 0x00e60004, 0x00370700, 0x00166700, 0x0007043c, 0x00b03eff,
+  0x003ee001, 0x0071bc56, 0x0098158e, 0x00f50000, 0x00991593, 0x00d05910,
+  0x00f00000, 0x00992593, 0x00ed0592, 0x008c04b7, 0x009c1597, 0x00d00090,
+  0x00d00090, 0x00a31e01, 0x00d0511f, 0x0075bc84, 0x00e40831, 0x007445f0,
+  0x00544800, 0x00745064, 0x00746127, 0x0015c800, 0x00b04300, 0x00a80022,
+  0x00588500, 0x0004073c, 0x00b08022, 0x0070bc65, 0x009815de, 0x00e54002,
+  0x0071bcb8, 0x009815aa, 0x007510b8, 0x0075c034, 0x0071bc84, 0x007510a4,
+  0x0071bc3d, 0x0075103d, 0x005f2500, 0x00a20404, 0x0005063c, 0x005f0200,
+  0x00af2900, 0x00355001, 0x009835b6, 0x00d05b12, 0x00156002, 0x0070bc3d,
+  0x008815ba, 0x00222500, 0x00a70402, 0x00a8040d, 0x00377500, 0x00388500,
+  0x009c35d3, 0x00d00090, 0x00a80405, 0x00308700, 0x009825c4, 0x0008073c,
+  0x00a50401, 0x00b0840c, 0x00705c26, 0x009815d3, 0x0079022f, 0x00a50406,
+  0x00a10409, 0x00211500, 0x00b0deff, 0x003ee001, 0x00b01409, 0x00b01403,
+  0x00ed05d2, 0x008c0026, 0x00ad1e01, 0x00a1000b, 0x0016ca00, 0x00611600,
+  0x00b02404, 0x00b0100b, 0x00b0840d, 0x00b0940f, 0x00b07402, 0x00a31e01,
+  0x00d0511f, 0x00d0511f, 0x0071bc84, 0x00c01000, 0x009c15ef, 0x00e14102,
+  0x00e50310, 0x00715210, 0x005f2100, 0x00a20404, 0x00efeeee, 0x005f0200,
+  0x00a12900, 0x001f1000, 0x001f1038, 0x001f1030, 0x001f1028, 0x00e50004,
+  0x00d05b17, 0x00e14112, 0x00e50110, 0x00715210, 0x005f2100, 0x00a20404,
+  0x00efffcc, 0x005f0200, 0x00a12900, 0x001f1000, 0x001f1030, 0x00e50004,
+  0x00d05b17, 0x00a30027, 0x00a90026, 0x00333001, 0x00d00090, 0x00b03027,
+  0x009c3018, 0x00d87040, 0x00b09027, 0x00982625, 0x00e20001, 0x00122800,
+  0x0009083c, 0x00199004, 0x00e20460, 0x00299200, 0x00677200, 0x00a0090b,
+  0x009c1625, 0x00f00000, 0x00aa0903, 0x00ab0902, 0x00991625, 0x00983601,
+  0x00e10147, 0x00e20626, 0x00a00100, 0x009c1018, 0x00548050, 0x00742210,
+  0x00e26310, 0x00b04100, 0x00e33051, 0x00732210, 0x005f0300, 0x005f0a00,
+  0x00e20080, 0x002aa200, 0x0013203e, 0x003bb200, 0x00b0a903, 0x00b0390b,
+  0x00b0b902, 0x00d00118, 0x00ad090e, 0x00ab090b, 0x00ac090f, 0x00fa1000,
+  0x00a40d0a, 0x00a80d09, 0x00b040e9, 0x007f8c61, 0x00fa3000, 0x004f8080,
+  0x00b0e008, 0x00ae0d0f, 0x00a20d0b, 0x00981640, 0x00d00090, 0x00d00090,
+  0x00ad1e01, 0x00aa1e01, 0x00a81e01, 0x00a71e01, 0x00a61e01, 0x00a51e01,
+  0x00a41e01, 0x00a31e01, 0x00a11e01, 0x00840200, 0x00e20645, 0x00a400ec,
+  0x00c04007, 0x009c1715, 0x00d00090, 0x00d00090, 0x00080f3c, 0x003bb001,
+  0x00b080eb, 0x00d00090, 0x009a8657, 0x00d00090, 0x00a00d13, 0x009c2653,
+  0x00d00090, 0x00d00090, 0x00b2ac00, 0x000a083c, 0x00d06411, 0x00e4ffff,
+  0x000a083c, 0x00b04d13, 0x00d06411, 0x00a50d06, 0x00105001, 0x009c264c,
+  0x00d00090, 0x00a100e9, 0x00745d08, 0x00b01d0a, 0x00761d00, 0x00374600,
+  0x00745d00, 0x00366400, 0x00577600, 0x00677500, 0x00982666, 0x00d0641c,
+  0x00a70d09, 0x00b000e9, 0x00711c48, 0x00777c41, 0x003771fb, 0x00fa1000,
+  0x00a40d09, 0x00747041, 0x004f7003, 0x00b04d09, 0x00307004, 0x009c267a,
+  0x00d00090, 0x00a400ec, 0x00e20678, 0x00c04007, 0x009c1715, 0x00d00090,
+  0x003bb001, 0x00000f3c, 0x00307007, 0x00983684, 0x00fa2000, 0x00d00090,
+  0x00d00090, 0x00d00090, 0x00080f3c, 0x00fa3000, 0x000f083c, 0x00d0681b,
+  0x00a400ec, 0x00e20688, 0x00c04007, 0x009c1715, 0x00d00090, 0x003bb001,
+  0x00080f3c, 0x00b0c90f, 0x00738d10, 0x00333001, 0x00705c3d, 0x009816b3,
+  0x00303004, 0x009826b3, 0x00708610, 0x009c26b3, 0x00d00090, 0x00a400ec,
+  0x00e20699, 0x00c04007, 0x009c1715, 0x003bb001, 0x00333004, 0x00040f3c,
+  0x00044040, 0x00744201, 0x00748859, 0x001440be, 0x00788c5a, 0x00588001,
+  0x001880bf, 0x00a5090f, 0x00a20d0e, 0x00d55070, 0x00155002, 0x00255101,
+  0x00a00d13, 0x009826ab, 0x00355004, 0x00d00090, 0x00d00090, 0x00b28200,
+  0x00a80d04, 0x00255800, 0x00b24200, 0x00b25200, 0x00b02d0e, 0x00c01003,
+  0x009c16bf, 0x00d00090, 0x00a40d13, 0x009826b9, 0x00d06b1c, 0x00444001,
+  0x00b2ac00, 0x00b04d13, 0x00e5fffc, 0x00e1ffff, 0x00d06c11, 0x002510fd,
+  0x00d00090, 0x00303504, 0x009826cc, 0x00d00090, 0x00a400ec, 0x00e206c8,
+  0x00c04007, 0x009c1715, 0x003bb001, 0x00333004, 0x00080f3c, 0x00d06c11,
+  0x00477003, 0x00357300, 0x00255101, 0x00fa1000, 0x00a40d09, 0x00745041,
+  0x004f5003, 0x00b04d09, 0x00301303, 0x00981702, 0x00c05004, 0x009c16f7,
+  0x00fa2000, 0x00d00090, 0x00d00090, 0x00d00090, 0x00080f3c, 0x00fa3000,
+  0x000f083c, 0x00d07012, 0x00fa2000, 0x00d00090, 0x00d00090, 0x00d00090,
+  0x00040f3c, 0x00fa3000, 0x000f043c, 0x00155003, 0x00144500, 0x0015503d,
+  0x00330300, 0x009c26ed, 0x00e30000, 0x00357500, 0x00355004, 0x00155003,
+  0x00144500, 0x00350500, 0x00144500, 0x00355020, 0x00188500, 0x00588400,
+  0x00d07012, 0x00455003, 0x00305700, 0x009826e0, 0x00e206ff, 0x00a400ec,
+  0x00c04007, 0x009c1715, 0x00d00090, 0x003bb001, 0x00080f3c, 0x00d00090,
+  0x00500100, 0x009c2705, 0x00ea0000, 0x00211001, 0x00111003, 0x00310100,
+  0x00188100, 0x00211020, 0x001aa100, 0x00310100, 0x001aa100, 0x00211020,
+  0x00188100, 0x00e40001, 0x00588a00, 0x00b04d13, 0x00b080eb, 0x00e20641,
+  0x00d0641a, 0x00b0c90f, 0x00b02d0b, 0x00b0b90b, 0x00fa2000, 0x00b01eff,
+  0x00b03efe, 0x00b04efd, 0x00b05efc, 0x00b06efb, 0x00b07efa, 0x00b08ef9,
+  0x00b0aef8, 0x00b0def7, 0x003ee009, 0x00a100e9, 0x00a40d09, 0x00b01d0a,
+  0x00b0ed0f, 0x00050f3c, 0x00754100, 0x00ae0008, 0x00b05d09, 0x00a0090b,
+  0x009c1321, 0x00e40147, 0x00e80001, 0x00b00400, 0x00a10002, 0x0071803f,
+  0x00b00002, 0x00b01003, 0x00d03211, 0x00a2090e, 0x00ff1000, 0x007f2c61,
+  0x00ff3000, 0x005f0200, 0x00500a00, 0x009c173d, 0x00fa0000, 0x00ec05c0,
+  0x00ed0008, 0x00a4090b, 0x00a6090f, 0x00774cca, 0x00881747, 0x003dd700,
+  0x00500f00, 0x00377001, 0x009c3744, 0x00402001, 0x009c174c, 0x00d00090,
+  0x00772c41, 0x00244700, 0x00774cc2, 0x00a0090c, 0x008c1753, 0x00774d00,
+  0x0005073c, 0x00277003, 0x0017703e, 0x003dd700, 0x00a10c09, 0x00ab0c00,
+  0x00311700, 0x00a20c01, 0x00b01c09, 0x00a40c02, 0x00a10c03, 0x00aa0909,
+  0x00a80908, 0x00500700, 0x00983786, 0x00d00090, 0x00d00090, 0x00a30c08,
+  0x009c1769, 0x00e300c0, 0x00ab0c04, 0x00a20c05, 0x00a40c06, 0x00b03c08,
+  0x00a10c07, 0x00333001, 0x00d00090, 0x00b03c08, 0x00530f00, 0x00a0090c,
+  0x008c1775, 0x003505fc, 0x00982775, 0x00155003, 0x00133500, 0x00350500,
+  0x00133500, 0x00350500, 0x00783210, 0x0078b021, 0x001bb03f, 0x007b203f,
+  0x0012203f, 0x00133030, 0x007a3210, 0x007a4021, 0x0014403f, 0x0074103f,
+  0x0011103f, 0x00b28600, 0x00b2a600, 0x00377001, 0x009c3761, 0x00d00090,
+  0x00b0bc00, 0x00b02c01, 0x00b04c02, 0x00b01c03, 0x003dd001, 0x00982790,
+  0x00d00090, 0x00d00090, 0x00500f00, 0x00d0781a, 0x00fa2000, 0x00a2090e,
+  0x0042200e, 0x00b0090b, 0x0047f080, 0x00522700, 0x00b0690f, 0x00b0290e,
+  0x00d04711, 0x00d77040, 0x00e90460, 0x007c7484, 0x002cc900, 0x00e90016,
+  0x00a50c0b, 0x00705d00, 0x009c17fd, 0x00d00090, 0x00ab0c0c, 0x008c37dc,
+  0x00a20c01, 0x00702c3c, 0x009817fd, 0x00eb05c0, 0x00a90c0f, 0x00a30c0d,
+  0x00a80b09, 0x009817db, 0x00e20016, 0x00a40b00, 0x00a50b01, 0x00a60b02,
+  0x00a70b03, 0x00d09270, 0x009c27db, 0x00e20008, 0x00308008, 0x009c27b7,
+  0x0002083c, 0x00aa0b08, 0x009c17bf, 0x00ea00c0, 0x00a50b05, 0x00b0ab08,
+  0x00a40b04, 0x00a60b06, 0x00a70b07, 0x003aa001, 0x00d00090, 0x00b0ab08,
+  0x00aa0c08, 0x007a4021, 0x0014403f, 0x0074503f, 0x0015503f, 0x00b2a900,
+  0x00aa0c09, 0x007a6021, 0x0016603f, 0x0076703f, 0x0017703f, 0x00b2a900,
+  0x00233008, 0x00388001, 0x00322001, 0x009c37b7, 0x00d00090, 0x00b04b00,
+  0x00b05b01, 0x00b06b02, 0x00b07b03, 0x00b03c02, 0x00b03c0d, 0x00b08b09,
+  0x00b09c0f, 0x00d07f1d, 0x00aa0c0f, 0x00a10c01, 0x00711c3b, 0x009817e3,
+  0x00f40000, 0x009927fd, 0x00d07e15, 0x00f00000, 0x009917fd, 0x00d0a970,
+  0x009c27fd, 0x00d00090, 0x00ed07ea, 0x008c04b7, 0x009817fd, 0x00e40735,
+  0x007445f0, 0x00544750, 0x00a90c03, 0x00b04300, 0x005f2051, 0x0046901f,
+  0x004f90e0, 0x003606e0, 0x00306b00, 0x009837f7, 0x00060b3c, 0x00756100,
+  0x003bb600, 0x00299600, 0x00b0bc0c, 0x00b09c03, 0x00b05c0b, 0x00d0011b,
+  0x00f50000, 0x00500a00, 0x009c1802, 0x00f00000, 0x00ec05c0, 0x00a7090b,
+  0x00a50c0a, 0x007d7ca3, 0x00ab0c00, 0x00a20c01, 0x00a40c02, 0x00a10c03,
+  0x00a70c08, 0x009c3815, 0x00e700c0, 0x00ab0c04, 0x00a20c05, 0x00a40c06,
+  0x00a10c07, 0x00b0bc00, 0x00b02c01, 0x00b04c02, 0x00b01c03, 0x00377001,
+  0x00a30908, 0x00a60909, 0x00b07c08, 0x0048f500, 0x004af500, 0x00783880,
+  0x007a6880, 0x0078b021, 0x007a4021, 0x001bb03f, 0x0014403f, 0x007b203f,
+  0x0074103f, 0x00a6090f, 0x0011103f, 0x0012203f, 0x00b28600, 0x00b2a600,
+  0x003dd001, 0x00b0690f, 0x008c180a, 0x00b0bc00, 0x00b02c01, 0x00b04c02,
+  0x00b01c03, 0x00b0090b, 0x00d04711, 0x00f50000, 0x00500a00, 0x009c1835,
+  0x00f00000, 0x00761d27, 0x00a40901, 0x00000f3c, 0x00366001, 0x009c1837,
+  0x00724ca0, 0x0030201f, 0x009c183e, 0x00724ca8, 0x00e60001, 0x00a8000b,
+  0x001b6200, 0x00568b00, 0x00e80001, 0x00b0600b, 0x00ab0022, 0x00188300,
+  0x006bb800, 0x00a70902, 0x00b0b022, 0x009c3857, 0x00d00090, 0x00b00902,
+  0x00b01eff, 0x00b02efe, 0x00b0aefd, 0x003ee003, 0x0001033c, 0x0002093c,
+  0x00ed0854, 0x008c04d0, 0x00aa1e01, 0x00a21e01, 0x00a11e01, 0x00010a3c,
+  0x00d04711, 0x00d77040, 0x00e10460, 0x007b7484, 0x002bb100, 0x00d00090,
+  0x00a40b0b, 0x009c1889, 0x00d00090, 0x00a10b0f, 0x00a80b03, 0x00d91070,
+  0x00a50b01, 0x002009e0, 0x009c2889, 0x00d00090, 0x00ea0004, 0x00a90b0c,
+  0x00883889, 0x00329020, 0x008c286e, 0x007a9c43, 0x00715c3b, 0x00981873,
+  0x00f40000, 0x00992889, 0x00d08715, 0x00f00000, 0x00991889, 0x00ed0877,
+  0x008c04b7, 0x00981889, 0x00e407fe, 0x007445f0, 0x00544730, 0x00e10000,
+  0x00b04300, 0x00a30b06, 0x005f2031, 0x004f80f8, 0x00211008, 0x00288300,
+  0x003aa001, 0x008c387e, 0x00399100, 0x00741500, 0x00b09b0c, 0x00b08b03,
+  0x00b04b0b, 0x00d0011e, 0x00b0deff, 0x003ee001, 0x00771484, 0x00e50460,
+  0x00277500, 0x0005013c, 0x00ab0701, 0x0071bc3b, 0x00981896, 0x00f40000,
+  0x009928c8, 0x00d08919, 0x00f00000, 0x009918c8, 0x00d00090, 0x00a90703,
+  0x00a3070b, 0x00a8070f, 0x00a4070e, 0x00404001, 0x009c18a2, 0x00500300,
+  0x009c18c8, 0x00d00090, 0x00aa070c, 0x009818c8, 0x00738d07, 0x004330fc,
+  0x00303022, 0x009828d2, 0x0040a080, 0x009818d2, 0x0040907f, 0x009c18d2,
+  0x00d48070, 0x00d00090, 0x00303421, 0x009838cc, 0x00ed08b2, 0x008c04b7,
+  0x009818c8, 0x00e409a0, 0x007445f0, 0x00544550, 0x00a10007, 0x00611003,
+  0x0071002e, 0x00b04300, 0x005f1200, 0x005f0900, 0x00a4070e, 0x00740020,
+  0x00a30701, 0x00b0470e, 0x00733c26, 0x00133007, 0x00299300, 0x00e30080,
+  0x003aa300, 0x00b09703, 0x00b0a70c, 0x00b0370b, 0x00ad1e01, 0x00d00090,
+  0x00d00090, 0x00840d00, 0x00ab0701, 0x007bbca0, 0x00e40001, 0x0074403f,
+  0x00144b00, 0x009828c8, 0x00d48070, 0x003043f6, 0x009c28c8, 0x00ed08d7,
+  0x008c04b7, 0x009818c8, 0x00e4096a, 0x007445f0, 0x00544550, 0x005f2051,
+  0x004f90e0, 0x00b04300, 0x0043901f, 0x00a4070e, 0x00740020, 0x00d00090,
+  0x00b0470e, 0x00a40701, 0x00744c26, 0x009818e7, 0x003993e0, 0x003403e0,
+  0x003aa400, 0x009c28eb, 0x000a003c, 0x00a3070b, 0x00743cca, 0x00d00090,
+  0x003304f8, 0x00133002, 0x007340ca, 0x00d08c15, 0x00741484, 0x00e70460,
+  0x00244700, 0x00e20020, 0x00a70401, 0x00707c3a, 0x009c18fc, 0x00f00000,
+  0x00991940, 0x00d08f1e, 0x00f50000, 0x00992940, 0x00d00090, 0x00a6040f,
+  0x00a7040d, 0x00a50404, 0x0043501f, 0x009c1941, 0x00207080, 0x00982941,
+  0x00d76270, 0x00982941, 0x008c8940, 0x009c8940, 0x00e20080, 0x00d00090,
+  0x00af0007, 0x005f0500, 0x00d02000, 0x00af2600, 0x00a70402, 0x00b0640f,
+  0x00255200, 0x00377200, 0x00b05404, 0x00b07402, 0x009c3920, 0x00d00090,
+  0x00b00402, 0x0002043c, 0x00b0deff, 0x003ee001, 0x00ed091e, 0x008c04d0,
+  0x00ad1e01, 0x00d09410, 0x00a3040d, 0x00333200, 0x009c193f, 0x00d00090,
+  0x00a20405, 0x00760210, 0x00302700, 0x00882929, 0x0002073c, 0x00b0640f,
+  0x00b0240c, 0x00b0240d, 0x00b07402, 0x00a2040a, 0x00a70409, 0x00a30407,
+  0x00a50406, 0x00222300, 0x00277500, 0x00b0240a, 0x00b07409, 0x00b02404,
+  0x00b07403, 0x0003013c, 0x0001073c, 0x00b0deff, 0x003ee001, 0x00ed093d,
+  0x008c0026, 0x00ad1e01, 0x00d09410, 0x00b0340d, 0x00840d00, 0x00a2040d,
+  0x00a0040b, 0x009c1940, 0x00222300, 0x00d86070, 0x00981940, 0x00188002,
+  0x00288300, 0x004880fc, 0x00308020, 0x0098394d, 0x00e80020, 0x00308200,
+  0x00982952, 0x00392001, 0x0008023c, 0x00d09513, 0x00398001, 0x00ef4252,
+  0x000f9337, 0x004f50e0, 0x004a30fc, 0x003b8a00, 0x00500a00, 0x0098195f,
+  0x005f0000, 0x003aa004, 0x009c395a, 0x00d00090, 0x00d00090, 0x00af2600,
+  0x003bb004, 0x009c395f, 0x003a08e0, 0x004aa0fc, 0x00981968, 0x005f0000,
+  0x003aa004, 0x009c3965, 0x00328300, 0x00d09110, 0x00a2090e, 0x00ff1000,
+  0x007f2c61, 0x00ff3000, 0x005f0200, 0x00500a00, 0x009c1972, 0x00fa0000,
+  0x00ab090b, 0x004220fe, 0x00a8090f, 0x00b0290e, 0x0075bcca, 0x0098197d,
+  0x00d00090, 0x00d00090, 0x00500f00, 0x00355001, 0x008c397a, 0x0075bcc2,
+  0x00981984, 0x00d00090, 0x00d00090, 0x00b2f800, 0x00355001, 0x008c3981,
+  0x00b0090b, 0x0002073c, 0x00010a3c, 0x00ed0989, 0x008c04c7, 0x00a5090e,
+  0x0098199e, 0x00ff2000, 0x0045500f, 0x00d00090, 0x00d00090, 0x004bf080,
+  0x00555b00, 0x00a4090c, 0x00981996, 0x00d00090, 0x00b0590e, 0x00d0991e,
+  0x00755c41, 0x00d00090, 0x003505fc, 0x00155003, 0x00350500, 0x001bb500,
+  0x00d00090, 0x00b2b800, 0x00b0890f, 0x00d03211, 0x00a2090e, 0x00ff1000,
+  0x007f2c61, 0x00ff3000, 0x005f0200, 0x00500a00, 0x009c19a8, 0x00fa0000,
+  0x004220fe, 0x00a8090f, 0x00b0290e, 0x00eb09b1, 0x007c1c64, 0x002ccb00,
+  0x00ab090b, 0x00a20908, 0x00840c00, 0x00d09d12, 0x00d09c19, 0x00d09c15,
+  0x00d09c10, 0x00d09b1b, 0x00ec09b7, 0x00d00008, 0x00b2f800, 0x003bb020,
+  0x00d09d1b, 0x00ec09bc, 0x00d00004, 0x00b2f800, 0x003bb010, 0x00d09d1b,
+  0x00ec09c1, 0x00d00002, 0x00b2f800, 0x003bb008, 0x00d09d1b, 0x00ec09c6,
+  0x00b2f800, 0x003bb004, 0x00d09d1b, 0x00ec09ca, 0x00122030, 0x0072f210,
+  0x003bb002, 0x008c19db, 0x00d00090, 0x00d00090, 0x00b22800, 0x00d09d1b,
+  0x00ec09d3, 0x00122038, 0x0072f118, 0x003bb001, 0x008c19db, 0x00d00090,
+  0x00d00090, 0x00b22800, 0x00d09d1b, 0x00a50aec, 0x00355700, 0x00801c00,
+  0x00b02908, 0x00b0b90b, 0x00500b00, 0x009c19e6, 0x0002073c, 0x00010a3c,
+  0x00ed09e6, 0x008c04c7, 0x00a5090e, 0x009819fb, 0x00ff2000, 0x00d00090,
+  0x00d00090, 0x0045500f, 0x004bf080, 0x00a4090c, 0x009819f3, 0x00555b00,
+  0x00d00090, 0x00b0590e, 0x00d09f1b, 0x00755c41, 0x00d00090, 0x003505fc,
+  0x00155003, 0x00350500, 0x001bb500, 0x00d00090, 0x00b2b800, 0x00b0890f,
+  0x00d03211
+};
+
+
+#define TABLE_LENGTH(x) (sizeof(x)/sizeof(*(x)))
+#define STB7100_IMEM_REGION_LENGTH  0xa00
+
+#define STB7100_DMEM_REGION_LENGTH  0x600
+
+#define STB7100_IMEM_FIRMWARE_SZ  TABLE_LENGTH(STB7100_IMEM_REGION)
+#define STB7100_DMEM_FIRMWARE_SZ  TABLE_LENGTH(STB7100_DMEM_REGION)
+
+#endif
+
+
Index: linux/include/linux/stm/7109_cut2_fdma2_firmware.h
===================================================================
--- /dev/null
+++ linux/include/linux/stm/7109_cut2_fdma2_firmware.h
@@ -0,0 +1,708 @@
+/*  STb710x FDMA Driver
+ *  Copyright (c) 2006 STMicroelectronics Limited.
+ *  Author: Mark Glaisher <Mark.Glaisher@st.com>
+ *
+ *   This program is free software; you can redistribute it and/or modify
+ *   it under the terms of the GNU General Public License as published by
+ *   the Free Software Foundation; either version 2 of the License, or
+ *   (at your option) any later version.
+ *
+ *   This program is distributed in the hope that it will be useful,
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *   GNU General Public License for more details.
+ *
+ *   You should have received a copy of the GNU General Public License
+ *   along with this program; if not, write to the Free Software
+ *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
+ *
+ */
+
+#ifndef FDMA_7109C2_FIRMWARE
+#define FDMA_7109C2_FIRMWARE
+
+#define TABLE_LEN(x) (sizeof(x)/sizeof(*(x)))
+
+static unsigned long STB7109_C2_DMEM_REGION[]=
+{
+  0x00060208, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x23104052, 0x23100051, 0x00000000, 0x00000000, 0x00000000,
+  0x21100051, 0x01770133, 0x017a0136, 0x017d0139, 0x0180013c, 0x63103051,
+  0x003f001f, 0x000001c2, 0x000001c4, 0x000001c6, 0x000001d2, 0x00000398,
+  0x00000396, 0x00000393, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x000000fe, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x0000007e, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00002416, 0x04a004a0, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00002416, 0x04c004c0,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00002416, 0x04e004e0, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0000241f,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00001428, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x0000142d, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00001432,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00001437, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x0000143c, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00001441,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00001446, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x0000144b, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00001450,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00001455, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x0000145a, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0000145f,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00001464, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00001469, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0000146e
+};
+
+static unsigned long STB7109_C2_IMEM_REGION[]=
+{
+  0x00e1ffff, 0x00e200ff, 0x00f51000, 0x00b010f9, 0x00b020fa, 0x00ef0013,
+  0x00e10001, 0x00ee00a0, 0x00b010ea, 0x00f01000, 0x00ef0013, 0x00a300f8,
+  0x00aa000b, 0x00433a00, 0x009c1504, 0x009b332e, 0x009a223b, 0x00d00090,
+  0x00a70005, 0x00177030, 0x009c121b, 0x00d00090, 0x00a70006, 0x00a2001c,
+  0x00672700, 0x009c1470, 0x00d00090, 0x00a70002, 0x009c15f6, 0x00d00090,
+  0x00a70004, 0x009c178d, 0x00d00090, 0x00a90003, 0x009c1038, 0x00d00090,
+  0x00a20001, 0x009c145f, 0x00d00090, 0x00d0001b, 0x00452003, 0x00461003,
+  0x00355600, 0x00755461, 0x00a6040e, 0x00555001, 0x00765080, 0x00d00090,
+  0x00b0640e, 0x00755c23, 0x00761c62, 0x00266500, 0x007564ca, 0x00d00090,
+  0x00b0540b, 0x00840d00, 0x00e20500, 0x00d00090, 0x00aa020e, 0x00f50000,
+  0x00ab0a0e, 0x00a10a0d, 0x00d0b070, 0x009c10a9, 0x00d00090, 0x00a4020f,
+  0x00a70201, 0x00a30a04, 0x00d54070, 0x00305020, 0x0098207a, 0x007c3ce0,
+  0x009c107e, 0x00e80020, 0x00ed0054, 0x00a50007, 0x00777c2f, 0x00757037,
+  0x005f0500, 0x005f0300, 0x00a50a0c, 0x00a70a14, 0x00b050e9, 0x00941700,
+  0x00d00090, 0x00ed005b, 0x00a92400, 0x00233004, 0x00b090eb, 0x005f0900,
+  0x00928100, 0x00388001, 0x008c3056, 0x00a50a02, 0x0006033c, 0x00605300,
+  0x008c1062, 0x00a60a05, 0x00a500e9, 0x00b06a04, 0x00b0420f, 0x00b05a0c,
+  0x00d0b070, 0x009c10a9, 0x00d00090, 0x00e60026, 0x00d54070, 0x00306500,
+  0x00982024, 0x00d00090, 0x00a50202, 0x009c1076, 0x00d04070, 0x009c1024,
+  0x00e10000, 0x00b00003, 0x00ed0024, 0x008c04b1, 0x00e10001, 0x00b00003,
+  0x00b01002, 0x008c0024, 0x00a00202, 0x009c1076, 0x00d04070, 0x00981072,
+  0x004c301f, 0x00155002, 0x00265c00, 0x004060e0, 0x00981084, 0x00e60020,
+  0x00366001, 0x00166008, 0x00ed0099, 0x00777c2f, 0x00e54252, 0x00757037,
+  0x000f053c, 0x005f6c00, 0x004f30e0, 0x0018c03e, 0x00981092, 0x000f003c,
+  0x00388001, 0x008c308f, 0x00a50a0c, 0x00166038, 0x00386cff, 0x0018803e,
+  0x00a70a14, 0x00b050e9, 0x00941700, 0x00d00090, 0x00ed00a0, 0x00a92400,
+  0x00233004, 0x00b090eb, 0x005f0900, 0x00928100, 0x00388001, 0x008c309b,
+  0x003806e1, 0x0098105d, 0x000f003c, 0x00388004, 0x008c30a4, 0x008c005d,
+  0x008c00a8, 0x00a30a00, 0x00a80a01, 0x009810cd, 0x00d00090, 0x00a50201,
+  0x00775c2f, 0x00777437, 0x00055035, 0x00e64042, 0x005f6700, 0x004f30f0,
+  0x00a62b00, 0x009c20bd, 0x00d00090, 0x005f5001, 0x00ac2b00, 0x00af2b00,
+  0x004f6001, 0x000f0c3c, 0x008c00c1, 0x000f053c, 0x00af2b00, 0x000f063c,
+  0x000f003c, 0x00233010, 0x00388010, 0x009810cb, 0x00d0b070, 0x009c10b1,
+  0x00d00090, 0x00b08a01, 0x00b03a00, 0x00b0ba0e, 0x008c0024, 0x00d0b070,
+  0x009810c7, 0x00533001, 0x007b0210, 0x0008003c, 0x008c00c7, 0x00a50a00,
+  0x00455001, 0x00941d00, 0x00d00090, 0x00b06eff, 0x00b07efe, 0x00b08efd,
+  0x00b09efc, 0x00b0cefb, 0x003ee005, 0x00a60a07, 0x00a70a08, 0x00a800e9,
+  0x00ec0000, 0x00788d00, 0x00106001, 0x009c20f0, 0x00796d08, 0x003c9800,
+  0x00796d00, 0x00398900, 0x005cc900, 0x006cc600, 0x009c20f0, 0x007c6c3d,
+  0x007cc43e, 0x00666c00, 0x007c7c3d, 0x007cc43e, 0x00577c00, 0x00d00f1f,
+  0x00107001, 0x009c2106, 0x00797d08, 0x003c9800, 0x00797d00, 0x00398900,
+  0x005cc900, 0x006cc700, 0x009c2106, 0x007c7c3d, 0x007cc43e, 0x00677c00,
+  0x007c6c3d, 0x007cc43e, 0x00566c00, 0x00a900e9, 0x00b06a07, 0x00b07a08,
+  0x00799c48, 0x002993fc, 0x00b28b00, 0x00b29b00, 0x00ac1e01, 0x00a91e01,
+  0x00a81e01, 0x00a71e01, 0x00a61e01, 0x00840d00, 0x00a50a00, 0x00455001,
+  0x00941d00, 0x00d00090, 0x00b09a10, 0x00b01eff, 0x00b02efe, 0x00b06efd,
+  0x00b07efc, 0x00b08efb, 0x00b09efa, 0x00b0cef9, 0x00b04ef8, 0x003ee008,
+  0x00a800e9, 0x00788d00, 0x0047801f, 0x00a40e00, 0x00a900e9, 0x00778ca0,
+  0x00799c48, 0x0002093c, 0x002993fc, 0x00e54400, 0x00155710, 0x009c214e,
+  0x00d00090, 0x00d04070, 0x009c112e, 0x00d00090, 0x00e50167, 0x00b09a11,
+  0x00b05a14, 0x00d0151e, 0x00a7020d, 0x00777e00, 0x00a52400, 0x00a60a10,
+  0x00840700, 0x00765100, 0x00066001, 0x00d0131d, 0x00765200, 0x00066002,
+  0x00d0131d, 0x00765300, 0x00066003, 0x00d0131d, 0x0006053c, 0x00066040,
+  0x00d56040, 0x00a40a12, 0x003505e1, 0x00166500, 0x002505e1, 0x00166500,
+  0x00366001, 0x00306400, 0x00b06a12, 0x00983156, 0x00d00090, 0x00a60a08,
+  0x00266001, 0x00d00090, 0x00b06a08, 0x00d0151e, 0x00e50270, 0x00155710,
+  0x00982156, 0x00780327, 0x00d00090, 0x00b28b00, 0x00b29b00, 0x00d0151e,
+  0x00ac0a08, 0x00b00a08, 0x002cc001, 0x0078c308, 0x00780027, 0x00d00090,
+  0x00b28b00, 0x00b29b00, 0x00a41e01, 0x00ac1e01, 0x00a91e01, 0x00a81e01,
+  0x00a71e01, 0x00a61e01, 0x00a21e01, 0x00a11e01, 0x00840d00, 0x00b01eff,
+  0x00b02efe, 0x00b03efd, 0x00b04efc, 0x00b05efb, 0x00b0befa, 0x003ee006,
+  0x00a20a11, 0x00752c40, 0x00a32400, 0x00b00a14, 0x00a5050d, 0x00755e10,
+  0x00a10a10, 0x00d00090, 0x00840500, 0x00713100, 0x00011001, 0x00d01811,
+  0x00713200, 0x00011002, 0x00d01811, 0x00713300, 0x00011003, 0x00d01811,
+  0x0001033c, 0x00011040, 0x00d51040, 0x00a30a12, 0x003505e1, 0x00111500,
+  0x002505e1, 0x00111500, 0x00311001, 0x00a50a08, 0x00b01a12, 0x00255001,
+  0x00301300, 0x00983191, 0x00d00090, 0x00b05a08, 0x00d01919, 0x00a10a0c,
+  0x00a30a11, 0x00b00a08, 0x00715308, 0x00710027, 0x00d00090, 0x00b21b00,
+  0x00b23b00, 0x00a01e01, 0x00a51e01, 0x00a41e01, 0x00a31e01, 0x00a21e01,
+  0x00a11e01, 0x00840d00, 0x00a50a00, 0x00455001, 0x00941d00, 0x00d00090,
+  0x00b09a10, 0x00b01eff, 0x00b06efe, 0x00b07efd, 0x00b08efc, 0x00b09efb,
+  0x00b0cefa, 0x00b04ef9, 0x003ee007, 0x00a100e9, 0x00701c65, 0x009c11e3,
+  0x00781c48, 0x00a60012, 0x0041101f, 0x00106100, 0x009c21e3, 0x0005083c,
+  0x002883fc, 0x00c0100b, 0x009811be, 0x00d00090, 0x00d00090, 0x00b21b00,
+  0x00b28b00, 0x00d01e13, 0x00a60513, 0x00d00090, 0x00d00090, 0x00840600,
+  0x00779e08, 0x00d01d1d, 0x00779e10, 0x00d01d1d, 0x00e601ed, 0x00d04070,
+  0x009c11cc, 0x00d00090, 0x00b06a14, 0x00d01e1b, 0x0006043c, 0x00779d18,
+  0x00d00090, 0x00a62600, 0x00776108, 0x00d01d1d, 0x00e60205, 0x00d04070,
+  0x009c11d8, 0x00d00090, 0x00b06a14, 0x00d01e1b, 0x0006043c, 0x00d00090,
+  0x00d00090, 0x00a72600, 0x00d01d1d, 0x00077040, 0x00777d37, 0x00717128,
+  0x00d00090, 0x00b21b00, 0x00b28b00, 0x00a41e01, 0x00ac1e01, 0x00a91e01,
+  0x00a81e01, 0x00a71e01, 0x00a61e01, 0x00a11e01, 0x00840d00, 0x00b08a11,
+  0x00d01e13, 0x00a90a00, 0x00499001, 0x00941d00, 0x00d00090, 0x00b06eff,
+  0x00b08efe, 0x00b04efd, 0x003ee003, 0x00a90a10, 0x00a80a11, 0x00a62400,
+  0x00166008, 0x00769918, 0x00066040, 0x00766d37, 0x00799d10, 0x00796128,
+  0x00b00a14, 0x00b29b00, 0x00b28b00, 0x00a41e01, 0x00a81e01, 0x00a61e01,
+  0x00840d00, 0x00a90a00, 0x00499001, 0x00941d00, 0x00d00090, 0x00b06eff,
+  0x00b08efe, 0x00b04efd, 0x003ee003, 0x00a90a10, 0x00a80a11, 0x00a62400,
+  0x00799d18, 0x00066040, 0x00766d37, 0x00796128, 0x00b00a14, 0x00b29b00,
+  0x00b28b00, 0x00a41e01, 0x00a81e01, 0x00a61e01, 0x00840d00, 0x00f40000,
+  0x00d87040, 0x00982235, 0x00e10500, 0x00198004, 0x00299100, 0x00e10001,
+  0x00aa0900, 0x00ed0225, 0x008c0498, 0x00981235, 0x00e40340, 0x007445f0,
+  0x00544850, 0x00a1000c, 0x00b04300, 0x005f1200, 0x004fa0e0, 0x00ea0001,
+  0x00ab090f, 0x001aa800, 0x007b01f0, 0x00677a00, 0x00b0b90f, 0x00b0b90b,
+  0x00d0211c, 0x00aa0005, 0x00d00090, 0x007a7210, 0x00d00090, 0x00b0a005,
+  0x00d00116, 0x00ac00f0, 0x00a80005, 0x00d1c040, 0x0098232c, 0x0011103f,
+  0x00ed0450, 0x001a1001, 0x002dd100, 0x00320a00, 0x0013c200, 0x00193a00,
+  0x00e2024d, 0x00222300, 0x006cc900, 0x00eb0500, 0x0005013c, 0x00155004,
+  0x00255b00, 0x00840200, 0x00d02d16, 0x00d02914, 0x00a40501, 0x00724ca0,
+  0x00981294, 0x00e40460, 0x00244200, 0x00c0201f, 0x00981294, 0x00eb0001,
+  0x00a20400, 0x00702c2e, 0x009c1294, 0x001bb100, 0x00a2001c, 0x00522b00,
+  0x00588b00, 0x00b0201c, 0x00a2050f, 0x00aa050c, 0x00ab050b, 0x0070bd00,
+  0x009c123d, 0x00d22070, 0x0098129d, 0x00f50000, 0x0099123d, 0x00122002,
+  0x00b0050c, 0x00ab050d, 0x0030b200, 0x009c226f, 0x00020b3c, 0x003bb200,
+  0x00b0250d, 0x00b0deff, 0x00b01efe, 0x00b05efd, 0x00b0befc, 0x00b0aefb,
+  0x00b08efa, 0x003ee006, 0x00ed027a, 0x008c0885, 0x00a81e01, 0x00aa1e01,
+  0x00ab1e01, 0x00a51e01, 0x00a11e01, 0x00ad1e01, 0x00a2050d, 0x00b0a50c,
+  0x00981287, 0x002bb200, 0x00d00090, 0x00b0b50d, 0x00d0231d, 0x00b0deff,
+  0x00b05efe, 0x00b01efd, 0x003ee003, 0x00b0b50d, 0x00ed028f, 0x00000b3c,
+  0x009818c2, 0x00d00090, 0x00d00090, 0x00a11e01, 0x00a51e01, 0x00ad1e01,
+  0x00a2050b, 0x00702d00, 0x009c123d, 0x00e20001, 0x00122100, 0x00ab001b,
+  0x004bb200, 0x009c123d, 0x00588200, 0x00a40501, 0x00eb0001, 0x007a4ca0,
+  0x001bba00, 0x004bb0fe, 0x009812af, 0x009c22aa, 0x007a4d00, 0x00c0a03f,
+  0x009c12af, 0x007a4ca8, 0x00eb0001, 0x001bba00, 0x00a3000b, 0x006bb0ff,
+  0x00433b00, 0x00d00090, 0x00b0300b, 0x00ab050b, 0x0070bd00, 0x009c123d,
+  0x00722210, 0x006220ff, 0x00ab0001, 0x00a40002, 0x004bb200, 0x00444200,
+  0x00b0b001, 0x00ab0006, 0x00b04002, 0x00a40004, 0x004bb200, 0x00444200,
+  0x00488200, 0x00b0b006, 0x00b04004, 0x00ab001c, 0x004bb200, 0x00a4001a,
+  0x00b0b01c, 0x00444200, 0x00eb0003, 0x00b0401a, 0x00a40d00, 0x0074b0a0,
+  0x00a300f4, 0x001b1001, 0x00e20001, 0x00122b00, 0x00402300, 0x009812d2,
+  0x00122001, 0x00740062, 0x00b020f5, 0x00b04d00, 0x00b090f2, 0x00d0231d,
+  0x00e40001, 0x00144100, 0x006440ff, 0x00488400, 0x00a60d00, 0x0042601f,
+  0x004660e0, 0x00566002, 0x00c02000, 0x00b06d00, 0x009812e7, 0x00e20001,
+  0x00122110, 0x00588200, 0x00b06500, 0x00b090f2, 0x00d0231d, 0x00a00502,
+  0x009c12f2, 0x0002053c, 0x00b0ceff, 0x00b08efe, 0x003ee002, 0x00ed02ef,
+  0x008c04b1, 0x00a81e01, 0x00ac1e01, 0x00d0231d, 0x00a40501, 0x00b06d00,
+  0x0042401f, 0x00981310, 0x0042403f, 0x00c0201f, 0x00981317, 0x00c0203f,
+  0x0098131e, 0x00e60460, 0x0042401f, 0x00e40001, 0x00144200, 0x00a3000b,
+  0x00533400, 0x00266200, 0x00b0300b, 0x00a20600, 0x00721088, 0x00742c2e,
+  0x00b02600, 0x00144004, 0x00244100, 0x00e60001, 0x00166400, 0x00a20006,
+  0x00522600, 0x00b090f2, 0x00b02006, 0x00d0231d, 0x00a20001, 0x00eb0001,
+  0x001bb100, 0x00522b00, 0x00b090f2, 0x00b02001, 0x00d0231d, 0x00a20002,
+  0x00eb0001, 0x001bb100, 0x00522b00, 0x00b090f2, 0x00b02002, 0x00d0231d,
+  0x00eb0001, 0x001bb100, 0x00a2001a, 0x00704c2d, 0x00981327, 0x00522b00,
+  0x00b090f2, 0x00b0201a, 0x00d0231d, 0x00a20004, 0x00522b00, 0x00b090f2,
+  0x00b02004, 0x00d0231d, 0x00b08005, 0x00d00112, 0x00d80050, 0x00788c4c,
+  0x00981010, 0x00da8040, 0x00e600a0, 0x0076a023, 0x00a70aec, 0x00767060,
+  0x00d00090, 0x00a10600, 0x00b0600a, 0x00731c80, 0x00741df0, 0x00751c64,
+  0x00e20500, 0x00793484, 0x00299200, 0x00840400, 0x00f50000, 0x0007093c,
+  0x00d00090, 0x00d00008, 0x00b1f701, 0x00a00902, 0x00981453, 0x00d00090,
+  0x00a70903, 0x00a20904, 0x00a60901, 0x007b7c5e, 0x007b283f, 0x006bb003,
+  0x0076b05a, 0x00ebffff, 0x00ed035c, 0x0041603f, 0x00c0101f, 0x009c199e,
+  0x007a6c88, 0x001aa005, 0x00e20480, 0x002aa200, 0x00ed037c, 0x00ab0a04,
+  0x00a20a00, 0x008c099e, 0x0040601f, 0x00b06901, 0x00981362, 0x00c0103f,
+  0x0098139f, 0x00d0431d, 0x00e70001, 0x00d00008, 0x00400f00, 0x00a20001,
+  0x00177300, 0x00522700, 0x00a10903, 0x00b02001, 0x00a20905, 0x00a70902,
+  0x00307200, 0x008c236f, 0x0002073c, 0x00a10903, 0x00b0290c, 0x00b0290d,
+  0x00a20904, 0x00b01909, 0x00b0290a, 0x0004093c, 0x00b0deff, 0x003ee001,
+  0x00ed037a, 0x008c0028, 0x00ad1e01, 0x00d04519, 0x00d00008, 0x00400f00,
+  0x00a70002, 0x00eb0001, 0x0012b300, 0x00577200, 0x00b0a90e, 0x00b07002,
+  0x00b0090b, 0x00b06901, 0x00a00a0d, 0x008c1459, 0x00a60a0e, 0x00760210,
+  0x00a20a0f, 0x00ab0a07, 0x00722a10, 0x007bbc5b, 0x00b02a0f, 0x00a20b17,
+  0x00b00a14, 0x00b06a0e, 0x00840200, 0x00e6010c, 0x00b00a08, 0x00d03919,
+  0x00e601a0, 0x00d03919, 0x00e600d1, 0x00a2090f, 0x00b06a0d, 0x00720210,
+  0x00b00a13, 0x00b0290f, 0x00d04519, 0x00706c2d, 0x009c143d, 0x00d00090,
+  0x00ac090f, 0x00ed0450, 0x007c0210, 0x002dd300, 0x00eb04e0, 0x00b0c90f,
+  0x00a00b09, 0x009813c3, 0x00d00090, 0x00a10903, 0x00711c62, 0x00a2090e,
+  0x00522001, 0x00762c23, 0x00211600, 0x00b0290e, 0x0011100a, 0x00d00008,
+  0x00500f00, 0x00b0190b, 0x00a10902, 0x00a20901, 0x00702c3d, 0x009813bd,
+  0x00d00090, 0x00b0190c, 0x00d03d1c, 0x00e10001, 0x0072103c, 0x00b0090c,
+  0x00b02901, 0x00e10000, 0x00d03d1c, 0x00080b3c, 0x00a10903, 0x00d00004,
+  0x00b1f801, 0x00d00004, 0x00500f00, 0x00a20904, 0x0004093c, 0x00ed03cd,
+  0x008c0028, 0x00a10902, 0x00a20901, 0x00b0190c, 0x00702c3d, 0x009c13dc,
+  0x00d00090, 0x00a10d00, 0x004110e0, 0x0002093c, 0x00b01d00, 0x00b00900,
+  0x0001033c, 0x00ed03db, 0x008c04b1, 0x00d04519, 0x00211003, 0x0011103e,
+  0x00111003, 0x00d00090, 0x00b0190d, 0x00b01902, 0x00a00b09, 0x009c1425,
+  0x00d00090, 0x00a10907, 0x00311002, 0x00a20b03, 0x00b01b09, 0x00782c44,
+  0x0042200f, 0x00188002, 0x00b02b03, 0x00b08909, 0x00a20b01, 0x00762c44,
+  0x0042200f, 0x00166002, 0x00b02b01, 0x00b06908, 0x00a10b00, 0x00a20b02,
+  0x00b01b04, 0x00b02b06, 0x00a10b01, 0x00a20b03, 0x00b01b05, 0x00e100be,
+  0x00b02b07, 0x00b01b08, 0x00a50b00, 0x00a70905, 0x0001073c, 0x00716200,
+  0x00715021, 0x0015503f, 0x00b21c00, 0x00a40b02, 0x00117010, 0x00718200,
+  0x00714021, 0x0014403f, 0x00b21c00, 0x00a70906, 0x0001073c, 0x00716200,
+  0x00715021, 0x0015503f, 0x00b21c00, 0x00117010, 0x00718200, 0x00714021,
+  0x0014403f, 0x00b21c00, 0x00a10b01, 0x0075121e, 0x0011103e, 0x00b05b00,
+  0x00b01b01, 0x00a20b03, 0x0074221e, 0x0012203e, 0x00a1090d, 0x00211010,
+  0x00b04b02, 0x00b02b03, 0x00b0190d, 0x00b01902, 0x00b0c90f, 0x00a10901,
+  0x00721ca8, 0x00e80001, 0x00a00900, 0x009c142b, 0x0071803c, 0x00168200,
+  0x00a5000b, 0x00555600, 0x00148300, 0x00b0500b, 0x00b01901, 0x00b04004,
+  0x00e10460, 0x00211200, 0x00a60d00, 0x00ab0100, 0x007b3088, 0x004660e0,
+  0x00566002, 0x00b0b100, 0x00b06d00, 0x00010a3c, 0x00d04519, 0x00d00008,
+  0x00400f00, 0x00e80460, 0x004a601f, 0x00218a00, 0x00a2000b, 0x00a70100,
+  0x00e50001, 0x00773088, 0x00155a00, 0x00b07100, 0x00777c2e, 0x00aa0006,
+  0x00177004, 0x00233700, 0x00e70001, 0x00177300, 0x00522500, 0x005aa700,
+  0x00b0200b, 0x00b0a006, 0x00d0361a, 0x0001033c, 0x0002093c, 0x00d00008,
+  0x00500f00, 0x00ed0459, 0x008c04b1, 0x00a2000a, 0x00712c23, 0x00722c60,
+  0x00ed045e, 0x008c04a8, 0x00d0321e, 0x00142030, 0x008c1462, 0x00722210,
+  0x00d12040, 0x00e30001, 0x00133100, 0x00622300, 0x00311010, 0x00b02001,
+  0x00b01eff, 0x003ee001, 0x00ed046c, 0x008c081b, 0x00a11e01, 0x00ed046f,
+  0x008c0885, 0x00d00217, 0x00a20006, 0x00722e10, 0x009c1474, 0x00d04814,
+  0x00d12040, 0x00e30001, 0x00133100, 0x00622300, 0x00b01eff, 0x00b02efe,
+  0x00b0defd, 0x003ee003, 0x00ed047e, 0x008c081b, 0x00ad1e01, 0x00a21e01,
+  0x00a11e01, 0x00500200, 0x009c1474, 0x00d00090, 0x00a20006, 0x00722e00,
+  0x009c1488, 0x00d0011b, 0x00d12040, 0x00e30001, 0x00133100, 0x00622300,
+  0x00b01eff, 0x00b02efe, 0x00b0defd, 0x003ee003, 0x00ed0492, 0x008c0885,
+  0x00ad1e01, 0x00a21e01, 0x00a11e01, 0x00500200, 0x009c1488, 0x00d0011b,
+  0x00e300a0, 0x00731023, 0x00e40001, 0x00a10300, 0x00d21040, 0x009c34a0,
+  0x00422000, 0x00840d00, 0x00144200, 0x00611400, 0x00742c22, 0x00b01300,
+  0x00533200, 0x0072244c, 0x0072403e, 0x00840d00, 0x00e300a0, 0x00731023,
+  0x00e40001, 0x00144200, 0x00a10300, 0x00511400, 0x00d00090, 0x00b01300,
+  0x00840d00, 0x00a30201, 0x0007033c, 0x0077005e, 0x00eb0450, 0x00ea0460,
+  0x002bb100, 0x00b07201, 0x00773d00, 0x00c0703f, 0x009c14bd, 0x00773ca8,
+  0x00d04c11, 0x0047301f, 0x00c0701f, 0x009c14c1, 0x00e70000, 0x00a9000b,
+  0x00e80001, 0x00188700, 0x0078003f, 0x00780020, 0x006880ff, 0x00499800,
+  0x00a40b00, 0x00b0900b, 0x00a60005, 0x00e70001, 0x00177100, 0x00777210,
+  0x006770ff, 0x00a80001, 0x00a90002, 0x00aa0006, 0x00488700, 0x00499700,
+  0x004aa700, 0x00b08001, 0x00a80004, 0x00b09002, 0x00488700, 0x00a9001a,
+  0x00499700, 0x00b0a006, 0x00b0901a, 0x00aa001c, 0x004aa700, 0x00b08004,
+  0x00b0a01c, 0x00a00200, 0x00d50050, 0x00455001, 0x00773c3f, 0x00555700,
+  0x009814ef, 0x00d00090, 0x00a700f4, 0x00181001, 0x00155800, 0x00407500,
+  0x009814ef, 0x00155001, 0x00740062, 0x00a70200, 0x009814f8, 0x00773c3e,
+  0x009814f8, 0x00177100, 0x00566700, 0x00e70003, 0x00747040, 0x00d05010,
+  0x00a70200, 0x009c14fc, 0x00740040, 0x00d05010, 0x00547002, 0x00e70001,
+  0x00177110, 0x00566700, 0x00b04b00, 0x00b06005, 0x00b050f5, 0x00840d00,
+  0x00ec0001, 0x00da3040, 0x008c2508, 0x00d0001f, 0x0016ca00, 0x00eb0460,
+  0x00633600, 0x002bba00, 0x00e40500, 0x00ab0b00, 0x0079bc88, 0x00169004,
+  0x00244600, 0x0076bc2e, 0x009c156b, 0x00d00090, 0x0017c900, 0x00a1001c,
+  0x00411700, 0x009c1505, 0x00d00090, 0x00a7040b, 0x00a1040e, 0x00401001,
+  0x009c151f, 0x00500700, 0x009c1505, 0x004110fe, 0x0076bc84, 0x00a8040c,
+  0x00b0140e, 0x00981505, 0x0075bcb8, 0x00255001, 0x00a1040f, 0x0016563e,
+  0x009c152a, 0x00e60001, 0x00751cc9, 0x00155002, 0x00d11070, 0x00211001,
+  0x00355100, 0x00305600, 0x00982505, 0x0006043c, 0x00b01eff, 0x00b02efe,
+  0x00b03efd, 0x00b04efc, 0x003ee004, 0x0071bc56, 0x0098153c, 0x00f40000,
+  0x00992541, 0x00d0531e, 0x00f00000, 0x00991541, 0x00ed0540, 0x008c0498,
+  0x009c1548, 0x00d00090, 0x00d00090, 0x00a41e01, 0x00a31e01, 0x00a21e01,
+  0x00a11e01, 0x00d05015, 0x0075bc84, 0x00e40941, 0x007445f0, 0x00544900,
+  0x00745064, 0x00725084, 0x00b04300, 0x0071bcb8, 0x00981553, 0x007210b8,
+  0x0072c034, 0x00211001, 0x00111500, 0x0075bc3d, 0x0072503d, 0x005f2c00,
+  0x00a20603, 0x005f0200, 0x0075bc3d, 0x0098155d, 0x00222100, 0x0075bc60,
+  0x00a8060c, 0x00388100, 0x009c2562, 0x0008003c, 0x00b05ac0, 0x00b02603,
+  0x00b0160b, 0x00b0860c, 0x00a41e01, 0x00a31e01, 0x00a21e01, 0x00a11e01,
+  0x00d05015, 0x00a8040d, 0x009835d8, 0x0075bcb8, 0x00a70402, 0x009835d8,
+  0x0077bc84, 0x00255001, 0x00a8040f, 0x0016573e, 0x009c1576, 0x00e60001,
+  0x00d58670, 0x00982505, 0x00306010, 0x0098357c, 0x009c8505, 0x009c8505,
+  0x003707fe, 0x00983580, 0x00e60001, 0x00166700, 0x0007043c, 0x00b03eff,
+  0x003ee001, 0x0071bc56, 0x009c1588, 0x00f00000, 0x0099158d, 0x00d0581a,
+  0x00f50000, 0x0099258d, 0x00ed058c, 0x008c0498, 0x009c1591, 0x00d00090,
+  0x00d00090, 0x00a31e01, 0x00d05015, 0x0075bc84, 0x00e407f4, 0x007445f0,
+  0x00544900, 0x00745064, 0x00746127, 0x0015c900, 0x00b04300, 0x00a9001b,
+  0x00599500, 0x0004073c, 0x00b0901b, 0x0070bc65, 0x009815d9, 0x00e54002,
+  0x0071bcb8, 0x009815a4, 0x007510b8, 0x0075c034, 0x0071bc84, 0x007510a4,
+  0x0071bc3d, 0x0075103d, 0x005f2500, 0x00a20404, 0x00156002, 0x005f0200,
+  0x00af2800, 0x00366001, 0x009c15ac, 0x0076bc60, 0x0070bc3d, 0x008815b3,
+  0x00222500, 0x00a70402, 0x00a9040d, 0x00b06ac0, 0x00377500, 0x00399500,
+  0x009c35ce, 0x00d00090, 0x00a90405, 0x00309700, 0x009825be, 0x0009073c,
+  0x00a50401, 0x00b0940c, 0x00705c26, 0x009815ce, 0x00d00090, 0x00a50406,
+  0x00a10409, 0x00211500, 0x0078022f, 0x00b01409, 0x00b01403, 0x00b0deff,
+  0x003ee001, 0x00ed05cd, 0x008c0028, 0x00ad1e01, 0x00a1000b, 0x0016ca00,
+  0x00611600, 0x00b02404, 0x00b0100b, 0x00b0940d, 0x00b0840f, 0x00b07402,
+  0x00a31e01, 0x00d05015, 0x00d05015, 0x0071bc84, 0x00c01000, 0x009c15ea,
+  0x00e14102, 0x00e50310, 0x00715210, 0x005f2100, 0x00a20404, 0x00efeeee,
+  0x005f0200, 0x00a12800, 0x001f1000, 0x001f1038, 0x001f1030, 0x001f1028,
+  0x00e50004, 0x00d05a1f, 0x00e14112, 0x00e50110, 0x00715210, 0x005f2100,
+  0x00a20404, 0x00efffcc, 0x005f0200, 0x00a12800, 0x001f1000, 0x001f1030,
+  0x00e50004, 0x00d05a1f, 0x00d87040, 0x0098261a, 0x00e20001, 0x00122800,
+  0x0009083c, 0x00199004, 0x00e20500, 0x00299200, 0x00677200, 0x00a0090b,
+  0x009c161a, 0x00f40000, 0x00aa0903, 0x00ab0902, 0x0099161a, 0x009835f6,
+  0x00e100af, 0x00e2061b, 0x00a00100, 0x009c101e, 0x00548050, 0x00742210,
+  0x00a20011, 0x00b04100, 0x00a30901, 0x00733c2f, 0x00723037, 0x005f0200,
+  0x005f0a00, 0x00e20080, 0x002aa200, 0x0013203e, 0x003bb200, 0x00b0a903,
+  0x00b0390b, 0x00b0b902, 0x00d0011e, 0x00ad090e, 0x00ab090b, 0x00ac090f,
+  0x00ff1000, 0x00a40d0a, 0x00a80d09, 0x00b040e9, 0x007f8c61, 0x00ff3000,
+  0x004f8080, 0x00b0e009, 0x00ae0d0f, 0x00a20d0b, 0x00981635, 0x00d00090,
+  0x00d00090, 0x00ad1e01, 0x00aa1e01, 0x00a81e01, 0x00a71e01, 0x00a61e01,
+  0x00a51e01, 0x00a41e01, 0x00a31e01, 0x00a11e01, 0x00840200, 0x00e2063a,
+  0x00a400ed, 0x00c04007, 0x009c1709, 0x00d00090, 0x00d00090, 0x00080f3c,
+  0x003bb001, 0x00b080eb, 0x00d00090, 0x009a864c, 0x00d00090, 0x00a00d13,
+  0x009c2648, 0x00d00090, 0x00d00090, 0x00b2ac00, 0x000a083c, 0x00d06316,
+  0x00e4ffff, 0x000a083c, 0x00b04d13, 0x00d06316, 0x00a50d06, 0x00105001,
+  0x009c2641, 0x00d00090, 0x00a100e9, 0x00745d08, 0x00b01d0a, 0x00761d00,
+  0x00374600, 0x00745d00, 0x00366400, 0x00577600, 0x00677500, 0x0098265b,
+  0x00d06411, 0x00a70d09, 0x00711c48, 0x00777c41, 0x003771fb, 0x00ff1000,
+  0x00a40d09, 0x00747041, 0x004f7003, 0x00b04d09, 0x00307004, 0x009c266e,
+  0x00d00090, 0x00a400ed, 0x00e2066c, 0x00c04007, 0x009c1709, 0x00d00090,
+  0x003bb001, 0x00000f3c, 0x00307007, 0x00983678, 0x00ff2000, 0x00d00090,
+  0x00d00090, 0x00d00090, 0x00080f3c, 0x00ff3000, 0x000f083c, 0x00d0671f,
+  0x00a400ed, 0x00e2067c, 0x00c04007, 0x009c1709, 0x00d00090, 0x003bb001,
+  0x00080f3c, 0x00b0c90f, 0x00738d10, 0x00333001, 0x00705c3d, 0x009816a7,
+  0x00303004, 0x009826a7, 0x00708610, 0x009c26a7, 0x00d00090, 0x00a400ed,
+  0x00e2068d, 0x00c04007, 0x009c1709, 0x003bb001, 0x00333004, 0x00040f3c,
+  0x00044040, 0x00744201, 0x00748859, 0x001440be, 0x00788c5a, 0x00588001,
+  0x001880bf, 0x00a5090f, 0x00a20d0e, 0x00d55070, 0x00155002, 0x00255101,
+  0x00a00d13, 0x0098269f, 0x00355004, 0x00d00090, 0x00d00090, 0x00b28200,
+  0x00a80d04, 0x00255800, 0x00b24200, 0x00b25200, 0x00b02d0e, 0x00c01003,
+  0x009c16b3, 0x00d00090, 0x00a40d13, 0x009826ad, 0x00d06b10, 0x00444001,
+  0x00b2ac00, 0x00b04d13, 0x00e5fffc, 0x00e1ffff, 0x00d06b15, 0x002510fd,
+  0x00d00090, 0x00303504, 0x009826c0, 0x00d00090, 0x00a400ed, 0x00e206bc,
+  0x00c04007, 0x009c1709, 0x003bb001, 0x00333004, 0x00080f3c, 0x00d06b15,
+  0x00477003, 0x00357300, 0x00255101, 0x00ff1000, 0x00a40d09, 0x00745041,
+  0x004f5003, 0x00b04d09, 0x00301303, 0x009816f6, 0x00c05004, 0x009c16eb,
+  0x00ff2000, 0x00d00090, 0x00d00090, 0x00d00090, 0x00080f3c, 0x00ff3000,
+  0x000f083c, 0x00d06f16, 0x00ff2000, 0x00d00090, 0x00d00090, 0x00d00090,
+  0x00040f3c, 0x00ff3000, 0x000f043c, 0x00155003, 0x00144500, 0x0015503d,
+  0x00330300, 0x009c26e1, 0x00e30000, 0x00357500, 0x00355004, 0x00155003,
+  0x00144500, 0x00350500, 0x00144500, 0x00355020, 0x00188500, 0x00588400,
+  0x00d06f16, 0x00455003, 0x00305700, 0x009826d4, 0x00e206f3, 0x00a400ed,
+  0x00c04007, 0x009c1709, 0x00d00090, 0x003bb001, 0x00080f3c, 0x00d00090,
+  0x00500100, 0x009c26f9, 0x00ea0000, 0x00211001, 0x00111003, 0x00310100,
+  0x00188100, 0x00211020, 0x001aa100, 0x00310100, 0x001aa100, 0x00211020,
+  0x00188100, 0x00e40001, 0x00588a00, 0x00b04d13, 0x00b080eb, 0x00e20636,
+  0x00d0631f, 0x00b0c90f, 0x00b02d0b, 0x00b0b90b, 0x00ff2000, 0x00b01eff,
+  0x00b03efe, 0x00b04efd, 0x00b05efc, 0x00b06efb, 0x00b07efa, 0x00b08ef9,
+  0x00b0aef8, 0x00b0def7, 0x003ee009, 0x00a100e9, 0x00a40d09, 0x00b01d0a,
+  0x00b0ed0f, 0x00050f3c, 0x00754100, 0x00ae0009, 0x00b05d09, 0x00a0090b,
+  0x009c132e, 0x00e400af, 0x00e80001, 0x00b00400, 0x00a10002, 0x0071803f,
+  0x00b00002, 0x00b01003, 0x00d0321e, 0x00a2090e, 0x00ff1000, 0x007f2c61,
+  0x00ff3000, 0x005f0200, 0x00500a00, 0x009c1731, 0x00fa0000, 0x00ec04e0,
+  0x00ed0008, 0x00a4090b, 0x00a6090f, 0x00774cca, 0x0088173b, 0x003dd700,
+  0x00500f00, 0x00377001, 0x009c3738, 0x00402001, 0x009c1740, 0x00d00090,
+  0x00772c41, 0x00244700, 0x00774cc2, 0x00a0090c, 0x008c1747, 0x00774d00,
+  0x0005073c, 0x00277003, 0x0017703e, 0x003dd700, 0x00a10c09, 0x00ab0c00,
+  0x00311700, 0x00a20c01, 0x00b01c09, 0x00a40c02, 0x00a10c03, 0x00aa0909,
+  0x00a80908, 0x00500700, 0x0098377a, 0x00d00090, 0x00d00090, 0x00a30c08,
+  0x009c175d, 0x00e300c0, 0x00ab0c04, 0x00a20c05, 0x00a40c06, 0x00b03c08,
+  0x00a10c07, 0x00333001, 0x00d00090, 0x00b03c08, 0x00530f00, 0x00a0090c,
+  0x008c1769, 0x003505fc, 0x00982769, 0x00155003, 0x00133500, 0x00350500,
+  0x00133500, 0x00350500, 0x00783210, 0x0078b021, 0x001bb03f, 0x007b203f,
+  0x0012203f, 0x00133030, 0x007a3210, 0x007a4021, 0x0014403f, 0x0074103f,
+  0x0011103f, 0x00b28600, 0x00b2a600, 0x00377001, 0x009c3755, 0x00d00090,
+  0x00b0bc00, 0x00b02c01, 0x00b04c02, 0x00b01c03, 0x003dd001, 0x00982784,
+  0x00d00090, 0x00d00090, 0x00500f00, 0x00d0771e, 0x00fa2000, 0x00a2090e,
+  0x0042200e, 0x00b0090b, 0x0047f080, 0x00522700, 0x00b0690f, 0x00b0290e,
+  0x00d04519, 0x00d77040, 0x00e90500, 0x007c7484, 0x002cc900, 0x00e90016,
+  0x00a50c0b, 0x00705d00, 0x009c17f3, 0x00d00090, 0x00ab0c0c, 0x008c37d0,
+  0x00a20c01, 0x00702c3c, 0x009817f3, 0x00eb04e0, 0x00a90c0f, 0x00a30c0d,
+  0x00a80b09, 0x009817cf, 0x00e20016, 0x00a40b00, 0x00a50b01, 0x00a60b02,
+  0x00a70b03, 0x00d09270, 0x009c27cf, 0x00e20008, 0x00308008, 0x009c27ab,
+  0x0002083c, 0x00aa0b08, 0x009c17b3, 0x00ea00c0, 0x00a50b05, 0x00b0ab08,
+  0x00a40b04, 0x00a60b06, 0x00a70b07, 0x003aa001, 0x00d00090, 0x00b0ab08,
+  0x00aa0c08, 0x007a4021, 0x0014403f, 0x0074503f, 0x0015503f, 0x00b2a900,
+  0x00aa0c09, 0x007a6021, 0x0016603f, 0x0076703f, 0x0017703f, 0x00b2a900,
+  0x00233008, 0x00388001, 0x00322001, 0x009c37ab, 0x00d00090, 0x00b04b00,
+  0x00b05b01, 0x00b06b02, 0x00b07b03, 0x00b03c02, 0x00b03c0d, 0x00b08b09,
+  0x00b09c0f, 0x00d07f13, 0x00aa0c0f, 0x00a80c01, 0x00718c3b, 0x009817d7,
+  0x00f40000, 0x009927f3, 0x00d07d19, 0x00f00000, 0x009917f3, 0x00d0a970,
+  0x009c27f3, 0x00d00090, 0x00ed07de, 0x008c0498, 0x009817f3, 0x00e40729,
+  0x007445f0, 0x00544750, 0x00a90c03, 0x00b04300, 0x00788c2f, 0x00728037,
+  0x0046901f, 0x005f2051, 0x004f90e0, 0x003606e0, 0x00306b00, 0x009837ed,
+  0x00060b3c, 0x00756100, 0x003bb600, 0x00299600, 0x00b0bc0c, 0x00b09c03,
+  0x00b05c0b, 0x00d00211, 0x00f50000, 0x00500a00, 0x009c17f8, 0x00f00000,
+  0x00761d27, 0x00a40901, 0x00000f3c, 0x00366001, 0x009c17fa, 0x00724ca0,
+  0x0030201f, 0x009c1801, 0x00724ca8, 0x00e60001, 0x00a8000b, 0x001b6200,
+  0x00568b00, 0x00e80001, 0x00b0600b, 0x00ab001b, 0x00188300, 0x006bb800,
+  0x00a70902, 0x00b0b01b, 0x009c3819, 0x0001033c, 0x00b00902, 0x00b01eff,
+  0x00b02efe, 0x00b0aefd, 0x003ee003, 0x0002093c, 0x00ed0816, 0x008c04b1,
+  0x00aa1e01, 0x00a21e01, 0x00a11e01, 0x00010a3c, 0x00d04519, 0x00b0deff,
+  0x003ee001, 0x00771484, 0x00e50500, 0x00277500, 0x0005013c, 0x00ab0701,
+  0x0071bc3b, 0x00981827, 0x00f40000, 0x0099285a, 0x00d0821a, 0x00f00000,
+  0x0099185a, 0x00d00090, 0x00a90703, 0x00a3070b, 0x00a8070f, 0x00a4070e,
+  0x00404001, 0x009c1833, 0x00500300, 0x009c185a, 0x00d00090, 0x00aa070c,
+  0x0098185a, 0x00738d07, 0x004330fc, 0x00303022, 0x00982863, 0x0040a080,
+  0x00981863, 0x00d00090, 0x0040907f, 0x009c1863, 0x00d48070, 0x00d00090,
+  0x00303421, 0x0098385e, 0x00ed0844, 0x008c0498, 0x0098185a, 0x00e40941,
+  0x007445f0, 0x00544550, 0x00a10008, 0x0076bc2f, 0x00716037, 0x00b04300,
+  0x005f1200, 0x005f0900, 0x00a4070e, 0x00740020, 0x00a30701, 0x00b0470e,
+  0x00733c26, 0x00133007, 0x00299300, 0x00e30080, 0x003aa300, 0x00b09703,
+  0x00b0a70c, 0x00b0370b, 0x00ad1e01, 0x00d00090, 0x00d00090, 0x00840d00,
+  0x0076bca0, 0x00e40001, 0x0074403f, 0x00144600, 0x0098285a, 0x00d48070,
+  0x003043f6, 0x009c285a, 0x00ed0868, 0x008c0498, 0x0098185a, 0x00e4090b,
+  0x007445f0, 0x00544550, 0x0076bc2f, 0x00726037, 0x005f2051, 0x004f90e0,
+  0x00b04300, 0x0043901f, 0x00a4070e, 0x00740020, 0x00d00090, 0x00b0470e,
+  0x00a40701, 0x00744c26, 0x0098187a, 0x003993e0, 0x003403e0, 0x003aa400,
+  0x009c287e, 0x000a003c, 0x00a3070b, 0x00743cca, 0x00d00090, 0x003304f8,
+  0x00133002, 0x007340ca, 0x00d08517, 0x00741484, 0x00e70500, 0x00244700,
+  0x00e20020, 0x00a0040b, 0x009c18de, 0x00d00090, 0x00ac0401, 0x0070cc3a,
+  0x009c1892, 0x00f00000, 0x009918de, 0x00d08914, 0x00f50000, 0x009928de,
+  0x00d00090, 0x00a6040f, 0x00a7040d, 0x00a50404, 0x0043501f, 0x009c18df,
+  0x00207080, 0x009828df, 0x00d76270, 0x009828df, 0x009c88de, 0x009c88de,
+  0x00e20080, 0x00d00090, 0x00a70007, 0x007ccc2f, 0x0077c037, 0x005f0700,
+  0x005f0500, 0x00d02000, 0x00af2600, 0x00a70402, 0x00b0640f, 0x00255200,
+  0x00377200, 0x00b05404, 0x00b07402, 0x009c38b9, 0x00d00090, 0x00b00402,
+  0x0002043c, 0x00b0deff, 0x003ee001, 0x00ed08b7, 0x008c04b1, 0x00ad1e01,
+  0x00d08d1e, 0x00a3040d, 0x00333200, 0x009c38dd, 0x00e50001, 0x00155100,
+  0x00a2001c, 0x00422500, 0x009c18dd, 0x00d00090, 0x00a20405, 0x00760210,
+  0x00302700, 0x008828c7, 0x0002073c, 0x00b0640f, 0x00b0240c, 0x00b0240d,
+  0x00b07402, 0x00a2040a, 0x00a70409, 0x00a30407, 0x00a50406, 0x00222300,
+  0x00277500, 0x00b0240a, 0x00b07409, 0x00b02404, 0x00b07403, 0x0003013c,
+  0x0001073c, 0x00b0deff, 0x003ee001, 0x00ed08db, 0x008c0028, 0x00ad1e01,
+  0x00d08d1e, 0x00b0340d, 0x00840d00, 0x00a2040d, 0x00a0040b, 0x009c18de,
+  0x00222300, 0x00d86070, 0x009818de, 0x00188002, 0x00288300, 0x004880fc,
+  0x00308020, 0x009838eb, 0x00e80020, 0x00308200, 0x009828f0, 0x00392001,
+  0x0008023c, 0x00d08f11, 0x00398001, 0x00e74252, 0x007ccc2f, 0x0077c037,
+  0x005f0700, 0x000f9337, 0x004f50e0, 0x004a30fc, 0x003b8a00, 0x00500a00,
+  0x00981900, 0x005f0000, 0x003aa004, 0x009c38fb, 0x00d00090, 0x00d00090,
+  0x00af2600, 0x003bb004, 0x009c3900, 0x003a08e0, 0x004aa0fc, 0x00981909,
+  0x005f0000, 0x003aa004, 0x009c3906, 0x00328300, 0x00d08a19, 0x00a2090e,
+  0x00ff1000, 0x007f2c61, 0x00ff3000, 0x005f0200, 0x00500a00, 0x009c1913,
+  0x00fa0000, 0x00ab090b, 0x004220fe, 0x00a8090f, 0x00b0290e, 0x0075bcca,
+  0x0098191e, 0x00d00090, 0x00d00090, 0x00500f00, 0x00355001, 0x008c391b,
+  0x0075bcc2, 0x00981925, 0x00d00090, 0x00d00090, 0x00b2f800, 0x00355001,
+  0x008c3922, 0x00b0090b, 0x0002073c, 0x00010a3c, 0x00ed092a, 0x008c04a8,
+  0x00a5090e, 0x0098193f, 0x00ff2000, 0x0045500f, 0x00d00090, 0x00d00090,
+  0x004bf080, 0x00555b00, 0x00a4090c, 0x00981937, 0x00d00090, 0x00b0590e,
+  0x00d0931f, 0x00755c41, 0x00d00090, 0x003505fc, 0x00155003, 0x00350500,
+  0x001bb500, 0x00d00090, 0x00b2b800, 0x00b0890f, 0x00d0321e, 0x00a2090e,
+  0x00ff1000, 0x007f2c61, 0x00ff3000, 0x005f0200, 0x00500a00, 0x009c1949,
+  0x00fa0000, 0x004220fe, 0x00a8090f, 0x00b0290e, 0x00eb0952, 0x007c1c64,
+  0x002ccb00, 0x00ab090b, 0x00a20908, 0x00840c00, 0x00d09713, 0x00d0961a,
+  0x00d09616, 0x00d09611, 0x00d0951c, 0x00ec0958, 0x00d00008, 0x00b2f800,
+  0x003bb020, 0x00d0971c, 0x00ec095d, 0x00d00004, 0x00b2f800, 0x003bb010,
+  0x00d0971c, 0x00ec0962, 0x00d00002, 0x00b2f800, 0x003bb008, 0x00d0971c,
+  0x00ec0967, 0x00b2f800, 0x003bb004, 0x00d0971c, 0x00ec096b, 0x00122030,
+  0x0072f210, 0x003bb002, 0x008c197c, 0x00d00090, 0x00d00090, 0x00b22800,
+  0x00d0971c, 0x00ec0974, 0x00122038, 0x0072f118, 0x003bb001, 0x008c197c,
+  0x00d00090, 0x00d00090, 0x00b22800, 0x00d0971c, 0x00a50aec, 0x00355700,
+  0x00801c00, 0x00b02908, 0x00b0b90b, 0x00500b00, 0x009c1987, 0x0002073c,
+  0x00010a3c, 0x00ed0987, 0x008c04a8, 0x00a5090e, 0x0098199c, 0x00ff2000,
+  0x00d00090, 0x00d00090, 0x0045500f, 0x004bf080, 0x00a4090c, 0x00981994,
+  0x00555b00, 0x00d00090, 0x00b0590e, 0x00d0991c, 0x00755c41, 0x00d00090,
+  0x003505fc, 0x00155003, 0x00350500, 0x001bb500, 0x00d00090, 0x00b2b800,
+  0x00b0890f, 0x00d0321e, 0x00707cda, 0x009819a5, 0x00702cda, 0x009819a5,
+  0x0070bcda, 0x009819a5, 0x00840d00, 0x0076002f, 0x00840d00
+};
+
+#define STB7109_C2_IMEM_REGION_LENGTH  0xa00
+#define STB7109_C2_DMEM_REGION_LENGTH  0x600
+
+#define STB7109_C2_IMEM_FIRMWARE_SZ  TABLE_LENGTH(STB7109_C2_IMEM_REGION)
+#define STB7109_C2_DMEM_FIRMWARE_SZ  TABLE_LENGTH(STB7109_C2_DMEM_REGION)
+
+#endif
Index: linux/include/linux/stm/7109_cut3_fdma2_firmware.h
===================================================================
--- /dev/null
+++ linux/include/linux/stm/7109_cut3_fdma2_firmware.h
@@ -0,0 +1,736 @@
+/*  STb710x FDMA Driver
+ *  Copyright (c) 2006 STMicroelectronics Limited.
+ *  Author: Mark Glaisher <Mark.Glaisher@st.com>
+ *
+ *   This program is free software; you can redistribute it and/or modify
+ *   it under the terms of the GNU General Public License as published by
+ *   the Free Software Foundation; either version 2 of the License, or
+ *   (at your option) any later version.
+ *
+ *   This program is distributed in the hope that it will be useful,
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *   GNU General Public License for more details.
+ *
+ *   You should have received a copy of the GNU General Public License
+ *   along with this program; if not, write to the Free Software
+ *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
+ */
+
+#ifndef FDMA_7109C3_FIRMWARE
+#define FDMA_7109C3_FIRMWARE
+/*This firmware version 2.2*/
+static unsigned long STB7109_C3_DMEM_REGION[]=
+{
+ 0x0006020a, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x23104052, 0x23100051, 0x00000000, 0x00000000, 0x00000000,
+  0x21100051, 0x017a0136, 0x017d0139, 0x0180013c, 0x0183013f, 0x63103051,
+  0x003f001f, 0x000001c5, 0x000001c7, 0x000001c9, 0x000001d5, 0x0000039b,
+  0x00000399, 0x00000396, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x000000fe, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x0000007e, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00002416, 0x04a004a0, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00002416, 0x04c004c0,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00002416, 0x04e004e0, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0000241f,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00001428, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x0000142d, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00001432,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00001437, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x0000143c, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00001441,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00001446, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x0000144b, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00001450,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00001455, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x0000145a, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0000145f,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00001464, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00001469, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0000146e
+};
+
+static unsigned long STB7109_C3_IMEM_REGION[]=
+{
+  0x00e1ffff, 0x00e200ff, 0x00f51000, 0x00b010f9, 0x00b020fa, 0x00ef0013,
+  0x00e10001, 0x00ee00a0, 0x00b010ea, 0x00f01000, 0x00ef0013, 0x00a300f8,
+  0x00aa000b, 0x00433a00, 0x009c1543, 0x009b3331, 0x009a223e, 0x00d00090,
+  0x00a70005, 0x00177030, 0x009c121e, 0x00d00090, 0x00a70006, 0x00a2001c,
+  0x00672700, 0x009c14af, 0x00d00090, 0x00a70002, 0x009c1635, 0x00d00090,
+  0x00a70004, 0x009c17d3, 0x00d00090, 0x00a7001a, 0x009c1a20, 0x00d00090,
+  0x00a90003, 0x009c103b, 0x00d00090, 0x00a20001, 0x009c1497, 0x00d00090,
+  0x00d0001b, 0x00452003, 0x00461003, 0x00355600, 0x00755461, 0x00a6040e,
+  0x00555001, 0x00765080, 0x00d00090, 0x00b0640e, 0x00755c23, 0x00761c62,
+  0x00266500, 0x007564ca, 0x00d00090, 0x00b0540b, 0x00840d00, 0x00e20500,
+  0x00d00090, 0x00aa020e, 0x00f50000, 0x00ab0a0e, 0x00a10a0d, 0x00d0b070,
+  0x009c10ac, 0x00d00090, 0x00a4020f, 0x00a70201, 0x00a30a04, 0x00d54070,
+  0x00305020, 0x0098207d, 0x007c3ce0, 0x009c1081, 0x00e80020, 0x00ed0057,
+  0x00a50007, 0x00777c2f, 0x00757037, 0x005f0500, 0x005f0300, 0x00a50a0c,
+  0x00a70a14, 0x00b050e9, 0x00941700, 0x00d00090, 0x00ed005e, 0x00a92400,
+  0x00233004, 0x00b090eb, 0x005f0900, 0x00928100, 0x00388001, 0x008c3059,
+  0x00a50a02, 0x0006033c, 0x00605300, 0x008c1065, 0x00a60a05, 0x00a500e9,
+  0x00b06a04, 0x00b0420f, 0x00b05a0c, 0x00d0b070, 0x009c10ac, 0x00d00090,
+  0x00e60026, 0x00d54070, 0x00306500, 0x00982027, 0x00d00090, 0x00a50202,
+  0x009c1079, 0x00d04070, 0x009c1027, 0x00e10000, 0x00b00003, 0x00ed0027,
+  0x008c04f0, 0x00e10001, 0x00b00003, 0x00b01002, 0x008c0027, 0x00a00202,
+  0x009c1079, 0x00d04070, 0x00981075, 0x004c301f, 0x00155002, 0x00265c00,
+  0x004060e0, 0x00981087, 0x00e60020, 0x00366001, 0x00166008, 0x00ed009c,
+  0x00777c2f, 0x00e54252, 0x00757037, 0x000f053c, 0x005f6c00, 0x004f30e0,
+  0x0018c03e, 0x00981095, 0x000f003c, 0x00388001, 0x008c3092, 0x00a50a0c,
+  0x00166038, 0x00386cff, 0x0018803e, 0x00a70a14, 0x00b050e9, 0x00941700,
+  0x00d00090, 0x00ed00a3, 0x00a92400, 0x00233004, 0x00b090eb, 0x005f0900,
+  0x00928100, 0x00388001, 0x008c309e, 0x003806e1, 0x00981060, 0x000f003c,
+  0x00388004, 0x008c30a7, 0x008c0060, 0x008c00ab, 0x00a30a00, 0x00a80a01,
+  0x009810d0, 0x00d00090, 0x00a50201, 0x00775c2f, 0x00777437, 0x00055035,
+  0x00e64042, 0x005f6700, 0x004f30f0, 0x00a62b00, 0x009c20c0, 0x00d00090,
+  0x005f5001, 0x00ac2b00, 0x00af2b00, 0x004f6001, 0x000f0c3c, 0x008c00c4,
+  0x000f053c, 0x00af2b00, 0x000f063c, 0x000f003c, 0x00233010, 0x00388010,
+  0x009810ce, 0x00d0b070, 0x009c10b4, 0x00d00090, 0x00b08a01, 0x00b03a00,
+  0x00b0ba0e, 0x008c0027, 0x00d0b070, 0x009810ca, 0x00533001, 0x007b0210,
+  0x0008003c, 0x008c00ca, 0x00a50a00, 0x00455001, 0x00941d00, 0x00d00090,
+  0x00b06eff, 0x00b07efe, 0x00b08efd, 0x00b09efc, 0x00b0cefb, 0x003ee005,
+  0x00a60a07, 0x00a70a08, 0x00a800e9, 0x00ec0000, 0x00788d00, 0x00106001,
+  0x009c20f3, 0x00796d08, 0x003c9800, 0x00796d00, 0x00398900, 0x005cc900,
+  0x006cc600, 0x009c20f3, 0x007c6c3d, 0x007cc43e, 0x00666c00, 0x007c7c3d,
+  0x007cc43e, 0x00577c00, 0x00d01012, 0x00107001, 0x009c2109, 0x00797d08,
+  0x003c9800, 0x00797d00, 0x00398900, 0x005cc900, 0x006cc700, 0x009c2109,
+  0x007c7c3d, 0x007cc43e, 0x00677c00, 0x007c6c3d, 0x007cc43e, 0x00566c00,
+  0x00a900e9, 0x00b06a07, 0x00b07a08, 0x00799c48, 0x002993fc, 0x00b28b00,
+  0x00b29b00, 0x00ac1e01, 0x00a91e01, 0x00a81e01, 0x00a71e01, 0x00a61e01,
+  0x00840d00, 0x00a50a00, 0x00455001, 0x00941d00, 0x00d00090, 0x00b09a10,
+  0x00b01eff, 0x00b02efe, 0x00b06efd, 0x00b07efc, 0x00b08efb, 0x00b09efa,
+  0x00b0cef9, 0x00b04ef8, 0x003ee008, 0x00a800e9, 0x00788d00, 0x0047801f,
+  0x00a40e00, 0x00a900e9, 0x00778ca0, 0x00799c48, 0x0002093c, 0x002993fc,
+  0x00e54400, 0x00155710, 0x009c2151, 0x00d00090, 0x00d04070, 0x009c1131,
+  0x00d00090, 0x00e5016a, 0x00b09a11, 0x00b05a14, 0x00d01611, 0x00a7020d,
+  0x00777e00, 0x00a52400, 0x00a60a10, 0x00840700, 0x00765100, 0x00066001,
+  0x00d01410, 0x00765200, 0x00066002, 0x00d01410, 0x00765300, 0x00066003,
+  0x00d01410, 0x0006053c, 0x00066040, 0x00d56040, 0x00a40a12, 0x003505e1,
+  0x00166500, 0x002505e1, 0x00166500, 0x00366001, 0x00306400, 0x00b06a12,
+  0x00983159, 0x00d00090, 0x00a60a08, 0x00266001, 0x00d00090, 0x00b06a08,
+  0x00d01611, 0x00e50270, 0x00155710, 0x00982159, 0x00780327, 0x00d00090,
+  0x00b28b00, 0x00b29b00, 0x00d01611, 0x00ac0a08, 0x00b00a08, 0x002cc001,
+  0x0078c308, 0x00780027, 0x00d00090, 0x00b28b00, 0x00b29b00, 0x00a41e01,
+  0x00ac1e01, 0x00a91e01, 0x00a81e01, 0x00a71e01, 0x00a61e01, 0x00a21e01,
+  0x00a11e01, 0x00840d00, 0x00b01eff, 0x00b02efe, 0x00b03efd, 0x00b04efc,
+  0x00b05efb, 0x00b0befa, 0x003ee006, 0x00a20a11, 0x00752c40, 0x00a32400,
+  0x00b00a14, 0x00a5050d, 0x00755e10, 0x00a10a10, 0x00d00090, 0x00840500,
+  0x00713100, 0x00011001, 0x00d01814, 0x00713200, 0x00011002, 0x00d01814,
+  0x00713300, 0x00011003, 0x00d01814, 0x0001033c, 0x00011040, 0x00d51040,
+  0x00a30a12, 0x003505e1, 0x00111500, 0x002505e1, 0x00111500, 0x00311001,
+  0x00a50a08, 0x00b01a12, 0x00255001, 0x00301300, 0x00983194, 0x00d00090,
+  0x00b05a08, 0x00d0191c, 0x00a10a0c, 0x00a30a11, 0x00b00a08, 0x00715308,
+  0x00710027, 0x00d00090, 0x00b21b00, 0x00b23b00, 0x00a01e01, 0x00a51e01,
+  0x00a41e01, 0x00a31e01, 0x00a21e01, 0x00a11e01, 0x00840d00, 0x00a50a00,
+  0x00455001, 0x00941d00, 0x00d00090, 0x00b09a10, 0x00b01eff, 0x00b06efe,
+  0x00b07efd, 0x00b08efc, 0x00b09efb, 0x00b0cefa, 0x00b04ef9, 0x003ee007,
+  0x00a100e9, 0x00701c65, 0x009c11e6, 0x00781c48, 0x00a60012, 0x0041101f,
+  0x00106100, 0x009c21e6, 0x0005083c, 0x002883fc, 0x00c0100b, 0x009811c1,
+  0x00d00090, 0x00d00090, 0x00b21b00, 0x00b28b00, 0x00d01e16, 0x00a60513,
+  0x00d00090, 0x00d00090, 0x00840600, 0x00779e08, 0x00d01e10, 0x00779e10,
+  0x00d01e10, 0x00e601f0, 0x00d04070, 0x009c11cf, 0x00d00090, 0x00b06a14,
+  0x00d01e1e, 0x0006043c, 0x00779d18, 0x00d00090, 0x00a62600, 0x00776108,
+  0x00d01e10, 0x00e60208, 0x00d04070, 0x009c11db, 0x00d00090, 0x00b06a14,
+  0x00d01e1e, 0x0006043c, 0x00d00090, 0x00d00090, 0x00a72600, 0x00d01e10,
+  0x00077040, 0x00777d37, 0x00717128, 0x00d00090, 0x00b21b00, 0x00b28b00,
+  0x00a41e01, 0x00ac1e01, 0x00a91e01, 0x00a81e01, 0x00a71e01, 0x00a61e01,
+  0x00a11e01, 0x00840d00, 0x00b08a11, 0x00d01e16, 0x00a90a00, 0x00499001,
+  0x00941d00, 0x00d00090, 0x00b06eff, 0x00b08efe, 0x00b04efd, 0x003ee003,
+  0x00a90a10, 0x00a80a11, 0x00a62400, 0x00166008, 0x00769918, 0x00066040,
+  0x00766d37, 0x00799d10, 0x00796128, 0x00b00a14, 0x00b29b00, 0x00b28b00,
+  0x00a41e01, 0x00a81e01, 0x00a61e01, 0x00840d00, 0x00a90a00, 0x00499001,
+  0x00941d00, 0x00d00090, 0x00b06eff, 0x00b08efe, 0x00b04efd, 0x003ee003,
+  0x00a90a10, 0x00a80a11, 0x00a62400, 0x00799d18, 0x00066040, 0x00766d37,
+  0x00796128, 0x00b00a14, 0x00b29b00, 0x00b28b00, 0x00a41e01, 0x00a81e01,
+  0x00a61e01, 0x00840d00, 0x00f40000, 0x00d87040, 0x00982238, 0x00e10500,
+  0x00198004, 0x00299100, 0x00e10001, 0x00aa0900, 0x00ed0228, 0x008c04d7,
+  0x00981238, 0x00e40343, 0x007445f0, 0x00544850, 0x00a1000c, 0x00b04300,
+  0x005f1200, 0x004fa0e0, 0x00ea0001, 0x00ab090f, 0x001aa800, 0x007b01f0,
+  0x00677a00, 0x00b0b90f, 0x00b0b90b, 0x00d0211f, 0x00aa0005, 0x00d00090,
+  0x007a7210, 0x00d00090, 0x00b0a005, 0x00d00116, 0x00ac00f0, 0x00a80005,
+  0x00d1c040, 0x0098232f, 0x0011103f, 0x00ed0450, 0x001a1001, 0x002dd100,
+  0x00320a00, 0x0013c200, 0x00193a00, 0x00e20250, 0x00222300, 0x006cc900,
+  0x00eb0500, 0x0005013c, 0x00155004, 0x00255b00, 0x00840200, 0x00d02d19,
+  0x00d02917, 0x00a40501, 0x00724ca0, 0x00981297, 0x00e40460, 0x00244200,
+  0x00c0201f, 0x00981297, 0x00eb0001, 0x00a20400, 0x00702c2e, 0x009c1297,
+  0x001bb100, 0x00a2001c, 0x00522b00, 0x00588b00, 0x00b0201c, 0x00a2050f,
+  0x00aa050c, 0x00ab050b, 0x0070bd00, 0x009c1240, 0x00d22070, 0x00981297,
+  0x00f50000, 0x00991240, 0x00122002, 0x00b0050c, 0x00ab050d, 0x0030b200,
+  0x009c2272, 0x00020b3c, 0x003bb200, 0x00b0250d, 0x00b0deff, 0x00b01efe,
+  0x00b05efd, 0x00b0befc, 0x00b0aefb, 0x00b08efa, 0x003ee006, 0x00ed027d,
+  0x008c08cb, 0x00a81e01, 0x00aa1e01, 0x00ab1e01, 0x00a51e01, 0x00a11e01,
+  0x00ad1e01, 0x00a2050d, 0x00b0a50c, 0x0098128a, 0x002bb200, 0x00d00090,
+  0x00b0b50d, 0x00d02410, 0x00b0deff, 0x00b05efe, 0x00b01efd, 0x003ee003,
+  0x00b0b50d, 0x00ed0292, 0x00000b3c, 0x00981908, 0x00d00090, 0x00d00090,
+  0x00a11e01, 0x00a51e01, 0x00ad1e01, 0x00a2050b, 0x00702d00, 0x009c1240,
+  0x00e20001, 0x00122100, 0x00ab001b, 0x004bb200, 0x009c1240, 0x00588200,
+  0x00a40501, 0x00eb0001, 0x007a4ca0, 0x001bba00, 0x004bb0fe, 0x009812b2,
+  0x009c22ad, 0x007a4d00, 0x00c0a03f, 0x009c12b2, 0x007a4ca8, 0x00eb0001,
+  0x001bba00, 0x00a3000b, 0x006bb0ff, 0x00433b00, 0x00d00090, 0x00b0300b,
+  0x00ab050b, 0x0070bd00, 0x009c1240, 0x00722210, 0x006220ff, 0x00ab0001,
+  0x00a40002, 0x004bb200, 0x00444200, 0x00b0b001, 0x00ab0006, 0x00b04002,
+  0x00a40004, 0x004bb200, 0x00444200, 0x00488200, 0x00b0b006, 0x00b04004,
+  0x00ab001c, 0x004bb200, 0x00a4001a, 0x00b0b01c, 0x00444200, 0x00eb0003,
+  0x00b0401a, 0x00a40d00, 0x0074b0a0, 0x00a300f4, 0x001b1001, 0x00e20001,
+  0x00122b00, 0x00402300, 0x009812d5, 0x00122001, 0x00740062, 0x00b020f5,
+  0x00b04d00, 0x00b090f2, 0x00d02410, 0x00e40001, 0x00144100, 0x006440ff,
+  0x00488400, 0x00a60d00, 0x0042601f, 0x004660e0, 0x00566002, 0x00c02000,
+  0x00b06d00, 0x009812ea, 0x00e20001, 0x00122110, 0x00588200, 0x00b06500,
+  0x00b090f2, 0x00d02410, 0x00a00502, 0x009c12f5, 0x0002053c, 0x00b0ceff,
+  0x00b08efe, 0x003ee002, 0x00ed02f2, 0x008c04f0, 0x00a81e01, 0x00ac1e01,
+  0x00d02410, 0x00a40501, 0x00b06d00, 0x0042401f, 0x00981313, 0x0042403f,
+  0x00c0201f, 0x0098131a, 0x00c0203f, 0x00981321, 0x00e60460, 0x0042401f,
+  0x00e40001, 0x00144200, 0x00a3000b, 0x00533400, 0x00266200, 0x00b0300b,
+  0x00a20600, 0x00721088, 0x00742c2e, 0x00b02600, 0x00144004, 0x00244100,
+  0x00e60001, 0x00166400, 0x00a20006, 0x00522600, 0x00b090f2, 0x00b02006,
+  0x00d02410, 0x00a20001, 0x00eb0001, 0x001bb100, 0x00522b00, 0x00b090f2,
+  0x00b02001, 0x00d02410, 0x00a20002, 0x00eb0001, 0x001bb100, 0x00522b00,
+  0x00b090f2, 0x00b02002, 0x00d02410, 0x00eb0001, 0x001bb100, 0x00a2001a,
+  0x00704c2d, 0x0098132a, 0x00522b00, 0x00b090f2, 0x00b0201a, 0x00d02410,
+  0x00a20004, 0x00522b00, 0x00b090f2, 0x00b02004, 0x00d02410, 0x00b08005,
+  0x00d00112, 0x00d80050, 0x00788c4c, 0x00981010, 0x00da8040, 0x00e600a0,
+  0x0076a023, 0x00a70aec, 0x00767060, 0x00d00090, 0x00a10600, 0x00b0600a,
+  0x00731c80, 0x00741df0, 0x00751c64, 0x00e20500, 0x00793484, 0x00299200,
+  0x00840400, 0x00f50000, 0x0007093c, 0x00d00090, 0x00d00008, 0x00b1f701,
+  0x00a00902, 0x0098148b, 0x00d00090, 0x00a70903, 0x00a20904, 0x00a60901,
+  0x007b7c5e, 0x007b283f, 0x006bb003, 0x0076b05a, 0x00ebffff, 0x00ed035f,
+  0x0041603f, 0x00c0101f, 0x009c19e4, 0x007a6c88, 0x001aa005, 0x00e20480,
+  0x002aa200, 0x00ed037f, 0x00ab0a04, 0x00a20a00, 0x008c09e4, 0x0040601f,
+  0x00b06901, 0x00981365, 0x00c0103f, 0x009813a2, 0x00d04715, 0x00e70001,
+  0x00d00008, 0x00400f00, 0x00a20001, 0x00177300, 0x00522700, 0x00a10903,
+  0x00b02001, 0x00a20905, 0x00a70902, 0x00307200, 0x008c2372, 0x0002073c,
+  0x00a10903, 0x00b0290c, 0x00b0290d, 0x00a20904, 0x00b01909, 0x00b0290a,
+  0x0004093c, 0x00b0deff, 0x003ee001, 0x00ed037d, 0x008c002b, 0x00ad1e01,
+  0x00d04911, 0x00d00008, 0x00400f00, 0x00a70002, 0x00eb0001, 0x0012b300,
+  0x00577200, 0x00b0a90e, 0x00b07002, 0x00b0090b, 0x00b06901, 0x00a00a0d,
+  0x008c1491, 0x00a60a0e, 0x00760210, 0x00a20a0f, 0x00ab0a07, 0x00722a10,
+  0x007bbc5b, 0x00b02a0f, 0x00a20b17, 0x00b00a14, 0x00b06a0e, 0x00840200,
+  0x00e6010f, 0x00b00a08, 0x00d0391c, 0x00e601a3, 0x00d0391c, 0x00e600d4,
+  0x00a2090f, 0x00b06a0d, 0x00720210, 0x00b00a13, 0x00b0290f, 0x00d04911,
+  0x00706c2d, 0x009c1440, 0x00d00090, 0x00ac090f, 0x00ed0450, 0x007c0210,
+  0x002dd300, 0x00eb04e0, 0x00b0c90f, 0x00a00b09, 0x009813c6, 0x00d00090,
+  0x00a10903, 0x00711c62, 0x00a2090e, 0x00522001, 0x00762c23, 0x00211600,
+  0x00b0290e, 0x0011100a, 0x00d00008, 0x00500f00, 0x00b0190b, 0x00a10902,
+  0x00a20901, 0x00702c3d, 0x009813c0, 0x00d00090, 0x00b0190c, 0x00d03d1f,
+  0x00e10001, 0x0072103c, 0x00b0090c, 0x00b02901, 0x00e10000, 0x00d03d1f,
+  0x00080b3c, 0x00a10903, 0x00d00004, 0x00b1f801, 0x00d00004, 0x00500f00,
+  0x00a20904, 0x0004093c, 0x00ed03d0, 0x008c002b, 0x00a10902, 0x00a20901,
+  0x00b0190c, 0x00702c3d, 0x009c13df, 0x00d00090, 0x00a10d00, 0x004110e0,
+  0x0002093c, 0x00b01d00, 0x00b00900, 0x0001033c, 0x00ed03de, 0x008c04f0,
+  0x00d04911, 0x00211003, 0x0011103e, 0x00111003, 0x00d00090, 0x00b0190d,
+  0x00b01902, 0x00a00b09, 0x009c1428, 0x00d00090, 0x00a10907, 0x00311002,
+  0x00a20b03, 0x00b01b09, 0x00782c44, 0x0042200f, 0x00188002, 0x00b02b03,
+  0x00b08909, 0x00a20b01, 0x00762c44, 0x0042200f, 0x00166002, 0x00b02b01,
+  0x00b06908, 0x00a10b00, 0x00a20b02, 0x00b01b04, 0x00b02b06, 0x00a10b01,
+  0x00a20b03, 0x00b01b05, 0x00e100be, 0x00b02b07, 0x00b01b08, 0x00a50b00,
+  0x00a70905, 0x0001073c, 0x00716200, 0x00715021, 0x0015503f, 0x00b21c00,
+  0x00a40b02, 0x00117010, 0x00718200, 0x00714021, 0x0014403f, 0x00b21c00,
+  0x00a70906, 0x0001073c, 0x00716200, 0x00715021, 0x0015503f, 0x00b21c00,
+  0x00117010, 0x00718200, 0x00714021, 0x0014403f, 0x00b21c00, 0x00a10b01,
+  0x0075121e, 0x0011103e, 0x00b05b00, 0x00b01b01, 0x00a20b03, 0x0074221e,
+  0x0012203e, 0x00a1090d, 0x00211010, 0x00b04b02, 0x00b02b03, 0x00b0190d,
+  0x00b01902, 0x00b0c90f, 0x00a10901, 0x00721ca8, 0x00e80001, 0x00a00900,
+  0x009c142e, 0x0071803c, 0x00168200, 0x00a5000b, 0x00555600, 0x00148300,
+  0x00b0500b, 0x00b01901, 0x00b04004, 0x00e10460, 0x00211200, 0x00a60d00,
+  0x00ab0100, 0x007b3088, 0x004660e0, 0x00566002, 0x00b0b100, 0x00b06d00,
+  0x00010a3c, 0x00d04911, 0x00ac090f, 0x007c0210, 0x00b0090b, 0x00eb04e0,
+  0x00080b3c, 0x00b0c90f, 0x00d00004, 0x00b1f801, 0x00d00004, 0x00500f00,
+  0x00a10902, 0x00a20b03, 0x00b0190c, 0x00b0190d, 0x00782c49, 0x00722d20,
+  0x00188002, 0x00b02b03, 0x00b02b07, 0x00b08909, 0x00a20b01, 0x00762c49,
+  0x00722d20, 0x00166002, 0x00b02b01, 0x00b02b05, 0x00b06908, 0x00a10b00,
+  0x00a20b02, 0x00b01b04, 0x00e100c0, 0x00b02b06, 0x00b01b08, 0x00a10901,
+  0x00721ca8, 0x00e80001, 0x00168200, 0x00a5000b, 0x00555600, 0x00148300,
+  0x00b0500b, 0x00b0401a, 0x00e10460, 0x00211200, 0x00a60350, 0x00ab0100,
+  0x007b3088, 0x004660e0, 0x00566002, 0x00b0b100, 0x00b06350, 0x00010a3c,
+  0x00d04911, 0x00d00008, 0x00400f00, 0x00e80460, 0x004a601f, 0x00218a00,
+  0x00a2000b, 0x00a70100, 0x00e50001, 0x00773088, 0x00155a00, 0x00b07100,
+  0x00777c2e, 0x00aa0006, 0x00177004, 0x00233700, 0x00e70001, 0x00177300,
+  0x00522500, 0x005aa700, 0x00b0200b, 0x00b0a006, 0x00d0361d, 0x0001033c,
+  0x0002093c, 0x00d00008, 0x00500f00, 0x00ed0491, 0x008c04f0, 0x00a2000a,
+  0x00712c23, 0x00722c60, 0x00ed0496, 0x008c04e7, 0x00d03311, 0x00a5001d,
+  0x00a3001e, 0x00355001, 0x00d00090, 0x00b0501d, 0x009c302a, 0x00142030,
+  0x008c14a0, 0x00722210, 0x00b0301d, 0x00d12040, 0x00e30001, 0x00133100,
+  0x00622300, 0x00311010, 0x00b02001, 0x00b01eff, 0x003ee001, 0x00ed04ab,
+  0x008c0861, 0x00a11e01, 0x00ed04ae, 0x008c08cb, 0x00d0021a, 0x00a20006,
+  0x00722e10, 0x009c14b3, 0x00d04c13, 0x00d12040, 0x00e30001, 0x00133100,
+  0x00622300, 0x00b01eff, 0x00b02efe, 0x00b0defd, 0x003ee003, 0x00ed04bd,
+  0x008c0861, 0x00ad1e01, 0x00a21e01, 0x00a11e01, 0x00500200, 0x009c14b3,
+  0x00d00090, 0x00a20006, 0x00722e00, 0x009c14c7, 0x00d0011b, 0x00d12040,
+  0x00e30001, 0x00133100, 0x00622300, 0x00b01eff, 0x00b02efe, 0x00b0defd,
+  0x003ee003, 0x00ed04d1, 0x008c08cb, 0x00ad1e01, 0x00a21e01, 0x00a11e01,
+  0x00500200, 0x009c14c7, 0x00d0011b, 0x00e300a0, 0x00731023, 0x00e40001,
+  0x00a10300, 0x00d21040, 0x009c34df, 0x00422000, 0x00840d00, 0x00144200,
+  0x00611400, 0x00742c22, 0x00b01300, 0x00533200, 0x0072244c, 0x0072403e,
+  0x00840d00, 0x00e300a0, 0x00731023, 0x00e40001, 0x00144200, 0x00a10300,
+  0x00511400, 0x00d00090, 0x00b01300, 0x00840d00, 0x00a30201, 0x0007033c,
+  0x0077005e, 0x00eb0450, 0x00ea0460, 0x002bb100, 0x00b07201, 0x00773d00,
+  0x00c0703f, 0x009c14fc, 0x00773ca8, 0x00d05010, 0x0047301f, 0x00c0701f,
+  0x009c1500, 0x00e70000, 0x00a9000b, 0x00e80001, 0x00188700, 0x0078003f,
+  0x00780020, 0x006880ff, 0x00499800, 0x00a40b00, 0x00b0900b, 0x00a60005,
+  0x00e70001, 0x00177100, 0x00777210, 0x006770ff, 0x00a80001, 0x00a90002,
+  0x00aa0006, 0x00488700, 0x00499700, 0x004aa700, 0x00b08001, 0x00a80004,
+  0x00b09002, 0x00488700, 0x00a9001a, 0x00499700, 0x00b0a006, 0x00b0901a,
+  0x00aa001c, 0x004aa700, 0x00b08004, 0x00b0a01c, 0x00a00200, 0x00d50050,
+  0x00455001, 0x00773c3f, 0x00555700, 0x0098152e, 0x00d00090, 0x00a700f4,
+  0x00181001, 0x00155800, 0x00407500, 0x0098152e, 0x00155001, 0x00740062,
+  0x00a70200, 0x00981537, 0x00773c3e, 0x00981537, 0x00177100, 0x00566700,
+  0x00e70003, 0x00747040, 0x00d0531f, 0x00a70200, 0x009c153b, 0x00740040,
+  0x00d0531f, 0x00547002, 0x00e70001, 0x00177110, 0x00566700, 0x00b04b00,
+  0x00b06005, 0x00b050f5, 0x00840d00, 0x00ec0001, 0x00da3040, 0x008c2547,
+  0x00d0001f, 0x0016ca00, 0x00eb0460, 0x00633600, 0x002bba00, 0x00e40500,
+  0x00ab0b00, 0x0079bc88, 0x00169004, 0x00244600, 0x0076bc2e, 0x009c15aa,
+  0x00d00090, 0x0017c900, 0x00a1001c, 0x00411700, 0x009c1544, 0x00d00090,
+  0x00a7040b, 0x00a1040e, 0x00401001, 0x009c155e, 0x00500700, 0x009c1544,
+  0x004110fe, 0x0076bc84, 0x00a8040c, 0x00b0140e, 0x00981544, 0x0075bcb8,
+  0x00255001, 0x00a1040f, 0x0016563e, 0x009c1569, 0x00e60001, 0x00751cc9,
+  0x00155002, 0x00d11070, 0x00211001, 0x00355100, 0x00305600, 0x00982544,
+  0x0006043c, 0x00b01eff, 0x00b02efe, 0x00b03efd, 0x00b04efc, 0x003ee004,
+  0x0071bc56, 0x0098157b, 0x00f40000, 0x00992580, 0x00d0571d, 0x00f00000,
+  0x00991580, 0x00ed057f, 0x008c04d7, 0x009c1587, 0x00d00090, 0x00d00090,
+  0x00a41e01, 0x00a31e01, 0x00a21e01, 0x00a11e01, 0x00d05414, 0x0075bc84,
+  0x00e40987, 0x007445f0, 0x00544900, 0x00745064, 0x00725084, 0x00b04300,
+  0x0071bcb8, 0x00981592, 0x007210b8, 0x0072c034, 0x00211001, 0x00111500,
+  0x0075bc3d, 0x0072503d, 0x005f2c00, 0x00a20603, 0x005f0200, 0x0075bc3d,
+  0x0098159c, 0x00222100, 0x0075bc60, 0x00a8060c, 0x00388100, 0x009c25a1,
+  0x0008003c, 0x00b05ac0, 0x00b02603, 0x00b0160b, 0x00b0860c, 0x00a41e01,
+  0x00a31e01, 0x00a21e01, 0x00a11e01, 0x00d05414, 0x00a8040d, 0x00983617,
+  0x0075bcb8, 0x00a70402, 0x00983617, 0x0077bc84, 0x00255001, 0x00a8040f,
+  0x0016573e, 0x009c15b5, 0x00e60001, 0x00d58670, 0x00982544, 0x00306010,
+  0x009835bb, 0x009c8544, 0x009c8544, 0x003707fe, 0x009835bf, 0x00e60001,
+  0x00166700, 0x0007043c, 0x00b03eff, 0x003ee001, 0x0071bc56, 0x009c15c7,
+  0x00f00000, 0x009915cc, 0x00d05c19, 0x00f50000, 0x009925cc, 0x00ed05cb,
+  0x008c04d7, 0x009c15d0, 0x00d00090, 0x00d00090, 0x00a31e01, 0x00d05414,
+  0x0075bc84, 0x00e4083a, 0x007445f0, 0x00544900, 0x00745064, 0x00746127,
+  0x0015c900, 0x00b04300, 0x00a9001b, 0x00599500, 0x0004073c, 0x00b0901b,
+  0x0070bc65, 0x00981618, 0x00e54002, 0x0071bcb8, 0x009815e3, 0x007510b8,
+  0x0075c034, 0x0071bc84, 0x007510a4, 0x0071bc3d, 0x0075103d, 0x005f2500,
+  0x00a20404, 0x00156002, 0x005f0200, 0x00af2800, 0x00366001, 0x009c15eb,
+  0x0076bc60, 0x0070bc3d, 0x008815f2, 0x00222500, 0x00a70402, 0x00a9040d,
+  0x00b06ac0, 0x00377500, 0x00399500, 0x009c360d, 0x00d00090, 0x00a90405,
+  0x00309700, 0x009825fd, 0x0009073c, 0x00a50401, 0x00b0940c, 0x00705c26,
+  0x0098160d, 0x00d00090, 0x00a50406, 0x00a10409, 0x00211500, 0x0078022f,
+  0x00b01409, 0x00b01403, 0x00b0deff, 0x003ee001, 0x00ed060c, 0x008c002b,
+  0x00ad1e01, 0x00a1000b, 0x0016ca00, 0x00611600, 0x00b02404, 0x00b0100b,
+  0x00b0940d, 0x00b0840f, 0x00b07402, 0x00a31e01, 0x00d05414, 0x00d05414,
+  0x0071bc84, 0x00c01000, 0x009c1629, 0x00e14102, 0x00e50310, 0x00715210,
+  0x005f2100, 0x00a20404, 0x00efeeee, 0x005f0200, 0x00a12800, 0x001f1000,
+  0x001f1038, 0x001f1030, 0x001f1028, 0x00e50004, 0x00d05e1e, 0x00e14112,
+  0x00e50110, 0x00715210, 0x005f2100, 0x00a20404, 0x00efffcc, 0x005f0200,
+  0x00a12800, 0x001f1000, 0x001f1030, 0x00e50004, 0x00d05e1e, 0x00a30020,
+  0x00a9001f, 0x00333001, 0x00d00090, 0x00b03020, 0x009c301e, 0x00d87040,
+  0x00b09020, 0x00982660, 0x00e20001, 0x00122800, 0x0009083c, 0x00199004,
+  0x00e20500, 0x00299200, 0x00677200, 0x00a0090b, 0x009c1660, 0x00f40000,
+  0x00aa0903, 0x00ab0902, 0x00991660, 0x0098363b, 0x00e100af, 0x00e20661,
+  0x00a00100, 0x009c101e, 0x00548050, 0x00742210, 0x00a20011, 0x00b04100,
+  0x00a30901, 0x00733c2f, 0x00723037, 0x005f0200, 0x005f0a00, 0x00e20080,
+  0x002aa200, 0x0013203e, 0x003bb200, 0x00b0a903, 0x00b0390b, 0x00b0b902,
+  0x00d0011e, 0x00ad090e, 0x00ab090b, 0x00ac090f, 0x00ff1000, 0x00a40d0a,
+  0x00a80d09, 0x00b040e9, 0x007f8c61, 0x00ff3000, 0x004f8080, 0x00b0e009,
+  0x00ae0d0f, 0x00a20d0b, 0x0098167b, 0x00d00090, 0x00d00090, 0x00ad1e01,
+  0x00aa1e01, 0x00a81e01, 0x00a71e01, 0x00a61e01, 0x00a51e01, 0x00a41e01,
+  0x00a31e01, 0x00a11e01, 0x00840200, 0x00e20680, 0x00a400ed, 0x00c04007,
+  0x009c174f, 0x00d00090, 0x00d00090, 0x00080f3c, 0x003bb001, 0x00b080eb,
+  0x00d00090, 0x009a8692, 0x00d00090, 0x00a00d13, 0x009c268e, 0x00d00090,
+  0x00d00090, 0x00b2ac00, 0x000a083c, 0x00d0671c, 0x00e4ffff, 0x000a083c,
+  0x00b04d13, 0x00d0671c, 0x00a50d06, 0x00105001, 0x009c2687, 0x00d00090,
+  0x00a100e9, 0x00745d08, 0x00b01d0a, 0x00761d00, 0x00374600, 0x00745d00,
+  0x00366400, 0x00577600, 0x00677500, 0x009826a1, 0x00d06817, 0x00a70d09,
+  0x00711c48, 0x00777c41, 0x003771fb, 0x00ff1000, 0x00a40d09, 0x00747041,
+  0x004f7003, 0x00b04d09, 0x00307004, 0x009c26b4, 0x00d00090, 0x00a400ed,
+  0x00e206b2, 0x00c04007, 0x009c174f, 0x00d00090, 0x003bb001, 0x00000f3c,
+  0x00307007, 0x009836be, 0x00ff2000, 0x00d00090, 0x00d00090, 0x00d00090,
+  0x00080f3c, 0x00ff3000, 0x000f083c, 0x00d06c15, 0x00a400ed, 0x00e206c2,
+  0x00c04007, 0x009c174f, 0x00d00090, 0x003bb001, 0x00080f3c, 0x00b0c90f,
+  0x00738d10, 0x00333001, 0x00705c3d, 0x009816ed, 0x00303004, 0x009826ed,
+  0x00708610, 0x009c26ed, 0x00d00090, 0x00a400ed, 0x00e206d3, 0x00c04007,
+  0x009c174f, 0x003bb001, 0x00333004, 0x00040f3c, 0x00044040, 0x00744201,
+  0x00748859, 0x001440be, 0x00788c5a, 0x00588001, 0x001880bf, 0x00a5090f,
+  0x00a20d0e, 0x00d55070, 0x00155002, 0x00255101, 0x00a00d13, 0x009826e5,
+  0x00355004, 0x00d00090, 0x00d00090, 0x00b28200, 0x00a80d04, 0x00255800,
+  0x00b24200, 0x00b25200, 0x00b02d0e, 0x00c01003, 0x009c16f9, 0x00d00090,
+  0x00a40d13, 0x009826f3, 0x00d06f16, 0x00444001, 0x00b2ac00, 0x00b04d13,
+  0x00e5fffc, 0x00e1ffff, 0x00d06f1b, 0x002510fd, 0x00d00090, 0x00303504,
+  0x00982706, 0x00d00090, 0x00a400ed, 0x00e20702, 0x00c04007, 0x009c174f,
+  0x003bb001, 0x00333004, 0x00080f3c, 0x00d06f1b, 0x00477003, 0x00357300,
+  0x00255101, 0x00ff1000, 0x00a40d09, 0x00745041, 0x004f5003, 0x00b04d09,
+  0x00301303, 0x0098173c, 0x00c05004, 0x009c1731, 0x00ff2000, 0x00d00090,
+  0x00d00090, 0x00d00090, 0x00080f3c, 0x00ff3000, 0x000f083c, 0x00d0731c,
+  0x00ff2000, 0x00d00090, 0x00d00090, 0x00d00090, 0x00040f3c, 0x00ff3000,
+  0x000f043c, 0x00155003, 0x00144500, 0x0015503d, 0x00330300, 0x009c2727,
+  0x00e30000, 0x00357500, 0x00355004, 0x00155003, 0x00144500, 0x00350500,
+  0x00144500, 0x00355020, 0x00188500, 0x00588400, 0x00d0731c, 0x00455003,
+  0x00305700, 0x0098271a, 0x00e20739, 0x00a400ed, 0x00c04007, 0x009c174f,
+  0x00d00090, 0x003bb001, 0x00080f3c, 0x00d00090, 0x00500100, 0x009c273f,
+  0x00ea0000, 0x00211001, 0x00111003, 0x00310100, 0x00188100, 0x00211020,
+  0x001aa100, 0x00310100, 0x001aa100, 0x00211020, 0x00188100, 0x00e40001,
+  0x00588a00, 0x00b04d13, 0x00b080eb, 0x00e2067c, 0x00d06815, 0x00b0c90f,
+  0x00b02d0b, 0x00b0b90b, 0x00ff2000, 0x00b01eff, 0x00b03efe, 0x00b04efd,
+  0x00b05efc, 0x00b06efb, 0x00b07efa, 0x00b08ef9, 0x00b0aef8, 0x00b0def7,
+  0x003ee009, 0x00a100e9, 0x00a40d09, 0x00b01d0a, 0x00b0ed0f, 0x00050f3c,
+  0x00754100, 0x00ae0009, 0x00b05d09, 0x00a0090b, 0x009c1331, 0x00e400af,
+  0x00e80001, 0x00b00400, 0x00a10002, 0x0071803f, 0x00b00002, 0x00b01003,
+  0x00d03311, 0x00a2090e, 0x00ff1000, 0x007f2c61, 0x00ff3000, 0x005f0200,
+  0x00500a00, 0x009c1777, 0x00fa0000, 0x00ec04e0, 0x00ed0008, 0x00a4090b,
+  0x00a6090f, 0x00774cca, 0x00881781, 0x003dd700, 0x00500f00, 0x00377001,
+  0x009c377e, 0x00402001, 0x009c1786, 0x00d00090, 0x00772c41, 0x00244700,
+  0x00774cc2, 0x00a0090c, 0x008c178d, 0x00774d00, 0x0005073c, 0x00277003,
+  0x0017703e, 0x003dd700, 0x00a10c09, 0x00ab0c00, 0x00311700, 0x00a20c01,
+  0x00b01c09, 0x00a40c02, 0x00a10c03, 0x00aa0909, 0x00a80908, 0x00500700,
+  0x009837c0, 0x00d00090, 0x00d00090, 0x00a30c08, 0x009c17a3, 0x00e300c0,
+  0x00ab0c04, 0x00a20c05, 0x00a40c06, 0x00b03c08, 0x00a10c07, 0x00333001,
+  0x00d00090, 0x00b03c08, 0x00530f00, 0x00a0090c, 0x008c17af, 0x003505fc,
+  0x009827af, 0x00155003, 0x00133500, 0x00350500, 0x00133500, 0x00350500,
+  0x00783210, 0x0078b021, 0x001bb03f, 0x007b203f, 0x0012203f, 0x00133030,
+  0x007a3210, 0x007a4021, 0x0014403f, 0x0074103f, 0x0011103f, 0x00b28600,
+  0x00b2a600, 0x00377001, 0x009c379b, 0x00d00090, 0x00b0bc00, 0x00b02c01,
+  0x00b04c02, 0x00b01c03, 0x003dd001, 0x009827ca, 0x00d00090, 0x00d00090,
+  0x00500f00, 0x00d07c14, 0x00fa2000, 0x00a2090e, 0x0042200e, 0x00b0090b,
+  0x0047f080, 0x00522700, 0x00b0690f, 0x00b0290e, 0x00d04911, 0x00d77040,
+  0x00e90500, 0x007c7484, 0x002cc900, 0x00e90016, 0x00a50c0b, 0x00705d00,
+  0x009c1839, 0x00d00090, 0x00ab0c0c, 0x008c3816, 0x00a20c01, 0x00702c3c,
+  0x00981839, 0x00eb04e0, 0x00a90c0f, 0x00a30c0d, 0x00a80b09, 0x00981815,
+  0x00e20016, 0x00a40b00, 0x00a50b01, 0x00a60b02, 0x00a70b03, 0x00d09270,
+  0x009c2815, 0x00e20008, 0x00308008, 0x009c27f1, 0x0002083c, 0x00aa0b08,
+  0x009c17f9, 0x00ea00c0, 0x00a50b05, 0x00b0ab08, 0x00a40b04, 0x00a60b06,
+  0x00a70b07, 0x003aa001, 0x00d00090, 0x00b0ab08, 0x00aa0c08, 0x007a4021,
+  0x0014403f, 0x0074503f, 0x0015503f, 0x00b2a900, 0x00aa0c09, 0x007a6021,
+  0x0016603f, 0x0076703f, 0x0017703f, 0x00b2a900, 0x00233008, 0x00388001,
+  0x00322001, 0x009c37f1, 0x00d00090, 0x00b04b00, 0x00b05b01, 0x00b06b02,
+  0x00b07b03, 0x00b03c02, 0x00b03c0d, 0x00b08b09, 0x00b09c0f, 0x00d08319,
+  0x00aa0c0f, 0x00a80c01, 0x00718c3b, 0x0098181d, 0x00f40000, 0x00992839,
+  0x00d0811f, 0x00f00000, 0x00991839, 0x00d0a970, 0x009c2839, 0x00d00090,
+  0x00ed0824, 0x008c04d7, 0x00981839, 0x00e4076f, 0x007445f0, 0x00544750,
+  0x00a90c03, 0x00b04300, 0x00788c2f, 0x00728037, 0x0046901f, 0x005f2051,
+  0x004f90e0, 0x003606e0, 0x00306b00, 0x00983833, 0x00060b3c, 0x00756100,
+  0x003bb600, 0x00299600, 0x00b0bc0c, 0x00b09c03, 0x00b05c0b, 0x00d00211,
+  0x00f50000, 0x00500a00, 0x009c183e, 0x00f00000, 0x00761d27, 0x00a40901,
+  0x00000f3c, 0x00366001, 0x009c1840, 0x00724ca0, 0x0030201f, 0x009c1847,
+  0x00724ca8, 0x00e60001, 0x00a8000b, 0x001b6200, 0x00568b00, 0x00e80001,
+  0x00b0600b, 0x00ab001b, 0x00188300, 0x006bb800, 0x00a70902, 0x00b0b01b,
+  0x009c385f, 0x0001033c, 0x00b00902, 0x00b01eff, 0x00b02efe, 0x00b0aefd,
+  0x003ee003, 0x0002093c, 0x00ed085c, 0x008c04f0, 0x00aa1e01, 0x00a21e01,
+  0x00a11e01, 0x00010a3c, 0x00d04911, 0x00b0deff, 0x003ee001, 0x00771484,
+  0x00e50500, 0x00277500, 0x0005013c, 0x00ab0701, 0x0071bc3b, 0x0098186d,
+  0x00f40000, 0x009928a0, 0x00d08710, 0x00f00000, 0x009918a0, 0x00d00090,
+  0x00a90703, 0x00a3070b, 0x00a8070f, 0x00a4070e, 0x00404001, 0x009c1879,
+  0x00500300, 0x009c18a0, 0x00d00090, 0x00aa070c, 0x009818a0, 0x00738d07,
+  0x004330fc, 0x00303022, 0x009828a9, 0x0040a080, 0x009818a9, 0x00d00090,
+  0x0040907f, 0x009c18a9, 0x00d48070, 0x00d00090, 0x00303421, 0x009838a4,
+  0x00ed088a, 0x008c04d7, 0x009818a0, 0x00e40987, 0x007445f0, 0x00544550,
+  0x00a10008, 0x0076bc2f, 0x00716037, 0x00b04300, 0x005f1200, 0x005f0900,
+  0x00a4070e, 0x00740020, 0x00a30701, 0x00b0470e, 0x00733c26, 0x00133007,
+  0x00299300, 0x00e30080, 0x003aa300, 0x00b09703, 0x00b0a70c, 0x00b0370b,
+  0x00ad1e01, 0x00d00090, 0x00d00090, 0x00840d00, 0x0076bca0, 0x00e40001,
+  0x0074403f, 0x00144600, 0x009828a0, 0x00d48070, 0x003043f6, 0x009c28a0,
+  0x00ed08ae, 0x008c04d7, 0x009818a0, 0x00e40951, 0x007445f0, 0x00544550,
+  0x0076bc2f, 0x00726037, 0x005f2051, 0x004f90e0, 0x00b04300, 0x0043901f,
+  0x00a4070e, 0x00740020, 0x00d00090, 0x00b0470e, 0x00a40701, 0x00744c26,
+  0x009818c0, 0x003993e0, 0x003403e0, 0x003aa400, 0x009c28c4, 0x000a003c,
+  0x00a3070b, 0x00743cca, 0x00d00090, 0x003304f8, 0x00133002, 0x007340ca,
+  0x00d0891d, 0x00741484, 0x00e70500, 0x00244700, 0x00e20020, 0x00a0040b,
+  0x009c1924, 0x00d00090, 0x00ac0401, 0x0070cc3a, 0x009c18d8, 0x00f00000,
+  0x00991924, 0x00d08d1a, 0x00f50000, 0x00992924, 0x00d00090, 0x00a6040f,
+  0x00a7040d, 0x00a50404, 0x0043501f, 0x009c1925, 0x00207080, 0x00982925,
+  0x00d76270, 0x00982925, 0x009c8924, 0x009c8924, 0x00e20080, 0x00d00090,
+  0x00a70007, 0x007ccc2f, 0x0077c037, 0x005f0700, 0x005f0500, 0x00d02000,
+  0x00af2600, 0x00a70402, 0x00b0640f, 0x00255200, 0x00377200, 0x00b05404,
+  0x00b07402, 0x009c38ff, 0x00d00090, 0x00b00402, 0x0002043c, 0x00b0deff,
+  0x003ee001, 0x00ed08fd, 0x008c04f0, 0x00ad1e01, 0x00d09214, 0x00a3040d,
+  0x00333200, 0x009c3923, 0x00e50001, 0x00155100, 0x00a2001c, 0x00422500,
+  0x009c1923, 0x00d00090, 0x00a20405, 0x00760210, 0x00302700, 0x0088290d,
+  0x0002073c, 0x00b0640f, 0x00b0240c, 0x00b0240d, 0x00b07402, 0x00a2040a,
+  0x00a70409, 0x00a30407, 0x00a50406, 0x00222300, 0x00277500, 0x00b0240a,
+  0x00b07409, 0x00b02404, 0x00b07403, 0x0003013c, 0x0001073c, 0x00b0deff,
+  0x003ee001, 0x00ed0921, 0x008c002b, 0x00ad1e01, 0x00d09214, 0x00b0340d,
+  0x00840d00, 0x00a2040d, 0x00a0040b, 0x009c1924, 0x00222300, 0x00d86070,
+  0x00981924, 0x00188002, 0x00288300, 0x004880fc, 0x00308020, 0x00983931,
+  0x00e80020, 0x00308200, 0x00982936, 0x00392001, 0x0008023c, 0x00d09317,
+  0x00398001, 0x00e74252, 0x007ccc2f, 0x0077c037, 0x005f0700, 0x000f9337,
+  0x004f50e0, 0x004a30fc, 0x003b8a00, 0x00500a00, 0x00981946, 0x005f0000,
+  0x003aa004, 0x009c3941, 0x00d00090, 0x00d00090, 0x00af2600, 0x003bb004,
+  0x009c3946, 0x003a08e0, 0x004aa0fc, 0x0098194f, 0x005f0000, 0x003aa004,
+  0x009c394c, 0x00328300, 0x00d08e1f, 0x00a2090e, 0x00ff1000, 0x007f2c61,
+  0x00ff3000, 0x005f0200, 0x00500a00, 0x009c1959, 0x00fa0000, 0x00ab090b,
+  0x004220fe, 0x00a8090f, 0x00b0290e, 0x0075bcca, 0x00981964, 0x00d00090,
+  0x00d00090, 0x00500f00, 0x00355001, 0x008c3961, 0x0075bcc2, 0x0098196b,
+  0x00d00090, 0x00d00090, 0x00b2f800, 0x00355001, 0x008c3968, 0x00b0090b,
+  0x0002073c, 0x00010a3c, 0x00ed0970, 0x008c04e7, 0x00a5090e, 0x00981985,
+  0x00ff2000, 0x0045500f, 0x00d00090, 0x00d00090, 0x004bf080, 0x00555b00,
+  0x00a4090c, 0x0098197d, 0x00d00090, 0x00b0590e, 0x00d09815, 0x00755c41,
+  0x00d00090, 0x003505fc, 0x00155003, 0x00350500, 0x001bb500, 0x00d00090,
+  0x00b2b800, 0x00b0890f, 0x00d03311, 0x00a2090e, 0x00ff1000, 0x007f2c61,
+  0x00ff3000, 0x005f0200, 0x00500a00, 0x009c198f, 0x00fa0000, 0x004220fe,
+  0x00a8090f, 0x00b0290e, 0x00eb0998, 0x007c1c64, 0x002ccb00, 0x00ab090b,
+  0x00a20908, 0x00840c00, 0x00d09b19, 0x00d09b10, 0x00d09a1c, 0x00d09a17,
+  0x00d09a12, 0x00ec099e, 0x00d00008, 0x00b2f800, 0x003bb020, 0x00d09c12,
+  0x00ec09a3, 0x00d00004, 0x00b2f800, 0x003bb010, 0x00d09c12, 0x00ec09a8,
+  0x00d00002, 0x00b2f800, 0x003bb008, 0x00d09c12, 0x00ec09ad, 0x00b2f800,
+  0x003bb004, 0x00d09c12, 0x00ec09b1, 0x00122030, 0x0072f210, 0x003bb002,
+  0x008c19c2, 0x00d00090, 0x00d00090, 0x00b22800, 0x00d09c12, 0x00ec09ba,
+  0x00122038, 0x0072f118, 0x003bb001, 0x008c19c2, 0x00d00090, 0x00d00090,
+  0x00b22800, 0x00d09c12, 0x00a50aec, 0x00355700, 0x00801c00, 0x00b02908,
+  0x00b0b90b, 0x00500b00, 0x009c19cd, 0x0002073c, 0x00010a3c, 0x00ed09cd,
+  0x008c04e7, 0x00a5090e, 0x009819e2, 0x00ff2000, 0x00d00090, 0x00d00090,
+  0x0045500f, 0x004bf080, 0x00a4090c, 0x009819da, 0x00555b00, 0x00d00090,
+  0x00b0590e, 0x00d09e12, 0x00755c41, 0x00d00090, 0x003505fc, 0x00155003,
+  0x00350500, 0x001bb500, 0x00d00090, 0x00b2b800, 0x00b0890f, 0x00d03311,
+  0x00707cda, 0x009819eb, 0x00702cda, 0x009819eb, 0x0070bcda, 0x009819eb,
+  0x00840d00, 0x0076002f, 0x00840d00, 0x00f50000, 0x00500a00, 0x009c19f1,
+  0x00f00000, 0x00ec04e0, 0x00a7090b, 0x00a50c0a, 0x007d7ca3, 0x00ab0c00,
+  0x00a20c01, 0x00a40c02, 0x00a10c03, 0x00a70c08, 0x009c3a04, 0x00e700c0,
+  0x00ab0c04, 0x00a20c05, 0x00a40c06, 0x00a10c07, 0x00b0bc00, 0x00b02c01,
+  0x00b04c02, 0x00b01c03, 0x00377001, 0x00a30908, 0x00a60909, 0x00b07c08,
+  0x0048f500, 0x004af500, 0x00783880, 0x007a6880, 0x0078b021, 0x007a4021,
+  0x001bb03f, 0x0014403f, 0x007b203f, 0x0074103f, 0x00a6090f, 0x0011103f,
+  0x0012203f, 0x00b28600, 0x00b2a600, 0x003dd001, 0x00b0690f, 0x008c19f9,
+  0x00b0bc00, 0x00b02c01, 0x00b04c02, 0x00b01c03, 0x00b0090b, 0x00d04911,
+  0x00d77040, 0x00e10500, 0x007b7484, 0x002bb100, 0x00d00090, 0x00a40b0b,
+  0x009c1a52, 0x00d00090, 0x00a10b0f, 0x00a80b03, 0x00d91070, 0x00a50b01,
+  0x002009e0, 0x009c2a52, 0x00d00090, 0x00ea0004, 0x00a90b0c, 0x00883a52,
+  0x00329020, 0x008c2a35, 0x007a9c43, 0x00715c3b, 0x00981a3a, 0x00f40000,
+  0x00992a52, 0x00d0a31c, 0x00f00000, 0x00991a52, 0x00ed0a3e, 0x008c04d7,
+  0x00981a52, 0x00e409ed, 0x007445f0, 0x00544730, 0x00755c2f, 0x00b04300,
+  0x00e10000, 0x00a30b06, 0x00725037, 0x00211008, 0x005f2031, 0x004f80f8,
+  0x00288300, 0x003aa001, 0x008c3a47, 0x00399100, 0x00741500, 0x00b09b0c,
+  0x00b08b03, 0x00b04b0b, 0x00d00214
+};
+
+#define TABLE_LENGTH(x) (sizeof(x)/sizeof(*(x)))
+#define STB7109_C3_IMEM_REGION_LENGTH  0x1000
+
+#define STB7109_C3_DMEM_REGION_LENGTH  0x800
+
+#define STB7109_C3_IMEM_FIRMWARE_SZ  TABLE_LENGTH(STB7109_C3_IMEM_REGION)
+#define STB7109_C3_DMEM_FIRMWARE_SZ  TABLE_LENGTH(STB7109_C3_DMEM_REGION)
+
+#endif
Index: linux/include/linux/stm/710x_fdma.h
===================================================================
--- /dev/null
+++ linux/include/linux/stm/710x_fdma.h
@@ -0,0 +1,434 @@
+/*
+ *  STb710x FDMA Driver
+ *  Copyright (c) 2005 STMicroelectronics Limited.
+ *  Author: Mark Glaisher <Mark.Glaisher@st.com>
+ *
+ *   This program is free software; you can redistribute it and/or modify
+ *   it under the terms of the GNU General Public License as published by
+ *   the Free Software Foundation; either version 2 of the License, or
+ *   (at your option) any later version.
+ *
+ *   This program is distributed in the hope that it will be useful,
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *   GNU General Public License for more details.
+ *
+ *   You should have received a copy of the GNU General Public License
+ *   along with this program; if not, write to the Free Software
+ *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
+ *
+ */
+
+#ifndef STB7100_FDMA_H
+#define STB7100_FDMA_H
+
+
+#include <linux/interrupt.h>
+
+#include <linux/device.h>
+#include <linux/firmware.h>
+
+#include <linux/dmapool.h>
+#include <linux/stm/stm-dma.h>
+
+/* Memory section offsets from FDMA base address */
+#define STB7100_FDMA_BASE 					0x19220000
+#define STB7109_FDMA_BASE 					STB7100_FDMA_BASE
+
+#define STB7100_DMEM_OFFSET            				0x8000     /* Contains the control word interface */
+#define STB7100_IMEM_OFFSET            				0xC000     /* Contains config data */
+
+#define STB7109_DMEM_OFFSET					STB7100_DMEM_OFFSET
+#define STB7109_IMEM_OFFSET					STB7100_IMEM_OFFSET
+
+#define IMEM_REGION_LENGTH					0xa00
+#define DMEM_REGION_LENGTH					0x600
+
+#define NODE_DATA_OFFSET					0x40
+#define CMD_STAT_OFFSET       					0x04
+
+#define FDMA2_ID						0x0000   /* Block Id */
+#define FDAM2_VER						0x0004
+#define FDMA2_ENABLE_REG					0x0008
+#define FDMA2_CLOCKGATE						0x000C       /* Clock enable control */
+#define FDMA2_REV_ID						0x8000
+
+/*here our our current node params region */
+#define STB7100_FDMA_CMD_STATn_REG 				0x8040 /*(+ n *0x04) */
+#define STB7100_FDMA_PTR_REG 					0x9180 /*(+ n * 0x40)*/
+#define STB7100_FDMA_COUNT_REG					0x9188/* (+ n * 0x40)*/
+#define STB7100_FDMA_SADDR_REG					0x918c/* (+ n * 0x40)*/
+#define STB7100_FDMA_DADDR_REG					0x9190/* (+ n * 0x40)*/
+#define STB7100_FDMA_REQ_CTLn_REG				0x9780 /*(+ n *0x04) */
+
+#define STB7109_FDMA_CMD_STATn_REG				0x9140/* (+ n *0x04) */
+#define STB7109_FDMA_PTR_REG					0x9400 /*(+ n * 0x40)*/
+#define STB7109_FDMA_COUNT_REG					0x9408 /*(+ n * 0x40)*/
+#define STB7109_FDMA_SADDR_REG					0x940c /*(+ n * 0x40)*/
+#define STB7109_FDMA_DADDR_REG					0x9410 /*(+ n * 0x40)*/
+#define STB7109_FDMA_REQ_CTLn_REG				0x9180/* (+ n *0x04) */
+
+#define FDMA2_SYNCREG                 				0xBF88
+#define FDMA2_CMD_MBOX_STAT_REG					0xBFC0
+#define FDMA2_CMD_MBOX_SET_REG					0xBFC4
+#define FDMA2_CMD_MBOX_CLR_REG					0xBFC8
+#define FDMA2_CMD_MBOX_MASK_REG 				0xBFCC
+
+#define FDMA2_INT_STAT_REG					0xBFD0
+#define FDMA2_INT_SET_REG					0xBFD4
+#define FDMA2_INT_CLR_REG					0xBFD8
+#define FDMA2_INT_MASK_REG					0xBFDC
+
+
+#define CHANNEL_NOFLUSH 				0
+#define CHANNEL_FLUSH   				1
+#define CHAN_ALL_ENABLE 				3
+
+/**cmd stat vals*/
+#define SET_NODE_COMP_PAUSE		    		1 <<30
+#define SET_NODE_COMP_IRQ				1 <<31
+#define NODE_ADDR_STATIC 				0x01
+#define NODE_ADDR_INCR	 				0x02
+
+#define SOURCE_ADDR 					0x05
+#define DEST_ADDR   					0x07
+
+#define CMDSTAT_FDMA_START_CHANNEL  			1
+#define CMDSTAT_FDMA_PAUSE_CHANNEL  			3
+
+
+#define LINUX_FDMA_STB7100_IRQ_VECT			140
+#define LINUX_FDMA_STB7109_IRQ_VECT			LINUX_FDMA_STB7100_IRQ_VECT
+#define STB7100_FDMA_CHANS              		16
+#define STB7109_FDMA_CHANS              		STB7100_FDMA_CHANS
+
+#define FDMA_COMPLETE_OK				0
+#define FDMA_COMPLETE_ERR				1
+
+/*******************************/
+/*MBOX SETUP VALUES*/
+
+#define MBOX_CMD_PAUSE_FLUSH_CHANNEL 			3
+#define MBOX_CMD_PAUSE_CHANNEL		 		2
+#define MBOX_CMD_START_CHANNEL       			1
+#define CLEAR_WORD					0XFFFFFFFF
+
+#define IS_PACED_CHANNEL_SET(flags)(flags & 0x1f)
+#define ASSERT_NODE_BUS_ADDR(addr)( (((PXSEG(addr) == P0SEG) && addr))?1:0)
+#define IS_CHANNEL_PAUSED(ch)(stb710x_get_engine_status(ch)== FDMA_CHANNEL_PAUSED ?1:0)
+#define IS_CHANNEL_RUNNING(ch)(stb710x_get_engine_status(ch)== FDMA_CHANNEL_RUNNING ?1:0)
+#define IS_CHANNEL_IDLE(ch)(stb710x_get_engine_status(ch)== FDMA_CHANNEL_IDLE ?1:0)
+#define IS_TRANSFER_SG(parms)((MODE_SRC_SCATTER==parms->mode)||(MODE_DST_SCATTER==parms->mode )?1:0)
+#define MBOX_STR_CMD(ch) (MBOX_CMD_START_CHANNEL << (ch*2))
+#define CHAN_OTB(ch_num)( ((ch_num >= chip.ch_min) && (ch_num <= chip.ch_max)) ? 1:0 )
+#define IS_CHANNEL_RESERVED(ch)(chip.channel[ch].reserved==1)
+#define CMD_STAT_REG(ch)(chip.io_base + chip.regs.fdma_cmd_statn + (ch * CMD_STAT_OFFSET))
+#define CH_PTR_REG(ch)(chip.io_base + chip.regs.fdma_ptrn  + (ch * CMD_STAT_OFFSET))
+
+#define IS_NODE_MALLOCED(priv)((priv.node!=0))
+
+
+#define IS_NODELIST_EQUAL(priv)((priv.sublist_nents == priv.alloced_nents))
+
+typedef void (*pf)(void * data);
+
+#define CHANNEL_ERR_IRQ 		3
+#define CHANNEL_IRQ     		1
+
+#define FDMA_CHANNEL_IDLE 		0
+#define FDMA_CHANNEL_RUNNING 		2
+#define FDMA_CHANNEL_PAUSED 		3
+
+/*FDMA Channel FLAGS*/
+/*values below D28 are reserved for REQ_LINE parameter*/
+#define REQ_LINE_MASK 	0x1f
+
+#define CHAN_NUM(chan) ((chan) - chip.channel)
+
+typedef struct fdma_fw_s {
+	unsigned long * data_reg;
+	unsigned long * imem_reg;
+	unsigned long imem_fw_sz;
+	unsigned long dmem_fw_sz;
+	unsigned long imem_len;
+	unsigned long dmem_len;
+}fdma_fw_data_t;
+
+typedef struct fdma_platform_device_data {
+	void * req_line_tbl_adr;
+	void * registers_ptr;
+	int    cpu_subtype;
+	int    cpu_rev;
+	int    min_ch_num;
+	int    max_ch_num;
+	int    nr_reqlines;
+	char  * fw_device_name;
+	unsigned long fdma_base;
+	unsigned long irq_vect;
+	fdma_fw_data_t fw;
+}fdma_platform_device_data;
+
+typedef struct fdma_llu_entry {
+	u32 next_item;
+	u32 control;
+	u32 size_bytes;
+	u32 saddr;
+	u32 daddr;
+	u32 line_len;
+	u32 sstride;
+	u32 dstride;
+}fdma_llu_entry;
+
+typedef struct channel_status{
+	char	ch_term;
+	char	ch_pause;
+	char	is_xferring;
+	char 	reserved;
+	char 	callback_only;
+
+	pf 	comp_cb;
+	void	*comp_cb_param;
+	int	comp_cb_isr;
+
+	pf	err_cb;
+	void	*err_cb_param;
+	int	err_cb_isr;
+
+	struct  dma_channel * cur_cfg;
+	struct stm_dma_params params;
+	struct tasklet_struct fdma_complete;
+	struct tasklet_struct fdma_error;
+}channel_status;
+
+typedef struct fmdareq_RequestConfig_s
+{
+    char Index;         /* Request line index number */
+    char Access;        /* Access type: Read or Write */
+    char OpCode;        /* Size of word access */
+    char Count;         /* Number of transfers per request */
+    char Increment;     /* Whether to increment. On 5517, number of bytes to increment per request */
+    char HoldOff;       /* Holdoff value between req signal samples (clock cycles)*/
+    char Initiator;     /* Use the default value */
+}fdmareq_RequestConfig_t;
+
+
+
+
+typedef struct fdma_regs_s
+{
+	unsigned long fdma_id;
+	unsigned long fdma_ver;
+	unsigned long fdma_en;
+	unsigned long fdma_rev_id;
+	unsigned long fdma_cmd_statn;
+	unsigned long fdma_ptrn;
+	unsigned long fdma_cntn;
+	unsigned long fdma_saddrn;
+	unsigned long fdma_daddrn;
+	unsigned long fdma_req_ctln;
+	unsigned long fdma_cmd_sta;
+	unsigned long fdma_cmd_set;
+	unsigned long fdma_cmd_clr;
+	unsigned long fdma_cmd_mask;
+	unsigned long fdma_int_sta;
+	unsigned long fdma_int_set;
+	unsigned long fdma_int_clr;
+	unsigned long fdma_int_mask;
+	unsigned long fdma_sync_reg;
+	unsigned long fdma_clk_gate;
+	unsigned long fdma_imem_region;
+	unsigned long fdma_dmem_region;
+}fdma_regs_t;
+
+typedef struct fdma_chip{
+	channel_status			channel[CONFIG_MAX_STM_DMA_CHANNEL_NR +1];
+	spinlock_t 			fdma_lock;
+	spinlock_t 			channel_lock;
+	wait_queue_head_t   		irq_check;
+	u32				io_base;
+	u32				firmware_loaded;
+	u8				num_req_lines;
+	u8				ch_min;
+	u8 				ch_max;
+	u8				irq_val;
+	u32                     	cpu_subtype;
+    	u32				cpu_rev;
+	struct dma_pool 		*llu_pool;
+	wait_queue_head_t		fw_load_q;
+	struct device 			dev;
+	struct 	platform_device 	*platform_dev;
+	fdma_regs_t  			regs;
+	fdmareq_RequestConfig_t		*req_tbl;
+	int				irq_enable_ok ;
+	struct dma_info 		*info;
+	char *				fw_name;
+	fdma_fw_data_t			fw;
+}fdma_chip;
+
+/*---- Constants for use in defining the request signals -----*/
+
+/* Access */
+#define ENABLE_FLG      1
+#define DISABLE_FLG     0
+
+/* Access */
+#define READ            0
+#define WRITE           1
+
+/* Opcodes */
+#define OPCODE_1        0x00
+#define OPCODE_2        0x01
+#define OPCODE_4        0x02
+#define OPCODE_8        0x03
+#define OPCODE_16       0x04
+#define OPCODE_32       0x05
+/* Increment Size */
+#define INCSIZE_0       0
+#define INCSIZE_4       4
+#define INCSIZE_8       8
+#define INCSIZE_16      16
+#define INCSIZE_32      32
+/* Utility values */
+#define UNUSED       	0xff
+
+typedef enum __stb7100_fdma_req_ids {
+/*0*/	STB7100_FDMA_REQ_SPDIF_TEST =	0,
+/*1*/	STB7100_FDMA_REQ_NOT_CONN_1,
+/*2*/	STB7100_FDMA_REQ_NOT_CONN_2,
+/*3*/	STB7100_FDMA_REQ_VIDEO_HDMI,
+/*4*/	STB7100_FDMA_REQ_DISEQC_HALF_EMPTY,
+/*5*/	STB7100_FDMA_REQ_DISEQC_HALF_FULL,
+/*6*/	STB7100_FDMA_REQ_SH4_SCIF_RX,
+/*7*/	STB7100_FDMA_REQ_SH4_SCIF_TX,
+/*8*/	STB7100_FDMA_REQ_SSC_0_RX,
+/*9*/	STB7100_FDMA_REQ_SSC_1_RX,
+/*10*/	STB7100_FDMA_REQ_SSC_2_RX,
+/*11*/	STB7100_FDMA_REQ_SSC_0_TX,
+/*12*/	STB7100_FDMA_REQ_SSC_1_TX,
+/*13*/	STB7100_FDMA_REQ_SSC_2_TX,
+/*14*/	STB7100_FDMA_REQ_UART_0_RX,
+/*15*/	STB7100_FDMA_REQ_UART_1_RX,
+/*16*/	STB7100_FDMA_REQ_UART_2_RX,
+/*17*/	STB7100_FDMA_REQ_UART_3_RX,
+/*18*/	STB7100_FDMA_REQ_UART_0_TX,
+/*19*/	STB7100_FDMA_REQ_UART_1_TX,
+/*20*/	STB7100_FDMA_REQ_UART_2_TX,
+/*21*/	STB7100_FDMA_REQ_UART_3_TX,
+/*22*/	STB7100_FDMA_REQ_EXT_PIO_0,
+/*23*/	STB7100_FDMA_REQ_EXT_PIO_1,
+/*24*/	STB7100_FDMA_REQ_CPXM_DECRYPT,
+/*25*/	STB7100_FDMA_REQ_CPXM_ENCRYPT,
+/*26*/	STB7100_FDMA_REQ_PCM_0,
+/*27*/	STB7100_FDMA_REQ_PCM_1,
+/*28*/	STB7100_FDMA_REQ_PCM_READ,
+/*29*/	STB7100_FDMA_REQ_SPDIF,
+/*30*/	STB7100_FDMA_REQ_SWTS,
+/*31*/	STB7100_FDMA_REQ_UNUSED
+}stb7100_fdma_req_ids;
+
+typedef enum __stb7109_fdma_reqids {
+	STB7109_FDMA_REQ_UNUSED =0,//0
+	STB7109_FDMA_DMA_REQ_HDMI_AVI,
+	STB7109_FDMA_REQ_DISEQC_HALF_EMPTY,
+	STB7109_FDMA_REQ_DISEQC_HALF_FULL,
+	STB7109_FDMA_REQ_SH4_SCIF_RX,
+	STB7109_FDMA_REQ_SH4_SCIF_TX,//5
+	STB7109_FDMA_REQ_SSC_0_RX,//6-8
+	STB7109_FDMA_REQ_SSC_1_RX,
+	STB7109_FDMA_REQ_SSC_2_RX,
+	STB7109_FDMA_REQ_SSC_0_TX,//9-11
+	STB7109_FDMA_REQ_SSC_1_TX,
+	STB7109_FDMA_REQ_SSC_2_TX,
+	STB7109_FDMA_REQ_UART_0_RX,//12-15
+	STB7109_FDMA_REQ_UART_1_RX,
+	STB7109_FDMA_REQ_UART_2_RX,
+	STB7109_FDMA_REQ_UART_3_RX,
+	STB7109_FDMA_REQ_UART_0_TX,//16-19
+	STB7109_FDMA_REQ_UART_1_TX,
+	STB7109_FDMA_REQ_UART_2_TX,
+	STB7109_FDMA_REQ_UART_3_TX,
+	STB7109_FDMA_REQ_REQ_EXT_PIO_0,//20
+	STB7109_FDMA_REQ_REQ_EXT_PIO_1,//21
+	STB7109_FDMA_REQ_CPXM_DECRYPT,
+	STB7109_FDMA_REQ_CPXM_ENCRYPT,
+	STB7109_FDMA_REQ_PCM_0=24,//24
+	STB7109_FDMA_REQ_PCM_1,
+	STB7109_FDMA_REQ_PCM_READ,
+	STB7109_FDMA_REQ_SPDIF,
+	STB7109_FDMA_REQ_SWTS_0,
+	STB7109_FDMA_REQ_SWTS_1,
+	STB7109_FDMA_REQ_SWTS_2
+}stb7109_fdma_req_ids;
+
+
+typedef volatile unsigned long device_t;
+
+#define DUMP_FDMA_CHANNEL(chan)\
+	(fdma_log("CHANNEL%d is \n CMD_STAT %x\n PTR %x\n CNT %x\n SADDR %x\n DADDR %x\n REQ_CTL %x\n", \
+		chan, \
+		(int)readl((chip.io_base + CMD_STAT_OFFSET * chan) + chip.regs.fdma_cmd_statn), \
+		(int)readl((chip.io_base + NODE_DATA_OFFSET * chan) + chip.regs.fdma_ptrn), \
+		(int)readl((chip.io_base + NODE_DATA_OFFSET * chan) + chip.regs.fdma_cntn), \
+		(int)readl((chip.io_base + NODE_DATA_OFFSET * chan) + chip.regs.fdma_saddrn), \
+		(int)readl((chip.io_base + NODE_DATA_OFFSET * chan) + chip.regs.fdma_daddrn), \
+		(int)readl((chip.io_base + CMD_STAT_OFFSET * chan) +chip.regs.fdma_req_ctln)))
+
+#define DUMP_FDMA_INTERFACE()(\
+	fdma_log(" FDMA_CMD_STA %x\n FDMA_CMD_SET %x\n FDMA_CMD_CLR %x\n FDMA_CMD_MASK %x\n FDMA_INT_STA %x\n FDMA_INT_SET %x\n FDMA_INT_CLR %x\n FDMA_INT_MASK %x\n", \
+		(int)readl(chip.io_base + chip.regs.fdma_cmd_sta),\
+		(int)readl(chip.io_base + chip.regs.fdma_cmd_set),\
+		(int)readl(chip.io_base + chip.regs.fdma_cmd_clr),\
+		(int)readl(chip.io_base + chip.regs.fdma_cmd_mask),\
+		(int)readl(chip.io_base + chip.regs.fdma_int_sta),\
+		(int)readl(chip.io_base + chip.regs.fdma_int_set),\
+		(int)readl(chip.io_base + chip.regs.fdma_int_clr),\
+		(int)readl(chip.io_base + chip.regs.fdma_int_mask)))
+
+
+#define DUMP_NODE_FROM_EXTMEM(addr)(\
+	printk(" %s\n ADDR %x\n NEXT %x\n CTL %x\n NBYTES %x\n SADDR %x\n DADDR %x\n NODELEN %x\n SSTRIDE %x\n DSTRIDE %x\n\n",\
+		__FUNCTION__,\
+		(int)(addr),\
+		(int)readl(addr), \
+		(int)readl(addr+0x04),\
+		(int)readl(addr+0x08),\
+		(int)readl(addr+0xc),\
+		(int)readl(addr+0x10),\
+		(int)readl(addr+0x14),\
+		(int)readl(addr+0x18),\
+		(int)readl(addr+0x1c)))
+
+#define DUMP_FDMA_REG_OFFSETS(chip) (\
+	fdma_log(" ID %x\n VER %x\n EN %x\n REV_ID %x\n CMD_STAT %x\n PTRN %x\n CNTn %x\n SADDR %x\n DADDR %x\n REQ_CTL %x\n CMD_STA %x\n CMD_SET %x\n CMD_CLR %x\n CMD_MASK %x\n INT_STA %x\n INT_SET %x\n INT_CLR %x\n INT_MASK %x\n SYNC %x\n CLK %x\n IMEM %x\n DMEM %x\n", \
+		(u32)(chip.io_base +chip.regs.fdma_id), \
+		(u32)(chip.io_base +chip.regs.fdma_ver), \
+	        (u32)(chip.io_base +chip.regs.fdma_en), \
+       		(u32)(chip.io_base +chip.regs.fdma_rev_id),\
+        	(u32)(chip.io_base +chip.regs.fdma_cmd_statn), \
+        	(u32)(chip.io_base +chip.regs.fdma_ptrn), \
+        	(u32)(chip.io_base +chip.regs.fdma_cntn), \
+        	(u32)(chip.io_base +chip.regs.fdma_saddrn), \
+         	(u32)(chip.io_base +chip.regs.fdma_daddrn), \
+         	(u32)(chip.io_base +chip.regs.fdma_req_ctln), \
+         	(u32)(chip.io_base +chip.regs.fdma_cmd_sta), \
+         	(u32)(chip.io_base +chip.regs.fdma_cmd_set), \
+         	(u32)(chip.io_base +chip.regs.fdma_cmd_clr), \
+         	(u32)(chip.io_base +chip.regs.fdma_cmd_mask), \
+         	(u32)(chip.io_base +chip.regs.fdma_int_sta), \
+         	(u32)(chip.io_base +chip.regs.fdma_int_set), \
+         	(u32)(chip.io_base +chip.regs.fdma_int_clr), \
+         	(u32)(chip.io_base +chip.regs.fdma_int_mask), \
+         	(u32)(chip.io_base +chip.regs.fdma_sync_reg),\
+         	(u32)(chip.io_base +chip.regs.fdma_clk_gate), \
+         	(u32)(chip.io_base +chip.regs.fdma_imem_region), \
+         	(u32)(chip.io_base +chip.regs.fdma_dmem_region)))
+
+static inline void walk_nodelist(struct fdma_llu_entry * first_node)
+{
+	struct fdma_llu_entry ** np = & first_node;
+	do{
+		DUMP_NODE_FROM_EXTMEM(*np);
+	}while((*np =(struct fdma_llu_entry*) (*np)->next_item));
+}
+
+#endif
Index: linux/include/linux/stm/stm-dma.h
===================================================================
--- /dev/null
+++ linux/include/linux/stm/stm-dma.h
@@ -0,0 +1,436 @@
+/*
+ *  STb7100 FDMA Driver
+ *  Copyright (c) 2005 STMicroelectronics Limited.
+ *  Author: Mark Glaisher <Mark.Glaisher@st.com>
+ *
+ *   This program is free software; you can redistribute it and/or modify
+ *   it under the terms of the GNU General Public License as published by
+ *   the Free Software Foundation; either version 2 of the License, or
+ *   (at your option) any later version.
+ *
+ *   This program is distributed in the hope that it will be useful,
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *   GNU General Public License for more details.
+ *
+ *   You should have received a copy of the GNU General Public License
+ *   along with this program; if not, write to the Free Software
+ *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
+ *
+ */
+
+#ifndef STM_DMA_H
+#define STM_DMA_H
+
+#include <asm/dma.h>
+#include <asm/io.h>
+#include <asm/string.h>
+#include <linux/module.h>
+
+
+#if defined(CONFIG_STM_DMA_DEBUG)
+	#define fdma_log(format, args...)  printk(format, ## args)
+#else
+	#define fdma_log(format, args...) ;
+#endif
+
+/*when we are running in SH-compatibility mode these mode and dim flags will#
+ * be muxed into the dma_channel-flags member*/
+
+/*DMA Modes */
+#define MODE_FREERUNNING   		0x01	/* FDMA, GPDMA */
+#define MODE_PACED  		 	0x02	/* FDMA */
+#define MODE_SH_COMPATIBILITY		0x03
+#define MODE_SRC_SCATTER		0x04
+#define MODE_DST_SCATTER		0x05
+/* DMA dimensions */
+
+enum stm_dma_dimensions {
+	DIM_0_x_0 =0x10,
+	DIM_0_x_1,
+	DIM_0_x_2,
+	DIM_1_x_0,
+	DIM_1_x_1,
+	DIM_1_x_2,
+	DIM_2_x_0,
+	DIM_2_x_1,
+	DIM_2_x_2,
+	DIM_REQ_SEL
+};
+
+enum stm_dma_flags {
+	STM_DMA_INTER_NODE_PAUSE=0x800,
+	STM_DMA_LIST_COMP_INT=0x1000,
+	STM_DMA_CB_CONTEXT_ISR=0x2000,
+	STM_DMA_CB_CONTEXT_TASKLET=0x4000,
+	STM_DMA_SETUP_CONTEXT_TASK=0x8000,
+	STM_DMA_SETUP_CONTEXT_ISR=0x10000,
+	STM_DMA_CHANNEL_PAUSE_FLUSH=0x20000,
+	STM_DMA_CHANNEL_PAUSE_NOFLUSH=0x40000,
+	STM_DMA_NOBLOCK_MODE=0x80000,
+	STM_DMA_BLOCK_MODE=0x100000,
+	STM_DMA_LIST_CIRC=0x200000,
+	STM_DMA_LIST_OPEN=0x400000,
+};
+
+#define DMA_CHANNEL_STATUS_IDLE 		0
+#define DMA_CHANNEL_STATUS_RUNNING 		2
+#define DMA_CHANNEL_STATUS_PAUSED 		3
+
+/*we only have the notion of two types of channels thus far*/
+#define STM_DMA_CAP_HIGH_BW 	"STM_DMA_HIGH_BANDWIDTH"
+#define STM_DMA_CAP_LOW_BW 	"STM_DMA_LOW_BANDWIDTH"
+#define STM_DMAC_ID 		"ST40 STB710x FDMAC"
+
+
+/* dma_extend() operations */
+#define STM_DMA_OP_PAUSE			1
+#define STM_DMA_OP_UNPAUSE			2
+#define STM_DMA_OP_STOP				3
+#define STM_DMA_OP_COMPILE			4
+#define STM_DMA_OP_STATUS			5
+#define STM_DMA_OP_MEM_FREE			6
+
+
+struct stm_dma_params;
+
+
+typedef struct llu_node{
+	struct fdma_llu_entry * virt_addr;
+	dma_addr_t dma_addr;
+}llu_node;
+
+typedef struct dma_xfer_descriptor {
+	struct 	llu_node * node;
+	int 	alloced_nents;
+	int    	(*nodelist_setup) (struct stm_dma_params *xfer);
+	void    (*extrapolate_fn)(struct stm_dma_params *xfer);
+	int 	sublist_nents;
+}dma_xfer_descriptor;
+
+typedef struct stm_dma_params {
+
+	void * next;
+	char  dmac_name[30];
+	unsigned long mode;  /*For STMicro DMA API modes see /include/linux/7100_fdma2.h*/
+	/* a pointer to a callback function of type void foo(void*)
+	 * which will be called on completion of the entire
+	 * transaction or after each transfer suceeds if
+	 * NODE_PAUSE_ISR is specifed */
+	void				(*comp_cb)(void*);
+	void				*comp_cb_parm;
+
+	/* a pointer to a callback function of type void foo(void*)
+	 * which will be called upon failure of a transfer or
+	 * transaction*/
+	void				(*err_cb)(void*);
+	void				*err_cb_parm;
+
+	/*Source location line stride for use in 0/1/2 x 2D modes*/
+	unsigned long			sstride;
+
+	/*Source location line stride for use in 2D x 0/1/2 modes*/
+	unsigned long			dstride;
+
+	/* Line length for any 2D modes */
+	unsigned long			line_len;
+
+	/*source addr - given in phys*/
+	unsigned long 			sar;
+
+	/*dest addr  - given in phys*/
+	unsigned long 			dar;
+
+	unsigned long 			node_bytes;
+
+	struct scatterlist * srcsg;
+	struct scatterlist * dstsg;
+
+	int err_cb_isr	:1;
+	int comp_cb_isr	:1;
+
+	int node_pause		:1;
+	int node_interrupt	:1;
+	int blocking		:1;
+	int circular_llu        :1;
+
+	unsigned long dim;
+	/* Parameters for paced transfers */
+	unsigned long req_line;
+	/*setup called from task or isr context ? */
+	unsigned long context;
+	/* Pointer to compiled parameters
+	 * this includes the *template* llu node and
+	 * its assoc'd memory */
+	dma_xfer_descriptor priv;
+}stm_dma_params;
+
+
+#define REPORT_STM_DMA_PARMS(dmap)(\
+fdma_log("DMA Struct is MODE %s\n CCB %x\n\
+CCBParm %x\n CCBISR %s\n ECB %x\n\
+ECBParm %x\n ECBISR %s\n SADDR %x\n\
+DADDR %x\n SSTRIDE %x\n BYTES %x\n\
+CALL_CNTX %s\n DSTRIDE %x\n LEN %x\n\
+PAUSE %s\n ISR %s\n DIM %x\n\
+LIST_TYPE %s\n REQ %x\n",\
+	(dmap.mode== MODE_FREERUNNING ? "FREE":"PACED"),\
+	(int)dmap.comp_cb,\
+	(int)dmap.comp_cb_parm,\
+	dmap.comp_cb_isr ? "INTERRUPT":"TASKLET",\
+	(int)dmap->err_cb,\
+	(int)dmap->err_cb_parm,\
+	dmap->err_cb_isr ? "INTERRUPT":"TASKLET",\
+	(int)dmap->sar,\
+	(int) dmap->dar, \
+	(int)dmap->sstride,\
+	(int)dmap->node_bytes,\
+	dmap->context==STM_DMA_SETUP_CONTEXT_TASK ?"TASK":"INTERRUPT",\
+	(int)dmap->dstride,\
+	(int)dmap->line_len,\
+	dmap->node_pause? "PAUSE_ISR":"NO_NODE_PAUSE",\
+	dmap->node_interrupt ?"NODE_ISE":"NO_NODE_ISR",\
+	(int)dmap->dim,\
+	dmap->circular_llu ?"CIRCULAR":"UNLINKED",\
+	(int)dmap->req_line))
+
+
+static inline void declare_dma_parms(	struct stm_dma_params * p,
+					unsigned long mode,
+					unsigned long list_type,
+					unsigned long context,
+					unsigned long blocking,
+					char * name)
+{
+	if(p){
+		memset(p,0,sizeof(struct stm_dma_params));
+		p->mode = mode;
+		p->circular_llu = (STM_DMA_LIST_CIRC ==list_type ?1:0);
+		p->context  = ((STM_DMA_SETUP_CONTEXT_ISR == context) ?
+						GFP_ATOMIC:GFP_KERNEL);
+		p->blocking = (STM_DMA_NOBLOCK_MODE == blocking ? 0:1);
+		p->priv.sublist_nents=1;
+		if(strlen(name) >=sizeof(p->dmac_name))
+			printk("%s Failed - limit 'name' to (%d) chars",
+				__FUNCTION__,sizeof(p->dmac_name));
+		else
+			memcpy(&p->dmac_name,name,strlen(name));
+
+	}
+};
+
+static inline int dma_get_status(unsigned int chan)
+{
+	return dma_extend(chan,STM_DMA_OP_STATUS,NULL);
+}
+
+static inline int dma_pause_channel(int flags, unsigned int chan)
+{
+	return dma_extend(chan, STM_DMA_OP_PAUSE, (void*)flags);
+}
+
+static inline void dma_unpause_channel(unsigned int chan)
+{
+	dma_extend(chan, STM_DMA_OP_UNPAUSE, NULL);
+}
+
+static inline int dma_stop_channel(unsigned int chan)
+{
+	return dma_extend(chan, STM_DMA_OP_STOP, NULL);
+}
+
+static inline int dma_free_descriptor(struct stm_dma_params *params)
+{
+	struct dma_info * info =  get_dma_info_by_name(params->dmac_name);
+	return dma_extend(info->channels[0].chan,STM_DMA_OP_MEM_FREE,params);
+}
+
+static inline int dma_compile_list(struct stm_dma_params *params)
+{
+	/*we dont care about channel nrs for a compile, but we need
+	 *  a valid set of hooks, so get the first valid channel for given
+	 * controller.*/
+	 struct dma_info * info =  get_dma_info_by_name(params->dmac_name);
+	 if(info == NULL){
+	 	printk("%s Cant find matching controller to %s\n",
+	 			__FUNCTION__,params->dmac_name);
+	 	return -EINVAL;
+	 }
+	 return dma_extend(info->first_channel_nr,STM_DMA_OP_COMPILE,params);
+}
+
+static inline int dma_xfer_list(unsigned int chan,stm_dma_params * p)
+{
+	struct dma_channel * this_ch = get_dma_channel(chan);
+	if((this_ch != NULL) && (this_ch->chan == chan) ){
+		/*TODO :- this is a bit 'orrible -
+		 * should really extend arch/sh/drivers/dma/dma-api.c
+		 * to include a 'set_dma_channel'*/
+		this_ch->priv_data = (void*)p;
+		dma_configure_channel(chan,0);
+		return dma_xfer(chan,0,0,0,0);
+	}
+	return -EINVAL;
+
+}
+
+
+/* Configure parameters via an API */
+
+static inline  void dma_parms_sg(	struct stm_dma_params *p,
+					struct scatterlist * sg,
+					int nents)
+{
+	if(MODE_SRC_SCATTER==p->mode)
+		p->srcsg=sg;
+	else if (MODE_DST_SCATTER==p->mode)
+		p->dstsg = sg;
+	else
+		BUG();
+
+	p->priv.sublist_nents=nents;
+}
+
+static inline void dma_link_nodes(	struct stm_dma_params * parent,
+					struct stm_dma_params * child)
+{
+	if(child)
+		parent->next=child;
+}
+
+static inline void dma_parms_addrs(	struct stm_dma_params *p,
+					unsigned long src,
+					unsigned long dst,
+					unsigned long bytes)
+{
+	p->sar = src;
+	p->dar = dst;
+	p->node_bytes = bytes;
+}
+
+static inline void dma_parms_interrupts(struct stm_dma_params *p,
+					unsigned long isrflag)
+{
+	if(isrflag & STM_DMA_INTER_NODE_PAUSE)
+		p->node_pause=1;
+	if(isrflag & STM_DMA_INTER_NODE_PAUSE )
+		p->node_interrupt=1;
+
+}
+
+static inline void dma_parms_comp_cb(	struct stm_dma_params *p,
+					void (*fn)(void* param),
+					void* param,
+					int isr_context)
+{
+	p->comp_cb = fn;
+	p->comp_cb_parm = param;
+	p->comp_cb_isr = (isr_context == STM_DMA_CB_CONTEXT_ISR ?1:0);
+}
+
+static inline void dma_parms_err_cb(	struct stm_dma_params *p,
+					void (*fn)(void* param),
+	      				void* param,
+	      				int isr_context)
+{
+	p->err_cb = fn;
+	p->err_cb_parm = param;
+	p->err_cb_isr = (isr_context == STM_DMA_CB_CONTEXT_ISR ?1:0);
+}
+
+static inline void dma_parms_manual_dim_parms(	struct stm_dma_params *p,
+						unsigned long length,
+						unsigned long sstride,
+						unsigned long dstride,
+						unsigned long dim)
+{
+	p->sstride = sstride;
+	p->dstride = dstride;
+	p->line_len = length;
+	p->dim =dim;
+}
+
+static inline void dma_parms_DIM_0_x_0(	struct stm_dma_params *p,
+					unsigned long srcsize)
+{
+	p->sstride = 0;
+	p->dstride = 0;
+	p->line_len = srcsize;
+	p->dim  =DIM_0_x_0;
+}
+
+static inline void dma_parms_paced(	struct stm_dma_params *p,
+					unsigned long xfer_size,
+					int req_line)
+{
+	p->sstride = 0;
+	p->dstride = 0;
+	p->line_len = xfer_size;
+	p->req_line  =req_line;
+	p->dim  =DIM_REQ_SEL;
+}
+
+
+static inline void dma_parms_DIM_0_x_1(	struct stm_dma_params *p,
+					unsigned long srcsize)
+{
+	p->sstride = 0;
+	p->dstride = srcsize;
+	p->line_len = srcsize;
+	p->dim  =DIM_0_x_1;
+}
+static inline void dma_parms_DIM_0_x_2(	struct stm_dma_params *p,
+					unsigned long srcsize,
+					unsigned long dstride)
+{
+	p->sstride =0;
+	p->dstride = dstride;
+	p->line_len =srcsize;
+	p->dim  =DIM_0_x_2;
+}
+static inline void dma_parms_DIM_1_x_0(	struct stm_dma_params *p,
+					unsigned long srcsize)
+{
+	p->sstride = srcsize;
+	p->dstride =0;
+	p->line_len = srcsize;
+	p->dim  =DIM_1_x_0;
+}
+static inline void dma_parms_DIM_1_x_1(	struct stm_dma_params *p,
+					unsigned long srcsize)
+{
+	p->sstride =0;
+	p->dstride =0;
+	p->line_len = srcsize;
+	p->dim  =DIM_1_x_1;
+}
+
+static inline void dma_parms_DIM_1_x_2(	struct stm_dma_params *p,
+					unsigned long dstsize,
+					unsigned long dstride)
+{
+	p->sstride = dstsize;
+	p->dstride =dstride;
+	p->line_len = dstsize;
+	p->dim  =DIM_1_x_2;
+}
+static inline void dma_parms_DIM_2_x_0(	struct stm_dma_params *p,
+					unsigned long srcsize,
+					unsigned long sstride)
+{
+	p->sstride =sstride;
+	p->dstride =0;
+	p->line_len = srcsize;
+	p->dim  =DIM_2_x_0;
+}
+
+static inline void dma_parms_DIM_2_x_1(	struct stm_dma_params *p,
+					unsigned long srcsize,
+					unsigned long sstride)
+{
+        p->sstride = sstride;
+      	p->dstride= srcsize;
+	p->line_len =srcsize;
+	p->dim  =DIM_2_x_1;
+}
+#endif
Index: linux/include/asm-sh/dma.h
===================================================================
--- linux.orig/include/asm-sh/dma.h
+++ linux/include/asm-sh/dma.h
@@ -15,14 +15,8 @@
 #include <linux/spinlock.h>
 #include <linux/wait.h>
 #include <linux/sysdev.h>
-#include <linux/device.h>
 #include <asm/cpu/dma.h>
 #include <asm/semaphore.h>
-#if defined CONFIG_CPU_SUBTYPE_STB7100 || defined CONFIG_STM_GPDMA
-#include <linux/stm/7100_fdma2.h>
-#include <asm/scatterlist.h>
-#endif
-
 
 /* The maximum address that we can perform a DMA transfer to on this platform */
 /* Don't define MAX_DMA_ADDRESS; it's useless on the SuperH and any
@@ -60,43 +54,13 @@ enum {
  * DMA channel capabilities / flags
  */
 enum {
-	DMA_TEI_CAPABLE			= 0x01,	/* Transfer end interrupt.
+	DMA_CONFIGURED			= 0x01,
+	DMA_TEI_CAPABLE			= 0x02,	/* Transfer end interrupt.
 						 * Inherited from DMAC.
 						 * wait_queue used in dma_wait_for_completion */
-	DMA_CONFIGURED			= 0x02,
-#if defined(CONFIG_STM_DMA)
-	/* Extra DMA channel flags */
-#define NODE_DONE_ISR 		0x20	/* FDMA */
-#define NODE_PAUSE_ISR		0x40	/* FDMA */
-#define ANY_CHANNEL     	0x80	/* API, FDMA, GPDMA */
-#define DIM_0_x_0			0x100	/* FDMA, GPDMA */
-#define DIM_0_x_1			0x200
-#define DIM_0_x_2			0x400
-#define DIM_1_x_0			0x800
-#define DIM_1_x_1			0x1000
-#define DIM_1_x_2			0x2000
-#define DIM_2_x_0			0x4000
-#define DIM_2_x_1			0x8000
-#define DIM_2_x_2			0x10000	/* FDMA, GPDMA */
-#define DIM_0_x_SG			0x20000	/* FDMA, GPDMA */
-#define DIM_SG_x_0			0x40000	/* FDMA, GPDMA */
-#define DIM_SG_x_SG			0x80000	/* FDMA, GPDMA */
-#define LIST_TYPE_LINKED 	        0x100000	/* FDMA, GPDMA */
-#define LIST_TYPE_UNLINKED 	        0x200000	/* FDMA */
-#define DMA_CONFIGURED		        0x400000	/* API, SH, FDMA, GPDMA, Overrides DMA_CONFIGURED above */
-#define DMA_SETUP_NOBLOCK               0x800000	/* FDMA */
-#define CALLBACK_CONTEXT_INTERRUPT      0x1000000
-/*FDMA Mode flags*/
-#define MODE_FREERUNNING   		0x01	/* FDMA, GPDMA */
-#define MODE_PACED  		 	0x02	/* FDMA */
-#define MODE_SPDIF				0x04	/* FDMA */
-#define MODE_PES				0x08	/* FDMA */
-#endif
 
 };
 
-extern spinlock_t dma_spin_lock;
-
 struct dma_channel;
 
 struct dma_ops {
@@ -104,106 +68,37 @@ struct dma_ops {
 	void (*free)(struct dma_channel *chan);
 
 	int (*get_residue)(struct dma_channel *chan);
-	int (*xfer)(struct dma_channel *chan);
+	int (*xfer)(struct dma_channel *chan, unsigned long sar,
+		    unsigned long dar, size_t count, unsigned int mode);
 	int (*configure)(struct dma_channel *chan, unsigned long flags);
-#if defined(CONFIG_STM_DMA)
-	int (*pause)(int flags,struct dma_channel *chan);
-	void (*unpause)(struct dma_channel *chan);
-	int (*stop)(struct dma_channel *chan);
-#endif
+	int (*extend)(struct dma_channel *chan, unsigned long op, void* param);
 };
 
+struct dma_info;
+
 struct dma_channel {
 	char dev_id[16];	/*unique name per DMAC of channel*/
 
-	unsigned int chan;		/* Physical channel number */
+	struct dma_info *info;	/* SIM: can this be simply dma_ops? */
+	unsigned int chan;		/* DMAC channel number */
 	unsigned int vchan;		/* Virtual channel number */
-	unsigned int mode;  /*For STMicro DMA API modes see /include/linux/7100_fdma2.h*/
-	unsigned int count; /*transfer length in bytes*/
 
-	unsigned long sar;  /*source address location - specified as P3 and 32 byte aligned
-						should not be specified in DIM_SG_x_0 mode*/
-	unsigned long dar;  /*destination address location - specified as P3 and 32 byte aligned
-						should not be specified in DIM_0_x_SG mode*/
-#if defined(CONFIG_STM_DMA)
-
-	/* The STMicroelectronics DMA-API supports two scatter-gather
-	 * transfer modes:
-	 *  - from scattered memory to a linear memory
-	 *  - from linear memory into scattered memory
-	 * src and dst sg lists should be used for this purpose
-	 * when the correct transfer dimension is specified (see
-	 * include/linux/stm/7100_fdma2.h).
-         */
-
-	/* pointer to the first member of a struct scatterlist *[].
-	 * .dma_address and .length(bytes) fields are required for
-	 * each element.  The .dma_address must be specified in P3.
-	 * If in src scattered mode, use the src_sg member, and the
-	 * dst_sg member for destination scattered mode
-	 */
-	struct scatterlist 		*src_sg;
-	struct scatterlist  	   	*dst_sg;
-
-	/* specifies the scatterlist length in number of elements for
-	 * src and dst scatter - gather transfers respectively */
-	unsigned long 			src_sg_len;
-	unsigned long 			dst_sg_len;
-
-	/* a pointer to a callback function of type void foo(void*)
-	 * which will be called on completion of the entire
-	 * transaction or after each transfer suceeds if
-	 * NODE_PAUSE_ISR is specifed */
-	void				(*comp_callback)(void*);
-	void				*comp_callback_param;
-
-	/* a pointer to a callback function of type void foo(void*)
-	 * which will be called upon failure of a transfer or
-	 * transaction*/
-	void				(*err_callback)(void*);
-	void				*err_callback_param;
-
-	/*size in bytes of the source location*/
-	unsigned long 			src_sz;
-
-	/*size in bytes of the destination location*/
-	unsigned long 			dst_sz;
-
-	/*Source location line stride for use in 0/1/2 x 2D modes*/
-	unsigned long 			sstride;
-
-	/*Source location line stride for use in 2D x 0/1/2 modes*/
-	unsigned long 			dstride;
-
-	/*specifies the additional data for spdif formatting when running in SPDIF bus paced mode*/
-	spdif_data				spdif;
-
-	/*specifies the additional data for spdif formatting when running in PES_SCD bus paced mode
-	 * - currently unsupported*/
-	void* 				pes;
-
-	/* number of elements of a linked list transfer.
-	 * Must be set to 1 in any SG or single shot mode*/
-	unsigned long 			list_len;
-#endif
- 	/* Gives the setup mode flags of each channel:
- 	 * --Should include at least one dimensionality specifier.
- 	 * --Should include either LIST_TYPE_LINKED or LIST_TYPE_UNLINKED
- 	 * --Should specify NODE_PAUSE_ISR if you wish the FDMA engine
- 	 *  to pause and callback between each element of an llu
- 	 * ( comp_callback member must be specified in this case)
- 	 * --If running in paced mode should also include the paced channnel number.
- 	 * --Should specify FDMA_SETUP_NOBLOCK if you do not wish for the dma_configure()
- 	 * function to block if the channel is busy.*/
-	unsigned long flags;
+	unsigned int mode;
+	unsigned int count;
+
+	unsigned long sar;
+	unsigned long dar;
 
-	/*internal locking variables -> do not modify at runtime*/
+	const char **caps;
+
+	unsigned long flags;
 	atomic_t busy;
 
-	struct semaphore sem;
 	wait_queue_head_t wait_queue;
 
+	struct semaphore sem;
 	struct sys_device dev;
+	void * priv_data;
 };
 
 struct dma_info {
@@ -217,6 +112,7 @@ struct dma_info {
 	struct dma_channel *channels;
 
 	struct list_head list;
+	int first_channel_nr;
 };
 
 #define to_dma_channel(channel) container_of(channel, struct dma_channel, dev)
@@ -233,6 +129,8 @@ struct dma_info {
 #define dma_read_page(chan, from, to)	\
 	dma_read(chan, from, to, PAGE_SIZE)
 
+extern int request_dma_bycap(const char** dmac, const char** caps,
+			     const char *dev_id);
 extern int request_dma(unsigned int chan, const char *dev_id);
 extern void free_dma(unsigned int chan);
 extern int get_dma_residue(unsigned int chan);
@@ -240,23 +138,21 @@ extern struct dma_info *get_dma_info(uns
 extern struct dma_channel *get_dma_channel(unsigned int chan);
 extern void dma_wait_for_completion(unsigned int chan);
 
-#ifdef CONFIG_STM_DMA
-extern int dma_configure_channel(struct dma_channel* channel);
-extern int dma_xfer(unsigned int chan);
-
-#else
 extern int dma_xfer(unsigned int chan, unsigned long from,
 		    unsigned long to, size_t size, unsigned int mode);
 extern void dma_configure_channel(unsigned int chan, unsigned long flags);
-#endif
 
-/*here the additions for stb7100 fdma*/
-extern int dma_pause_channel(int flags,unsigned int chan);
-extern void dma_unpause_channel(unsigned int chan);
-extern int dma_stop_channel(unsigned int chan);
-/*---*/
-extern int register_dmac(struct dma_info *info);
+extern int register_dmac(struct dma_info *info, int first_chan);
 extern void unregister_dmac(struct dma_info *info);
+extern struct dma_info * get_dma_info_by_name(const char * dmac_name);
+
+struct dma_chan_caps {
+	int ch_num;
+	const char ** caplist;
+};
+
+extern int dma_extend(unsigned int chan, unsigned long op, void* param);
+extern int register_chan_caps(const char *dmac,struct dma_chan_caps *  capslist);
 
 #ifdef CONFIG_SYSFS
 /* arch/sh/drivers/dma/dma-sysfs.c */
@@ -273,5 +169,9 @@ extern int isa_dma_bridge_buggy;
 #define isa_dma_bridge_buggy	(0)
 #endif
 
+#ifdef CONFIG_STM_DMA
+#define DMA_REQ_ANY_CHANNEL 0xf0f0f0f0
+#endif
+
 #endif /* __KERNEL__ */
 #endif /* __ASM_SH_DMA_H */
Index: linux/drivers/stm/gpdma.c
===================================================================
--- linux.orig/drivers/stm/gpdma.c
+++ linux/drivers/stm/gpdma.c
@@ -39,7 +39,7 @@
 #include <linux/delay.h>
 
 #include <asm/dma.h>
-#include <linux/stm/7100_fdma2.h>
+#include <linux/stm/710x_fdma2.h>
 
 static int enable_trace = 0;
 #define GPDMA_TRACE(fmt, args...) \
