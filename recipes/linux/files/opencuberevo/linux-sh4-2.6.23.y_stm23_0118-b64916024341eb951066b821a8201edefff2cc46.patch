From b64916024341eb951066b821a8201edefff2cc46 Mon Sep 17 00:00:00 2001
From: Giuseppe Cavallaro <peppe.cavallaro@st.com>
Date: Sun, 8 Feb 2009 21:23:27 +0000
Subject: [PATCH] modules: module loading allocation through BPA2

This patch allocates memory for modules from BPA2 rather than vmalloc.
vmalloc is virtually contiguous memory allocated from discrete physical
memory pages and mapped via the MMU, so there is an associated memory
management overhead (e.g. TLB misses). As BPA2 memory is physically
contiguous (and covered by the kernel PMB mappings in 32 bit mode), it
does not suffer these overheads and system performance may be improved
where modules are heavily used.

To enable the feature from the menuconfig just select:
"Enable loadable module support" --->
"Allocate memory for modules from BPA2"
By default the partition name is: "modules"

By default, the allocation will fall back to using vmalloc if:
o the BPA2 partition is not found;
o the BPA2 partition is not in kernel logical memory;
o there is no more space in the BPA2 partition.

This feature can be disabled using the option:
"Fallback to vmalloc if BPA2 allocation fails"

Example of command line parameter:
bpa2parts=modules:1M

Signed-off-by: Giuseppe Cavallaro <peppe.cavallaro@st.com>
Signed-off-by: Stuart Menefy <stuart.menefy@st.com>
---
 arch/sh/kernel/module.c |   87 ++++++++++++++++++++++++++++++++++++++++++++++-
 init/Kconfig            |   25 +++++++++++++
 2 files changed, 111 insertions(+), 1 deletions(-)

diff --git a/arch/sh/kernel/module.c b/arch/sh/kernel/module.c
index 142a4e5..a01cea4 100644
--- a/arch/sh/kernel/module.c
+++ b/arch/sh/kernel/module.c
@@ -20,6 +20,10 @@
 #include <linux/fs.h>
 #include <linux/string.h>
 #include <linux/kernel.h>
+#if defined(CONFIG_MODULES_BPA2)
+#include <linux/pfn.h>
+#include <linux/bpa2.h>
+#endif
 
 #if 0
 #define DEBUGP printk
@@ -27,13 +31,92 @@
 #define DEBUGP(fmt...)
 #endif
 
+#if defined(CONFIG_MODULES_BPA2)
+static struct bpa2_part *modules_bpa2_part;
+
 void *module_alloc(unsigned long size)
 {
-	if (size == 0)
+	unsigned long addr;
+	unsigned long n_pages;
+
+	if (unlikely(size == 0))
 		return NULL;
+
+	if (unlikely(modules_bpa2_part == NULL))
+		 goto v_map;;
+
+	n_pages = (size + PAGE_SIZE - 1) / PAGE_SIZE;
+
+	addr = bpa2_alloc_pages(modules_bpa2_part, n_pages, 1, GFP_KERNEL);
+
+	if (unlikely(!addr))
+		 goto v_map;;
+
+	return phys_to_virt(addr);
+
+v_map:
+	printk(KERN_WARNING "BPA2 module allocation failed\n");
+
+#ifdef CONFIG_MODULES_BPA2_FALLBACK
 	return vmalloc(size);
+#else
+	return NULL;
+#endif
 }
 
+void module_free(struct module *mod, void *module_region)
+{
+	unsigned long addr;
+
+	/* Exit now on NULL address */
+	if (unlikely(module_region == NULL))
+		return;
+
+	if (likely(modules_bpa2_part) &&
+		  (module_region < (void *)VMALLOC_START)) {
+		addr = (unsigned long) virt_to_phys(module_region);
+		bpa2_free_pages(modules_bpa2_part, addr);
+		return;
+	}
+
+	vfree(module_region);
+
+	return;
+}
+
+static int __init modules_prepare_bpa2(void)
+{
+	struct bpa2_part *part = bpa2_find_part(CONFIG_MODULES_BPA2_PART_NAME);
+
+	if (!part) {
+		printk(KERN_WARNING "BPA2 module allocation: "
+			"cannot find BPA2 partition \"%s\"\n",
+			CONFIG_MODULES_BPA2_PART_NAME);
+		return -1;
+	}
+
+	/* We need to check if BPA2 partition is in kernel logical
+	 * memory.
+	 */
+	if (!bpa2_low_part(part)) {
+		printk(KERN_WARNING "BPA2 module allocation: "
+			"BPA2 partition \"%s\" is not in low memory\n",
+			CONFIG_MODULES_BPA2_PART_NAME);
+		return -1;
+	}
+
+	modules_bpa2_part = part;
+
+	return 0;
+}
+late_initcall(modules_prepare_bpa2);
+#else
+void *module_alloc(unsigned long size)
+{
+	if (size == 0)
+		return NULL;
+	return vmalloc(size);
+}
 
 /* Free memory returned from module_alloc */
 void module_free(struct module *mod, void *module_region)
@@ -42,6 +125,8 @@ void module_free(struct module *mod, void *module_region)
 	/* FIXME: If module_region == mod->init_region, trim exception
            table entries. */
 }
+#endif
+
 
 /* We don't need anything special. */
 int module_frob_arch_sections(Elf_Ehdr *hdr,
diff --git a/init/Kconfig b/init/Kconfig
index 7f7b905..15c0594 100644
--- a/init/Kconfig
+++ b/init/Kconfig
@@ -693,6 +693,31 @@ config LKM_ELF_HASH
 	  provided by the ksymhash tool to avoiding further computation at
 	  runtime of the hash values (of both exported and undefined symbols).
 
+config MODULES_BPA2
+	bool "Allocate memory for modules from BPA2"
+	depends on MODULES && BPA2 && SUPERH
+	help
+	  Setting this option allows to allocate memory for
+	  modules from BPA2 rather than vmalloc().
+
+config MODULES_BPA2_PART_NAME
+	string "Name of BPA2 partition to allocate buffers from"
+	depends on MODULES_BPA2
+	default "modules"
+	help
+	   Define a name of BPA2 partition used for allocating module memory.
+	   As worst case, if name is not given in command line, allocation
+	   will be done through vmalloc().
+
+config MODULES_BPA2_FALLBACK
+	bool "Fallback to vmalloc if BPA2 allocation fails"
+	depends on MODULES_BPA2
+	default y
+	help
+	   Memory for the module will normally be allocated from the BPA2
+	   partition. However if this flag is set then a second attempt will
+	   be made to use vmalloc().
+
 config STOP_MACHINE
 	bool
 	default y
-- 
1.5.6.3

