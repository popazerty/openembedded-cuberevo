sh_stm: Adds stpio_disable_irq_nosync()

This patch adds stpio_disable_irq_nosync() to the ST40 PIO support.  Whereas
stpio_disable_irq() waits for all pending handlers to complete before 
disabling the interrupt, the nosync form does not wait so is safe to use
within the PIO IRQ callback function.

Signed-off-by: Carl Shaw <carl.shaw@st.com>
Index: linux/drivers/stm/pio.c
===================================================================
--- linux.orig/drivers/stm/pio.c	2008-07-08 13:45:07.000000000 +0100
+++ linux/drivers/stm/pio.c	2008-07-08 13:48:02.000000000 +0100
@@ -382,14 +382,25 @@
 }
 EXPORT_SYMBOL(stpio_enable_irq);
 
+/* This function is safe to call in an IRQ UNLESS it is called in */
+/* the PIO interrupt callback function                            */
 void stpio_disable_irq(struct stpio_pin *pin)
 {
 	int irq = pin_to_irq(pin);
-	DPRINTK("calling disable_irq for pin %s\n", pin->name);
+	DPRINTK("calling disable_irq for irq %d\n", irq);
 	disable_irq(irq);
 }
 EXPORT_SYMBOL(stpio_disable_irq);
 
+/* This is safe to call in IRQ context */
+void stpio_disable_irq_nosync(struct stpio_pin *pin)
+{
+	int irq = pin_to_irq(pin);
+	DPRINTK("calling disable_irq_nosync for irq %d\n", irq);
+	disable_irq_nosync(irq);
+}
+EXPORT_SYMBOL(stpio_disable_irq_nosync);
+
 void stpio_set_irq_type(struct stpio_pin* pin, int triggertype)
 {
 	int irq = pin_to_irq(pin);
Index: linux/include/linux/stm/pio.h
===================================================================
--- linux.orig/include/linux/stm/pio.h	2008-07-08 13:48:19.000000000 +0100
+++ linux/include/linux/stm/pio.h	2008-07-08 13:48:33.000000000 +0100
@@ -65,6 +65,7 @@
 void stpio_free_irq(struct stpio_pin* pin);
 void stpio_enable_irq(struct stpio_pin* pin, int mode);
 void stpio_disable_irq(struct stpio_pin* pin);
+void stpio_disable_irq_nosync(struct stpio_pin* pin);
 void stpio_set_irq_type(struct stpio_pin* pin, int triggertype);
 
 /* Calculate gpio number of a given stpio pin... */
