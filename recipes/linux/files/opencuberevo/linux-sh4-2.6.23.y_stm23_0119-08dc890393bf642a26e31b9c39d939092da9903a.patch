From 08dc890393bf642a26e31b9c39d939092da9903a Mon Sep 17 00:00:00 2001
From: Francesco VIRLINZI <francesco.virlinzi@st.com>
Date: Wed, 6 May 2009 12:20:28 +0200
Subject: [PATCH] stm: pm: Rework suspend code

This patch
 - changes the code to use a jump table
 - changes the registration mechanism

Signed-off-by: Francesco Virlinzi <francesco.virlinzi@st.com>
---
 arch/sh/kernel/cpu/sh4/suspend-core.S |  139 +++++++++++++++++----------------
 arch/sh/kernel/cpu/sh4/suspend.c      |   54 +++++++------
 include/asm-sh/cpu-sh4/suspend.h      |   44 ++++++-----
 include/linux/stm/pm.h                |    8 --
 4 files changed, 124 insertions(+), 121 deletions(-)

diff --git a/arch/sh/kernel/cpu/sh4/suspend-core.S b/arch/sh/kernel/cpu/sh4/suspend-core.S
index 002aa27..0f31268 100644
--- a/arch/sh/kernel/cpu/sh4/suspend-core.S
+++ b/arch/sh/kernel/cpu/sh4/suspend-core.S
@@ -19,8 +19,7 @@
  */
 #define IOREGS_BASE		r14
 #define ITABLE_ADDRESS		r13
-#define DTABLE_ADDRESS		r12
-#define DELAY_REG		r11
+#define DELAY_REG		r12
 
 #define OFFSET_IOBASE		0x0
 #define OFFSET_LPJ		0x4
@@ -64,7 +63,6 @@ sh4_really_suspend:
 
 	mov.l	@(OFFSET_IOBASE, r4), IOREGS_BASE	! save ioregs address
 	mov.l	@(OFFSET_LPJ, r4),    DELAY_REG
-	mov.l	@(OFFSET_DTABLE, r4), DTABLE_ADDRESS
 	mov	REG_INSTR,  	      ITABLE_ADDRESS	! the instruction table!
 
 /*
@@ -73,6 +71,10 @@ sh4_really_suspend:
 	bsr	do_decode
 	 nop
 
+	cmp/eq  #1, r0		! check if we have to sleep or not
+	bt	__resume	! it depends if we complete the table
+				! with END or END_NO_SLEEP
+
 	mova	vbr_base_suspend, r0	! this mova isn't a problem
 					! because vbr_base_suspend is
 					! 4 bytes alligned
@@ -96,6 +98,7 @@ __resume:
 	nop
 	bsr     do_decode
 	 nop
+
 	mov.l	@r15+, r0
 	ldc	r0,    vbr		! Restore the original vbr
 	mov.l	@r15+, r0		! Original sr (on interrupts disabled)
@@ -138,7 +141,7 @@ wakeup_interrupt:
 				! this means the context will be resumed
 				! with interrupt disabled!!!
 /*
- * Here we could have a problem (a sleep with interrupt disables!!!)
+ * Here we could have a problem (a sleep with interrupt disabled!!!)
  * It could happen if we detect an interrupt between
  * the enabled irq and the sleep!!!
  * Restoring the (raw) spc we will go to execute a sleep with the
@@ -155,7 +158,7 @@ wakeup_interrupt:
 /*
  *	load the instruction datas
  */
-	mov.l   resume_address,	r0
+	mov.l	resume_address,	r0
 	mov	REG_INSTR, r0		/* start address I-table */
 	mov	REG_INSTR_END, r1	/* I-table size */
 	tst	r1, r1
@@ -180,6 +183,7 @@ wakeup_interrupt:
 
 .balign 4
 resume_address:		.long __resume
+
 #define SRC0		r1
 #define SRC1		r2
 #define SRC2		r3
@@ -189,124 +193,115 @@ resume_address:		.long __resume
 .balign 2
 	JUMPER()
 ENTRY(do_decode, 2)
+	mova	suspend_jmp_table, r0
+	mov	r0, TMP
 	mov.l	@ITABLE_ADDRESS+, r0	! opcode
-	cmp/eq	#OP_END, r0		! End marker ?
-	bf	1f
-	rts				! Return point
+	mov.l	@(r0, TMP), TMP
+	jmp	@TMP
 	 nop
-1:	/* cmp/eq #OP_SOURCE */
-	cmp/eq #OP_SOURCE, r0
-	bf	1f
-	mov.l	@ITABLE_ADDRESS+, r0	! load the source reg base
-	mov.l	@(r0, IOREGS_BASE), TMP	! load ioreg in r5
-	mov.l	@ITABLE_ADDRESS+, SRC0	! load the offset
+
+l_end:	! OP_END
+	rts				! Return point
+	 mov	#0, r0			! r0 = 0 to say return and sleep
 
 	JUMPER()
 
+l_end_no_sleep:	! OP_END_NO_SLEEP
+	rts				! Return point
+	 mov	#1, r0			! r0 = 1 to say return and Don't sleep
+
+l_source: ! OP_SOURCE
+	mov.l	@ITABLE_ADDRESS+, r0	! load the source reg base
+	mov.l	@(r0, IOREGS_BASE), TMP	! load ioreg in r5
+	mov.l	@ITABLE_ADDRESS+, SRC0	! load the offset
 	bra     do_decode
 	 add	TMP, SRC0		! r2 = the iomem address of source
 
+	JUMPER()
+
 	/* Load a @SRC0 in Dest*/
-1:	cmp/eq	#OP_LOAD, r0
-	bf	1f
+l_load: ! #OP_LOAD
 	bra	do_decode
 	 mov.l	@SRC0, DEST		! load the value
 
-	JUMPER()
-
-1:	/* Load a value from table in SRC0 */
-	cmp/eq #OP_ILOAD_SRC0, r0
-	bf	1f
+	/* Load a value from table in SRC0 */
+l_iload_scr0: ! OP_ILOAD_SRC0
 	bra	do_decode
 	 mov.l	@ITABLE_ADDRESS+, SRC0	! the value is in SRC0 !!!
 
-1:	/* Load a value from table in SRC1 */
-	cmp/eq #OP_ILOAD_SRC1, r0
-	bf	1f
+	/* Load a value from table in SRC1 */
+l_iload_src1: ! OP_ILOAD_SRC1
 	bra	do_decode
 	 mov.l	@ITABLE_ADDRESS+, SRC1	! the value is in SRC1 !!!
 
-1:	/* Load a value from table in SRC2 */
-	cmp/eq	#OP_ILOAD_SRC2, r0
-	bf	1f
+	/* Load a value from table in SRC2 */
+l_iload_src2: ! OP_ILOAD_SRC2
 	bra	do_decode
 	 mov.l @ITABLE_ADDRESS+, SRC2	! the value is in SRC2 !!!
 
-	JUMPER()
-
-1:	/* Load a value from table in the DEST */
-	cmp/eq #OP_ILOAD_DEST, r0
-	bf	1f
+	/* Load a value from table in the DEST */
+l_iload_dest: ! OP_ILOAD_DEST
 	bra	do_decode
 	 mov.l @ITABLE_ADDRESS+, DEST
 
-1:	/* Store DEST value in @SRC0 */
-	cmp/eq #OP_STORE, r0
-	bf	1f
+	JUMPER()
+
+	/* Store DEST value in @SRC0 */
+l_store: ! OP_STORE
 	bra	do_decode
 	 mov.l DEST, @(0,SRC0)		! store the value
 
 	/* Or operation: DEST |= SRC0 */
-1:	cmp/eq #OP_OR,	r0
-	bf	1f
+l_or:	! OP_OR
 	bra	do_decode
 	 or	SRC0, DEST
 
-	JUMPER()
-
 	/* And operation: DEST &= SRC0 */
-1:	cmp/eq #OP_AND, r0
-	bf	1f
+l_and:	! OP_AND
 	bra	do_decode
 	 and	SRC0, DEST
 
 	/* Not operation: SRC0 = ~SRC1*/
 	/* It's a bit dirty that the NOT operation works on SRC1 instead of DEST or SRC0*/
-1:	cmp/eq #OP_NOT, r0
-	bf	1f
+l_not:	! OP_NOT
 	bra	do_decode
 	 not	SRC1, SRC0
 
+	JUMPER()
+
 	/* While bits equal to value. This operation assumes:
 		- SRC0: the iomemory address
 		- SRC1: the bitmask
 		- SRC2: the result
 	*/
-1:	cmp/eq #OP_WHILE_EQ, r0
-	bf	1f
+l_while_eq: !	OP_WHILE_EQ
 	mov.l	@SRC0, TMP
 2:	and     SRC1, TMP
-
-	JUMPER()
-
 	cmp/eq	SRC2, TMP			! (@SRC0 and SRC1) ?!= SRC2)
 	bt/s	2b
 	 mov.l   @SRC0, TMP
 	bra	do_decode
 	 nop
 
+	JUMPER()
 	/* While bits not equal to value. This operation assumes:
 		   - SRC0: the iomemory address
 		   - SRC1: the bitmask
 		   - SRC2: the result
 	*/
-1:	cmp/eq	#OP_WHILE_NEQ, r0
-	bf	1f
-
+l_while_neq: ! OP_WHILE_NEQ
 	mov.l	@SRC0, TMP
 2:	and	SRC1, TMP
 	cmp/eq  SRC2, TMP		! (@SRC0 and SRC1) ?== SRC2)
 	bf/s	2b
 	 mov.l	@SRC0, TMP
-
-	JUMPER()
-
 	bra	do_decode
 	 nop
 
+	JUMPER()
+
 	/* Delay operation */
-1:	cmp/eq #OP_DELAY, r0
-	bf	1f
+l_delay: ! OP_DELAY
 	mov     DELAY_REG, TMP
 	tst	TMP, TMP
 2:
@@ -316,29 +311,39 @@ ENTRY(do_decode, 2)
 	 nop
 
 	/*  SCR0 = @SRC0 */
-1:	cmp/eq	#OP_LOAD_SRC0, r0
-	bf	1f
-	JUMPER()
+l_load_src0: ! OP_LOAD_SRC0
 	mov.l	@SRC0, SRC0
 	bra	do_decode
 	 nop
 
-1:	/* SRC1 = @SRC0 */
-	cmp/eq	#OP_LOAD_SRC1, r0
-	bf	1f
+	JUMPER()
+
+l_load_src1: ! OP_LOAD_SRC1	=> SRC1 = @SRC0
 	mov.l  @SRC0, SRC1
 	bra	do_decode
 	 nop
 
-1:	/* SRC2 = @SRC0 */
-	cmp/eq	#OP_LOAD_SRC2, r0
-	bf	1f
+l_load_src2: ! OP_LOAD_SRC2	=> SRC2 = @SRC0
 	mov.l  @SRC0, SRC2
 	bra	do_decode
 	 nop
-1:
 
-200:	bra sh4_really_suspend		! Now we jump on sh4_really_suspend
+200:	! Preload the jump table
+	mova	suspend_jmp_table, r0
+	mov	r0, r1
+	mov	#_OPCODE_TABLE_SIZE_, r0
+	cmp/eq	#0, r0
+load_jtable:
+	mov.l	@r1, r2
+	add	#32, r1
+	bf/s	load_jtable
+	 dt	r0
+
+	bra sh4_really_suspend		! Now we jump on sh4_really_suspend
 	 nop				! to really suspend (and resume... ;-)
 
 .balign 32
+suspend_jmp_table:
+.long l_end, l_end_no_sleep, l_source, l_load, l_iload_scr0, l_iload_src1
+.long l_iload_src2, l_iload_dest, l_store, l_or, l_and, l_not, l_while_eq
+.long l_while_neq, l_delay, l_load_src0, l_load_src1, l_load_src2
diff --git a/arch/sh/kernel/cpu/sh4/suspend.c b/arch/sh/kernel/cpu/sh4/suspend.c
index 14ca4c8..d9bd7b9 100644
--- a/arch/sh/kernel/cpu/sh4/suspend.c
+++ b/arch/sh/kernel/cpu/sh4/suspend.c
@@ -37,30 +37,28 @@
 #define dbg_print(fmt, args...)
 #endif
 
-static int sh4_suspend_enter(suspend_state_t state);
-
-static struct sh4_suspend_t pdata __cacheline_aligned =
-{
-	.ops.enter = sh4_suspend_enter,
-};
+extern struct kset power_subsys;
 
 unsigned int wokenup_by ;
-static struct clk *sh4_clk;
 
 unsigned long sh4_suspend(struct sh4_suspend_t *pdata,
 	unsigned long instr_tbl, unsigned long instr_tbl_end);
 
 static inline unsigned long _10_ms_lpj(void)
 {
+	static struct clk *sh4_clk;
+	if (!sh4_clk)
+		sh4_clk = clk_get(NULL, "sh4_clk");
 	return clk_get_rate(sh4_clk) / (100 * 2);
 }
 
+static struct sh4_suspend_t *data;
 static int sh4_suspend_enter(suspend_state_t state)
 {
 	unsigned long flags;
 	unsigned long instr_tbl, instr_tbl_end;
 
-	pdata.l_p_j = _10_ms_lpj();
+	data->l_p_j = _10_ms_lpj();
 
 	/* Must wait for serial buffers to clear */
 	mdelay(500);
@@ -69,22 +67,22 @@ static int sh4_suspend_enter(suspend_state_t state)
 
 	/* sets the right instruction table */
 	if (state == PM_SUSPEND_STANDBY) {
-		instr_tbl     = pdata.stby_tbl;
-		instr_tbl_end = pdata.stby_size;
+		instr_tbl     = data->stby_tbl;
+		instr_tbl_end = data->stby_size;
 	} else {
-		instr_tbl     = pdata.mem_tbl;
-		instr_tbl_end = pdata.mem_size;
+		instr_tbl     = data->mem_tbl;
+		instr_tbl_end = data->mem_size;
 	}
 
 	BUG_ON(in_irq());
 
-	wokenup_by = sh4_suspend(&pdata, instr_tbl, instr_tbl_end);
+	wokenup_by = sh4_suspend(data, instr_tbl, instr_tbl_end);
 
 /*
  *  without the evt_to_irq function the INTEVT is returned
  */
-	if (pdata.evt_to_irq)
-		wokenup_by = pdata.evt_to_irq(wokenup_by);
+	if (data->evt_to_irq)
+		wokenup_by = data->evt_to_irq(wokenup_by);
 
 	BUG_ON(in_irq());
 
@@ -108,24 +106,30 @@ static ssize_t power_wokenupby_show(struct kset *subsys, char *buf)
 static struct subsys_attribute wokenup_by_attr =
 __ATTR(wokenup-by, S_IRUGO, power_wokenupby_show, NULL);
 
-static int __init suspend_init(void)
+static int sh4_suspend_valid_both(suspend_state_t state)
+{
+	return 1;
+}
+
+int __init sh4_suspend_register(struct sh4_suspend_t *pdata)
 {
 	int dummy;
-	sh4_clk = clk_get(NULL, "sh4_clk");
-	if (!sh4_clk) {
-		printk(KERN_ERR "ERROR: on clk_get(sh4_clk)\n");
-		return -1;
-	}
 
+	if (!pdata)
+		return -EINVAL;
 /*	the idle loop calls the sleep instruction
  *	but platform specific code (in the suspend_platform_setup
  *	implementation) could set a different 'on idle' action
  */
 	pm_idle = sleep_on_idle;
+	data = pdata;
+	data->ops.enter = sh4_suspend_enter;
+	if (data->stby_tbl && data->stby_size)
+		data->ops.valid = sh4_suspend_valid_both;
+	else
+		data->ops.valid = pm_valid_only_mem;
 
-	suspend_platform_setup(&pdata);
-
-	pm_set_ops(&pdata.ops);
+	pm_set_ops(&data->ops);
 
 	dummy = subsys_create_file(&power_subsys, &wokenup_by_attr);
 
@@ -133,5 +137,3 @@ static int __init suspend_init(void)
 
 	return 0;
 }
-
-late_initcall(suspend_init);
diff --git a/include/asm-sh/cpu-sh4/suspend.h b/include/asm-sh/cpu-sh4/suspend.h
index f93e47d..474fe5b 100644
--- a/include/asm-sh/cpu-sh4/suspend.h
+++ b/include/asm-sh/cpu-sh4/suspend.h
@@ -19,31 +19,34 @@
 #define BASE_SYS		(0x3)
 
 
-#define OP_END			(0)	/* no more data in the table */
-#define OP_SOURCE		(1+ OP_END)
-#define OP_LOAD			(1+ OP_SOURCE)		/* load  @(offset, Reg_idx) */
-#define OP_LOAD_SRC0		(1+ OP_LOAD)		/* Load SRC_0 from resources */
-#define OP_LOAD_SRC1		(1+ OP_LOAD_SRC0)	/* Load SRC_1 from  */
-#define OP_LOAD_SRC2		(1+ OP_LOAD_SRC1)	/* Load SRC_2 from table */
-#define OP_STORE		(1+ OP_LOAD_SRC2)	/* store @(offset, Reg_idx) */
-
-#define OP_ILOAD_SRC0		(1+ OP_STORE)		/* load_imm (from itable) on r1 */
-#define OP_ILOAD_SRC1		(1+ OP_ILOAD_SRC0)	/* load_imm (from itable) on r3 */
-#define OP_ILOAD_SRC2		(1+ OP_ILOAD_SRC1)	/* load_imm (from itable) on r4 */
-#define OP_ILOAD_DEST		(1+ OP_ILOAD_SRC2)	/* load_imm (from table) on r2 */
-
-#define OP_OR			(1+ OP_ILOAD_DEST)
-#define OP_AND			(1+ OP_OR)
-#define OP_NOT			(1+ OP_AND)
+#define OP_END			(0*4)	/* no more data in the table */
+#define OP_END_NO_SLEEP		(1*4)
+#define OP_SOURCE		(2*4)
+#define OP_LOAD			(3*4)	/* load  @(offset, Reg_idx) */
+#define OP_ILOAD_SRC0		(4*4)	/* load_imm (from itable) on r1 */
+#define OP_ILOAD_SRC1		(5*4)	/* load_imm (from itable) on r3 */
+#define OP_ILOAD_SRC2		(6*4)	/* load_imm (from itable) on r4 */
+#define OP_ILOAD_DEST		(7*4)	/* load_imm (from table) on r2 */
+
+#define OP_STORE		(8*4)	/* store @(offset, Reg_idx) */
+#define OP_OR			(9*4)
+#define OP_AND			(10*4)
+#define OP_NOT			(11*4)
 /* WHILE_EQ (idx, offset, mask, value)
  * wait until the mask bits is equal to value
  */
-#define OP_WHILE_EQ		(1+ OP_NOT)
+#define OP_WHILE_EQ		(12*4)
 /* WHILE_NEQ (idx, offset, mask, value)
  * wait until the mask bits isn't equal to value
  */
-#define OP_WHILE_NEQ		(1+ OP_WHILE_EQ)
-#define OP_DELAY		(1+ OP_WHILE_NEQ)	/* A loop delay */
+#define OP_WHILE_NEQ		(13*4)
+
+#define OP_DELAY		(14*4)	/* A loop delay */
+
+#define OP_LOAD_SRC0		(15*4)	/* Load SRC_0 from resources */
+#define OP_LOAD_SRC1		(16*4)	/* Load SRC_1 from  */
+#define OP_LOAD_SRC2		(17*4)	/* Load SRC_2 from table */
+#define _OPCODE_TABLE_SIZE_	3
 
 #ifndef __ASSEMBLY__
 
@@ -61,7 +64,7 @@ struct sh4_suspend_t {
 	struct pm_ops ops;
 };
 
-int suspend_platform_setup(struct sh4_suspend_t *pdata);
+int sh4_suspend_register(struct sh4_suspend_t *data);
 
 /* Operations */
 #define _OR()					OP_OR
@@ -82,6 +85,7 @@ int suspend_platform_setup(struct sh4_suspend_t *pdata);
 #define _LOAD_SRC2()				OP_LOAD_SRC2
 
 #define _END()					OP_END
+#define _END_NO_SLEEP()				OP_END_NO_SLEEP
 
 #define DATA_SOURCE(idx)					\
 	OP_SOURCE, BASE_DATA, (4*(idx))
diff --git a/include/linux/stm/pm.h b/include/linux/stm/pm.h
index c0c4871..fb3b876 100644
--- a/include/linux/stm/pm.h
+++ b/include/linux/stm/pm.h
@@ -16,14 +16,6 @@
 
 #include <linux/pm.h>
 
-extern void __iomem *clkgena_base;
-extern struct kset power_subsys;
-
-int emi_pm_state(pm_message_t state);
-int sysconf_pm_state(pm_message_t state);
-int ilc_pm_state(pm_message_t state);
-int clk_pm_state(pm_message_t state);
-
 /*
  * Several devices (i.e.: USB-SATA-PCI) have extra power capability
  * based on sysconf register and pio
-- 
1.6.0.6

