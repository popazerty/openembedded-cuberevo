From e29319232957cbf0b8783f993945da39ea28bb86 Mon Sep 17 00:00:00 2001
From: Pawel MOLL <pawel.moll@st.com>
Date: Tue, 20 Oct 2009 14:41:58 +0100
Subject: [PATCH] sound_stm: Rework fsynth configuration

As the FSYN_CFG register is rather SOC- then IP-related (it's
just a part of audio glue, frequently modified by silicon
designers), the usually varying stuff definitions have been
moved to platform data. This simplified the registers definition
as well.

Signed-off-by: Pawel Moll <pawel.moll@st.com>
---
 sound/stm/common.h          |    5 +-
 sound/stm/fsynth.c          |   76 +++++++++-------------
 sound/stm/reg_audcfg_fsyn.h |  147 ++++++++++--------------------------------
 sound/stm/stx7100.c         |   13 ++--
 sound/stm/stx7105.c         |   13 +++--
 sound/stm/stx7111.c         |    3 +-
 sound/stm/stx7141.c         |    3 +-
 sound/stm/stx7200.c         |   14 ++---
 8 files changed, 94 insertions(+), 180 deletions(-)

diff --git a/sound/stm/common.h b/sound/stm/common.h
index fb34068..fae60dd 100644
--- a/sound/stm/common.h
+++ b/sound/stm/common.h
@@ -75,9 +75,10 @@ int snd_stm_conv_unmute(struct snd_stm_conv_group *group);
  */
 
 struct snd_stm_fsynth_info {
-	int ver;
-
 	int channels_from, channels_to;
+	int no_fs_en; /* Set if FS_EN bits are not to be set */
+	int value_pcm_clk_sel; /* PCM_CLK_SEL "use fsynth clock" value */
+	int value_ref_clk_in; /* REF_CLK_IN "use 30Mhz clock" value */
 };
 
 
diff --git a/sound/stm/fsynth.c b/sound/stm/fsynth.c
index 241e3bf..f1e0c4f 100644
--- a/sound/stm/fsynth.c
+++ b/sound/stm/fsynth.c
@@ -45,6 +45,9 @@
  * (which is 30MHz in our case) by 8... */
 #define PLL_FREQ 8 * 30 * 1000 * 1000
 
+/* Number of synthesizer channels */
+#define CHANNELS_MAX 4
+
 
 
 /*
@@ -62,19 +65,15 @@ struct snd_stm_fsynth_channel {
 
 struct snd_stm_fsynth {
 	/* System informations */
+	struct snd_stm_fsynth_info *info;
 	const char *bus_id;
-	int ver; /* IP version, used by register access macros */
-	int channels_max;
 
 	/* Resources */
 	struct resource *mem_region;
 	void *base;
 
-	/* Environment settings */
-	int channels_from, channels_to;
-
 	/* Runtime data */
-	struct snd_stm_fsynth_channel *channels;
+	struct snd_stm_fsynth_channel channels[CHANNELS_MAX];
 
 	struct snd_info_entry *proc_entry;
 
@@ -290,8 +289,8 @@ static int snd_stm_fsynth_channel_configure(struct snd_stm_fsynth *fsynth,
 
 	snd_stm_assert(fsynth, return -EINVAL);
 	snd_stm_magic_assert(fsynth, return -EINVAL);
-	snd_stm_assert(channel >= fsynth->channels_from, return -EINVAL);
-	snd_stm_assert(channel <= fsynth->channels_to, return -EINVAL);
+	snd_stm_assert(channel >= fsynth->info->channels_from, return -EINVAL);
+	snd_stm_assert(channel <= fsynth->info->channels_to, return -EINVAL);
 
 	/*             a
 	 * F = f + --------- * f = f + d
@@ -487,8 +486,10 @@ struct snd_stm_fsynth_channel *snd_stm_fsynth_get_channel(const char *bus_id,
 		struct snd_stm_fsynth *fsynth = dev_get_drvdata(device);
 
 		snd_stm_magic_assert(fsynth, return NULL);
-		snd_stm_assert(output >= fsynth->channels_from, return NULL);
-		snd_stm_assert(output <= fsynth->channels_to, return NULL);
+		snd_stm_assert(output >= fsynth->info->channels_from,
+				return NULL);
+		snd_stm_assert(output <= fsynth->info->channels_to,
+				return NULL);
 
 		return &fsynth->channels[output];
 	}
@@ -563,7 +564,7 @@ static void snd_stm_fsynth_dump_registers(struct snd_info_entry *entry,
 	snd_iprintf(buffer, "AUDCFG_FSYN_CFG (offset 0x00) = 0x%08x\n",
 			get__AUDCFG_FSYN_CFG(fsynth));
 
-	for (i = 0; i < fsynth->channels_max; i++) {
+	for (i = 0; i < CHANNELS_MAX; i++) {
 		DUMP_REGISTER(MD, i);
 		DUMP_REGISTER(PE, i);
 		DUMP_REGISTER(SDIV, i);
@@ -588,12 +589,13 @@ static int snd_stm_fsynth_register(struct snd_device *snd_device)
 	/* Initialize & reset synthesizer */
 
 	value |= mask__AUDCFG_FSYN_CFG__RSTP__RESET(fsynth);
-	for (i = fsynth->channels_from; i <= fsynth->channels_to; i++) {
+	for (i = fsynth->info->channels_from; i <= fsynth->info->channels_to;
+			i++) {
 		snd_stm_printd(0, "Enabling synthesizer '%s' channel %d\n",
 				fsynth->bus_id, i);
-		value |= mask__AUDCFG_FSYN_CFG__PCM_CLK_SEL__FSYNTH(fsynth, i);
-		if (fsynth->ver != ver__AUDCFG_FSYN__65_2_1_2 &&
-				fsynth->ver != ver__AUDCFG_FSYN__65_3_3)
+		value |= fsynth->info->value_pcm_clk_sel <<
+				shift__AUDCFG_FSYN_CFG__PCM_CLK_SEL(fsynth, i);
+		if (!fsynth->info->no_fs_en)
 			value |= mask__AUDCFG_FSYN_CFG__FS_EN__ENABLED(fsynth,
 					i);
 		value |= mask__AUDCFG_FSYN_CFG__NSB__ACTIVE(fsynth, i);
@@ -601,7 +603,8 @@ static int snd_stm_fsynth_register(struct snd_device *snd_device)
 	value |= mask__AUDCFG_FSYN_CFG__NPDA__NORMAL(fsynth);
 	value |= mask__AUDCFG_FSYN_CFG__NDIV__27_30_MHZ(fsynth);
 	value |= mask__AUDCFG_FSYN_CFG__BW_SEL__GOOD_REFERENCE(fsynth);
-	value |= mask__AUDCFG_FSYN_CFG__REF_CLK_IN__30_MHZ_CLOCK(fsynth);
+	value |= fsynth->info->value_ref_clk_in <<
+			shift__AUDCFG_FSYN_CFG__REF_CLK_IN(fsynth);
 
 	set__AUDCFG_FSYN_CFG(fsynth, value);
 	barrier();
@@ -636,9 +639,9 @@ static int snd_stm_fsynth_disconnect(struct snd_device *snd_device)
 	/* Disable synthesizer */
 
 	value |= mask__AUDCFG_FSYN_CFG__RSTP__RESET(fsynth);
-	for (i = fsynth->channels_from; i <= fsynth->channels_to; i++) {
-		if (fsynth->ver != ver__AUDCFG_FSYN__65_2_1_2 &&
-				fsynth->ver != ver__AUDCFG_FSYN__65_3_3)
+	for (i = fsynth->info->channels_from; i <= fsynth->info->channels_to;
+			i++) {
+		if (!fsynth->info->no_fs_en)
 			value |= mask__AUDCFG_FSYN_CFG__FS_EN__DISABLED(fsynth,
 					i);
 		value |= mask__AUDCFG_FSYN_CFG__NSB__STANDBY(fsynth, i);
@@ -664,22 +667,12 @@ static struct snd_device_ops snd_stm_fsynth_snd_device_ops = {
 static int snd_stm_fsynth_probe(struct platform_device *pdev)
 {
 	int result = 0;
-	struct snd_stm_fsynth_info *fsynth_info = pdev->dev.platform_data;
 	struct snd_stm_fsynth *fsynth;
-	int channels_max;
 	int i;
 
 	snd_stm_printd(0, "--- Probing device '%s'...\n", pdev->dev.bus_id);
 
-	snd_stm_assert(fsynth_info != NULL, return -EINVAL);
-
-	if (fsynth_info->ver < ver__AUDCFG_FSYN__65_2_1_2)
-		channels_max = 3;
-	else
-		channels_max = 4;
-
-	fsynth = kzalloc(sizeof(*fsynth) + (channels_max *
-			sizeof(*fsynth->channels)), GFP_KERNEL);
+	fsynth = kzalloc(sizeof(*fsynth), GFP_KERNEL);
 	if (!fsynth) {
 		snd_stm_printe("Can't allocate memory "
 				"for a device description!\n");
@@ -687,12 +680,10 @@ static int snd_stm_fsynth_probe(struct platform_device *pdev)
 		goto error_alloc;
 	}
 	snd_stm_magic_set(fsynth);
-	fsynth->ver = fsynth_info->ver;
-	snd_stm_assert(fsynth->ver > 0, return -EINVAL);
+	fsynth->info = pdev->dev.platform_data;
+	snd_stm_assert(fsynth->info != NULL, return -EINVAL);
 	fsynth->bus_id = pdev->dev.bus_id;
-	fsynth->channels_max = channels_max;
-	fsynth->channels = (void *)fsynth + sizeof(*fsynth);
-	for (i = 0; i < channels_max; i++) {
+	for (i = 0; i < CHANNELS_MAX; i++) {
 		fsynth->channels[i].fsynth = fsynth;
 		snd_stm_magic_set(&fsynth->channels[i]);
 	}
@@ -704,15 +695,14 @@ static int snd_stm_fsynth_probe(struct platform_device *pdev)
 		goto error_memory_request;
 	}
 
-	fsynth->channels_from = fsynth_info->channels_from;
-	fsynth->channels_to = fsynth_info->channels_to;
-	snd_stm_assert(fsynth->channels_from < fsynth->channels_to,
+	snd_stm_assert(fsynth->info->channels_from < fsynth->info->channels_to,
+			return -EINVAL);
+	snd_stm_assert(fsynth->info->channels_from >= 0, return -EINVAL);
+	snd_stm_assert(fsynth->info->channels_to < CHANNELS_MAX,
 			return -EINVAL);
-	snd_stm_assert(fsynth->channels_from >= 0, return -EINVAL);
-	snd_stm_assert(fsynth->channels_to < channels_max, return -EINVAL);
 
 	snd_stm_printd(0, "Used synthesizer channels: %d to %d\n",
-			fsynth->channels_from, fsynth->channels_to);
+			fsynth->info->channels_from, fsynth->info->channels_to);
 
 	/* ALSA component */
 
@@ -750,10 +740,8 @@ static int snd_stm_fsynth_remove(struct platform_device *pdev)
 
 	snd_stm_memory_release(fsynth->mem_region, fsynth->base);
 
-	for (i = 0; i < fsynth->channels_max; i++) {
-		fsynth->channels[i].fsynth = fsynth;
+	for (i = 0; i < CHANNELS_MAX; i++)
 		snd_stm_magic_clear(&fsynth->channels[i]);
-	}
 	snd_stm_magic_clear(fsynth);
 	kfree(fsynth);
 
diff --git a/sound/stm/reg_audcfg_fsyn.h b/sound/stm/reg_audcfg_fsyn.h
index 86b03d9..26d3620 100644
--- a/sound/stm/reg_audcfg_fsyn.h
+++ b/sound/stm/reg_audcfg_fsyn.h
@@ -5,20 +5,8 @@
  * IP versions
  */
 
-/* 7100 2.0, 7100 3.0 */
-#define ver__AUDCFG_FSYN__90_1_0_3 1
-
-/* 7109 2.0, 7109 3.0 */
-#define ver__AUDCFG_FSYN__90_2_3 2
-
-/* 7200 1.0 */
-#define ver__AUDCFG_FSYN__65_2_1_2 3
-
-/* 7111 */
-#define ver__AUDCFG_FSYN__65_3_1 4
-
-/* 7200 2.0 */
-#define ver__AUDCFG_FSYN__65_3_3 5
+/* Memory mapped */
+#define ver__AUDCFG_FSYN__1 1
 
 
 
@@ -63,81 +51,50 @@
 
 /* PCM_CLK_SEL */
 
-#define shift__AUDCFG_FSYN_CFG__PCM_CLK_SEL(ip) 2
-#define mask__AUDCFG_FSYN_CFG__PCM_CLK_SEL(ip) 0xf
-#define get__AUDCFG_FSYN_CFG__PCM_CLK_SEL(ip) ((readl(ip->base + \
+#define shift__AUDCFG_FSYN_CFG__PCM_CLK_SEL(ip, n) (2 + n)
+#define mask__AUDCFG_FSYN_CFG__PCM_CLK_SEL(ip, n) 0x1
+#define get__AUDCFG_FSYN_CFG__PCM_CLK_SEL(ip, n) ((readl(ip->base + \
 	offset__AUDCFG_FSYN_CFG(ip)) >> \
-	shift__AUDCFG_FSYN_CFG__PCM_CLK_SEL(ip)) & \
-	mask__AUDCFG_FSYN_CFG__PCM_CLK_SEL(ip))
-#define set__AUDCFG_FSYN_CFG__PCM_CLK_SEL(ip, value) \
+	shift__AUDCFG_FSYN_CFG__PCM_CLK_SEL(ip, n)) & \
+	mask__AUDCFG_FSYN_CFG__PCM_CLK_SEL(ip, n))
+#define set__AUDCFG_FSYN_CFG__PCM_CLK_SEL(ip, n, value) \
 	writel((readl(ip->base + offset__AUDCFG_FSYN_CFG(ip)) & \
-	~(mask__AUDCFG_FSYN_CFG__PCM_CLK_SEL(ip) << \
-	shift__AUDCFG_FSYN_CFG__PCM_CLK_SEL(ip))) | (((value) & \
-	mask__AUDCFG_FSYN_CFG__PCM_CLK_SEL(ip)) << \
-	shift__AUDCFG_FSYN_CFG__PCM_CLK_SEL(ip)), ip->base + \
+	~(mask__AUDCFG_FSYN_CFG__PCM_CLK_SEL(ip, n) << \
+	shift__AUDCFG_FSYN_CFG__PCM_CLK_SEL(ip, n))) | (((value) & \
+	mask__AUDCFG_FSYN_CFG__PCM_CLK_SEL(ip, n)) << \
+	shift__AUDCFG_FSYN_CFG__PCM_CLK_SEL(ip, n)), ip->base + \
 	offset__AUDCFG_FSYN_CFG(ip))
 
-#define value__AUDCFG_FSYN_CFG__PCM_CLK_SEL__EXTCLK(ip, n) (ip->ver < \
-	ver__AUDCFG_FSYN__65_2_1_2 ? (0 << n) : (ip->ver < \
-	ver__AUDCFG_FSYN__65_3_1 ? (1 << n) : (ip->ver < \
-	ver__AUDCFG_FSYN__65_3_3 ? (0 << n) : (1 << n))))
-#define mask__AUDCFG_FSYN_CFG__PCM_CLK_SEL__EXTCLK(ip, n) \
-	(value__AUDCFG_FSYN_CFG__PCM_CLK_SEL__EXTCLK(ip, n) << \
-	shift__AUDCFG_FSYN_CFG__PCM_CLK_SEL(ip))
-#define set__AUDCFG_FSYN_CFG__PCM_CLK_SEL__EXTCLK(ip, n) \
-	set__AUDCFG_FSYN_CFG__PCM_CLK_SEL(ip, \
-	value__AUDCFG_FSYN_CFG__PCM_CLK_SEL__EXTCLK(ip, n))
-
-#define value__AUDCFG_FSYN_CFG__PCM_CLK_SEL__FSYNTH(ip, n) (ip->ver < \
-	ver__AUDCFG_FSYN__65_2_1_2 ? (1 << n) : (ip->ver < \
-	ver__AUDCFG_FSYN__65_3_1 ? (0 << n) : (ip->ver < \
-	ver__AUDCFG_FSYN__65_3_3 ? (1 << n) : (0 << n))))
-#define mask__AUDCFG_FSYN_CFG__PCM_CLK_SEL__FSYNTH(ip, n) \
-	(value__AUDCFG_FSYN_CFG__PCM_CLK_SEL__FSYNTH(ip, n) << \
-	shift__AUDCFG_FSYN_CFG__PCM_CLK_SEL(ip))
-#define set__AUDCFG_FSYN_CFG__PCM_CLK_SEL__FSYNTH(ip, n) \
-	set__AUDCFG_FSYN_CFG__PCM_CLK_SEL(ip, \
-	value__AUDCFG_FSYN_CFG__PCM_CLK_SEL__FSYNTH(ip, n))
-
 /* FS_EN */
 
-#define shift__AUDCFG_FSYN_CFG__FS_EN(ip) (ip->ver < \
-	ver__AUDCFG_FSYN__65_2_1_2 ? 6 : (ip->ver < ver__AUDCFG_FSYN__65_3_1 ? \
-	-1 : (ip->ver < ver__AUDCFG_FSYN__65_3_3 ? 6 : -1)))
-#define mask__AUDCFG_FSYN_CFG__FS_EN(ip) (ip->ver < \
-	ver__AUDCFG_FSYN__65_2_1_2 ? 0x7 : (ip->ver < ver__AUDCFG_FSYN__65_3_1 \
-	? -1 : (ip->ver < ver__AUDCFG_FSYN__65_3_3 ? 0xf : -1)))
-#define get__AUDCFG_FSYN_CFG__FS_EN(ip) ((readl(ip->base + \
-	offset__AUDCFG_FSYN_CFG(ip)) >> shift__AUDCFG_FSYN_CFG__FS_EN(ip)) & \
-	mask__AUDCFG_FSYN_CFG__FS_EN(ip))
-#define set__AUDCFG_FSYN_CFG__FS_EN(ip, value) writel((readl(ip->base \
-	+ offset__AUDCFG_FSYN_CFG(ip)) & ~(mask__AUDCFG_FSYN_CFG__FS_EN(ip) << \
-	shift__AUDCFG_FSYN_CFG__FS_EN(ip))) | (((value) & \
-	mask__AUDCFG_FSYN_CFG__FS_EN(ip)) << \
-	shift__AUDCFG_FSYN_CFG__FS_EN(ip)), ip->base + \
+#define shift__AUDCFG_FSYN_CFG__FS_EN(ip, n) (6 + n)
+#define mask__AUDCFG_FSYN_CFG__FS_EN(ip, n) 0x1
+#define get__AUDCFG_FSYN_CFG__FS_EN(ip, n) ((readl(ip->base + \
+	offset__AUDCFG_FSYN_CFG(ip)) >> shift__AUDCFG_FSYN_CFG__FS_EN(ip, n)) \
+	& mask__AUDCFG_FSYN_CFG__FS_EN(ip, n))
+#define set__AUDCFG_FSYN_CFG__FS_EN(ip, n, value) \
+	writel((readl(ip->base + offset__AUDCFG_FSYN_CFG(ip)) & \
+	~(mask__AUDCFG_FSYN_CFG__FS_EN(ip, n) << \
+	shift__AUDCFG_FSYN_CFG__FS_EN(ip, n))) | (((value) & \
+	mask__AUDCFG_FSYN_CFG__FS_EN(ip, n)) << \
+	shift__AUDCFG_FSYN_CFG__FS_EN(ip, n)), ip->base + \
 	offset__AUDCFG_FSYN_CFG(ip))
 
-#define value__AUDCFG_FSYN_CFG__FS_EN__DISABLED(ip, n) (ip->ver < \
-	ver__AUDCFG_FSYN__65_2_1_2 ? (0 << n) : (ip->ver < \
-	ver__AUDCFG_FSYN__65_3_1 ? -1 : (ip->ver < ver__AUDCFG_FSYN__65_3_3 ? \
-	(0 << n) : -1)))
+#define value__AUDCFG_FSYN_CFG__FS_EN__DISABLED(ip) 0x0
 #define mask__AUDCFG_FSYN_CFG__FS_EN__DISABLED(ip, n) \
-	(value__AUDCFG_FSYN_CFG__FS_EN__DISABLED(ip, n) << \
-	shift__AUDCFG_FSYN_CFG__FS_EN(ip))
+	(value__AUDCFG_FSYN_CFG__FS_EN__DISABLED(ip) << \
+	shift__AUDCFG_FSYN_CFG__FS_EN(ip, n))
 #define set__AUDCFG_FSYN_CFG__FS_EN__DISABLED(ip, n) \
-	set__AUDCFG_FSYN_CFG__FS_EN(ip, \
-	value__AUDCFG_FSYN_CFG__FS_EN__DISABLED(ip, n))
+	set__AUDCFG_FSYN_CFG__FS_EN(ip, n, \
+	value__AUDCFG_FSYN_CFG__FS_EN__DISABLED(ip))
 
-#define value__AUDCFG_FSYN_CFG__FS_EN__ENABLED(ip, n) (ip->ver < \
-	ver__AUDCFG_FSYN__65_2_1_2 ? (1 << n) : (ip->ver < \
-	ver__AUDCFG_FSYN__65_3_1 ? -1 : (ip->ver < ver__AUDCFG_FSYN__65_3_3 ? \
-	(1 << n) : -1)))
+#define value__AUDCFG_FSYN_CFG__FS_EN__ENABLED(ip) 0x1
 #define mask__AUDCFG_FSYN_CFG__FS_EN__ENABLED(ip, n) \
-	(value__AUDCFG_FSYN_CFG__FS_EN__ENABLED(ip, n) << \
-	shift__AUDCFG_FSYN_CFG__FS_EN(ip))
+	(value__AUDCFG_FSYN_CFG__FS_EN__ENABLED(ip) << \
+	shift__AUDCFG_FSYN_CFG__FS_EN(ip, n))
 #define set__AUDCFG_FSYN_CFG__FS_EN__ENABLED(ip, n) \
-	set__AUDCFG_FSYN_CFG__FS_EN(ip, \
-	value__AUDCFG_FSYN_CFG__FS_EN__ENABLED(ip, n))
+	set__AUDCFG_FSYN_CFG__FS_EN(ip, n, \
+	value__AUDCFG_FSYN_CFG__FS_EN__ENABLED(ip))
 
 /* NSB */
 
@@ -274,12 +231,8 @@
 
 /* REF_CLK_IN */
 
-#define shift__AUDCFG_FSYN_CFG__REF_CLK_IN(ip) (ip->ver < \
-	ver__AUDCFG_FSYN__65_2_1_2 ? 23 : (ip->ver < ver__AUDCFG_FSYN__65_3_1 \
-	? 24 : (ip->ver < ver__AUDCFG_FSYN__65_3_3 ? 23 : 24)))
-#define mask__AUDCFG_FSYN_CFG__REF_CLK_IN(ip) (ip->ver < \
-	ver__AUDCFG_FSYN__65_2_1_2 ? 0x1 : (ip->ver < ver__AUDCFG_FSYN__65_3_1 \
-	? 0x1 : (ip->ver < ver__AUDCFG_FSYN__65_3_3 ? 0x3 : 0x1)))
+#define shift__AUDCFG_FSYN_CFG__REF_CLK_IN(ip) 23
+#define mask__AUDCFG_FSYN_CFG__REF_CLK_IN(ip) 0x3
 #define get__AUDCFG_FSYN_CFG__REF_CLK_IN(ip) ((readl(ip->base + \
 	offset__AUDCFG_FSYN_CFG(ip)) >> \
 	shift__AUDCFG_FSYN_CFG__REF_CLK_IN(ip)) & \
@@ -292,36 +245,6 @@
 	shift__AUDCFG_FSYN_CFG__REF_CLK_IN(ip)), ip->base + \
 	offset__AUDCFG_FSYN_CFG(ip))
 
-#define value__AUDCFG_FSYN_CFG__REF_CLK_IN__FE900_CLOCK(ip) (ip->ver < \
-	ver__AUDCFG_FSYN__65_3_1 ? -1 : (ip->ver < ver__AUDCFG_FSYN__65_3_3 ? \
-	0x0 : -1))
-#define mask__AUDCFG_FSYN_CFG__REF_CLK_IN__FE900_CLOCK(ip) \
-	(value__AUDCFG_FSYN_CFG__REF_CLK_IN__FE900_CLOCK(ip) << \
-	shift__AUDCFG_FSYN_CFG__REF_CLK_IN(ip))
-#define set__AUDCFG_FSYN_CFG__REF_CLK_IN__FE900_CLOCK(ip) \
-	set__AUDCFG_FSYN_CFG__REF_CLK_IN(ip, \
-	value__AUDCFG_FSYN_CFG__REF_CLK_IN__FE900_CLOCK(ip))
-
-#define value__AUDCFG_FSYN_CFG__REF_CLK_IN__30_MHZ_CLOCK(ip) (ip->ver \
-	< ver__AUDCFG_FSYN__65_3_1 ? 0x0 : (ip->ver < ver__AUDCFG_FSYN__65_3_3 \
-	? 0x1 : 0x0))
-#define mask__AUDCFG_FSYN_CFG__REF_CLK_IN__30_MHZ_CLOCK(ip) \
-	(value__AUDCFG_FSYN_CFG__REF_CLK_IN__30_MHZ_CLOCK(ip) << \
-	shift__AUDCFG_FSYN_CFG__REF_CLK_IN(ip))
-#define set__AUDCFG_FSYN_CFG__REF_CLK_IN__30_MHZ_CLOCK(ip) \
-	set__AUDCFG_FSYN_CFG__REF_CLK_IN(ip, \
-	value__AUDCFG_FSYN_CFG__REF_CLK_IN__30_MHZ_CLOCK(ip))
-
-#define value__AUDCFG_FSYN_CFG__REF_CLK_IN__SYSCLKINALT(ip) (ip->ver < \
-	ver__AUDCFG_FSYN__65_3_1 ? 0x1 : (ip->ver < ver__AUDCFG_FSYN__65_3_3 ? \
-	0x2 : 0x1))
-#define mask__AUDCFG_FSYN_CFG__REF_CLK_IN__SYSCLKINALT(ip) \
-	(value__AUDCFG_FSYN_CFG__REF_CLK_IN__SYSCLKINALT(ip) << \
-	shift__AUDCFG_FSYN_CFG__REF_CLK_IN(ip))
-#define set__AUDCFG_FSYN_CFG__REF_CLK_IN__SYSCLKINALT(ip) \
-	set__AUDCFG_FSYN_CFG__REF_CLK_IN(ip, \
-	value__AUDCFG_FSYN_CFG__REF_CLK_IN__SYSCLKINALT(ip))
-
 
 
 /*
diff --git a/sound/stm/stx7100.c b/sound/stm/stx7100.c
index 804643d..68c5c2d 100644
--- a/sound/stm/stx7100.c
+++ b/sound/stm/stx7100.c
@@ -68,12 +68,6 @@ static struct platform_device stx7100_glue = {
 
 /* Frequency synthesizer */
 
-static struct snd_stm_fsynth_info fsynth_info = {
-	/* .ver = see snd_stm_stx7100_init() */
-	.channels_from = 0,
-	.channels_to = 2,
-};
-
 static struct platform_device fsynth = {
 	.name          = "snd_fsynth",
 	.id            = -1,
@@ -85,7 +79,12 @@ static struct platform_device fsynth = {
 			.end   = 0x1921003f,
 		},
 	},
-	.dev.platform_data = &fsynth_info,
+	.dev.platform_data = &(struct snd_stm_fsynth_info) {
+		.channels_from = 0,
+		.channels_to = 2,
+		.value_pcm_clk_sel = 1,
+		.value_ref_clk_in = 0,
+	},
 };
 
 /* Internal DAC */
diff --git a/sound/stm/stx7105.c b/sound/stm/stx7105.c
index 7c94812..eec123b 100644
--- a/sound/stm/stx7105.c
+++ b/sound/stm/stx7105.c
@@ -69,6 +69,13 @@ static struct platform_device stx7105_glue = {
 
 /* Frequency synthesizers */
 
+static struct snd_stm_fsynth_info fsynth_info = {
+	.channels_from = 0,
+	.channels_to = 2,
+	.value_pcm_clk_sel = 1,
+	.value_ref_clk_in = 0,
+};
+
 static struct platform_device fsynth = {
 	.name          = "snd_fsynth",
 	.id            = -1,
@@ -80,11 +87,7 @@ static struct platform_device fsynth = {
 			.end   = 0xfe21004f,
 		},
 	},
-	.dev.platform_data = &(struct snd_stm_fsynth_info) {
-		.ver = 5,
-		.channels_from = 0,
-		.channels_to = 2,
-	},
+	.dev.platform_data = &fsynth_info,
 };
 
 /* Internal DACs */
diff --git a/sound/stm/stx7111.c b/sound/stm/stx7111.c
index 4b9bf42..354d027 100644
--- a/sound/stm/stx7111.c
+++ b/sound/stm/stx7111.c
@@ -81,9 +81,10 @@ static struct platform_device fsynth = {
 		},
 	},
 	.dev.platform_data = &(struct snd_stm_fsynth_info) {
-		.ver = 4,
 		.channels_from = 0,
 		.channels_to = 2,
+		.value_pcm_clk_sel = 1,
+		.value_ref_clk_in = 1,
 	},
 };
 
diff --git a/sound/stm/stx7141.c b/sound/stm/stx7141.c
index 8edb12f..f84644a 100644
--- a/sound/stm/stx7141.c
+++ b/sound/stm/stx7141.c
@@ -82,9 +82,10 @@ static struct platform_device fsynth = {
 		},
 	},
 	.dev.platform_data = &(struct snd_stm_fsynth_info) {
-		.ver = 4,
 		.channels_from = 0,
 		.channels_to = 3,
+		.value_pcm_clk_sel = 1,
+		.value_ref_clk_in = 1,
 	},
 };
 
diff --git a/sound/stm/stx7200.c b/sound/stm/stx7200.c
index b14b2a2..429dbc8 100644
--- a/sound/stm/stx7200.c
+++ b/sound/stm/stx7200.c
@@ -89,9 +89,11 @@ static struct platform_device fsynth_0 = {
 		},
 	},
 	.dev.platform_data = &(struct snd_stm_fsynth_info) {
-		/* .ver = see snd_stm_stx7200_init() */
 		.channels_from = 0,
 		.channels_to = 3,
+		.no_fs_en = 1,
+		.value_pcm_clk_sel = 0,
+		.value_ref_clk_in = 0,
 	},
 };
 
@@ -107,9 +109,11 @@ static struct platform_device fsynth_1 = {
 		},
 	},
 	.dev.platform_data = &(struct snd_stm_fsynth_info) {
-		/* .ver = see snd_stm_stx7200_init() */
 		.channels_from = 2,
 		.channels_to = 3,
+		.no_fs_en = 1,
+		.value_pcm_clk_sel = 0,
+		.value_ref_clk_in = 0,
 	},
 };
 
@@ -751,9 +755,6 @@ static int __init snd_stm_stx7200_init(void)
 			return -EINVAL);
 
 	if (cpu_data->cut_major < 2) {
-		SET_VER(snd_stm_fsynth_info, fsynth_0, 3);
-		SET_VER(snd_stm_fsynth_info, fsynth_1, 3);
-
 		SET_VER(snd_stm_conv_int_dac_info, conv_int_dac_0, 3);
 		SET_VER(snd_stm_conv_int_dac_info, conv_int_dac_1, 3);
 
@@ -775,9 +776,6 @@ static int __init snd_stm_stx7200_init(void)
 
 		SET_VER(snd_stm_pcm_reader_info, pcm_reader_0, 3);
 	} else {
-		SET_VER(snd_stm_fsynth_info, fsynth_0, 5);
-		SET_VER(snd_stm_fsynth_info, fsynth_1, 5);
-
 		SET_VER(snd_stm_conv_int_dac_info, conv_int_dac_0, 4);
 		SET_VER(snd_stm_conv_int_dac_info, conv_int_dac_1, 4);
 
-- 
1.6.0.6

