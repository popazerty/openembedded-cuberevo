From 8bedfe200f9d622ef194099da516ebc41e34e07a Mon Sep 17 00:00:00 2001
From: Francesco VIRLINZI <francesco.virlinzi@st.com>
Date: Wed, 22 Jul 2009 08:44:02 +0200
Subject: [PATCH] stm: clk: Updated LLA common clock API

This patch updates the LLA common clock API.
Reference: clk_lla_17jul09
It:
 - removes all the OS21 code
 - fixes the fsynth function (linux side) in the clock-common.c
 - applies the GPL2 license

Signed-off-by: Francesco Virlinzi <francesco.virlinzi@st.com>
Signed-off-by: Stuart Menefy <stuart.menefy@st.com>
---
 arch/sh/kernel/cpu/sh4/clock-common.c  |  230 +++++++---------------------
 arch/sh/kernel/cpu/sh4/clock-common.h  |   55 ++++---
 arch/sh/kernel/cpu/sh4/clock-oslayer.h |  264 +++++++++++++-------------------
 3 files changed, 191 insertions(+), 358 deletions(-)

diff --git a/arch/sh/kernel/cpu/sh4/clock-common.c b/arch/sh/kernel/cpu/sh4/clock-common.c
index f466e76..4156758 100644
--- a/arch/sh/kernel/cpu/sh4/clock-common.c
+++ b/arch/sh/kernel/cpu/sh4/clock-common.c
@@ -1,25 +1,16 @@
-/************************************************************************
-File  : Low Level clock API
-        Common LLA functions (SOC independant)
-
-Author: F. Charpentier <fabrice.charpentier@st.com>
-
-Copyright (C) 2008 STMicroelectronics
-************************************************************************/
-
-#if defined(ST_OS21)
-#include <math.h>
-#include "clock.h"
-
-#else   /* Linux */
+/******************************************************************************
+ *
+ * File name   : clock-common.c
+ * Description : Low Level API - Common LLA functions (SOC independant)
+ *
+ * COPYRIGHT (C) 2009 STMicroelectronics - All Rights Reserved
+ * May be copied or modified under the terms of the GNU General Public
+ * License.  See linux/COPYING for more information.
+******************************************************************************/
 
 #include <linux/clk.h>
 #include <asm-generic/div64.h>
 
-/*
- * Linux specific function
- */
-
 /* Return the number of set bits in x. */
 static unsigned int population(unsigned int x)
 {
@@ -48,13 +39,23 @@ static unsigned int most_significant_set_bit(unsigned int x)
 	/* now count the number of set bits [clz is population(~x)] */
 	return population(x) - 1;
 }
-#endif
 
 #include "clock-oslayer.h"
 #include "clock-common.h"
 
+int clk_info_get_index(unsigned long clk_id, struct clk_info *table,
+		       unsigned long t_size)
+{
+	int i;
+
+	for (i = 0; i < t_size; ++i)
+		if (table[i].clk_id == clk_id)
+			return i;
+	return -1;
+}
+
 /* ========================================================================
-   Name:        clk_pll800_freq()
+   Name:	clk_pll800_freq()
    Description: Convert PLLx_CFG to freq for PLL800
    Params:      'input' freq (Hz), 'cfg'=PLLx_CFG register value
    ======================================================================== */
@@ -63,18 +64,18 @@ unsigned long clk_pll800_freq(unsigned long input, unsigned long cfg)
 {
 	unsigned long freq, ndiv, pdiv, mdiv;
 
-	mdiv = (cfg >>  0) & 0xff;
-	ndiv = (cfg >>  8) & 0xff;
+	mdiv = (cfg >> 0) & 0xff;
+	ndiv = (cfg >> 8) & 0xff;
 	pdiv = (cfg >> 16) & 0x7;
-	freq = (((2 * (input/1000) * ndiv) / mdiv) / (1 << pdiv)) * 1000;
+	freq = (((2 * (input / 1000) * ndiv) / mdiv) / (1 << pdiv)) * 1000;
 
 	return freq;
 }
 
 /* ========================================================================
-   Name:        clk_pll1600_freq()
+   Name:	clk_pll1600_freq()
    Description: Convert PLLx_CFG to freq for PLL1600
-                Always returns HS output value.
+		Always returns HS output value.
    Params:      'input' freq (Hz), 'cfg'=PLLx_CFG register value
    ======================================================================== */
 
@@ -82,123 +83,62 @@ unsigned long clk_pll1600_freq(unsigned long input, unsigned long cfg)
 {
 	unsigned long freq, ndiv, mdiv;
 
-	mdiv = (cfg >>  0) & 0x7;
-	ndiv = (cfg >>  8) & 0xff;
-	freq = ((2 * (input/1000) * ndiv) / mdiv) * 1000;
+	mdiv = (cfg >> 0) & 0x7;
+	ndiv = (cfg >> 8) & 0xff;
+	freq = ((2 * (input / 1000) * ndiv) / mdiv) * 1000;
 
 	return freq;
 }
 
 /* ========================================================================
-   Name:        clk_fsyn_get_rate()
+   Name:	clk_fsyn_get_rate()
    Description: Parameters to freq computation for frequency synthesizers
    ======================================================================== */
 
 /* This has to be enhanced to support several Fsyn types */
 
 unsigned long clk_fsyn_get_rate(unsigned long input, unsigned long pe,
-		unsigned long md, unsigned long sd)
+				unsigned long md, unsigned long sd)
 {
-#ifdef ST_OS21
-
-    unsigned long rate,ref;
-    int pediv,mddiv,sddiv;
-
-    pediv = (pe&0xffff);
-    mddiv =(md&0x1f);
-    mddiv = ( mddiv - 32 );
-    sddiv =(sd&0x7);
-    sddiv = pow(2,(sddiv+1));
-
-    ref = input / 1000000;
-
-    rate = ((pow(2,15)*(ref*8))/(sddiv*((pediv*(1.0+mddiv/32.0))-((pediv-pow(2,15))*(1.0+(mddiv+1.0)/32.0)))))*1000000;
-
-    return(rate);
-
-#else   /* Linux: does not allow use of FPU in kernel space */
-
+	int md2 = md;
 	long long p, q, r, s, t, u;
+	if (md & 0x10)
+		md2 = md | 0xfffffff0;	/* adjust the md sign */
+
+	input *= 8;
 
 	p = 1048576ll * input;
-	q = 32768 * md;
+	q = 32768 * md2;
 	r = 1081344 - pe;
 	s = r + q;
 	t = (1 << (sd + 1)) * s;
 	u = div64_64(p, t);
 
 	return u;
-
- #endif
 }
 
 /* ========================================================================
-   Name:        clk_fsyn_get_params()
+   Name:	clk_fsyn_get_params()
    Description: Freq to parameters computation for frequency synthesizers
    Input:       input=input freq (Hz), output=output freq (Hz)
    Output:      updated *md, *pe & *sdiv
    Return:      'clk_err_t' error code
    ======================================================================== */
 
-/* This has to be enhanced to support several Fsyn types */
+/* This has to be enhanced to support several Fsyn types.
+   Currently based on C090_4FS216_25. */
 
 int clk_fsyn_get_params(int input, int output, int *md, int *pe, int *sdiv)
 {
-#ifdef ST_OS21
-
-    double fr, Tr, Td1, Tx, fmx, nd1, nd2, Tdif;
-    int NTAP, msdiv, mfmx, ndiv, fout;
-
-    NTAP = 32;
-    mfmx = 0;
-
-    ndiv = 1.0;
-
-    fr = input * 8.0;
-    Tr = 1.0 / fr;
-    Td1 = 1.0 / (NTAP * fr);
-    msdiv = 0;
-
-    /* Looking for SDIV */
-    while (! ((mfmx >= (input*8)) && (mfmx <= (input*16))) && (msdiv < 7))
-    {
-        msdiv = msdiv + 1;
-        mfmx = pow(2,msdiv) * output;
-    }
-
-    *sdiv = msdiv - 1;
-    fmx = mfmx / (float)1000000.0;
-    if ((fmx < (8*input)) || (fmx > (16*input)))
-    {
-        return(CLK_ERR_BAD_PARAMETER);
-    }
-
-    Tx = 1 / (fmx * 1000000.0);
-
-    Tdif = Tr - Tx;
-
-    /* Looking for MD */
-    nd1 = floor((32.0 * (mfmx - fr) / mfmx));
-    nd2 = nd1 + 1.0;
-
-    *md = 32.0 - nd2;
-
-    /* Looking for PE */
-    *pe = ceil((32.0 * (mfmx - fr) / mfmx - nd1) * 32768.0);
-
-    return(0);
-
-#else   /* Linux */
-
 	unsigned long long p, q;
 	unsigned int predivide;
-	int preshift; /* always +ve but used in subtraction */
+	int preshift;		/* always +ve but used in subtraction */
 	unsigned int lsdiv;
 	int lmd;
 	unsigned int lpe = 1 << 14;
 
 	/* pre-divide the frequencies */
-	p = 1048576ull * input;    /* <<20? */
+	p = 1048576ull * input * 8;	/* <<20? */
 	q = output;
 
 	predivide = (unsigned int)div64_64(p, q);
@@ -219,15 +159,15 @@ int clk_fsyn_get_params(int input, int output, int *md, int *pe, int *sdiv)
 	/* determine an appropriate value for the coarse selection using eqn. #5
 	 * with pe = 32768 (and round down which for signed values means away
 	 * from zero) */
-	lmd = ((preshift - 1048576) / 32768) - 1;         /* >>15? */
+	lmd = ((preshift - 1048576) / 32768) - 1;	/* >>15? */
 
 	/* calculate a value for pe that meets the output target */
-	lpe = -1 * (preshift - 1081344 - (32768 * lmd));  /* <<15? */
+	lpe = -1 * (preshift - 1081344 - (32768 * lmd));	/* <<15? */
 
 	/* finally give sdiv its true hardware form */
 	lsdiv--;
 	/* special case for 58593.75Hz and harmonics...
-	* can't quite seem to get the rounding right */
+	 * can't quite seem to get the rounding right */
 	if (lmd == -17 && lpe == 0) {
 		lmd = -16;
 		lpe = 32767;
@@ -240,86 +180,24 @@ int clk_fsyn_get_params(int input, int output, int *md, int *pe, int *sdiv)
 
 	/* return 0 if all variables meet their contraints */
 	return (lsdiv <= 7 && -16 <= lmd && lmd <= -1 && lpe <= 32767) ? 0 : -1;
-
-#endif
 }
 
 /* ========================================================================
-   Name:        clk_err_string
+   Name:	clk_err_string
    Description: Convert LLA error code to string.
    Returns:     const char *ErrMessage
    ======================================================================== */
 
 const char *clk_err_string(int err)
 {
-    static const char *errors[]={"unknown error","feature not supported","bad parameter","fatal error"};
-    if ( err > CLK_ERR_INTERNAL ) return(errors[0]);
-
-    return(errors[err]);
-}
+	static const char *errors[] = { "unknown error",
+		"feature not supported",
+		"bad parameter",
+		"fatal error"
+	};
 
-/* ========================================================================
-   Name:        clk_short_name
-   Description: Returns clock name with prefix skipped (XXX_).
-                "CLKA_DISP_200" becomes "DISP_200".
-   Returns:     const char *ShortName
-   ======================================================================== */
+	if (err > CLK_ERR_INTERNAL)
+		return (errors[0]);
 
-const char *clk_short_name(const char *name)
-{
-    const char *Ptr;
-
-    for( Ptr = name; *Ptr && (*Ptr!='_'); Ptr++ );
-    Ptr++;  /* Skipping '_' */
-
-    return(Ptr);
-}
-
-#if !defined(ST_OS21)
-#define TOLLERANCE	5
-#define tollerance	((rate * (TOLLERANCE))/100)
-
-int get_ratio_field(unsigned long rate, unsigned long prate, int *ratios)
-{
-	int idx;
-	unsigned long h_threshold = rate + tollerance;
-	unsigned long l_threshold = rate - tollerance;
-
-	if (!prate || !rate || !ratios)
-		return NO_MORE_RATIO;
-	if (rate > prate)
-		return NO_MORE_RATIO;
-	for (idx = 0; ratios[idx] != NO_MORE_RATIO; ++idx) {
-		if (ratios[idx] == RATIO_RESERVED)
-			continue;
-		if (!ratios[idx])
-			continue;
-		if (prate/ratios[idx] >= l_threshold &&
-		    prate/ratios[idx] <= h_threshold)
-			return idx;
-	}
-	return NO_MORE_RATIO;
-}
-
-int get_xratio_field(unsigned long rate, unsigned long prate,
-	struct xratio *ratios)
-{
-	int idx;
-	unsigned long h_threshold = rate + tollerance;
-	unsigned long l_threshold = rate - tollerance;
-	if (!prate || !rate || !ratios)
-		return NO_MORE_RATIO;
-	if (rate > prate)
-		return NO_MORE_RATIO;
-	for (idx = 0; ratios[idx].ratio != NO_MORE_RATIO; ++idx) {
-		if (ratios[idx].ratio == RATIO_RESERVED)
-			continue;
-		if (!ratios[idx].ratio)
-			continue;
-		if (prate/ratios[idx].ratio >= l_threshold &&
-		    prate/ratios[idx].ratio <= h_threshold)
-			return idx;
-	}
-	return NO_MORE_RATIO;
+	return (errors[err]);
 }
-#endif
diff --git a/arch/sh/kernel/cpu/sh4/clock-common.h b/arch/sh/kernel/cpu/sh4/clock-common.h
index a32b4f9..8c0508a 100644
--- a/arch/sh/kernel/cpu/sh4/clock-common.h
+++ b/arch/sh/kernel/cpu/sh4/clock-common.h
@@ -1,16 +1,17 @@
 /************************************************************************
 File  : Low Level clock API
-        Common LLA functions (SOC independant)
+	Common LLA functions (SOC independant)
 
 Author: F. Charpentier <fabrice.charpentier@st.com>
 
 Copyright (C) 2008 STMicroelectronics
+May be copied or modified under the terms of the GNU General Public
+ License.  See linux/COPYING for more information.
 ************************************************************************/
 
 #ifndef __CLKLLA_COMMON_H
 #define __CLKLLA_COMMON_H
 
-#ifndef ST_OS21
 #define NO_MORE_RATIO		-1
 #define RATIO_RESERVED		-2
 
@@ -22,41 +23,51 @@ struct xratio {
 };
 
 int get_xratio_field(unsigned long rate, unsigned long prate,
-	struct xratio *ratios);
-#endif
+		     struct xratio *ratios);
 
-#ifdef __cplusplus
-extern "C" {
-#endif
+/* ========================================================================
+   Name:	clk_info_get_index()
+   Description:
+   Params:
+   ======================================================================== */
+
+struct clk_info {
+	unsigned long clk_id;
+	unsigned long info;
+};
+
+int clk_info_get_index(unsigned long clk_id, struct clk_info *table,
+			       unsigned long t_size);
 
 /* ========================================================================
-   Name:        clk_pll800_freq()
+   Name:	clk_pll800_freq()
    Description: Convert PLLx_CFG to freq for PLL800
    Params:      'input' freq (Hz), 'cfg'=PLLx_CFG register value
    ======================================================================== */
 
-unsigned long clk_pll800_freq( unsigned long input, unsigned long cfg );
+unsigned long clk_pll800_freq(unsigned long input, unsigned long cfg);
 
 /* ========================================================================
-   Name:        clk_pll1600_freq()
+   Name:	clk_pll1600_freq()
    Description: Convert PLLx_CFG to freq for PLL1600
-                Always returns HS output value.
+		Always returns HS output value.
    Params:      'input' freq (Hz), 'cfg'=PLLx_CFG register value
    ======================================================================== */
 
-unsigned long clk_pll1600_freq( unsigned long input, unsigned long cfg );
+unsigned long clk_pll1600_freq(unsigned long input, unsigned long cfg);
 
 /* ========================================================================
-   Name:        clk_fsyn_get_rate()
+   Name:	clk_fsyn_get_rate()
    Description: Parameters to freq computation for frequency synthesizers
    ======================================================================== */
 
 /* This has to be enhanced to support several Fsyn types */
 
-unsigned long clk_fsyn_get_rate( unsigned long input, unsigned long pe, unsigned long md, unsigned long sd );
+unsigned long clk_fsyn_get_rate(unsigned long input, unsigned long pe,
+				unsigned long md, unsigned long sd);
 
 /* ========================================================================
-   Name:        clk_fsyn_get_params()
+   Name:	clk_fsyn_get_params()
    Description: Freq to parameters computation for frequency synthesizers
    Input:       input=input freq (Hz), output=output freq (Hz)
    Output:      updated *md, *pe & *sdiv
@@ -65,19 +76,15 @@ unsigned long clk_fsyn_get_rate( unsigned long input, unsigned long pe, unsigned
 
 /* This has to be enhanced to support several Fsyn types */
 
-int clk_fsyn_get_params( int input, int output, int *md, int *pe, int *sdiv );
+int clk_fsyn_get_params(int input, int output, int *md, int *pe,
+				int *sdiv);
 
 /* ========================================================================
-   Name:        clk_err_string
+   Name:	clk_err_string
    Description: Convert LLA error code to string.
    Returns:     const char *ErrMessage
    ======================================================================== */
 
-const char *clk_err_string( int err );
-
-
-#ifdef __cplusplus
-}
-#endif
+const char *clk_err_string(int err);
 
-#endif /* #ifndef __CLKLLA_COMMON_H */
+#endif				/* #ifndef __CLKLLA_COMMON_H */
diff --git a/arch/sh/kernel/cpu/sh4/clock-oslayer.h b/arch/sh/kernel/cpu/sh4/clock-oslayer.h
index 5cdf1a3..26a7047 100644
--- a/arch/sh/kernel/cpu/sh4/clock-oslayer.h
+++ b/arch/sh/kernel/cpu/sh4/clock-oslayer.h
@@ -1,114 +1,18 @@
-/*
- * OS Specific CLOCK LLA mappings
+/******************************************************************************
  *
- * Copyright (c)2008 STMicroelectronics
- */
+ * File name   : clock-oslayer.h
+ * Description : Low Level API - OS Specifics
+ *
+ * COPYRIGHT (C) 2009 STMicroelectronics - All Rights Reserved
+ *
+ * May be copied or modified under the terms of the GNU General Public
+ * License.  See linux/COPYING for more information.
+ *
+ *****************************************************************************/
 
 #ifndef __CLKLLA_OSLAYER_H
 #define __CLKLLA_OSLAYER_H
 
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-
-#ifdef ST_OS21
-
-#ifndef DEFINED_U32
-typedef unsigned int U32;
-#define DEFINED_U32
-#endif
-
-/* Clock operation registration macro (used by clock-xxxx.c) */
-#define REGISTER_OPS( _name, _desc, _init, _setparent, _setfreq, _recalc, _enable, _disable, \
-			_observe, _measure ) 				\
-static struct clk_ops  _name= {						\
-	.init=_init,							\
-	.set_parent=_setparent,						\
-	.set_rate=_setfreq,						\
-	.recalc=_recalc, 						\
-	.enable=_enable,						\
-	.disable=_disable,						\
-	.observe=_observe,						\
-	.get_measure=_measure, 						\
- }
-
-/* Clock registration macro (used by clock-xxxx.c) */
-#define REGISTER_CLK( _id, _ops, _nominal, _flags ) 			\
-[_id] = (clk_t){ .name = #_id,  \
-                 .id = _id,     \
-                 .ops = (_ops), \
-                 .flags=_flags, \
-                 .nominal_rate = _nominal \
-}
-
-/* Registers access functions */
-#include "stsys.h"
-#include "clock-regs.h"     /* Defined in "clock_lla/socs" */
-
-/* Register access macros.
-   WARNING: take care. Different macros depending on register type !!
-   CLOCKGENs => CLK_READ, CLK_WRITE
-   SYSCONF   => SYSCONF_READ, SYSCONF_WRITE
-   PIO       => PIO_SET_MODE to output clock
- */
-#define CLK_READ(a)     STSYS_ReadRegDev32LE(a)
-#define CLK_WRITE(a,d)  STSYS_WriteRegDev32LE(a,d)
-
-#define SYS_DEV 0
-#define SYS_STA 1
-#define SYS_CFG 2
-
-static inline U32 SYSCONF_READ(int type, int num, int lsb, int msb)
-{
-	unsigned long offset = ((type == 0) ? 0 : ((type == 1) ? 8 : 0x100)) + ((num) * 4 );
-	unsigned long tmp;
-	int field_bits = msb - lsb + 1;
-	tmp = STSYS_ReadRegDev32LE(offset + SYSCFG_BASE_ADDRESS);
-	if (field_bits != 32) {
-		tmp >>= lsb;
-		tmp &= (1 << field_bits) -1;
-	}
-	return tmp;
-}
-
-static inline void SYSCONF_WRITE(int type, int num, int lsb, int msb,
-	unsigned long value)
-{
-	unsigned long offset = ((type == 0) ? 0 : ((type == 1) ? 8 : 0x100)) + ((num) * 4 );
-	unsigned long tmp;
-	int field_bits = msb - lsb + 1;
-	tmp = STSYS_ReadRegDev32LE(offset + SYSCFG_BASE_ADDRESS);
-	if (field_bits != 32) {
-		unsigned long mask = ~(((1 << field_bits) -1) << lsb);
-		tmp &= mask;
-		tmp |= value << lsb;
-	}
-	STSYS_WriteRegDev32LE(offset + SYSCFG_BASE_ADDRESS, tmp);
-}
-
-#define STPIO_NONPIO		0	/* Non-PIO function (ST40 defn) */
-#define STPIO_BIDIR_Z1		0	/* Input weak pull-up (arch defn) */
-#define STPIO_BIDIR		1	/* Bidirectonal open-drain */
-#define STPIO_OUT		2	/* Output push-pull */
-#define STPIO_IN		4	/* Input Hi-Z */
-#define STPIO_ALT_OUT		6	/* Alt output push-pull (arch defn) */
-#define STPIO_ALT_BIDIR		7	/* Alt bidir open drain (arch defn) */
-
-static inline void PIO_SET_MODE(unsigned long bank, unsigned long line, long mode)
-{
-    unsigned long piobase = PIO_BASE_ADDRESS(bank);
-    unsigned long offset = ((mode & (1 << 0)) ? 0x4 : 0x8);
-    STSYS_WriteRegDev32LE((void*)(piobase + PIO_CLEAR_PnC0 + offset),
-        (0x1 << line));
-    STSYS_WriteRegDev32LE((void*)(piobase + PIO_SET_PnC1 + offset),
-        (0x1 << line));
-    STSYS_WriteRegDev32LE((void*)(piobase + PIO_CLEAR_PnC2 + offset),
-        (0x1 << line));
-}
-
-#else   /* LINUX */
-
 #include <linux/io.h>
 #include <linux/stm/sysconf.h>
 #include <linux/stm/pio.h>
@@ -118,42 +22,92 @@ static inline void PIO_SET_MODE(unsigned long bank, unsigned long line, long mod
 #define U32 					unsigned long
 
 /* Register access macros */
-#define CLK_READ(addr)          		ioread32(addr)
+#define CLK_READ(addr)	  			ioread32(addr)
 #define CLK_WRITE(addr,val)			iowrite32(val, addr)
 #define STSYS_ReadRegDev32LE(addr)		ioread32(addr)
 #define STSYS_WriteRegDev32LE(addr,val)		iowrite32(val, addr)
 
-static inline U32  SYSCONF_READ(unsigned long type, unsigned long num,
-	unsigned long lsb, unsigned long msb)
-{
+static inline U32 SYSCONF_READ(unsigned long type, unsigned long num,
+			       unsigned long lsb, unsigned long msb) {
 	static struct sysconf_field *sc;
 	if (!sc)
-		sc = sysconf_claim(type, num,  lsb, msb, "Clk lla");
-	return sysconf_read(sc);;
+		 sc = sysconf_claim(type, num, lsb, msb, "Clk lla");
+	 return sysconf_read(sc);;
 }
-
-static inline void SYSCONF_WRITE(unsigned long type, unsigned long num,
-	unsigned long lsb, unsigned long msb, unsigned long value)
-{
+static inline void SYSCONF_WRITE(unsigned long type,
+				 unsigned long num, unsigned long lsb,
+				 unsigned long msb, unsigned long value) {
 	static struct sysconf_field *sc;
 	if (!sc)
-		sc = sysconf_claim(type, num,  lsb, msb, "Clk lla");
+		sc = sysconf_claim(type, num, lsb, msb, "Clk lla");
 	sysconf_write(sc, value);
 }
 
-static inline void PIO_SET_MODE(unsigned long bank, unsigned long line, long mode)
+static inline
+void PIO_SET_MODE(unsigned long bank, unsigned long line, long mode)
 {
 	static struct stpio_pin *pio;
 	if (!pio)
-		pio = stpio_request_pin(bank, line, "Clk Observer", mode);
+		pio =
+		    stpio_request_pin(bank, line, "Clk Observer", mode);
 	else
 		stpio_configure_pin(pio, mode);
 }
 
+/*
+ * Linux needs 3 extra clocks:
+ * Both the clocks are virtually created as child clock of physical clock
+ * with a relationship 1:1 with the parent
+ *
+ * The GENERIC_LINUX_CLK has to be used to add 'virtual' clock
+ * used for backward compatibility in Linux.
+ * Mandatory Linux needs 3 clocks
+ * - sh4_clk: it's the cpu clock
+ * - module_clk: it's the parent of TMUs clock
+ * - comms_clk: it's the clock used by COMMS block
+ */
+#define GENERIC_LINUX_OPERATIONS()			\
+static int generic_clk_recalc(struct clk *clk_p)	\
+{							\
+	clk_p->rate = clk_p->parent->rate;		\
+	return 0;					\
+}							\
+static struct clk_ops generic_clk_ops =			\
+{							\
+	.init = generic_clk_recalc,			\
+	.recalc = generic_clk_recalc,			\
+};
+
+#define GENERIC_LINUX_CLK(_name, _parent)		\
+{							\
+	.name		= #_name,			\
+	.parent		= &(_parent),			\
+	.flags		= CLK_RATE_PROPAGATES,		\
+	.ops		= &generic_clk_ops,		\
+}
+
+#define GENERIC_LINUX_CLKS(_sh4_clk_p, _module_clk_p, _comms_clk_p)	\
+GENERIC_LINUX_OPERATIONS();						\
+static struct clk generic_linux_clks[] =				\
+{									\
+	GENERIC_LINUX_CLK(sh4_clk, _sh4_clk_p),				\
+	GENERIC_LINUX_CLK(module_clk, _module_clk_p),			\
+	GENERIC_LINUX_CLK(comms_clk, _comms_clk_p)			\
+}
+
+#define REGISTER_GENERIC_LINUX_CLKS()					\
+{									\
+	int i;								\
+	for (i = 0; i < ARRAY_SIZE(generic_linux_clks); ++i) {		\
+		generic_linux_clks[i].parent->flags |= CLK_RATE_PROPAGATES;\
+		if (!clk_register(&generic_linux_clks[i]))		\
+			clk_enable(&generic_linux_clks[i]);		\
+	}	\
+}
+
 #ifdef CONFIG_CLK_LOW_LEVEL_DEBUG
-typedef struct clk_ops_dbg
-{
-        const char *name;       /* Clocks group description ("clockgen A","LMI"...) */
+typedef struct clk_ops_dbg {
+	const char *name;/* Clocks group description ("clockgen A","LMI"...) */
 } clk_ops_dbg_t;
 
 /*
@@ -161,47 +115,47 @@ typedef struct clk_ops_dbg
  */
 
 /* Clock operation registration macro (used by clock-xxxx.c) */
-#define REGISTER_OPS( _name, _desc, _init, _setparent, _setfreq, _recalc, _enable, _disable, \
-			_observe, _measure )				\
+#define REGISTER_OPS(_name, _desc, _init, _setparent, _setfreq, _recalc,\
+		     _enable, _disable, _observe, _measure, _obspoint)	\
 static struct clk_ops  _name= {						\
-	.init=_init,							\
-	.set_parent=_setparent,						\
-	.set_rate=_setfreq,						\
-	.recalc=_recalc,						\
-	.enable=_enable,						\
-	.disable=_disable,						\
-	.observe=_observe,						\
-	.get_measure=_measure,						\
-	.private_data=(void*)&(clk_ops_dbg_t){ .name=_desc },		\
+	.init = _init,							\
+	.set_parent = _setparent,					\
+	.set_rate = _setfreq,						\
+	.recalc = _recalc,						\
+	.enable = _enable,						\
+	.disable = _disable,						\
+	.observe = _observe,						\
+	.get_measure = _measure,					\
+	.private_data = (void *) &(clk_ops_dbg_t)			\
+		{ .name = _desc,					\
+		  .obs_point = _obspoint },				\
 }
 
 /* Clock registration macro (used by clock-xxxx.c) */
-#define REGISTER_CLK( _id, _ops, _nominal, _flags )			\
+#define REGISTER_CLK(_id, _ops, _nominal, _flags)			\
 [_id] = (clk_t){ .name = #_id,						\
-		 .id = _id,						\
+		 .id = (_id),						\
 		 .ops = (_ops),						\
-		 .flags=_flags,						\
-		 .nominal_rate=_nominal,				\
+		 .flags = (_flags),					\
+		 .nominal_rate = (_nominal),				\
 }
 #else
 /*
  * CLock Operation without debug info
  */
-#define REGISTER_OPS( _name, _desc, _init, _setparent, _setfreq, _recalc, _enable, _disable, \
-			_observe, _measure )				\
+#define REGISTER_OPS(_name, _desc, _init, _setparent, _setfreq, _recalc,\
+		     _enable, _disable, _observe, _measure, _obspoint)	\
 static struct clk_ops  _name= {						\
-	.init=_init,							\
-	.set_parent=_setparent,						\
-	.set_rate=_setfreq,						\
-	.recalc=_recalc,						\
-	.enable=_enable,						\
-	.disable=_disable,						\
-	.observe=_observe,						\
-	.get_measure=_measure,						\
+	.init = _init,							\
+	.set_parent = _setparent,					\
+	.set_rate = _setfreq,						\
+	.recalc = _recalc,						\
+	.enable = _enable,						\
+	.disable = _disable,						\
 }
 
 /* Clock registration macro (used by clock-xxxx.c) */
-#define REGISTER_CLK( _id, _ops, _nominal, _flags )			\
+#define REGISTER_CLK(_id, _ops, _nominal, _flags)			\
 [_id] = (clk_t){ .name = #_id,						\
 		 .id = _id,						\
 		 .ops = (_ops),						\
@@ -209,22 +163,16 @@ static struct clk_ops  _name= {						\
 }
 #endif
 
-#define time_ticks_per_sec()                    CONFIG_HZ
-#define task_delay(x)                           mdelay((x)/CONFIG_HZ)
+#define time_ticks_per_sec()		    CONFIG_HZ
+#define task_delay(x)			   mdelay((x)/CONFIG_HZ)
 
 /* Low level API errors */
-typedef enum clk_err
-{
+typedef enum clk_err {
 	CLK_ERR_NONE = 0,
 	CLK_ERR_FEATURE_NOT_SUPPORTED = -EPERM,
 	CLK_ERR_BAD_PARAMETER = -EINVAL,
-	CLK_ERR_INTERNAL = -EFAULT /* Internal & fatal error */
+	CLK_ERR_INTERNAL = -EFAULT	/* Internal & fatal error */
 } clk_err_t;
 
-#endif	/* End Linux */
 
-
-#ifdef __cplusplus
-}
-#endif
 #endif /* #ifndef __CLKLLA_OSLAYER_H */
-- 
1.6.0.6

