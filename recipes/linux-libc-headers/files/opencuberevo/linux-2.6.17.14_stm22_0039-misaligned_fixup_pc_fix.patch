When handling a misaligned access in the kernel, if the faulting instruction
has an entry in the exception table, the PC will already have been adjusted
to point to the fixup table. In this case we need to prevent the misaligned
fixup code adjusting the PC again on the assumption that it still points to
the faulting instruction which needs to be skipped.

Signed-off-by: Stuart Menefy <stuart.menefy@st.com>
Index: linux/arch/sh/kernel/traps.c
===================================================================
--- linux.orig/arch/sh/kernel/traps.c	2007-08-09 13:56:42.972590000 +0100
+++ linux/arch/sh/kernel/traps.c	2007-08-13 12:38:16.228722000 +0100
@@ -131,13 +131,17 @@
  * desired behaviour
  * - note that PC _may not_ point to the faulting instruction
  *   (if that instruction is in a branch delay slot)
- * - return 0 if emulation okay, -EFAULT on existential error
+ * - return:
+ *   0 if emulation okay (PC unchanged)
+ *   1 if emulation OK (PC already updated)
+ *   -EFAULT on existential error
  */
 static int handle_unaligned_ins(u16 instruction, struct pt_regs *regs)
 {
 	int ret, index, count;
 	unsigned long *rm, *rn;
 	unsigned char *src, *dst;
+	const struct exception_table_entry *fixup;
 
 	index = (instruction >> 8) & 15;	/* 0x0F00 */
 	rn = &regs->regs[index];
@@ -304,7 +308,10 @@
 	/* Argh. Address not only misaligned but also non-existent.
 	 * Raise an EFAULT and see if it's trapped
 	 */
-	return die_if_no_fixup("Fault in unaligned fixup", regs, 0);
+	ret = die_if_no_fixup("Fault in unaligned fixup", regs, 0);
+	if (ret == 0)
+		ret = 1;
+	return ret;
 }
 
 /*
@@ -531,7 +538,7 @@
 		tmp = handle_unaligned_access(instruction, regs);
 		set_fs(oldfs);
 
-		if (tmp == 0) {
+		if (tmp >= 0) {
 			MARK(kernel_arch_trap_exit, MARK_NOARGS);
 			return;	/* sorted */
 		}
