From 911e4000157a3b328695e1e1817ee3715cf35203 Mon Sep 17 00:00:00 2001
From: Francesco M. Virlinzi <francesco.virlinzi@st.com>
Date: Fri, 13 Feb 2009 11:32:35 +0100
Subject: [PATCH] sh_stm: Add SOC specific PM support for the devices

This patch adds SoC specific PM functions for USB and EMI.  It attempts
to isolate the driver from the SoC specific functionality required for
PM.

Signed-off-by: Francesco M. Virlinzi <francesco.virlinzi@st.com>
---
 arch/sh/kernel/cpu/sh4/platform-pm-stb7100.c |   84 ++++++++++++++++++++++++
 arch/sh/kernel/cpu/sh4/platform-pm-stx5197.c |   88 ++++++++++++++++++++++++++
 arch/sh/kernel/cpu/sh4/platform-pm-stx7105.c |   74 +++++++++++++++++++++
 arch/sh/kernel/cpu/sh4/platform-pm-stx7111.c |   87 +++++++++++++++++++++++++
 arch/sh/kernel/cpu/sh4/platform-pm-stx7141.c |   67 +++++++++++++++++++
 arch/sh/kernel/cpu/sh4/platform-pm-stx7200.c |   78 +++++++++++++++++++++++
 arch/sh/kernel/cpu/sh4/setup-stb7100.c       |    7 ++
 arch/sh/kernel/cpu/sh4/setup-stx5197.c       |    5 ++
 arch/sh/kernel/cpu/sh4/setup-stx7105.c       |    8 +++
 arch/sh/kernel/cpu/sh4/setup-stx7111.c       |    9 +++-
 arch/sh/kernel/cpu/sh4/setup-stx7141.c       |    7 ++
 arch/sh/kernel/cpu/sh4/setup-stx7200.c       |    7 ++
 12 files changed, 520 insertions(+), 1 deletions(-)
 create mode 100644 arch/sh/kernel/cpu/sh4/platform-pm-stb7100.c
 create mode 100644 arch/sh/kernel/cpu/sh4/platform-pm-stx5197.c
 create mode 100644 arch/sh/kernel/cpu/sh4/platform-pm-stx7105.c
 create mode 100644 arch/sh/kernel/cpu/sh4/platform-pm-stx7111.c
 create mode 100644 arch/sh/kernel/cpu/sh4/platform-pm-stx7141.c
 create mode 100644 arch/sh/kernel/cpu/sh4/platform-pm-stx7200.c

diff --git a/arch/sh/kernel/cpu/sh4/platform-pm-stb7100.c b/arch/sh/kernel/cpu/sh4/platform-pm-stb7100.c
new file mode 100644
index 0000000..fef4550
--- /dev/null
+++ b/arch/sh/kernel/cpu/sh4/platform-pm-stb7100.c
@@ -0,0 +1,84 @@
+/*
+ * platform Pm capability - STb710x
+ *
+ * Copyright (C) 2009 STMicroelectronics Limited
+ * Author: Francesco M. Virlinzi <francesco.virlinzi@st.com>
+ *
+ * This file is subject to the terms and conditions of the GNU General Public
+ * License.  See the file "COPYING" in the main directory of this archive
+ * for more details.
+ */
+
+#include <linux/stm/pm.h>
+
+#ifdef CONFIG_PM
+static int
+usb_pm_pwd_dwn(struct platform_device *dev, int host_phy, int pwd)
+{
+	static struct sysconf_field *sc;
+
+	if(!sc)
+		sc = sysconf_claim(SYS_CFG, 2, 4, 5, "usb rx/tx");
+
+	sysconf_write(sc, (pwd ? 0 : 3));
+	return 0;
+}
+
+static int
+usb_pm_pwd_ack(struct platform_device *dev, int host_phy, int ack)
+{
+	/* It isn't clear what the SysSTA_0 does... */
+	mdelay(10);
+	return 0;
+}
+
+static int
+usb_pm_sw_reset(struct platform_device *dev)
+{
+	static struct sysconf_field *sc;
+	unsigned long reg;
+
+	if (!sc)
+		sc = sysconf_claim(SYS_CFG, 2, 1, 1, "usb reset");
+	reg = sysconf_read(sc);
+	if (reg) {
+		sysconf_write(sc, 0);
+		mdelay(30);
+	}
+	return 0;
+}
+
+/*
+ * The EMI sysconf capabilities seems not working!
+ */
+static int
+emi_pwd_dwn_req(struct platform_device *pdev, int host_phy, int down)
+{
+	static struct sysconf_field *sc;
+	if (!sc)
+		sc = sysconf_claim(SYS_CFG, 32, 1, 1, "emi pwr req");
+
+/*	sysconf_write(sc, (down ? 1 : 0));*/
+
+	return 0;
+}
+
+static int
+emi_pwd_dwn_ack(struct platform_device *pdev, int host_phy, int ack)
+{
+	static struct sysconf_field *sc;
+
+	if (!sc)
+		sc = sysconf_claim(SYS_STA, 15, 0, 0, "emi pwr ack");
+	mdelay(10);
+/*	while (sysconf_read(sc) != ack);*/
+	return 0;
+}
+
+static struct platform_device_pm stx710x_pm_devices[] = {
+pm_plat_dev(&st_usb_device, NULL, usb_pm_pwd_dwn, usb_pm_pwd_ack,
+	usb_pm_sw_reset),
+pm_plat_name("emi", NULL, emi_pwd_dwn_req, emi_pwd_dwn_ack, NULL),
+};
+
+#endif
diff --git a/arch/sh/kernel/cpu/sh4/platform-pm-stx5197.c b/arch/sh/kernel/cpu/sh4/platform-pm-stx5197.c
new file mode 100644
index 0000000..8871659
--- /dev/null
+++ b/arch/sh/kernel/cpu/sh4/platform-pm-stx5197.c
@@ -0,0 +1,88 @@
+/*
+ * Platform PM Capability - STx5197
+ *
+ * Copyright (C) 2008 STMicroelectronics Limited
+ * Author: Francesco M. Virlinzi <francesco.virlinzi@st.com>
+ *
+ * This file is subject to the terms and conditions of the GNU General Public
+ * License.  See the file "COPYING" in the main directory of this archive
+ * for more details.
+ */
+#include <linux/stm/pm.h>
+#ifdef CONFIG_PM
+static int
+usb_pwr_ack(struct platform_device *dev, int host_phy, int on)
+{
+	static struct sysconf_field *sc;
+
+	if (!sc)
+		sc = sysconf_claim(SYS_STA, CFG_MONITOR_E, 30, 30,
+			"usb pwd ack");
+
+	while (sysconf_read(sc) != on);
+
+	return 0;
+}
+
+static int
+usb_pwr_dwn(struct platform_device *dev, int host_phy, int pwd)
+{
+	static struct sysconf_field *sc;
+
+	/* Power on USB */
+	if (!sc) {
+		sc = sysconf_claim(SYS_CFG, CFG_CONTROL_H, 8, 8, "usb pwd req");
+	}
+
+	sysconf_write(sc, (pwd ? 1 : 0));
+
+	return 0;
+}
+#if 0
+static int
+usb_sw_reset(struct platform_device *dev, int host_phy)
+{
+	static struct sysconf_field *sc;
+
+	/* Reset USB */
+	if (!sc)
+		sc = sysconf_claim(SYS_CFG, 4, 4, 4, "USB_RST");
+	sysconf_write(sc, 0);
+	mdelay(10);
+	sysconf_write(sc, 1);
+	mdelay(10);
+
+	return 0;
+}
+#endif
+
+static int
+emi_pwr_dwn_req(struct platform_device *dev, int host_phy, int dwn)
+{
+	static struct sysconf_field *sc;
+	if (!sc)
+		sc = sysconf_claim(SYS_CFG, CFG_CONTROL_I, 31, 31,
+			"emi pwd req");
+
+	sysconf_write(sc, (dwn ? 1 : 0));
+	return 0;
+}
+
+static int
+emi_pwr_dwn_ack(struct platform_device *dev, int host_phy, int ack)
+{
+	static struct sysconf_field *sc;
+	if (!sc)
+		sc = sysconf_claim(SYS_DEV, CFG_MONITOR_J, 20, 20,
+			"emi pwr ack");
+/*	while (sysconf_read(sc) != ack);*/
+	mdelay(10);
+	return 0;
+}
+
+
+static struct platform_device_pm stx5197_pm_devices[] = {
+pm_plat_name("emi", NULL, emi_pwr_dwn_req, emi_pwr_dwn_ack, NULL),
+pm_plat_dev(&st_usb, NULL, usb_pwr_dwn, usb_pwr_ack, NULL),
+};
+#endif
diff --git a/arch/sh/kernel/cpu/sh4/platform-pm-stx7105.c b/arch/sh/kernel/cpu/sh4/platform-pm-stx7105.c
new file mode 100644
index 0000000..a004199
--- /dev/null
+++ b/arch/sh/kernel/cpu/sh4/platform-pm-stx7105.c
@@ -0,0 +1,74 @@
+/*
+ * Platform PM Capability STx7105
+ *
+ * Copyright (C) 2009 STMicroelectronics Limited
+ * Author: Francesco M. Virlinzi <francesco.virlinzi@st.com>
+ *
+ * This file is subject to the terms and conditions of the GNU General Public
+ * License.  See the file "COPYING" in the main directory of this archive
+ * for more details.
+ */
+#include <linux/stm/pm.h>
+#ifdef CONFIG_PM
+static int
+emi_pwr_dwn_req(struct platform_device *dev, int host_phy, int dwn)
+{
+	static struct sysconf_field *sc;
+	if (!sc)
+		sc = sysconf_claim(SYS_CFG, 12, 1, 1, "emi pwr req");
+
+	sysconf_write(sc, (dwn ? 1 : 0));
+	return 0;
+}
+
+static int
+emi_pwr_dwn_ack(struct platform_device *dev, int host_phy, int ack)
+{
+	static struct sysconf_field *sc;
+	if (!sc)
+		sc = sysconf_claim(SYS_STA, 15, 1, 1, "emi pwr ack");
+/*	while (sysconf_read(sc) != ack);*/
+	mdelay(50);
+	return 0;
+}
+
+static int
+usb_pwr_req(struct platform_device *dev, int host_phy, int dwn)
+{
+	static struct sysconf_field *sc[2];
+	static struct sysconf_field *sc_phy[2];
+	int port = dev->id;
+	if (!sc[port]) {
+		sc_phy[port] = sysconf_claim(SYS_CFG, 32, 6+port, 6+port,
+				"USB phy");
+		sc[port] = sysconf_claim(SYS_CFG, 32, 4+port, 4+port, "USB");
+	}
+
+	sysconf_write(sc[port], (dwn ? 1 : 0));
+	sysconf_write(sc_phy[port], (dwn ? 1 : 0));
+	return 0;
+}
+
+static int
+usb_pwr_ack(struct platform_device *dev, int host_phy, int ack)
+{
+	static struct sysconf_field *sc[2];
+	int port = dev->id;
+	if (!sc[port])
+		sc[port] = sysconf_claim(SYS_STA, 15, 4 + port, 4 + port, "USB");
+
+	while (sysconf_read(sc[port]) != ack);
+	return 0;
+}
+
+static struct platform_device_pm stx7105_pm_devices[] = {
+pm_plat_name("emi", NULL, emi_pwr_dwn_req, emi_pwr_dwn_ack, NULL),
+pm_plat_dev(&usb_device[0], NULL, usb_pwr_req, usb_pwr_ack, NULL),
+pm_plat_dev(&usb_device[1], NULL, usb_pwr_req, usb_pwr_ack, NULL),
+/*
+ * There should be also the SATA entry... but:
+ * - on cut 1 they are broken ...
+ * - on cut 2 there should be only one ...
+ */
+};
+#endif
diff --git a/arch/sh/kernel/cpu/sh4/platform-pm-stx7111.c b/arch/sh/kernel/cpu/sh4/platform-pm-stx7111.c
new file mode 100644
index 0000000..b5aeef2
--- /dev/null
+++ b/arch/sh/kernel/cpu/sh4/platform-pm-stx7111.c
@@ -0,0 +1,87 @@
+/*
+ * Platform PM Capability - STx7111
+ *
+ * Copyright (C) 2009 STMicroelectronics Limited
+ * Author: Francesco M. Virlinzi <francesco.virlinzi@st.com>
+ *
+ * This file is subject to the terms and conditions of the GNU General Public
+ * License.  See the file "COPYING" in the main directory of this archive
+ * for more details.
+ */
+#include <linux/stm/pm.h>
+#ifdef CONFIG_PM
+static int
+usb_pwr_ack(struct platform_device *dev, int host_phy, int on)
+{
+	static struct sysconf_field *sc;
+
+	if (!sc)
+		sc = sysconf_claim(SYS_STA, 15, 4, 4, "USB_PW_ACK");
+
+	while (sysconf_read(sc) != on);
+
+	return 0;
+}
+
+static int
+usb_pwr_dwn(struct platform_device *dev, int host_phy, int pwd)
+{
+	static struct sysconf_field *sc, *sc_clk;
+
+	/* Power on USB */
+	if (!sc) {
+		sc = sysconf_claim(SYS_CFG, 32, 4, 4, "USB_PW_REQ");
+		sc_clk = sysconf_claim(SYS_CFG, 40, 2, 3, "usb_clk");
+	}
+
+	sysconf_write(sc, (pwd ? 1 : 0));
+	sysconf_write(sc_clk, (pwd ? 3 : 0));
+
+	return 0;
+}
+
+static int
+usb_sw_reset(struct platform_device *dev, int host_phy)
+{
+	static struct sysconf_field *sc;
+
+	/* Reset USB */
+	if (!sc)
+		sc = sysconf_claim(SYS_CFG, 4, 4, 4, "USB_RST");
+	sysconf_write(sc, 0);
+	mdelay(10);
+	sysconf_write(sc, 1);
+	mdelay(10);
+
+	return 0;
+}
+
+
+static int
+emi_pwr_dwn_req(struct platform_device *dev, int host_phy, int dwn)
+{
+	static struct sysconf_field *sc;
+	if (!sc)
+		sc = sysconf_claim(SYS_CFG, 32, 1, 1, "emi pwr");
+
+	sysconf_write(sc, (dwn ? 1 : 0));
+	return 0;
+}
+
+static int
+emi_pwr_dwn_ack(struct platform_device *dev, int host_phy, int ack)
+{
+	static struct sysconf_field *sc;
+	if (!sc)
+		sc = sysconf_claim(SYS_STA, 15, 1, 1, "emi pwr ack");
+/*	while (sysconf_read(sc) != ack);*/
+	mdelay(10);
+	return 0;
+}
+
+
+static struct platform_device_pm stx7111_pm_devices[] = {
+pm_plat_name("emi", NULL, emi_pwr_dwn_req, emi_pwr_dwn_ack, NULL),
+pm_plat_dev(&st_usb, NULL, usb_pwr_dwn, usb_pwr_ack, usb_sw_reset),
+};
+#endif
diff --git a/arch/sh/kernel/cpu/sh4/platform-pm-stx7141.c b/arch/sh/kernel/cpu/sh4/platform-pm-stx7141.c
new file mode 100644
index 0000000..d030177
--- /dev/null
+++ b/arch/sh/kernel/cpu/sh4/platform-pm-stx7141.c
@@ -0,0 +1,67 @@
+/*
+ * Platform PM Capability - STx7141
+ *
+ * Copyright (C) 2009 STMicroelectronics Limited
+ * Author: Francesco M. Virlinzi <francesco.virlinzi@st.com>
+ *
+ * This file is subject to the terms and conditions of the GNU General Public
+ * License.  See the file "COPYING" in the main directory of this archive
+ * for more details.
+ */
+#include <linux/stm/pm.h>
+
+#ifdef CONFIG_PM
+static int
+usb_pwr_req(struct platform_device *dev, int host_phy, int dwn)
+{
+	static struct sysconf *sc[4];
+	int port = dev->id;
+
+	if (!sc[port])
+		sc[port] = sysconf_claim(SYS_CFG, 32, 7+port, 7+port, "USB");
+	sysconf_write(sc[port], (dwn ? 1 : 0));
+	return 0;
+}
+
+static int
+usb_pwr_ack(struct platform_device *dev, int host_phy, int ack)
+{
+	static struct sysconf *sc[4];
+	int port = dev->id;
+
+	if (!sc[port])
+		sysconf_claim(SYS_STA, 15, 7+port, 7+port, "USB");
+	do {
+	} while (sysconf_read(sc) != ack);
+	return 0;
+}
+
+static int
+emi_pwr_dwn_req(struct platform_device *dev, int host_phy, int dwn)
+{
+	static struct sysconf_field *sc;
+	if (!sc)
+		sc = sysconf_claim(SYS_CFG, 32, 1, 1, "emi pwr");
+	sysconf_write(sc, (dwn ? 1 : 0));
+	return 0;
+}
+
+static int
+emi_pwr_dwn_ack(struct platform_device *dev, int host_phy, int ack)
+{
+	static struct sysconf_field *sc;
+	if (!sc)
+		sc = sysconf_claim(SYS_STA, 15, 1, 1, "emi pwr ack");
+/*	while (sysconf_read(sc) != ack);*/
+	mdelay(10);
+	return 0;
+}
+
+static struct platform_device_pm stx7141_pm_devices[] = {
+pm_plat_name("emi", NULL, emi_pwr_dwn_req, emi_pwr_dwn_ack, NULL),
+pm_plat_dev(&st_usb_device[0], NULL, usb_pwr_req, usb_pwr_ack, NULL),
+pm_plat_dev(&st_usb_device[1], NULL, usb_pwr_req, usb_pwr_ack, NULL),
+pm_plat_dev(&st_usb_device[2], NULL, usb_pwr_req, usb_pwr_ack, NULL),
+pm_plat_dev(&st_usb_device[3], NULL, usb_pwr_req, usb_pwr_ack, NULL),
+};
+#endif
diff --git a/arch/sh/kernel/cpu/sh4/platform-pm-stx7200.c b/arch/sh/kernel/cpu/sh4/platform-pm-stx7200.c
new file mode 100644
index 0000000..0f7ba80
--- /dev/null
+++ b/arch/sh/kernel/cpu/sh4/platform-pm-stx7200.c
@@ -0,0 +1,78 @@
+/*
+ * Platform PM Capability - STx7200
+ *
+ * Copyright (C) 2009 STMicroelectronics Limited
+ * Author: Francesco M. Virlinzi <francesco.virlinzi@st.com>
+ *
+ * This file is subject to the terms and conditions of the GNU General Public
+ * License.  See the file "COPYING" in the main directory of this archive
+ * for more details.
+ */
+#include <linux/stm/pm.h>
+#ifdef CONFIG_PM
+static int
+usb_pwr_dwn(struct platform_device *pdev, int host_phy, int pwd)
+{
+	static struct sysconf_field *sc[3];
+	int port = pdev->id;
+
+	/* Power up port */
+	if (!sc[port])
+		sc[port] = sysconf_claim(SYS_CFG, 22, 3+port, 3+port,
+				"usb pwr");
+
+	sysconf_write(sc[port], (pwd ? 1 : 0));
+
+	return 0;
+}
+
+static int
+usb_pwr_ack(struct platform_device *pdev, int host_phy, int ack)
+{
+	static struct sysconf_field *sc[3];
+	int port = pdev->id;
+	if (!sc[port])
+		sc[port] = sysconf_claim(SYS_STA, 13, 2+port, 2+port,
+					"usb ack");
+
+	while (sysconf_read(sc[port]) != ack);
+
+	return 0;
+}
+
+static int
+usb_sw_reset(struct platform_device *dev, int host_phy)
+{
+	/* it seems there is no reset on this platform... */
+	return 0;
+}
+
+static int
+emi_pwd_dwn_req(struct platform_device *pdev, int host_phy, int pwd)
+{
+	static struct sysconf_field *sc;
+	if (!sc)
+		sc = sysconf_claim(SYS_CFG, 32, 1, 1, "emi pwr req");
+
+	sysconf_write(sc, (pwd ? 1 : 0));
+	return 0;
+}
+
+static int
+emi_pwd_dwn_ack(struct platform_device *pdev, int host_phy, int ack)
+{
+	static struct sysconf_field *sc;
+	if (!sc)
+		sc = sysconf_claim(SYS_STA, 8, 1, 1, "emi pwr ack");
+/*	while (sysconf_read(sc) != ack);*/
+	mdelay(50);
+	return 0;
+}
+
+static struct platform_device_pm stx7200_pm_devices[] = {
+pm_plat_name("emi", NULL, emi_pwd_dwn_req, emi_pwd_dwn_ack, NULL),
+pm_plat_dev(&st_usb[0], NULL, usb_pwr_dwn, usb_pwr_ack, usb_sw_reset),
+pm_plat_dev(&st_usb[1], NULL, usb_pwr_dwn, usb_pwr_ack, usb_sw_reset),
+pm_plat_dev(&st_usb[2], NULL, usb_pwr_dwn, usb_pwr_ack, usb_sw_reset),
+};
+#endif
diff --git a/arch/sh/kernel/cpu/sh4/setup-stb7100.c b/arch/sh/kernel/cpu/sh4/setup-stb7100.c
index d4f7308..6c1b2b4 100644
--- a/arch/sh/kernel/cpu/sh4/setup-stb7100.c
+++ b/arch/sh/kernel/cpu/sh4/setup-stb7100.c
@@ -135,12 +135,14 @@ void __init stx7100_configure_usb(void)
 	pin = stpio_request_pin(5,7, "USBPWR", STPIO_OUT);
 	stpio_set_pin(pin, 1);
 
+#ifndef CONFIG_PM
 	sc = sysconf_claim(SYS_CFG, 2, 1, 1, "usb");
 	reg = sysconf_read(sc);
 	if (reg) {
 		sysconf_write(sc, 0);
 		mdelay(30);
 	}
+#endif
 
 	platform_device_register(&st_usb_device);
 
@@ -917,11 +919,16 @@ static struct platform_device *stx710x_devices[] __initdata = {
 	&devrandom_rng_device,
 };
 
+#include "./platform-pm-stb7100.c"
+
 static int __init stx710x_devices_setup(void)
 {
 	fdma_setup(chip_7109, chip_revision);
 	pio_late_setup();
 
+	platform_add_pm_devices(stx710x_pm_devices,
+				ARRAY_SIZE(stx710x_pm_devices));
+
 	return platform_add_devices(stx710x_devices,
 				    ARRAY_SIZE(stx710x_devices));
 }
diff --git a/arch/sh/kernel/cpu/sh4/setup-stx5197.c b/arch/sh/kernel/cpu/sh4/setup-stx5197.c
index 51566ef..9831401 100644
--- a/arch/sh/kernel/cpu/sh4/setup-stx5197.c
+++ b/arch/sh/kernel/cpu/sh4/setup-stx5197.c
@@ -720,8 +720,13 @@ static struct platform_device *stx5197_devices[] __initdata = {
 	&ilc3_device,
 };
 
+#include "./platform-pm-stx5197.c"
+
 static int __init stx5197_devices_setup(void)
 {
+	platform_add_pm_devices(stx5197_pm_devices,
+		ARRAY_SIZE(stx5197_pm_devices));
+
 	return platform_add_devices(stx5197_devices,
 				    ARRAY_SIZE(stx5197_devices));
 }
diff --git a/arch/sh/kernel/cpu/sh4/setup-stx7105.c b/arch/sh/kernel/cpu/sh4/setup-stx7105.c
index 20430c8..2ab0ea9 100644
--- a/arch/sh/kernel/cpu/sh4/setup-stx7105.c
+++ b/arch/sh/kernel/cpu/sh4/setup-stx7105.c
@@ -25,6 +25,7 @@
 #include <linux/mtd/nand.h>
 #include <linux/mtd/partitions.h>
 #include <linux/dma-mapping.h>
+#include <linux/delay.h>
 #include <asm/irq-ilc.h>
 
 static u64 st40_dma_mask = DMA_32BIT_MASK;
@@ -127,6 +128,7 @@ void __init stx7105_configure_usb(int port, struct usb_init_data *data)
 	/* USB PHY clock from alternate pad? */
 	/* sysconf_claim(SYS_CFG, 40, 2,2, "USB"); */
 
+#ifndef CONFIG_PM
 	/* Power up USB PHY */
 	sc = sysconf_claim(SYS_CFG, 32, 6+port,6+port, "USB");
 	sysconf_write(sc, 0);
@@ -134,6 +136,7 @@ void __init stx7105_configure_usb(int port, struct usb_init_data *data)
 	/* Power up USB host */
 	sc = sysconf_claim(SYS_CFG, 32, 4+port,4+port, "USB");
 	sysconf_write(sc, 0);
+#endif
 
 	/* USB overcurrent enable */
 	sc = sysconf_claim(SYS_CFG, 4, 11+port,11+port, "USBOC");
@@ -1345,8 +1348,13 @@ static struct platform_device *stx7105_devices[] __initdata = {
 	&devrandom_rng_device,
 };
 
+#include "./platform-pm-stx7105.c"
+
 static int __init stx7105_devices_setup(void)
 {
+	platform_add_pm_devices(stx7105_pm_devices,
+				    ARRAY_SIZE(stx7105_pm_devices));
+
 	return platform_add_devices(stx7105_devices,
 				    ARRAY_SIZE(stx7105_devices));
 }
diff --git a/arch/sh/kernel/cpu/sh4/setup-stx7111.c b/arch/sh/kernel/cpu/sh4/setup-stx7111.c
index d3eaee7..dec8f0c 100644
--- a/arch/sh/kernel/cpu/sh4/setup-stx7111.c
+++ b/arch/sh/kernel/cpu/sh4/setup-stx7111.c
@@ -13,6 +13,7 @@
 #include <linux/serial.h>
 #include <linux/io.h>
 #include <linux/i2c.h>
+#include <linux/delay.h>
 #include <linux/stm/soc.h>
 #include <linux/stm/soc_init.h>
 #include <linux/stm/pio.h>
@@ -55,10 +56,11 @@ void __init stx7111_configure_usb(int inv_enable)
 	static struct stpio_pin *pin;
 	struct sysconf_field *sc;
 
+#ifndef CONFIG_PM
 	/* Power on USB */
 	sc = sysconf_claim(SYS_CFG, 32, 4,4, "USB");
 	sysconf_write(sc, 0);
-
+#endif
 	/* Work around for USB over-current detection chip being
 	 * active low, and the 7111 being active high.
 	 * Note this is an undocumented bit, which apparently enables
@@ -944,8 +946,13 @@ static struct platform_device *stx7111_devices[] __initdata = {
 	&devrandom_rng_device,
 };
 
+#include "./platform-pm-stx7111.c"
+
 static int __init stx7111_devices_setup(void)
 {
+	platform_add_pm_devices(stx7111_pm_devices,
+		ARRAY_SIZE(stx7111_pm_devices));
+
 	return platform_add_devices(stx7111_devices,
 				    ARRAY_SIZE(stx7111_devices));
 }
diff --git a/arch/sh/kernel/cpu/sh4/setup-stx7141.c b/arch/sh/kernel/cpu/sh4/setup-stx7141.c
index 8c78bfc..c7563ff 100644
--- a/arch/sh/kernel/cpu/sh4/setup-stx7141.c
+++ b/arch/sh/kernel/cpu/sh4/setup-stx7141.c
@@ -259,11 +259,13 @@ void __init stx7141_configure_usb(int port)
 	}
 
 	/* Power up USB */
+#ifndef CONFIG_PM
 	sc = sysconf_claim(SYS_CFG, 32, 7+port, 7+port, "USB");
 	sysconf_write(sc, 0);
 	sc = sysconf_claim(SYS_STA, 15, 7+port, 7+port, "USB");
 	do {
 	} while (sysconf_read(sc));
+#endif
 
 	stx7141_pio_sysconf(usb_pins[port].pwr.port,
 			    usb_pins[port].pwr.pin,
@@ -1299,8 +1301,13 @@ static struct platform_device *stx7141_devices[] __initdata = {
 	&devrandom_rng_device,
 };
 
+#include "./platform-pm-stx7141.c"
+
 static int __init stx7141_devices_setup(void)
 {
+	platform_add_pm_devices(stx7141_pm_devices,
+		ARRAY_SIZE(stx7141_pm_devices));
+
 	return platform_add_devices(stx7141_devices,
 				    ARRAY_SIZE(stx7141_devices));
 }
diff --git a/arch/sh/kernel/cpu/sh4/setup-stx7200.c b/arch/sh/kernel/cpu/sh4/setup-stx7200.c
index 9be709d..b9d59a5 100644
--- a/arch/sh/kernel/cpu/sh4/setup-stx7200.c
+++ b/arch/sh/kernel/cpu/sh4/setup-stx7200.c
@@ -365,9 +365,11 @@ void __init stx7200_configure_usb(int port)
 		first = 0;
 	}
 
+#ifndef CONFIG_PM
 	/* Power up port */
 	sc = sysconf_claim(SYS_CFG, 22, 3+port, 3+port, "usb");
 	sysconf_write(sc, 0);
+#endif
 
 	pio = stpio_request_pin(7, power_pins[port], "USB power",
 				STPIO_ALT_OUT);
@@ -1315,10 +1317,15 @@ static struct platform_device *stx7200_devices[] __initdata = {
 	&devrandom_rng_device,
 };
 
+#include "./platform-pm-stx7200.c"
+
 static int __init stx7200_devices_setup(void)
 {
 	pio_late_setup();
 
+	platform_add_pm_devices(stx7200_pm_devices,
+				ARRAY_SIZE(stx7200_pm_devices));
+
 	return platform_add_devices(stx7200_devices,
 				    ARRAY_SIZE(stx7200_devices));
 }
-- 
1.5.6.3

