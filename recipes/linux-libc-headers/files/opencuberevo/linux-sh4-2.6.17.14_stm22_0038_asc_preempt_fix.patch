The asc_set_termios_cflag() function in stasc.c is unsafe.

The following rare sequence can occur if the the kernel is
still printing messages when init runs:

 - asc_set_termios_cflag() function is called
 - it disables the serial port.  
 - interrupts are not guaranteed to be disabled and pre-emption 
   is also possible.
 - an interrupt occurs before the serial port is started again
 - this interrupt function contains a printk()
 - put_char() will then spin forever with interrupts disabled...

This patch fixes the problem by using spin_lock_irq_save.
It also contains minor code clean-ups.

Signed-off-by: Carl Shaw <carl.shaw@st.com>

Index: linux/drivers/serial/stasc.c
===================================================================
--- linux.orig/drivers/serial/stasc.c	2007-04-25 17:53:13.211246000 +0100
+++ linux/drivers/serial/stasc.c	2007-04-26 09:45:05.202347000 +0100
@@ -19,6 +19,7 @@
 #include <linux/console.h>
 #include <linux/stpio.h>
 #include <linux/generic_serial.h>
+#include <linux/spinlock.h>
 
 #include <asm/system.h>
 #include <asm/io.h>
@@ -46,36 +47,37 @@
 static struct console serial_console;
 static struct uart_port *serial_console_port = 0;
 #endif
+
 #ifdef CONFIG_KGDB_ST_ASC
 /* Speed of the UART. */
-#if defined(CONFIG_KGDB_9600BAUD)
+# if defined(CONFIG_KGDB_9600BAUD)
 static int kgdbasc_baud = 9600;
-#elif defined(CONFIG_KGDB_19200BAUD)
+# elif defined(CONFIG_KGDB_19200BAUD)
 static int kgdbasc_baud = 19200;
-#elif defined(CONFIG_KGDB_38400BAUD)
+# elif defined(CONFIG_KGDB_38400BAUD)
 static int kgdbasc_baud = 38400;
-#elif defined(CONFIG_KGDB_57600BAUD)
+# elif defined(CONFIG_KGDB_57600BAUD)
 static int kgdbasc_baud = 57600;
-#else
+# else
 static int kgdbasc_baud = 115200;
-#endif
+# endif
 
-#if defined(CONFIG_KGDB_TTYS1)
+# if defined(CONFIG_KGDB_TTYS1)
 static int kgdbasc_ttyAS = 1;
-#else
+# else
 static int kgdbasc_ttyAS = 0;
-#endif
-#define KGDBPORT asc_ports[kgdbasc_ttyAS]
-#endif
+# endif
+# define KGDBPORT asc_ports[kgdbasc_ttyAS]
+#endif /* CONFIG_KGDB_ST_ASC */
 
 /*---- Forward function declarations---------------------------*/
 static int  asc_request_irq(struct uart_port *);
 static void asc_free_irq(struct uart_port *);
 static void asc_transmit_chars(struct uart_port *);
-static int asc_request_irq(struct uart_port *);
-void       asc_set_termios_cflag (struct asc_port *, int ,int);
+void        asc_set_termios_cflag (struct asc_port *, int ,int);
 static inline void asc_receive_chars(struct uart_port *,
 				     struct pt_regs *);
+
 #ifdef CONFIG_SERIAL_ST_ASC_CONSOLE
 static void serial_console_write (struct console *, const char *,
 				  unsigned );
@@ -87,7 +89,6 @@
 /* Some simple utility functions to enable and disable interrupts.
  * Note that these need to be called with interrupts disabled.
  */
-
 static inline void asc_disable_tx_interrupts(struct uart_port *port)
 {
 	unsigned long intenable;
@@ -130,7 +131,11 @@
 }
 
 /*----------------------------------------------------------------------*/
-/* UART Functions */
+
+/*
+ * UART Functions
+ */
+
 static unsigned int asc_tx_empty(struct uart_port *port)
 {
 	unsigned long status;
@@ -157,8 +162,11 @@
 	return TIOCM_CAR | TIOCM_DSR | TIOCM_CTS;
 }
 
-/* There are probably characters waiting to be transmitted.
-   Start doing so. The port lock is held and interrupts are disabled. */
+/*
+ * There are probably characters waiting to be transmitted.
+ * Start doing so.
+ * The port lock is held and interrupts are disabled.
+ */
 static void asc_start_tx(struct uart_port *port)
 {
 	if (asc_dma_enabled(port))
@@ -167,6 +175,9 @@
 		asc_transmit_chars(port);
 }
 
+/*
+ * Transmit stop - interrupts disabled on entry
+ */
 static void asc_stop_tx(struct uart_port *port)
 {
 	if (asc_dma_enabled(port))
@@ -175,6 +186,9 @@
 		asc_disable_tx_interrupts(port);
 }
 
+/*
+ * Receive stop - interrupts still enabled on entry
+ */
 static void asc_stop_rx(struct uart_port *port)
 {
 	if (asc_dma_enabled(port))
@@ -183,18 +197,26 @@
 		asc_disable_rx_interrupts(port);
 }
 
+/*
+ * Force modem status interrupts on - no-op for us
+ */
 static void asc_enable_ms(struct uart_port *port)
 {
 	/* Nothing here yet .. */
 }
 
+/*
+ * Handle breaks - ignored by us
+ */
 static void asc_break_ctl(struct uart_port *port, int break_state)
 {
 	/* Nothing here yet .. */
 }
 
-/* Enable port for reception.
- * port_sem held and interrupts disabled */
+/*
+ * Enable port for reception.
+ * port_sem held and interrupts disabled
+ */
 static int asc_startup(struct uart_port *port)
 {
 	asc_request_irq(port);
@@ -439,10 +461,9 @@
 	unsigned long flags;
 
 	/* wait for end of current transmission */
-	local_irq_save(flags);
-	while (	! (asc_in(port, STA) & ASC_STA_TE) ) {
-		local_irq_restore(flags);
-	};
+	while (!asc_tx_empty(port)){};
+
+	spin_lock_irqsave(&port->lock, flags);
 
 	/* read control register */
 	ctrl_val = asc_in (port, CTL);
@@ -515,7 +536,7 @@
 	/* write final value and enable port */
 	asc_out (port, CTL, (ctrl_val | ASC_CTL_RUN));
 
-	local_irq_restore(flags);
+	spin_unlock_irqrestore(&port->lock, flags);
 }
 
 
@@ -678,10 +699,12 @@
 	struct uart_port *port = ptr;
 	unsigned long status;
 
+	spin_lock(&port->lock);
+
 #if defined(CONFIG_KGDB_ST_ASC)
         /* To be Fixed: it seems that on a lot of ST40 platforms the breakpoint
-           condition is not checked without this delay. Problably this problem
-           depends of an invalid port speed configuration.
+           condition is not checked without this delay. This problem probably
+           depends on an invalid port speed configuration.
          */
         udelay(1000);
 #endif
@@ -703,6 +726,8 @@
 		asc_transmit_chars(port);
 	}
 
+	spin_unlock(&port->lock);
+
 	return IRQ_HANDLED;
 }
 
@@ -813,7 +838,7 @@
 	unsigned long flags;
 	unsigned long status;
 
-	local_irq_save(flags);
+	spin_lock_irqsave(&port->lock, flags);
 
 	do {
 		status = asc_in (port, STA);
@@ -821,7 +846,7 @@
 
 	asc_out (port, TXBUF, c);
 
-	local_irq_restore(flags);
+	spin_unlock_irqrestore(&port->lock, flags);
 }
 
 /*
@@ -838,12 +863,10 @@
 	int checksum;
 	int usegdb=0;
 
-#ifdef CONFIG_SH_STANDARD_BIOS
     	/* This call only does a trap the first time it is
 	 * called, and so is safe to do here unconditionally
 	 */
 	usegdb |= sh_bios_in_gdb_mode();
-#endif
 	if (usegdb) {
 	    /*  $<packet info>#<checksum>. */
 	    do {
@@ -937,14 +960,15 @@
         int c;
         unsigned long status, flags;
 
-        local_irq_save(flags);
+        spin_lock_irqsave(&port->lock, flags);
 
         do {
                 status = asc_in(port, STA);
         } while (! (status & ASC_STA_RBF));
 
         c = asc_in(port, RXBUF);
-        local_irq_restore(flags);
+
+        spin_unlock_irqrestore(&port->lock, flags);
 
         return c;
 }
Index: linux/drivers/serial/stasc.h
===================================================================
--- linux.orig/drivers/serial/stasc.h	2007-04-25 18:36:22.184974000 +0100
+++ linux/drivers/serial/stasc.h	2007-04-25 18:37:09.832116000 +0100
@@ -198,7 +198,7 @@
 int asc_enable_fdma(struct uart_port *port);
 void asc_disable_fdma(struct uart_port *port);
 #else
-static int inline asc_dma_enabled(struct asc_port* ascport)
+static int inline asc_dma_enabled(struct uart_port* port)
 {
 	return 0;
 }
