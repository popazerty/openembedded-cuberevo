From e209f7d5f9edb43432d29d437eda0e8df24746e6 Mon Sep 17 00:00:00 2001
From: Francesco VIRLINZI <francesco.virlinzi@st.com>
Date: Thu, 2 Oct 2008 12:38:39 +0200
Subject: [PATCH] sh_stm: Added CPUFreq support on STx7105

This patch:
 - adds the CPUFreq support on STi7105 Soc.
 - adds the STM_CPU_FREQ_OBSERVE Kconfig variable to route
   the ST40 clock on an external pin/test point
 - adds the module support

Signed-off-by: Francesco M. Virlinzi <francesco.virlinzi@st.com>
Signed-off-by: Stuart Menefy <stuart.menefy@st.com>
---
 arch/sh/Kconfig                          |   16 ++++-
 arch/sh/kernel/cpu/sh4/Makefile          |    8 +--
 arch/sh/kernel/cpu/sh4/clock-stb7100.c   |    2 +-
 arch/sh/kernel/cpu/sh4/cpufreq-stb7100.c |  117 ++++++++++++------------------
 arch/sh/kernel/cpu/sh4/cpufreq-stm.c     |   83 +++++++++++++--------
 arch/sh/kernel/cpu/sh4/cpufreq-stx7105.c |   90 +++++++++++++++++++++++
 arch/sh/kernel/cpu/sh4/cpufreq-stx7111.c |  104 +++++++++------------------
 arch/sh/kernel/cpu/sh4/cpufreq-stx7141.c |   93 +++++++++---------------
 arch/sh/kernel/cpu/sh4/cpufreq-stx7200.c |   78 +++++++-------------
 9 files changed, 297 insertions(+), 294 deletions(-)
 create mode 100644 arch/sh/kernel/cpu/sh4/cpufreq-stx7105.c

diff --git a/arch/sh/Kconfig b/arch/sh/Kconfig
index b708d90..71b3117 100644
--- a/arch/sh/Kconfig
+++ b/arch/sh/Kconfig
@@ -778,11 +778,21 @@ config SH_CPU_FREQ
 	  If unsure, say N.
 
 config STM_CPU_FREQ
-	bool
+	tristate "STMicroelectronics CPU Frequency driver"
 	default y
 	select CPU_FREQ_TABLE
-	depends on CPU_FREQ && (CPU_SUBTYPE_STB7100 || CPU_SUBTYPE_STX7200 || \
-		                CPU_SUBTYPE_STX7111 || CPU_SUBTYPE_STX7141 )
+	depends on CPU_FREQ
+	help
+	  This adds the cpufreq driver for STMicroelectronics micro.
+	  For details, take a look at <file:Documentation/cpu-freq>.
+
+config STM_CPU_FREQ_OBSERVE
+	bool "Observe the CPU frequency"
+	default n
+	depends STM_CPU_FREQ && CPU_FREQ_DEBUG
+	help
+	  Enable this option to program the ClkGenA Observer to route
+	  the sh4_clk on an external pin
 
 endmenu
 
diff --git a/arch/sh/kernel/cpu/sh4/Makefile b/arch/sh/kernel/cpu/sh4/Makefile
index 198ebf9..204cb42 100644
--- a/arch/sh/kernel/cpu/sh4/Makefile
+++ b/arch/sh/kernel/cpu/sh4/Makefile
@@ -40,11 +40,5 @@ clock-$(CONFIG_CPU_SUBTYPE_SH4_202)	+= clock-sh4-202.o
 
 obj-y	+= $(clock-y)
 
-ifdef CONFIG_STM_CPU_FREQ
-obj-y					+= cpufreq-stm.o
-obj-$(CONFIG_CPU_SUBTYPE_STB7100)	+= cpufreq-stb7100.o
-obj-$(CONFIG_CPU_SUBTYPE_STX7111)	+= cpufreq-stx7111.o
-obj-$(CONFIG_CPU_SUBTYPE_STX7141)	+= cpufreq-stx7141.o
-obj-$(CONFIG_CPU_SUBTYPE_STX7200)	+= cpufreq-stx7200.o
-endif
+obj-$(CONFIG_STM_CPU_FREQ)		+= cpufreq-stm.o
 
diff --git a/arch/sh/kernel/cpu/sh4/clock-stb7100.c b/arch/sh/kernel/cpu/sh4/clock-stb7100.c
index 79721d1..d7837ad 100644
--- a/arch/sh/kernel/cpu/sh4/clock-stb7100.c
+++ b/arch/sh/kernel/cpu/sh4/clock-stb7100.c
@@ -15,7 +15,7 @@
 
 #define CLOCKGEN_BASE_ADDR	0x19213000	/* Clockgen A */
 
-static void __iomem *clkgen_base;
+void __iomem *clkgen_base;
 
 #define CLOCKGEN_PLL0_CFG	0x08
 #define CLOCKGEN_PLL0_CLK1_CTRL	0x14
diff --git a/arch/sh/kernel/cpu/sh4/cpufreq-stb7100.c b/arch/sh/kernel/cpu/sh4/cpufreq-stb7100.c
index b35651f..4289ba2 100644
--- a/arch/sh/kernel/cpu/sh4/cpufreq-stb7100.c
+++ b/arch/sh/kernel/cpu/sh4/cpufreq-stb7100.c
@@ -27,38 +27,23 @@
 #include <asm/io.h>
 #include <asm/clock.h>
 
-#undef  dbg_print
-#ifdef  CONFIG_CPU_FREQ_DEBUG
-#define dbg_print(fmt, args...)  printk("%s: " fmt, __FUNCTION__ , ## args)
-#else
-#define dbg_print(fmt, args...)
-#endif
-
+extern void __iomem *clkgen_base;
 static struct clk *pll0_clk;
-static struct clk *sh4_clk;
 static struct clk *sh4_ic_clk;
 static struct clk *module_clk;
-static unsigned long clk_iomem;
-
-static inline unsigned long _1_ms_lpj(void)
-{
-	return clk_get_rate(sh4_clk) / (1000 * 2);
-}
 
-#define CLOCKGEN_LOCK		(clk_iomem + 0x00)
-#define ST40_CLK_CTRL 		(clk_iomem + 0x14)
-#define CKGA_CLKOUT_SEL 	(clk_iomem + 0x38)
+#define CLOCKGEN_LOCK		(clkgen_base + 0x00)
+#define ST40_CLK_CTRL 		(clkgen_base + 0x14)
+#define CKGA_CLKOUT_SEL 	(clkgen_base + 0x38)
 
 static struct sh4_ratio {
 	long cpu, bus, per;
 } ratios[] = {
-	{0, 1, 0},		/* 1:1 - 1:2 - 1:4 */
-	{1, 3, 0},		/* 1:2 - 1:4 - 1:4 */
-	{3, 5, 5},		/* 1:4 - 1:8 - 1:8 */
+	{0, 1, 0},	/* 1:1 - 1:2 - 1:4 */
+	{1, 3, 0},	/* 1:2 - 1:4 - 1:4 */
+	{3, 5, 5},	/* 1:4 - 1:8 - 1:8 */
 };
 
-static struct cpufreq_frequency_table *cpu_freqs;
-
 static void st_cpufreq_update_clocks(unsigned int set, int propagate)
 {
 	static unsigned int current_set = 0;
@@ -71,46 +56,46 @@ static void st_cpufreq_update_clocks(unsigned int set, int propagate)
 	local_irq_save(flag);
 	iowrite32(0xc0de, CLOCKGEN_LOCK);
 
-	if (set > current_set) {	/* down scaling... */
+	if (set > current_set) {/* down scaling... */
 		/* it scales l_p_j based on the new frequency */
-		l_p_j >>= 1;	// 266 -> 133 or 133 -> 66.5
+		l_p_j >>= 1;	/* 266 -> 133 or 133 -> 66.5 */
 		if ((set + current_set) == 2)
-			l_p_j >>= 1;	// 266 -> 66.5
+			l_p_j >>= 1;	/* 266 -> 66.5 */
 
 		asm volatile (".balign	32	\n"
-			      "mov.l	%3, @(8,%0)\n"	// sets the sh4per clock
-			      "mov.l	%2, @(4,%0)\n"	// sets the sh4ic  clock
-			      "mov.l	%1, @(0,%0)\n"	// sets the sh4    clock
+/* sets the sh4per clock */   "mov.l	%3, @(8,%0)\n"
+/* sets the sh4ic  clock */   "mov.l	%2, @(4,%0)\n"
+/* sets the sh4 clock */      "mov.l	%1, @(0,%0)\n"
 			      "tst	%4, %4	\n"
 			      "1:		\n"
 			      "bf/s	1b	\n"
 			      " dt	%4	\n"
-			::"r" (st40_clk_address),	// 0
-			      "r"(ratios[set].cpu),	// 1
-			      "r"(ratios[set].bus),	// 2
-			      "r"(ratios[set].per),	// 3
-			      "r"(l_p_j)	// 4
-			      :"memory", "t");
+			::"r" (st40_clk_address),
+			  "r"(ratios[set].cpu),
+			  "r"(ratios[set].bus),
+			  "r"(ratios[set].per),
+			  "r"(l_p_j)
+			:"memory", "t");
 	} else {
 		/* it scales l_p_j based on the new frequency */
-		l_p_j <<= 1;	// 133  -> 266 or 66.5 -> 133
+		l_p_j <<= 1;	/* 133  -> 266 or 66.5 -> 133 */
 		if ((set + current_set) == 2)
-			l_p_j <<= 1;	// 66.5 -> 266
+			l_p_j <<= 1;	/* 66.5 -> 266 */
 
 		asm volatile (".balign	32	\n"
-			      "mov.l	%1, @(0,%0)\n"	// sets the sh4    clock
-			      "mov.l	%2, @(4,%0)\n"	// sets the sh4ic  clock
-			      "mov.l	%3, @(8,%0)\n"	// sets the sh4per clock
+			      "mov.l	%1, @(0,%0)\n"
+			      "mov.l	%2, @(4,%0)\n"
+			      "mov.l	%3, @(8,%0)\n"
 			      "tst	%4, %4	\n"
-			      "1:		\n"
-			      "bf/s	1b	\n"
+			      "2:		\n"
+			      "bf/s	2b	\n"
 			      " dt	%4	\n"
-			::"r" (st40_clk_address),	// 0
-			      "r"(ratios[set].cpu),	// 1
-			      "r"(ratios[set].bus),	// 2
-			      "r"(ratios[set].per),	// 3
-			      "r"(l_p_j)	// 4
-			      :"memory", "t");
+			::"r" (st40_clk_address),
+			  "r"(ratios[set].cpu),
+			  "r"(ratios[set].bus),
+			  "r"(ratios[set].per),
+			  "r"(l_p_j)
+			:"memory", "t");
 	}
 
 	iowrite32(0, CLOCKGEN_LOCK);
@@ -131,44 +116,34 @@ static void st_cpufreq_update_clocks(unsigned int set, int propagate)
 	local_irq_restore(flag);
 }
 
-void *__init st_cpufreq_platform_init(struct cpufreq_frequency_table
-				      *_cpu_freqs)
+#ifdef CONFIG_STM_CPU_FREQ_OBSERVE
+static void __init st_cpufreq_observe_init(void)
 {
-	dbg_print("\n");
+	/* route the sh4  clock frequency */
+	iowrite8(0, CKGA_CLKOUT_SEL);
+}
+#endif
 
-	if (!_cpu_freqs)
-		return NULL;
-	cpu_freqs = _cpu_freqs;
+static int __init st_cpufreq_platform_init(void)
+{
+	cpufreq_debug_printk(CPUFREQ_DEBUG_DRIVER,
+		"st_cpufreq_platform_init:", "\n");
 
 	pll0_clk = clk_get(NULL, "pll0_clk");
-	sh4_clk = clk_get(NULL, "sh4_clk");
 	sh4_ic_clk = clk_get(NULL, "sh4_ic_clk");
 	module_clk = clk_get(NULL, "module_clk");
-	clk_iomem = (unsigned long)clk_get_iomem();
 
 	if (!pll0_clk) {
 		printk(KERN_ERR "ERROR: on clk_get(pll0_clk)\n");
-		return NULL;
-	}
-	if (!sh4_clk) {
-		printk(KERN_ERR "ERROR: on clk_get(sh4_clk)\n");
-		return NULL;
+		return -1;
 	}
 	if (!sh4_ic_clk) {
 		printk(KERN_ERR "ERROR: on clk_get(sh4_ic_clk)\n");
-		return NULL;
+		return -1;
 	}
 	if (!module_clk) {
 		printk(KERN_ERR "ERROR: on clk_get(module_clk)\n");
-		return NULL;
+		return -1;
 	}
-	if (!clk_iomem)
-		return NULL;
-
-#ifdef CONFIG_CPU_FREQ_DEBUG
-	iowrite8(0, CKGA_CLKOUT_SEL);	/* st40 routed on SYSCLK_OUT */
-#endif
-	return (void *)st_cpufreq_update_clocks;
+	return 0;
 }
-
-MODULE_LICENSE("GPL");
diff --git a/arch/sh/kernel/cpu/sh4/cpufreq-stm.c b/arch/sh/kernel/cpu/sh4/cpufreq-stm.c
index 76fe923..20b8f6f 100644
--- a/arch/sh/kernel/cpu/sh4/cpufreq-stm.c
+++ b/arch/sh/kernel/cpu/sh4/cpufreq-stm.c
@@ -27,13 +27,6 @@
 #include <asm/io.h>
 #include <asm/clock.h>
 
-#undef  dbg_print
-#ifdef  CONFIG_CPU_FREQ_DEBUG
-#define dbg_print(fmt, args...)  printk("%s: " fmt, __FUNCTION__ , ## args)
-#else
-#define dbg_print(fmt, args...)
-#endif
-
 static struct clk *sh4_clk;
 static struct cpufreq_frequency_table cpu_freqs[] = {
 	{.index = 0,},		/* Really initialised during the boot ... */
@@ -42,7 +35,24 @@ static struct cpufreq_frequency_table cpu_freqs[] = {
 	{.frequency = CPUFREQ_TABLE_END},
 };
 
-static void (*st_cpufreq_update_clocks) (unsigned int set, int propagate);
+static inline unsigned long _1_ms_lpj(void)
+{
+	return clk_get_rate(sh4_clk) / (1000 * 2);
+}
+
+#if defined(CONFIG_CPU_SUBTYPE_STB7100)
+ #include "./cpufreq-stb7100.c"
+#elif defined(CONFIG_CPU_SUBTYPE_STX7111)
+ #include "./cpufreq-stx7111.c"
+#elif defined(CONFIG_CPU_SUBTYPE_STX7141)
+ #include "./cpufreq-stx7141.c"
+#elif defined(CONFIG_CPU_SUBTYPE_STX7200)
+ #include "./cpufreq-stx7200.c"
+#elif defined(CONFIG_CPU_SUBTYPE_STX7105)
+ #include "./cpufreq-stx7105.c"
+#else
+ #error "The CPUFrequency scaling isn't supported on this SOC"
+#endif
 
 /*
  * Here we notify other drivers of the proposed change and the final change.
@@ -54,13 +64,15 @@ static int st_cpufreq_setstate(unsigned int cpu, unsigned int set)
 		.cpu = cpu,
 		.old = clk_get_rate(sh4_clk) / 1000,
 		.new = cpu_freqs[set].frequency,
-		.flags = 0,	/* with Zero the system will updates loops_per_j. automatically */
+		.flags = 0,
 	};
 
-	dbg_print("\n");
+	cpufreq_debug_printk(CPUFREQ_DEBUG_DRIVER,
+		"st_cpufreq_setstate:", "\n");
 
 	if (!cpu_online(cpu)) {
-		dbg_print("cpu not online\n");
+		cpufreq_debug_printk(CPUFREQ_DEBUG_DRIVER,
+			"st_cpufreq_setstate:",	"cpu not online\n");
 		return -ENODEV;
 	}
 	cpus_allowed = current->cpus_allowed;
@@ -73,7 +85,8 @@ static int st_cpufreq_setstate(unsigned int cpu, unsigned int set)
 
 	set_cpus_allowed(current, cpus_allowed);
 
-	cpufreq_notify_transition(&freqs, CPUFREQ_POSTCHANGE);	/* updates the loops_per_jiffies */
+	/* updates the loops_per_jiffies */
+	cpufreq_notify_transition(&freqs, CPUFREQ_POSTCHANGE);
 
 	return 0;
 }
@@ -83,7 +96,7 @@ static int st_cpufreq_init(struct cpufreq_policy *policy)
 	if (!cpu_online(policy->cpu))
 		return -ENODEV;
 
-	dbg_print("\n");
+	cpufreq_debug_printk(CPUFREQ_DEBUG_DRIVER, "st_cpufreq_init", "\n");
 	/* cpuinfo and default policy values */
 	policy->governor = CPUFREQ_DEFAULT_GOVERNOR;
 	policy->cur = clk_get_rate(sh4_clk) / 1000;
@@ -95,7 +108,8 @@ static int st_cpufreq_init(struct cpufreq_policy *policy)
 static int st_cpufreq_verify(struct cpufreq_policy *policy)
 {
 	int ret = cpufreq_frequency_table_verify(policy, cpu_freqs);
-	dbg_print("ret %d\n", ret);
+	cpufreq_debug_printk(CPUFREQ_DEBUG_DRIVER,
+		"st_cpufreq_verify:", "ret %d\n", ret);
 	return ret;
 }
 
@@ -103,7 +117,7 @@ static int st_cpufreq_target(struct cpufreq_policy *policy,
 			     unsigned int target_freq, unsigned int relation)
 {
 	unsigned int idx = 0;
-	dbg_print("\n");
+	cpufreq_debug_printk(CPUFREQ_DEBUG_DRIVER, "st_cpufreq_target:", "\n");
 	if (cpufreq_frequency_table_target(policy,
 					   &cpu_freqs[0], target_freq, relation,
 					   &idx))
@@ -115,7 +129,7 @@ static int st_cpufreq_target(struct cpufreq_policy *policy,
 
 static unsigned int st_cpufreq_get(unsigned int cpu)
 {
-	dbg_print("\n");
+	cpufreq_debug_printk(CPUFREQ_DEBUG_DRIVER, "st_cpufreq_get:", "\n");
 	return clk_get_rate(sh4_clk) / 1000;
 }
 
@@ -123,16 +137,16 @@ static unsigned int st_cpufreq_get(unsigned int cpu)
 static unsigned long pm_old_freq;
 static int st_cpufreq_suspend(struct cpufreq_policy *policy, pm_message_t pmsg)
 {
-	dbg_print("\n");
-	pm_old_freq = st_cpufreq_get(0);	/* save current frequency               */
-	st_cpufreq_update_clocks(0, 0);	/* switch to the highest frequency    */
+	cpufreq_debug_printk(CPUFREQ_DEBUG_DRIVER, "st_cpufreq_suspend:", "\n");
+	pm_old_freq = st_cpufreq_get(0);/* save current frequency */
+	st_cpufreq_update_clocks(0, 0);	/* switch to the highest frequency */
 	return 0;
 }
 
 static int st_cpufreq_resume(struct cpufreq_policy *policy)
 {
 	int i;
-	dbg_print("\n");
+	cpufreq_debug_printk(CPUFREQ_DEBUG_DRIVER, "st_cpufreq_resume:", "\n");
 	for (i = 0; cpu_freqs[i].frequency != CPUFREQ_TABLE_END; ++i)
 		if (cpu_freqs[i].frequency == pm_old_freq)
 			break;
@@ -156,17 +170,11 @@ static struct cpufreq_driver st_cpufreq_driver = {
 	.flags = CPUFREQ_PM_NO_WARN,
 };
 
-void *st_cpufreq_platform_init(struct cpufreq_frequency_table *cpu_freqs);
-
 static int __init st_cpufreq_module_init(void)
 {
 	int idx;
-	dbg_print("\n");
-
-	st_cpufreq_update_clocks = st_cpufreq_platform_init(cpu_freqs);
-
-	if (!st_cpufreq_update_clocks)
-		return -1;
+	cpufreq_debug_printk(CPUFREQ_DEBUG_DRIVER,
+		"st_cpufreq_platform_init:", "\n");
 
 	sh4_clk = clk_get(NULL, "sh4_clk");
 
@@ -175,16 +183,26 @@ static int __init st_cpufreq_module_init(void)
 		return -ENODEV;
 	}
 
+	if (st_cpufreq_platform_init()) { /* for platform initialization */
+		printk(KERN_ERR "%s: Error on platform initialization\n",
+			__FUNCTION__);
+		return -ENODEV;
+	}
 	for (idx = 0; idx < (ARRAY_SIZE(cpu_freqs)) - 1; ++idx) {
 		cpu_freqs[idx].frequency =
 		    (clk_get_rate(sh4_clk) / 1000) >> idx;
-		dbg_print("Initialize idx %u @ %u\n", idx,
-			  cpu_freqs[idx].frequency);
+		cpufreq_debug_printk(CPUFREQ_DEBUG_DRIVER,
+		"st_cpufreq_module_init", "Initialize idx %u @ %u\n",
+		idx, cpu_freqs[idx].frequency);
 	}
 
 	if (cpufreq_register_driver(&st_cpufreq_driver))
 		return -EINVAL;
 
+#ifdef CONFIG_STM_CPU_FREQ_OBSERVE
+	st_cpufreq_observe_init();
+#endif
+
 	printk(KERN_INFO "st40 cpu frequency registered\n");
 
 	return 0;
@@ -192,9 +210,10 @@ static int __init st_cpufreq_module_init(void)
 
 static void __exit st_cpufreq_module_exit(void)
 {
-	dbg_print("\n");
-	cpufreq_unregister_driver(&st_cpufreq_driver);
+	cpufreq_debug_printk(CPUFREQ_DEBUG_DRIVER,
+		"st_cpufreq_setstate:", "\n");
 	st_cpufreq_update_clocks(0, 1);	/* switch to the highest frequency */
+	cpufreq_unregister_driver(&st_cpufreq_driver);
 }
 
 late_initcall(st_cpufreq_module_init);
diff --git a/arch/sh/kernel/cpu/sh4/cpufreq-stx7105.c b/arch/sh/kernel/cpu/sh4/cpufreq-stx7105.c
new file mode 100644
index 0000000..9a0875d
--- /dev/null
+++ b/arch/sh/kernel/cpu/sh4/cpufreq-stx7105.c
@@ -0,0 +1,90 @@
+/*
+ * arch/sh/kernel/cpu/sh4/cpufreq-stx7105.c
+ *
+ * Cpufreq driver for the ST40 processors.
+ * Version: 0.1 (20 Mar 2008)
+ *
+ * Copyright (C) 2008 STMicroelectronics
+ * Author: Francesco M. Virlinzi <francesco.virlinzi@st.com>
+ *
+ * This program is under the terms of the
+ * General Public License version 2 ONLY
+ *
+ */
+#include <linux/types.h>
+#include <linux/cpufreq.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/time.h>
+#include <linux/delay.h>	/* loops_per_jiffy */
+#include <linux/cpumask.h>
+#include <linux/smp.h>
+#include <linux/sched.h>	/* set_cpus_allowed() */
+#include <linux/stm/pm.h>
+
+#include <asm/processor.h>
+#include <asm/freq.h>
+#include <asm/io.h>
+#include <asm/clock.h>
+
+#define clk_iomem			0xfe213000      /* Clockgen A */
+#define CKGA_PLL0LS_DIV_CFG(x)		(0xa10 + (((x) -4) *4))
+#define ST40_CLK 	(clk_iomem + CKGA_PLL0LS_DIV_CFG(4))
+#define CKGA_CLKOBS_MUX1_CFG		0x030
+
+/*					1:1,	  1:2,	    1:4	*/
+static unsigned long st40_ratios[] = { 0x10000, 0x1, 0x3};
+
+static void st_cpufreq_update_clocks(unsigned int set,
+				     int not_used_on_this_platform)
+{
+	static unsigned int current_set;
+	unsigned long flag;
+	unsigned long st40_clk = ST40_CLK;
+	unsigned long l_p_j = _1_ms_lpj();
+
+	cpufreq_debug_printk(CPUFREQ_DEBUG_DRIVER,
+		"st_cpufreq_update_clocks", "\n");
+	l_p_j >>= 3;	/* l_p_j = 125 usec (for each HZ) */
+
+	local_irq_save(flag);
+
+	/* it scales l_p_j based on the new frequency */
+	if (set > current_set) {	/* down scaling... */
+		l_p_j >>= 1;		/* 450 -> 225 or 225 -> 112.5 */
+		if ((set + current_set) == 2)
+			l_p_j >>= 1;	/* 450 -> 112.5 */
+	} else {
+		l_p_j <<= 1;	/* 225   -> 450 or 112.5 -> 225 */
+		if ((set + current_set) == 2)
+			l_p_j <<= 1;	/* 112.5 -> 450 */
+	}
+
+	asm volatile (".balign	32	\n"
+		      "mov.l	%1, @%0 \n"
+		      "tst	%2, %2	\n"
+		      "1:		\n"
+		      "bf/s	1b	\n"
+		      " dt	%2	\n"
+		::    "r" (st40_clk),
+		      "r" (st40_ratios[set]),
+		      "r" (l_p_j)
+		:     "memory", "t");
+
+	current_set = set;
+	sh4_clk->rate = (cpu_freqs[set].frequency << 3) * 125;
+	local_irq_restore(flag);
+}
+
+static int __init st_cpufreq_platform_init(void)
+{
+	return 0;
+}
+
+#ifdef CONFIG_STM_CPU_FREQ_OBSERVE
+static void __init st_cpufreq_observe_init(void)
+{
+	/* route the sh4/2  clock frequenfy */
+	iowrite32(0xc, clk_iomem + CKGA_CLKOBS_MUX1_CFG);
+}
+#endif
diff --git a/arch/sh/kernel/cpu/sh4/cpufreq-stx7111.c b/arch/sh/kernel/cpu/sh4/cpufreq-stx7111.c
index f0e7d91..db1848a 100644
--- a/arch/sh/kernel/cpu/sh4/cpufreq-stx7111.c
+++ b/arch/sh/kernel/cpu/sh4/cpufreq-stx7111.c
@@ -27,26 +27,13 @@
 #include <asm/io.h>
 #include <asm/clock.h>
 
-#undef  dbg_print
-#ifdef  CONFIG_CPU_FREQ_DEBUG
-#define dbg_print(fmt, args...)  printk("%s: " fmt, __FUNCTION__ , ## args)
-#else
-#define dbg_print(fmt, args...)
-#endif
-
-static struct clk *sh4_clk;
-static unsigned long clk_iomem;
-static struct cpufreq_frequency_table *cpu_freqs;
-/*				1:1,	  1:2,	    1:4		*/
-unsigned long st40_ratios[] = { 0x10000, 0x10001, 0x10003 };
-
-static inline unsigned long _1_ms_lpj(void)
-{
-	return clk_get_rate(sh4_clk) / (1000 * 2);
-}
+#define clk_iomem			0xfe213000 /* Clockgen A */
+#define CKGA_PLL0LS_DIV_CFG(x)		(0xa10 + (((x) - 4) * 4))
+#define ST40_CLK 			(clk_iomem + CKGA_PLL0LS_DIV_CFG(4))
+#define CKGA_CLKOBS_MUX1_CFG		0x030
 
-#define CKGA_PLL0LS_DIV_CFG(x)		(0x900+((x)*4))
-#define ST40_CLK 	(clk_iomem + CKGA_PLL0LS_DIV_CFG(4))
+/*				1:1,	 1:2  1:4 */
+unsigned long st40_ratios[] = { 0x10000, 0x1, 0x3 };
 
 static void st_cpufreq_update_clocks(unsigned int set,
 				     int not_used_on_this_platform)
@@ -56,74 +43,49 @@ static void st_cpufreq_update_clocks(unsigned int set,
 	unsigned long st40_clk = ST40_CLK;
 	unsigned long l_p_j = _1_ms_lpj();
 
-	dbg_print("\n");
+	cpufreq_debug_printk(CPUFREQ_DEBUG_DRIVER, "st_cpufreq_update_clocks",
+		"\n");
 	l_p_j >>= 3;		/* l_p_j = 125 usec (for each HZ) */
 
 	local_irq_save(flag);
 
-	if (set > current_set) {	/* down scaling... */
+	if (set > current_set) { /* down scaling... */
 		/* it scales l_p_j based on the new frequency */
-		l_p_j >>= 1;	// 450 -> 225 or 225 -> 112.5
+		l_p_j >>= 1;	/* 450 -> 225 or 225 -> 112.5 */
 		if ((set + current_set) == 2)
-			l_p_j >>= 1;	// 450 -> 112.5
-
-		asm volatile (".balign	32	\n"
-			      "mov.l	%1, @%0\n"	// sets the st40 clock
-			      "tst	%2, %2	\n"
-			      "1:		\n"
-			      "bf/s	1b	\n"
-			      " dt	%2	\n"
-			::    "r" (st40_clk),		// 0
-			      "r"(st40_ratios[set]),	// 1
-			      "r"(l_p_j)		// 2
-			:	"memory", "t");
+			l_p_j >>= 1;	/* 450 -> 112.5 */
 	} else {
 		/* it scales l_p_j based on the new frequency */
-		l_p_j <<= 1;	// 225   -> 450 or 112.5 -> 225
+		l_p_j <<= 1;	/* 225   -> 450 or 112.5 -> 225 */
 		if ((set + current_set) == 2)
-			l_p_j <<= 1;	// 112.5 -> 450
-
-		asm volatile (".balign	32	\n"
-			      "mov.l	%1, @%0\n"	// sets the st40 clock
-			      "tst	%2, %2	\n"
-			      "1:		\n"
-			      "bf/s	1b	\n"
-			      " dt	%2	\n"
-			::    "r" (st40_clk),		// 0
-			      "r"(st40_ratios[set]),	// 1
-			      "r"(l_p_j)		// 2
-			:     "memory", "t");
+			l_p_j <<= 1;	/* 112.5 -> 450 */
 	}
 
+	asm volatile (".balign	32	\n"
+		      "mov.l	%1, @%0\n"
+		      "tst	%2, %2	\n"
+		      "1:		\n"
+		      "bf/s	1b	\n"
+		      " dt	%2	\n"
+		::    "r" (st40_clk),
+		      "r" (st40_ratios[set]),
+		      "r" (l_p_j)
+		:     "memory", "t");
+
 	current_set = set;
 	sh4_clk->rate = (cpu_freqs[set].frequency << 3) * 125;
 	local_irq_restore(flag);
 }
 
-void *__init st_cpufreq_platform_init(struct cpufreq_frequency_table
-				      *_cpu_freqs)
+#ifdef CONFIG_STM_CPU_FREQ_OBSERVE
+static void __init st_cpufreq_observe_init(void)
 {
-	dbg_print("\n");
-
-	if (!_cpu_freqs)
-		return NULL;
-	cpu_freqs = _cpu_freqs;
-
-	sh4_clk = clk_get(NULL, "sh4_clk");
-	clk_iomem = (unsigned long)clk_get_iomem();
-
-	if (!sh4_clk) {
-		printk(KERN_ERR "ERROR: on clk_get(sh4_clk)\n");
-		return NULL;
-	}
-	if (!clk_iomem)
-		return NULL;
-
-#ifdef CONFIG_CPU_FREQ_DEBUG
-	/* route the sh4/2  clock frequenfy */
-	iowrite32(0xc ,clk_iomem+CKGA_CLKOBS_MUX1_CFG);
-#endif
-	return (void *)st_cpufreq_update_clocks;
+	/* route the sh4/2  clock frequency */
+	iowrite32(0xc, clk_iomem + CKGA_CLKOBS_MUX1_CFG);
 }
+#endif
 
-MODULE_LICENSE("GPL");
+static int __init st_cpufreq_platform_init(void)
+{
+	return 0;
+}
diff --git a/arch/sh/kernel/cpu/sh4/cpufreq-stx7141.c b/arch/sh/kernel/cpu/sh4/cpufreq-stx7141.c
index 380c108..868ed85 100644
--- a/arch/sh/kernel/cpu/sh4/cpufreq-stx7141.c
+++ b/arch/sh/kernel/cpu/sh4/cpufreq-stx7141.c
@@ -27,28 +27,18 @@
 #include <asm/io.h>
 #include <asm/clock.h>
 
-#undef  dbg_print
-#ifdef  CONFIG_CPU_FREQ_DEBUG
+#ifdef CONFIG_STM_CPU_FREQ_OBSERVE
 #include <linux/stm/sysconf.h>
 #include <linux/stm/pio.h>
-#define dbg_print(fmt, args...)  printk("%s: " fmt, __FUNCTION__ , ## args)
-#else
-#define dbg_print(fmt, args...)
 #endif
 
-#define clk_iomem		0xfe213000      /* Clockgen A */
-#define CKGA_PLL0LS_DIV_CFG(x)	(0xa10+(((x)-4)*4))
+#define clk_iomem		0xfe213000 /* Clockgen A */
+#define CKGA_PLL0LS_DIV_CFG(x)	(0xa10 + (((x) -4) * 4))
 #define ST40_CLK 		(clk_iomem + CKGA_PLL0LS_DIV_CFG(4))
+#define CKGA_CLKOBS_MUX1_CFG	0x030
 
-static struct clk *sh4_clk;
-static struct cpufreq_frequency_table *cpu_freqs;
-/*				1:1,	  1:2,	    1:4		*/
-unsigned long st40_ratios[] = { 0x10000, 0x10001, 0x10003 };
-
-static inline unsigned long _1_ms_lpj(void)
-{
-	return clk_get_rate(sh4_clk) / (1000 * 2);
-}
+/*				1:1,	 1:2, 1:4	*/
+unsigned long st40_ratios[] = { 0x10000, 0x1, 0x3 };
 
 static void st_cpufreq_update_clocks(unsigned int set,
 				     int not_used_on_this_platform)
@@ -58,66 +48,53 @@ static void st_cpufreq_update_clocks(unsigned int set,
 	unsigned long st40_clk = ST40_CLK;
 	unsigned long l_p_j = _1_ms_lpj();
 
-	dbg_print("\n");
-	l_p_j >>= 3;		/* l_p_j = 125 usec (for each HZ) */
+	cpufreq_debug_printk(CPUFREQ_DEBUG_DRIVER,
+		"st_cpufreq_update_clocks", "\n");
+	l_p_j >>= 3;	/* l_p_j = 125 usec (for each HZ) */
 
 	local_irq_save(flag);
 
 	if (set > current_set) {	/* down scaling... */
 		/* it scales l_p_j based on the new frequency */
-		l_p_j >>= 1;	// 450 -> 225 or 225 -> 112.5
+		l_p_j >>= 1;	/* 450 -> 225 or 225 -> 112.5 */
 		if ((set + current_set) == 2)
-			l_p_j >>= 1;	// 450 -> 112.5
+			l_p_j >>= 1;	/* 450 -> 112.5 */
 	} else {
 		/* it scales l_p_j based on the new frequency */
-		l_p_j <<= 1;	// 225   -> 450 or 112.5 -> 225
+		l_p_j <<= 1;	/* 225   -> 450 or 112.5 -> 225 */
 		if ((set + current_set) == 2)
-			l_p_j <<= 1;	// 112.5 -> 450
+			l_p_j <<= 1;	/* 112.5 -> 450 */
 	}
 
 	asm volatile (".balign  32      \n"
-			      "mov.l    %1, @%0\n"      // sets the st40 clock
-			      "tst      %2, %2  \n"
-			      "2:               \n"
-			      "bf/s     2b      \n"
-			      " dt      %2      \n"
-			::    "r" (st40_clk),           // 0
-			      "r" (st40_ratios[set]),   // 1
-			      "r" (l_p_j)               // 2
-			:     "memory", "t");
+		      "mov.l    %1, @%0\n"
+		      "tst      %2, %2  \n"
+		      "2:               \n"
+		      "bf/s     2b      \n"
+		      " dt      %2      \n"
+		::    "r" (st40_clk),
+		      "r" (st40_ratios[set]),
+		      "r" (l_p_j)
+		:     "memory", "t");
 
 	current_set = set;
 	sh4_clk->rate = (cpu_freqs[set].frequency << 3) * 125;
 	local_irq_restore(flag);
 }
 
-void *__init st_cpufreq_platform_init(struct cpufreq_frequency_table
-				      *_cpu_freqs)
+#ifdef CONFIG_STM_CPU_FREQ_OBSERVE
+static void __init st_cpufreq_observe_init(void)
 {
-	dbg_print("\n");
-
-	if (!_cpu_freqs)
-		return NULL;
-	cpu_freqs = _cpu_freqs;
-
-	sh4_clk = clk_get(NULL, "sh4_clk");
-
-	if (!sh4_clk) {
-		printk(KERN_ERR "ERROR: on clk_get(sh4_clk)\n");
-		return NULL;
-	}
-
-#ifdef CONFIG_CPU_FREQ_DEBUG
-	{
-	struct sysconf_field *sc;
-	/* route the sh4/2  clock frequency */
-	iowrite32(0xc ,clk_iomem+CKGA_CLKOBS_MUX1_CFG);
-	stpio_request_set_pin(3,2,"clkA dbg", STPIO_ALT_OUT, 1);
-	sc = sysconf_claim(SYS_CFG,19,22,23,"clkA dbg");
-        sysconf_write(sc, 11);
-	}
-#endif
-	return (void *)st_cpufreq_update_clocks;
+	static struct sysconf_field *sc;
+	/* route the sh4/2  clock frequenfy */
+	iowrite32(0xc, clk_iomem + CKGA_CLKOBS_MUX1_CFG);
+	stpio_request_set_pin(3, 2, "clkA dbg", STPIO_ALT_OUT, 1);
+	sc = sysconf_claim(SYS_CFG, 19, 22, 23, "clkA dbg");
+	sysconf_write(sc, 11);
 }
+#endif
 
-MODULE_LICENSE("GPL");
+static int __init st_cpufreq_platform_init(void)
+{
+	return 0;
+}
diff --git a/arch/sh/kernel/cpu/sh4/cpufreq-stx7200.c b/arch/sh/kernel/cpu/sh4/cpufreq-stx7200.c
index 56f5362..223bfb6 100644
--- a/arch/sh/kernel/cpu/sh4/cpufreq-stx7200.c
+++ b/arch/sh/kernel/cpu/sh4/cpufreq-stx7200.c
@@ -28,29 +28,14 @@
 #include <asm/io.h>
 #include <asm/clock.h>
 
-#undef  dbg_print
-#ifdef  CONFIG_CPU_FREQ_DEBUG
-#define dbg_print(fmt, args...)  printk("%s: " fmt, __FUNCTION__ , ## args)
-#else
-#define dbg_print(fmt, args...)
-#endif
-
 static struct clk *pll0_clk;
-static struct clk *sh4_clk;
 static struct clk *sh4_ic_clk;
 static struct clk *module_clk;
-static unsigned long clk_iomem;
-
-static inline unsigned long _1_ms_lpj(void)
-{
-	return clk_get_rate(sh4_clk) / (1000 * 2);
-}
-
-static struct cpufreq_frequency_table *cpu_freqs;
 
-#define CLKGNA_DIV_CFG		( clk_iomem + 0x10 )
-#define CKGA_CLKOUT_SEL 	( clk_iomem + 0x18)
-#define SH4_CLK_MASK		( 0x1ff << 1 )
+#define clk_iomem		0xfd700000 /* Clockgen A */
+#define CLKGNA_DIV_CFG		(clk_iomem + 0x10)
+#define CKGA_CLKOUT_SEL 	(clk_iomem + 0x18)
+#define SH4_CLK_MASK		(0x1ff << 1)
 /*
  *	value: 0  1  2  3  4  5  6     7
  *	ratio: 1, 2, 3, 4, 6, 8, 1024, 1
@@ -70,7 +55,7 @@ static void st_cpufreq_update_clocks(unsigned int set, int propagate)
 	unsigned long flag;
 	unsigned long l_p_j = _1_ms_lpj();
 
-	l_p_j >>= 3;		/* l_p_j = 125 usec (for each HZ) */
+	l_p_j >>= 3;	/* l_p_j = 125 usec (for each HZ) */
 
 	if (set > sh_current_set) {	/* down scaling... */
 		l_p_j >>= 1;
@@ -92,15 +77,16 @@ static void st_cpufreq_update_clocks(unsigned int set, int propagate)
 		      "1:		\n"
 		      "bf/s	1b	\n"
 		      " dt	%2	\n"
-		 ::"r" (clks_address),	// 0
-		      "r"(clks_value),	// 1
-		      "r"(l_p_j)	// 2
-		      :"t", "memory");
+		 ::"r" (clks_address),
+		      "r"(clks_value),
+		      "r"(l_p_j)
+		 :"t", "memory");
 
-	dbg_print("\n");
+	cpufreq_debug_printk(CPUFREQ_DEBUG_DRIVER,
+		"st_cpufreq_update_clocks:", "\n");
 	sh_current_set = set;
 	sh4_clk->rate = (cpu_freqs[set].frequency << 3) * 125;
-	if (cpu_data->cut_major < 2){
+	if (cpu_data->cut_major < 2) {
 		sh4_ic_clk->rate = (cpu_freqs[set].frequency << 2) * 125;
 		module_clk->rate = clk_get_rate(pll0_clk) >> 3;
 		if (set == 2)
@@ -117,44 +103,34 @@ static void st_cpufreq_update_clocks(unsigned int set, int propagate)
 	local_irq_restore(flag);
 }
 
-void *__init st_cpufreq_platform_init(struct cpufreq_frequency_table
-				      *_cpu_freqs)
+#ifdef CONFIG_STM_CPU_FREQ_OBSERVE
+static void __init st_cpufreq_observe_init(void)
 {
-	dbg_print("\n");
-
-	if (!_cpu_freqs)
-		return NULL;
-	cpu_freqs = _cpu_freqs;
+	/* route the sh4/2  clock frequency */
+	ctrl_outl(0xc, CKGA_CLKOUT_SEL);
+}
+#endif
 
+static int __init st_cpufreq_platform_init(void)
+{
 	pll0_clk = clk_get(NULL, "pll0_clk");
-	sh4_clk = clk_get(NULL, "sh4_clk");
-	clk_iomem = (unsigned long)clk_get_iomem();
+	sh4_ic_clk = clk_get(NULL, "sh4_ic_clk");
+	module_clk = clk_get(NULL, "module_clk");
 
 	if (!pll0_clk) {
 		printk(KERN_ERR "ERROR: on clk_get(pll0_clk)\n");
-		return NULL;
-	}
-	if (!sh4_clk) {
-		printk(KERN_ERR "ERROR: on clk_get(sh4_clk)\n");
-		return NULL;
+		return -ENODEV;
 	}
-	if (!clk_iomem)
-		return NULL;
-	if (cpu_data->cut_major < 2){
-		sh4_ic_clk = clk_get(NULL, "sh4_ic_clk");
-		module_clk = clk_get(NULL, "module_clk");
+	if (cpu_data->cut_major < 2) {
 		if (!sh4_ic_clk) {
 			printk(KERN_ERR "ERROR: on clk_get(sh4_ic_clk)\n");
-			return NULL;
+			return -ENODEV;
 		}
 		if (!module_clk) {
 			printk(KERN_ERR "ERROR: on clk_get(module_clk)\n");
-			return NULL;
+			return -ENODEV;
 		}
 	}
-	ctrl_outl(0xc, CKGA_CLKOUT_SEL);	/* sh4:2 routed on SYSCLK_OUT */
 
-	return (void *)st_cpufreq_update_clocks;
+	return 0;
 }
-
-MODULE_LICENSE("GPL");
-- 
1.5.3.6

