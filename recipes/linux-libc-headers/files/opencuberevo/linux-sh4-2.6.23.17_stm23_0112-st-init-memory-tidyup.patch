sh: Fix a couple of unusual memory initialisation errors

This fixes two problems with the set up of Linux memory:

 - When reserving memory at boot time, the code previously reserved
   the bottom page of memory, and then from one page up to the end of
   the bootmap. This had the desired effect, but was strictly speaking
   wrong, as the one page was actually whatever CONFIG_ZERO_PAGE_OFFSET
   had been set to.

 - The RAM resource was previousy setup before command line parsing,
   which would reduce memory size if the "mem=" option was used. Move
   this to after command line parsing.

Signed-off-by: Stuart Menefy <stuart.menefy@st.com>
Index: linux-2.6.23-stm/arch/sh/kernel/setup.c
===================================================================
--- linux-2.6.23-stm.orig/arch/sh/kernel/setup.c
+++ linux-2.6.23-stm/arch/sh/kernel/setup.c
@@ -171,14 +171,15 @@ void __init setup_bootmem_allocator(unsi
 	 * case of us accidentally initializing the bootmem allocator with
 	 * an invalid RAM area.
 	 */
-	reserve_bootmem(__MEMORY_START+PAGE_SIZE,
-		(PFN_PHYS(free_pfn)+bootmap_size+PAGE_SIZE-1)-__MEMORY_START);
+	reserve_bootmem(__MEMORY_START + CONFIG_ZERO_PAGE_OFFSET,
+			(PFN_PHYS(free_pfn) + bootmap_size + PAGE_SIZE - 1) -
+			(__MEMORY_START + CONFIG_ZERO_PAGE_OFFSET));
 
 	/*
 	 * reserve physical page 0 - it's a special BIOS page on many boxes,
 	 * enabling clean reboots, SMP operation, laptop functions.
 	 */
-	reserve_bootmem(__MEMORY_START, PAGE_SIZE);
+	reserve_bootmem(__MEMORY_START, CONFIG_ZERO_PAGE_OFFSET);
 
 	sparse_memory_present_with_active_regions(0);
 
@@ -265,7 +266,6 @@ void __init setup_arch(char **cmdline_p)
 	memory_start = (unsigned long)PAGE_OFFSET+__MEMORY_START;
 #endif
 	memory_end = memory_start + __MEMORY_SIZE;
-	request_standard_resources();
 
 #ifdef CONFIG_CMDLINE_BOOL
 	strlcpy(command_line, CONFIG_CMDLINE, sizeof(command_line));
@@ -279,6 +279,8 @@ void __init setup_arch(char **cmdline_p)
 
 	parse_early_param();
 
+	request_standard_resources();
+
 	sh_mv_setup();
 
 	/*
