Add support for the PWM driver on the STx7105 and mb680.

Signed-off-by: Stuart Menefy <stuart.menefy@st.com>
Index: linux-2.6.23-stm/arch/sh/boards/st/mb680/setup.c
===================================================================
--- linux-2.6.23-stm.orig/arch/sh/boards/st/mb680/setup.c
+++ linux-2.6.23-stm/arch/sh/boards/st/mb680/setup.c
@@ -39,6 +39,7 @@ static void __init mb680_setup(char** cm
 
 static struct plat_stm_pwm_data pwm_private_info = {
 	.flags		= PLAT_STM_PWM_OUT0,
+	.routing	= PWM_OUT0_PIO13_0,
 };
 
 static struct plat_ssc_data ssc_private_info = {
@@ -104,9 +105,7 @@ static int __init device_init(void)
 {
 	stx7200_configure_sata(0);
 	stx7200_configure_sata(1);
-#if 0
 	stx7105_configure_pwm(&pwm_private_info);
-#endif
 	stx7105_configure_ssc(&ssc_private_info);
 
 	/*
Index: linux-2.6.23-stm/arch/sh/kernel/cpu/sh4/setup-stx7105.c
===================================================================
--- linux-2.6.23-stm.orig/arch/sh/kernel/cpu/sh4/setup-stx7105.c
+++ linux-2.6.23-stm/arch/sh/kernel/cpu/sh4/setup-stx7105.c
@@ -590,7 +590,6 @@ void stx7105_configure_ethernet(int reve
 
 	platform_device_register(&stx7105eth_device);
 }
-#if 0
 
 /* PWM resources ----------------------------------------------------------- */
 
@@ -616,26 +615,31 @@ static struct platform_device stm_pwm_de
 
 void stx7105_configure_pwm(struct plat_stm_pwm_data *data)
 {
+	int pwm;
+	const struct {
+		unsigned char port, pin, alt;
+	} pwm_pios[2][2] = {
+		{ { 4, 4, 3 }, { 13, 0, 3 } }, 	/* PWM0 */
+		{ { 4, 5, 3 }, { 13, 1, 3 } },	/* PWM1 */
+	};
+
 	stm_pwm_device.dev.platform_data = data;
 
-	if (data->flags & PLAT_STM_PWM_OUT0) {
-		/* Route UART2 (in and out) and PWM_OUT0 instead of SCI to pins
-		 * ssc2_mux_sel = 0 */
-		if (!sc7_3)
-			sc7_3 = sysconf_claim(SYS_CFG, 7, 3, 3, "pwm");
-		sysconf_write(sc7_3, 0);
-		stpio_request_pin(4, 6, "PWM", STPIO_ALT_OUT);
-	}
+	for (pwm = 0; pwm < 2; pwm++) {
+		if (data->flags & (1<<pwm)) {
+			int r = (data->routing >> pwm) & 1;
+			int port = pwm_pios[pwm][r].port;
+			int pin  = pwm_pios[pwm][r].pin;
+			int alt  = pwm_pios[pwm][r].alt;
 
-	if (data->flags & PLAT_STM_PWM_OUT1) {
-		stpio_request_pin(4, 7, "PWM", STPIO_ALT_OUT);
+			stx7105_pio_sysconf(port, pin, alt, "pwm");
+			stpio_request_pin(port, pin, "pwm", STPIO_ALT_OUT);
+		}
 	}
 
 	platform_device_register(&stm_pwm_device);
 }
 
-#endif
-
 /* Hardware RNG resources -------------------------------------------------- */
 
 static struct platform_device hwrandom_rng_device = {
Index: linux-2.6.23-stm/include/linux/stm/soc.h
===================================================================
--- linux-2.6.23-stm.orig/include/linux/stm/soc.h
+++ linux-2.6.23-stm/include/linux/stm/soc.h
@@ -40,6 +40,7 @@ struct plat_ssc_data {
 	unsigned long		routing;
 };
 
+#ifdef CONFIG_CPU_SUBTYPE_STX7105
 #define SSC_SCLK_SHIFT(n)	(0+(n*6))
 #define SSC_MTSR_SHIFT(n)	(2+(n*6))
 #define SSC_MRST_SHIFT(n)	(4+(n*6))
@@ -84,7 +85,7 @@ struct plat_ssc_data {
    SPI_NO_CHIPSELECT to specify SPI device with no CS (ie CS tied to 'active')
 */
 #define SPI_NO_CHIPSELECT	(spi_set_cs(9, 7) + 1)
-
+#endif
 
 /* Private data for the SATA driver */
 struct plat_sata_data {
@@ -96,11 +97,19 @@ struct plat_sata_data {
 /* Private data for the PWM driver */
 struct plat_stm_pwm_data {
 	unsigned long flags;
+	unsigned long routing;
 };
 
 #define PLAT_STM_PWM_OUT0	(1<<0)
 #define PLAT_STM_PWM_OUT1	(1<<1)
 
+#ifdef CONFIG_CPU_SUBTYPE_STX7105
+#define PWM_OUT0_PIO4_4		(0 << 0)
+#define PWM_OUT0_PIO13_0	(1 << 0)
+#define PWM_OUT1_PIO4_5		(0 << 1)
+#define PWM_OUT1_PIO13_1	(1 << 1)
+#endif
+
 /* This is the private platform data for the lirc driver */
 #define LIRC_PIO_ON		0x08	/* PIO pin available */
 #define LIRC_IR_RX		0x04	/* IR RX PIO line available */
