From 80592a0448241ac0b380d8aaa364b929235e4175 Mon Sep 17 00:00:00 2001
From: Francesco M. Virlinzi <francesco.virlinzi@st.com>
Date: Fri, 13 Feb 2009 10:04:29 +0100
Subject: [PATCH] sh_stm: Hibernation on Disk core code

This patch adds hibernate to disk core support

Signed-off-by: Francesco M. Virlinzi <francesco.virlinzi@st.com>
---
 arch/sh/kernel/cpu/irq/st40_ilc_sti5528.c |   34 ++++++-
 arch/sh/kernel/cpu/sh4/Makefile           |   10 ++
 arch/sh/kernel/cpu/sh4/cpu.c              |   92 ++++++++++++++++
 arch/sh/kernel/cpu/sh4/swsusp-st_socs.c   |   50 +++++++++
 arch/sh/kernel/cpu/sh4/swsusp.S           |  169 +++++++++++++++++++++++++++++
 arch/sh/mm/pmb.c                          |   26 +++++
 include/asm-sh/mmu.h                      |    9 ++
 include/asm-sh/suspend.h                  |   19 ++++
 include/linux/stm/pm.h                    |    1 +
 include/linux/suspend.h                   |    3 +-
 kernel/power/Kconfig                      |    3 +-
 11 files changed, 413 insertions(+), 3 deletions(-)
 create mode 100644 arch/sh/kernel/cpu/sh4/cpu.c
 create mode 100644 arch/sh/kernel/cpu/sh4/swsusp-st_socs.c
 create mode 100644 arch/sh/kernel/cpu/sh4/swsusp.S
 create mode 100644 include/asm-sh/suspend.h

diff --git a/arch/sh/kernel/cpu/irq/st40_ilc_sti5528.c b/arch/sh/kernel/cpu/irq/st40_ilc_sti5528.c
index eff216e..ae29658 100644
--- a/arch/sh/kernel/cpu/irq/st40_ilc_sti5528.c
+++ b/arch/sh/kernel/cpu/irq/st40_ilc_sti5528.c
@@ -15,6 +15,7 @@
 #include <linux/kernel.h>
 #include <linux/init.h>
 #include <linux/irq.h>
+#include <linux/pm.h>
 
 #include <asm/system.h>
 #include <asm/io.h>
@@ -53,10 +54,41 @@
  *           generate conflict between differnt CPUs when accessing the
  *           ILC
  */
+struct ilc_route_log {
+	int ilc_irq;
+	int ext_out;
+	int invert;
+};
 
-void __init ilc_route_external(int ilc_irq, int ext_out, int invert)
+static struct ilc_route_log ilc_log[4];
+
+/*
+ * it was '__init' but in the PM System we have to route the irq again...
+ */
+void ilc_route_external(int ilc_irq, int ext_out, int invert)
 {
+	int offset = ext_out-4;
 	ILC_SET_PRI(ilc_irq, 0x8000 | ext_out);
 	ILC_SET_TRIGMODE(ilc_irq, invert ? ILC_TRIGGERMODE_LOW : ILC_TRIGGERMODE_HIGH);
 	ILC_SET_ENABLE(ilc_irq);
+	ilc_log[offset].ilc_irq = ilc_irq;
+	ilc_log[offset].ext_out = ext_out;
+	ilc_log[offset].invert  = invert;
+}
+
+int ilc_pm_state(pm_message_t state)
+{
+	int idx;
+	static pm_message_t prev_state;
+	switch (state.event) {
+	case PM_EVENT_ON:
+		if (prev_state.event == PM_EVENT_FREEZE)
+		  for (idx = 0; idx < ARRAY_SIZE(ilc_log); ++idx)
+			ilc_route_external(ilc_log[idx].ilc_irq,
+					   ilc_log[idx].ext_out,
+					   ilc_log[idx].invert);
+	default:
+		prev_state = state;
+	}
+	return 0;
 }
diff --git a/arch/sh/kernel/cpu/sh4/Makefile b/arch/sh/kernel/cpu/sh4/Makefile
index 82ace09..0690f7d 100644
--- a/arch/sh/kernel/cpu/sh4/Makefile
+++ b/arch/sh/kernel/cpu/sh4/Makefile
@@ -53,3 +53,13 @@ obj-$(CONFIG_CPU_SUBTYPE_STX7111)	+= suspend-stx7111.o
 obj-$(CONFIG_CPU_SUBTYPE_STX7141)	+= suspend-stx7141.o
 obj-$(CONFIG_CPU_SUBTYPE_STX7200)	+= suspend-stx7200.o
 endif
+
+ifdef CONFIG_HIBERNATION
+obj-y					+= cpu.o swsusp.o
+obj-$(CONFIG_CPU_SUBTYPE_STX5197)	+= swsusp-st_socs.o
+obj-$(CONFIG_CPU_SUBTYPE_STB7100)	+= swsusp-st_socs.o
+obj-$(CONFIG_CPU_SUBTYPE_STX7105)	+= swsusp-st_socs.o
+obj-$(CONFIG_CPU_SUBTYPE_STX7111)	+= swsusp-st_socs.o
+obj-$(CONFIG_CPU_SUBTYPE_STX7141)	+= swsusp-st_socs.o
+obj-$(CONFIG_CPU_SUBTYPE_STX7200)	+= swsusp-st_socs.o
+endif
diff --git a/arch/sh/kernel/cpu/sh4/cpu.c b/arch/sh/kernel/cpu/sh4/cpu.c
new file mode 100644
index 0000000..bfacd8b
--- /dev/null
+++ b/arch/sh/kernel/cpu/sh4/cpu.c
@@ -0,0 +1,92 @@
+/*
+ * -------------------------------------------------------------------------
+ * <linux_root>/arch/sh/kernel/cpu/sh4/cpu.c
+ * -------------------------------------------------------------------------
+ * Copyright (C) 2009  STMicroelectronics
+ * Author: Francesco M. Virlinzi  <francesco.virlinzi@st.com>
+ *
+ * May be copied or modified under the terms of the GNU General Public
+ * License V.2 ONLY.  See linux/COPYING for more information.
+ *
+ * ------------------------------------------------------------------------- */
+
+#include <linux/init.h>
+#include <linux/suspend.h>
+#include <linux/errno.h>
+#include <linux/time.h>
+#include <linux/irqflags.h>
+#include <linux/irq.h>
+#include <asm/system.h>
+#include <asm/io.h>
+#include <asm/mmu.h>
+#include <asm/cacheflush.h>
+
+#undef  dbg_print
+
+#ifdef CONFIG_PM_DEBUG
+#define dbg_print(fmt, args...)			\
+		printk(KERN_DEBUG "%s: " fmt, __FUNCTION__ , ## args)
+#else
+#define dbg_print(fmt, args...)
+#endif
+
+/*
+ * saved registers:
+ * - 8 gpr
+ * -   pr
+ * -   sr
+ * -   r6_bank
+ * -   r7_bank
+ */
+unsigned long saved_context_reg[12] __cacheline_aligned;
+
+void (*arch_swsusp_processor_state)(int suspend) = NULL;
+
+void save_processor_state(void)
+{
+	if (arch_swsusp_processor_state)
+		arch_swsusp_processor_state(PM_EVENT_FREEZE);
+
+	pmb_pm_state(PM_EVENT_FREEZE);
+	return;
+}
+
+void restore_processor_state(void)
+{
+	int i;
+	unsigned long flags;
+	struct irq_desc *desc;
+	void (*irq_func)(unsigned int irq);
+
+	/* restore the (hw) pmb setting */
+	pmb_pm_state(PM_EVENT_ON);
+
+	if (arch_swsusp_processor_state)
+		arch_swsusp_processor_state(PM_EVENT_ON);
+
+	/* now restore the hw irq setting */
+	local_irq_save(flags);
+	for (i = 0; i < NR_IRQS; ++i) {
+		desc = &irq_desc[i];
+		if (desc->chip != &no_irq_chip && desc->action) {
+			irq_func = (desc->status & IRQ_DISABLED) ?
+			    desc->chip->disable : desc->chip->enable;
+			spin_lock(&desc->lock);
+			desc->chip->startup(i);
+			irq_func(i);
+			spin_unlock(&desc->lock);
+		}	/* if.. */
+	}		/* for... */
+	local_irq_restore(flags);
+	return;
+}
+
+/* References to section boundaries */
+int pfn_is_nosave(unsigned long pfn)
+{
+	unsigned long nosave_begin_pfn = __pa(&__nosave_begin) >> PAGE_SHIFT;
+	unsigned long nosave_end_pfn =
+	    PAGE_ALIGN(__pa(&__nosave_end)) >> PAGE_SHIFT;
+	return (pfn >= nosave_begin_pfn) && (pfn < nosave_end_pfn);
+
+}
diff --git a/arch/sh/kernel/cpu/sh4/swsusp-st_socs.c b/arch/sh/kernel/cpu/sh4/swsusp-st_socs.c
new file mode 100644
index 0000000..51ba1d0
--- /dev/null
+++ b/arch/sh/kernel/cpu/sh4/swsusp-st_socs.c
@@ -0,0 +1,50 @@
+/*
+ * -------------------------------------------------------------------------
+ * <linux_root>/arch/sh/kernel/cpu/sh4/swsusp-st_socs.c
+ * -------------------------------------------------------------------------
+ * Copyright (C) 2009  STMicroelectronics
+ * Author: Francesco M. Virlinzi  <francesco.virlinzi@st.com>
+ *
+ * May be copied or modified under the terms of the GNU General Public
+ * License V.2 ONLY.  See linux/COPYING for more information.
+ *
+ * ------------------------------------------------------------------------- */
+#include <linux/suspend.h>
+#include <linux/pm.h>
+#include <linux/stm/pm.h>
+#include <asm/pm.h>
+
+#undef  dbg_print
+
+#ifdef CONFIG_PM_DEBUG
+#define dbg_print(fmt, args...)		\
+		printk(KERN_DEBUG "%s: " fmt, __FUNCTION__ , ## args)
+#else
+#define dbg_print(fmt, args...)
+#endif
+
+static void st_socs_processor_state(int state)
+{
+	pm_message_t pm = {.event = state, };
+	if (state == PM_EVENT_FREEZE) {
+		ilc_pm_state(pm);
+		emi_pm_state(pm);
+/*		clk_pm_state(pm);*/
+		sysconf_pm_state(pm);
+	} else {
+		sysconf_pm_state(pm);
+/*		clk_pm_state(pm);*/
+		emi_pm_state(pm);
+		ilc_pm_state(pm);
+	}
+	return;
+}
+
+static int __init init_swsusp_st_socs(void)
+{
+	arch_swsusp_processor_state = st_socs_processor_state;
+	printk(KERN_INFO "sh4 hibernation support registered\n");
+	return 0;
+}
+
+late_initcall(init_swsusp_st_socs);
diff --git a/arch/sh/kernel/cpu/sh4/swsusp.S b/arch/sh/kernel/cpu/sh4/swsusp.S
new file mode 100644
index 0000000..3b67449
--- /dev/null
+++ b/arch/sh/kernel/cpu/sh4/swsusp.S
@@ -0,0 +1,169 @@
+/*
+ * -------------------------------------------------------------------------
+ * <linux_root>/arch/sh/kernel/cpu/sh4/swsusp.S
+ * -------------------------------------------------------------------------
+ * Copyright (C) 2009  STMicroelectronics
+ * Author: Francesco M. Virlinzi  <francesco.virlinzi@st.com>
+ *
+ * May be copied or modified under the terms of the GNU General Public
+ * License V.2 ONLY.  See linux/COPYING for more information.
+ *
+ * This may not use any stack, nor any variable that is not "NoSave"
+ * ------------------------------------------------------------------------- */
+
+#include <linux/linkage.h>
+
+#define OFF_R8		( 0 )
+#define OFF_R9		(4 + OFF_R8  )
+#define OFF_R10		(4 + OFF_R9  )
+#define OFF_R11		(4 + OFF_R10 )
+#define OFF_R12		(4 + OFF_R11 )
+#define OFF_R13		(4 + OFF_R12 )
+#define OFF_R14		(4 + OFF_R13 )
+#define OFF_R15		(4 + OFF_R14 )
+#define OFF_PR		(4 + OFF_R15 )
+#define OFF_SR		(4 + OFF_PR  )
+#define OFF_R6_BK	(4 + OFF_SR  )
+#define OFF_R7_BK	(4 + OFF_R6_BK )
+
+.text		;
+.balign 32 	;	! to be icache aligned
+
+ENTRY(swsusp_arch_suspend) ;
+/*
+ *	Here I have to save all the registers
+ */
+    mov.l 1f, r0
+    mov.l r8, @(OFF_R8, r0)
+    mov.l r9, @(OFF_R9, r0)
+    mov.l r10, @(OFF_R10, r0)
+    mov.l r11, @(OFF_R11, r0)
+    mov.l r12, @(OFF_R12, r0)
+    mov.l r13, @(OFF_R13, r0)
+    mov.l r14, @(OFF_R14, r0)
+    mov.l r15, @(OFF_R15, r0)
+    stc   r6_bank, r1
+    mov.l r1, @(OFF_R6_BK, r0)
+    stc   r7_bank, r1
+    mov.l r1, @(OFF_R7_BK, r0)
+
+    sts   pr, r1
+    mov.l r1, @(OFF_PR, r0)
+    stc   sr, r1
+    mov.l r1, @(OFF_SR, r0)
+
+! Now call the swsusp_save
+    mov.l 2f, r0
+    jsr   @r0
+     nop
+    ! Now in r0 there is the returned value of swsusp_save
+    mov.l 1f, r4
+    ! Reload the right pr
+    mov.l @(OFF_PR, r4), r1
+    lds   r1, pr
+    rts
+     nop
+
+.balign 4;
+1:.long saved_context_reg;
+2:.long swsusp_save;
+
+#define JUMPER()	        bra 201f;	\
+				 nop;		\
+			200:	bra 200f;	\
+				 nop;	;	\
+			201:
+
+.balign 32 ;		! icache aligned
+ENTRY(swsusp_arch_resume)
+    bra 200f 		! start the jump sequence
+     nop
+really_swsusp_arch_resume:
+    mov.l 10f, r6 	! load the restore_pblist
+    mov.l @r6, r6
+0:  tst r6, r6 		! check if there are other 'pages'(pbe)
+    bt/s  20f
+     mov #64, r7	! r7 = 64
+    shll r7 		! r7 = 128 dcache line(128 * 32) = 4096...
+
+    JUMPER()
+
+    mov.l @(0, r6), r5 	! the source address
+    mov.l @(4, r6), r4 	! the destination address
+    mov.l @(8, r6), r6 	! the next pbe address
+    mov r5, r3
+    add #32, r3		! the next icache line source address
+1:
+    mov.l @r5+, r0 	! 1.
+    pref  @r3 		! prefect the next icache line
+    movca.l r0, @r4
+    mov.l @r5+, r0	! 2.
+    mov.l r0,   @(4, r4)
+    mov.l @r5+, r0 	! 3.
+    JUMPER()
+
+    mov.l r0, @(8, r4)
+    mov.l @r5+, r0 	! 4.
+    mov.l r0, @(12, r4)
+    mov.l @r5+, r0 	! 5.
+    mov.l r0, @(16, r4)
+    mov.l @r5+, r0 	! 6
+    mov.l r0, @(20, r4)
+
+    JUMPER()
+
+    mov.l @r5 +, r0 	! 7
+    mov.l r0, @(24, r4)
+    mov.l @r5+,  r0 	! 8
+    mov.l r0, @(28, r4)
+    ocbp @r4
+    add  #32,	r4
+    add  #32,	r3
+    dt   r7
+    bf   1b 	! check if the	page is complete
+
+    JUMPER()
+
+    bra 0b
+     nop
+
+ 20:
+
+    !now restore the previous value...
+    mov.l 11f, r0
+    mov.l @(OFF_R8, r0), r8
+    mov.l @(OFF_R9, r0), r9
+    mov.l @(OFF_R10, r0), r10
+
+    JUMPER()
+
+    mov.l @(OFF_R11, r0), r11
+    mov.l @(OFF_R12, r0), r12
+    mov.l @(OFF_R13, r0), r13
+    mov.l @(OFF_R14, r0), r14
+    mov.l @(OFF_R15, r0), r15
+    mov.l @(OFF_R6_BK, r0), r1
+    ldc r1, r6_bank
+    mov.l @(OFF_R7_BK, r0), r1
+    ldc r1, r7_bank
+
+    JUMPER()
+
+    mov.l 12f, r1
+    jsr @r1
+     nop
+    mov.l 11f, r0
+    mov.l @(OFF_PR, r0), r1
+    lds r1, pr
+    mov.l @(OFF_SR, r0), r1
+    ldc r1, sr
+    rts
+     mov #0, r0
+
+200: bra really_swsusp_arch_resume
+      nop
+
+.balign 4			;
+10:.long restore_pblist		;
+11:.long saved_context_reg	;
+12:.long flush_cache_all	;
diff --git a/arch/sh/mm/pmb.c b/arch/sh/mm/pmb.c
index a042314..ebe15c1 100644
--- a/arch/sh/mm/pmb.c
+++ b/arch/sh/mm/pmb.c
@@ -22,6 +22,7 @@
 #include <linux/fs.h>
 #include <linux/seq_file.h>
 #include <linux/err.h>
+#include <linux/pm.h>
 #include <asm/system.h>
 #include <asm/uaccess.h>
 #include <asm/pgtable.h>
@@ -532,6 +533,31 @@ int pmb_virt_to_phys(void *addr, unsigned long *phys, unsigned long *flags)
 }
 EXPORT_SYMBOL(pmb_virt_to_phys);
 
+#ifdef CONFIG_PM
+int pmb_pm_state(int state)
+{
+	static int prev_state;
+	int idx;
+	switch (state) {
+	case PM_EVENT_ON:
+	  if (prev_state == PM_EVENT_FREEZE) {
+		for (idx = 0; idx < NR_PMB_ENTRIES; ++idx)
+		  if (pmbm[idx].usage)
+			pmb_mapping_set(&pmbm[idx]);
+		}
+	  break;
+	case PM_EVENT_SUSPEND:
+	  break;
+	case PM_EVENT_FREEZE:
+	  break;
+	default:
+	  return -1;
+	}
+	prev_state = state;
+	return 0;
+}
+#endif
+
 static int pmb_seq_show(struct seq_file *file, void *iter)
 {
 	int i;
diff --git a/include/asm-sh/mmu.h b/include/asm-sh/mmu.h
index d789783..03fbad6 100644
--- a/include/asm-sh/mmu.h
+++ b/include/asm-sh/mmu.h
@@ -45,5 +45,14 @@ int  pmb_unmap(unsigned long addr);
 void pmb_init(void);
 int pmb_virt_to_phys(void *addr, unsigned long *phys, unsigned long *flags);
 
+#ifdef CONFIG_32BIT
+int pmb_pm_state(int state);
+#else
+static inline int pmb_pm_state(int state)
+{
+	return 0;
+}
+#endif
+
 #endif /* __MMU_H */
 
diff --git a/include/asm-sh/suspend.h b/include/asm-sh/suspend.h
new file mode 100644
index 0000000..fd4ee61
--- /dev/null
+++ b/include/asm-sh/suspend.h
@@ -0,0 +1,19 @@
+/*
+ * This file is subject to the terms and conditions of the GNU General Public
+ * License.  See the file "COPYING" in the main directory of this archive
+ * for more details.
+ *
+ * Copyright 2009 (c) STMicroelectronics
+ *
+ */
+#ifndef __ASM_SH_SUSPEND_H
+#define __ASM_SH_SUSPEND_H
+
+extern const unsigned long __nosave_begin, __nosave_end;
+static inline int arch_prepare_suspend(void)
+{
+	return 0;
+}
+
+extern void (*arch_swsusp_processor_state)(int suspend);
+#endif /* __ASM_SH_SUSPEND_H */
diff --git a/include/linux/stm/pm.h b/include/linux/stm/pm.h
index 32763b1..66f3cef 100644
--- a/include/linux/stm/pm.h
+++ b/include/linux/stm/pm.h
@@ -21,6 +21,7 @@ extern struct kset power_subsys;
 
 int emi_pm_state(pm_message_t state);
 int sysconf_pm_state(pm_message_t state);
+int ilc_pm_state(pm_message_t state);
 
 /*
  * Several devices (i.e.: USB-SATA-PCI) have extra power capability
diff --git a/include/linux/suspend.h b/include/linux/suspend.h
index 388cace..3c1fe1e 100644
--- a/include/linux/suspend.h
+++ b/include/linux/suspend.h
@@ -1,7 +1,8 @@
 #ifndef _LINUX_SWSUSP_H
 #define _LINUX_SWSUSP_H
 
-#if defined(CONFIG_X86) || defined(CONFIG_FRV) || defined(CONFIG_PPC32) || defined(CONFIG_PPC64)
+#if defined(CONFIG_X86) || defined(CONFIG_FRV) || defined(CONFIG_PPC32) || \
+	defined(CONFIG_PPC64) || defined(CONFIG_CPU_SH4)
 #include <asm/suspend.h>
 #endif
 #include <linux/swap.h>
diff --git a/kernel/power/Kconfig b/kernel/power/Kconfig
index 14b0e10..b4ddfe8 100644
--- a/kernel/power/Kconfig
+++ b/kernel/power/Kconfig
@@ -110,7 +110,7 @@ config SUSPEND
 
 config HIBERNATION_UP_POSSIBLE
 	bool
-	depends on X86 || PPC64_SWSUSP || PPC32
+	depends on X86 || PPC64_SWSUSP || PPC32 || CPU_SH4
 	depends on !SMP
 	default y
 
@@ -206,3 +206,4 @@ config APM_EMULATION
 	  random kernel OOPSes or reboots that don't seem to be related to
 	  anything, try disabling/enabling this option (or disabling/enabling
 	  APM in your BIOS).
+
-- 
1.5.6.3

