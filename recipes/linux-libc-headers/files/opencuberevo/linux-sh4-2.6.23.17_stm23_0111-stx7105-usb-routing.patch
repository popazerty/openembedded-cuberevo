Modify the USB support for the stx7105 and mb680 so that the overcurrent
and power enable routing is described in the same way as PWM and SSC.

Signed-off-by: Stuart Menefy <stuart.menefy@st.com>

Index: linux-2.6.23-stm/arch/sh/boards/st/mb680/setup.c
===================================================================
--- linux-2.6.23-stm.orig/arch/sh/boards/st/mb680/setup.c
+++ linux-2.6.23-stm/arch/sh/boards/st/mb680/setup.c
@@ -52,6 +52,22 @@ static struct plat_ssc_data ssc_private_
 		SSC3_SCLK_PIO3_6 | SSC3_MTSR_PIO3_7 | SSC3_MRST_PIO3_7,
 };
 
+static struct usb_init_data usb_init[2] __initdata = {
+	{
+		.oc_en = 1,
+		.oc_actlow = 0,
+		.oc_pinsel = USB0_OC_PIO4_4,
+		.pwr_en = 1,
+		.pwr_pinsel = USB0_PWR_PIO4_5,
+	}, {
+		.oc_en = 1,
+		.oc_actlow = 0,
+		.oc_pinsel = USB1_OC_PIO4_6,
+		.pwr_en = 1,
+		.pwr_pinsel = USB1_PWR_PIO4_7,
+	}
+};
+
 static struct platform_device mb680_leds = {
 	.name = "leds-gpio",
 	.id = -1,
@@ -119,8 +135,8 @@ static int __init device_init(void)
 	 *	alt	| 12[6]	J5B 1-2		14[7]	J10B 1-2
 	 */
 
-	stx7105_configure_usb(0, 1, 0, 0, 1, 0);
-	stx7105_configure_usb(1, 1, 0, 0, 1, 0);
+	stx7105_configure_usb(0, &usb_init[0]);
+	stx7105_configure_usb(1, &usb_init[1]);
 	stx7105_configure_ethernet(0, 0, 0, 1, 0, 0);
 #if 0
         stx7105_configure_lirc();
Index: linux-2.6.23-stm/arch/sh/kernel/cpu/sh4/setup-stx7105.c
===================================================================
--- linux-2.6.23-stm.orig/arch/sh/kernel/cpu/sh4/setup-stx7105.c
+++ linux-2.6.23-stm/arch/sh/kernel/cpu/sh4/setup-stx7105.c
@@ -93,11 +93,7 @@ static struct platform_device st40_ehci_
 /**
  * stx7105_configure_usb - Configure a USB port
  * @port: USB port number (0 or 1)
- * @oc_en: enable OC detection (0 or 1)
- * @oc_actlow: whether OC detection is active low (0 or 1)
- * @oc_pinsel: use alternate pin for OC detection (0 or 1)
- * @pwr_en: enable power enable (0 or 1)
- * @pwr_pinsel: use alternate pin for power enable (0 or 1)
+ * @init_data: details of how to configure port
  *
  * Configure a USB port. Pins:
  *		  PORT 0	PORT 1
@@ -107,8 +103,7 @@ static struct platform_device st40_ehci_
  * PWR	normal	|  4[5]		 4[7]
  *	alt	| 12[6]		14[7]
  */
-void __init stx7105_configure_usb(int port, int oc_en, int oc_actlow,
-				  int oc_pinsel, int pwr_en, int pwr_pinsel)
+void __init stx7105_configure_usb(int port, struct usb_init_data *data)
 {
 	static struct stpio_pin *pin;
 	struct sysconf_field *sc;
@@ -126,9 +121,9 @@ void __init stx7105_configure_usb(int po
 
 	/* USB overcurrent enable */
 	sc = sysconf_claim(SYS_CFG, 4, 11+port,11+port, "USBOC");
-	sysconf_write(sc, oc_en);
+	sysconf_write(sc, data->oc_en);
 
-	if (oc_en) {
+	if (data->oc_en) {
 		const struct {
 			int portno;
 			int pinno;
@@ -138,21 +133,21 @@ void __init stx7105_configure_usb(int po
 			{ { 4, 6, 4 }, { 14, 6, 2 } }
 		};
 
-		int oc_portno = oc_pio[port][oc_pinsel].portno;
-		int oc_pinno  = oc_pio[port][oc_pinsel].pinno;
-		int oc_alt = oc_pio[port][oc_pinsel].alt;
+		int oc_portno = oc_pio[port][data->oc_pinsel].portno;
+		int oc_pinno  = oc_pio[port][data->oc_pinsel].pinno;
+		int oc_alt = oc_pio[port][data->oc_pinsel].alt;
 
 		sc = sysconf_claim(SYS_CFG, 4, 5+port,5+port, "USBOC");
-		sysconf_write(sc, oc_pinsel);
+		sysconf_write(sc, data->oc_pinsel);
 
 		stx7105_pio_sysconf(oc_portno, oc_pinno, oc_alt, "USBOC");
 		pin = stpio_request_pin(oc_portno, oc_pinno, "USBOC", STPIO_IN);
 
 		sc = sysconf_claim(SYS_CFG, 4, 3+port,3+port, "USBOC");
-		sysconf_write(sc, oc_actlow);
+		sysconf_write(sc, data->oc_actlow);
 	}
 
-	if (pwr_en) {
+	if (data->pwr_en) {
 		const struct {
 			int portno;
 			int pinno;
@@ -162,9 +157,9 @@ void __init stx7105_configure_usb(int po
 			{ { 4, 7, 4 }, { 14, 7, 2 } }
 		};
 
-		int pwr_portno = pwr_pio[port][pwr_pinsel].portno;
-		int pwr_pinno  = pwr_pio[port][pwr_pinsel].pinno;
-		int pwr_alt = pwr_pio[port][pwr_pinsel].alt;
+		int pwr_portno = pwr_pio[port][data->pwr_pinsel].portno;
+		int pwr_pinno  = pwr_pio[port][data->pwr_pinsel].pinno;
+		int pwr_alt = pwr_pio[port][data->pwr_pinsel].alt;
 
 		stx7105_pio_sysconf(pwr_portno, pwr_pinno, pwr_alt, "USBPWR");
 		pin = stpio_request_pin(pwr_portno, pwr_pinno, "USBPWR", STPIO_ALT_OUT);
@@ -372,9 +367,6 @@ void __init stx7105_configure_ssc(struct
 				ssc_pio->pio[pin].pio_port = portno;
 				ssc_pio->pio[pin].pio_pin  = pinno;
 
-printk("%s: ssc %d, pin %d, bit %d = r %d, port %d, pin %d\n",
-       __FUNCTION__, i, pin, bit, r, ssc_pio->pio[pin].pio_port, ssc_pio->pio[pin].pio_pin);
-
 				if ((pin==2) && !(capability & SSC_SPI_CAPABILITY))
 					continue;
 
@@ -438,7 +430,6 @@ static struct sysconf_field *mac_speed_s
 
 static void fix_mac_speed(void* priv, unsigned int speed)
 {
-printk("%s: speed %d\n", __FUNCTION__, speed);
 	sysconf_write(mac_speed_sc, (speed == SPEED_100) ? 0 : 1);
 }
 
Index: linux-2.6.23-stm/include/linux/stm/soc.h
===================================================================
--- linux-2.6.23-stm.orig/include/linux/stm/soc.h
+++ linux-2.6.23-stm/include/linux/stm/soc.h
@@ -171,6 +171,34 @@ struct plat_usb_data {
 	int port_number;
 };
 
+/**
+ * struct usb_init_data - initialisation data for a USB port
+ * @oc_en: enable OC detection (0 or 1)
+ * @oc_actlow: whether OC detection is active low (0 or 1)
+ * @oc_pinsel: use alternate pin for OC detection (0 or 1)
+ * @pwr_en: enable power enable (0 or 1)
+ * @pwr_pinsel: use alternate pin for power enable (0 or 1)
+ */
+struct usb_init_data {
+	char oc_en;
+	char oc_actlow;
+	int oc_pinsel;
+	char pwr_en;
+	int pwr_pinsel;
+};
+
+#ifdef CONFIG_CPU_SUBTYPE_STX7105
+#define USB0_OC_PIO4_4		(0<<0)
+#define USB0_OC_PIO12_5		(1<<0)
+#define USB0_PWR_PIO4_5		(0<<1)
+#define USB0_PWR_PIO12_6	(1<<1)
+
+#define USB1_OC_PIO4_6		(0<<0)
+#define USB1_OC_PIO14_6		(1<<0)
+#define USB1_PWR_PIO4_7		(0<<1)
+#define USB1_PWR_PIO14_7	(1<<1)
+#endif
+
 struct stasc_uart_data {
 	unsigned char pio_port;
 	unsigned char pio_pin[4]; /* Tx, Rx, CTS, RTS */
@@ -224,8 +252,7 @@ void stx7105_early_device_init(void);
 void stx7105_configure_asc(const int *ascs, int num_ascs, int console);
 void stx7105_configure_pwm(struct plat_stm_pwm_data *data);
 void stx7105_configure_ssc(struct plat_ssc_data *data);
-void stx7105_configure_usb(int port, int oc_en, int oc_actlow, int oc_pinsel,
-			   int pwr_en, int pwr_pinsel);
+void stx7105_configure_usb(int port, struct usb_init_data *data);
 void stx7105_configure_ethernet(int reverse_mii, int rmii_mode, int mode,
 				int ext_mdio, int ext_clk, int phy_bus);
 void stx7105_configure_nand(struct nand_config_data *data);
