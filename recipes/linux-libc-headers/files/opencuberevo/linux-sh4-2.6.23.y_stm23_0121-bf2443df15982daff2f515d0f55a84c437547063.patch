From bf2443df15982daff2f515d0f55a84c437547063 Mon Sep 17 00:00:00 2001
From: Christopher SMITH <chris.smith@st.com>
Date: Wed, 17 Jun 2009 10:47:18 +0100
Subject: [PATCH] latencydebug: Warn on late timer interrupts

This patch adds a new debug option, whereby the kernel will warn if
the timer interrupt is (by default) a millisecond or more late. The
warning threshold is tunable via a debugfs interface.

The intention is to highlight when interrupts have been disabled for a
long period.

Signed-off-by: Chris Smith <chris.smith@st.com>
Signed-off-by: Stuart Menefy <stuart.menefy@st.com>
---
 kernel/Makefile       |    1 +
 kernel/latencydebug.c |  171 +++++++++++++++++++++++++++++++++++++++++++++++++
 lib/Kconfig.debug     |   14 ++++
 3 files changed, 186 insertions(+), 0 deletions(-)
 create mode 100644 kernel/latencydebug.c

diff --git a/kernel/Makefile b/kernel/Makefile
index 88ecd56..4a907d9 100644
--- a/kernel/Makefile
+++ b/kernel/Makefile
@@ -54,6 +54,7 @@ obj-$(CONFIG_TASK_DELAY_ACCT) += delayacct.o
 obj-$(CONFIG_TASKSTATS) += taskstats.o tsacct.o
 obj-$(CONFIG_IMMEDIATE) += immediate.o
 obj-$(CONFIG_MARKERS) += marker.o
+obj-$(CONFIG_DEBUG_LATENCY) += latencydebug.o
 
 ifneq ($(CONFIG_SCHED_NO_NO_OMIT_FRAME_POINTER),y)
 # According to Alan Modra <alan@linuxcare.com.au>, the -fno-omit-frame-pointer is
diff --git a/kernel/latencydebug.c b/kernel/latencydebug.c
new file mode 100644
index 0000000..5e18e55
--- /dev/null
+++ b/kernel/latencydebug.c
@@ -0,0 +1,171 @@
+/*
+ * latencydebug.c : Warn on late timer interrupts.
+ *
+ * Allows the kernel to warn when timer interrupts are delayed beyond a given
+ * threshold. That can be a clue that interrupts may be being locked for
+ * uncomfortable periods.
+ *
+ * Copyright (C) STMicroelectronics, 2009
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2
+ * as published by the Free Software Foundation
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ */
+
+#include <linux/module.h>
+#include <linux/profile.h>
+#include <linux/debugfs.h>
+#include <linux/uaccess.h>
+
+static struct timeval last;
+
+/* Default to HZ + 1ms */
+static int threshold = 1000000/HZ + 1000;
+
+/* Functionality is off by default, and toggled via debugfs interface */
+static int enabled;
+
+static struct dentry *threshold_control;
+static struct dentry *enabled_control;
+static struct dentry *dir;
+
+static int latency_debug_notify(struct pt_regs *regs)
+{
+	struct timeval curr;
+	do_gettimeofday(&curr);
+	if (last.tv_usec != -1 && (curr.tv_usec - last.tv_usec > threshold))  {
+		printk(KERN_INFO
+			"Warning: timer interrupt fired after %li " \
+			"microseconds (HZ implies %d)\n",
+				curr.tv_usec - last.tv_usec,
+				1000000/HZ);
+		dump_stack();
+		do_gettimeofday(&curr);
+	}
+	last = curr;
+	return 0;
+}
+
+static ssize_t enabled_read(struct file *filp, char __user *buffer,
+				size_t count, loff_t *ppos)
+{
+	char buf[64];
+	snprintf(buf, sizeof(buf), "System latency debugging is %s\n",
+					enabled ? "enabled":"disabled");
+	return simple_read_from_buffer(buffer, count, ppos, buf, strlen(buf));
+}
+
+static ssize_t enabled_write(struct file *filp, const char __user *buffer,
+				size_t count, loff_t *ppos)
+{
+	char buf[16];
+	char *tmp;
+
+	if (count > sizeof(buf))
+		return -EINVAL;
+
+	memset(buf, 0, sizeof(buf));
+
+	if (copy_from_user(buf, buffer, count))
+		return -EFAULT;
+
+	enabled = simple_strtol(buf, &tmp, 10);
+	if (tmp == buf)
+		return -EINVAL;
+
+	if (enabled == 1) {
+		last.tv_usec  = -1;
+		register_timer_hook(latency_debug_notify);
+	} else
+		unregister_timer_hook(latency_debug_notify);
+
+	return count;
+}
+
+static ssize_t threshold_read(struct file *filp, char __user *buffer,
+				size_t count, loff_t *ppos)
+{
+	char buf[128];
+
+	if (enabled)
+		snprintf(buf, sizeof(buf), "Warning when timer interrupts are "\
+						"more than %d millseconds " \
+						"apart\n", threshold);
+	else
+		snprintf(buf, sizeof(buf),
+				"System latency debugging is disabled\n");
+
+	return simple_read_from_buffer(buffer, count, ppos, buf, strlen(buf));
+}
+
+static ssize_t threshold_write(struct file *filp, const char __user *buffer,
+				size_t count, loff_t *ppos)
+{
+	char buf[16];
+	char *tmp;
+	int new_threshold = 0;
+
+	if (count > sizeof(buf))
+		return -EINVAL;
+
+	memset(buf, 0, sizeof(buf));
+
+	if (copy_from_user(buf, buffer, count))
+		return -EFAULT;
+
+	new_threshold = simple_strtol(buf, &tmp, 10);
+	if (tmp == buf)
+		return -EINVAL;
+
+	threshold = new_threshold;
+
+	return count;
+}
+
+
+static struct file_operations threshold_fops = {
+	.read = threshold_read,
+	.write = threshold_write
+};
+
+static struct file_operations enabled_fops = {
+	.read = enabled_read,
+	.write = enabled_write
+};
+
+static int latency_debug_init(void)
+{
+	dir = debugfs_create_dir("latency_debug", NULL);
+	threshold_control = debugfs_create_file("threshold", 0644, dir, NULL,
+							&threshold_fops);
+	enabled_control = debugfs_create_file("enabled", 0644, dir, NULL,
+							&enabled_fops);
+	if (threshold_control < 0)
+		printk("Failed to add debugfs file\n");
+
+	return 0;
+}
+
+static void latency_debug_exit(void)
+{
+	if (enabled)
+		unregister_timer_hook(latency_debug_notify);
+
+	debugfs_remove(threshold_control);
+	debugfs_remove(enabled_control);
+	debugfs_remove(dir);
+}
+
+module_init(latency_debug_init);
+module_exit(latency_debug_exit);
+MODULE_LICENSE("GPL");
+
diff --git a/lib/Kconfig.debug b/lib/Kconfig.debug
index 4b504b8..a6db171 100644
--- a/lib/Kconfig.debug
+++ b/lib/Kconfig.debug
@@ -140,6 +140,20 @@ config TIMER_STATS
 	  (it defaults to deactivated on bootup and will only be activated
 	  if some application like powertop activates it explicitly).
 
+config DEBUG_LATENCY
+	tristate "Debug system latency"
+	depends on DEBUG_KERNEL && DEBUG_FS
+	help
+         If you say Y here, the kernel can warn you when a timer interrupt
+         occurs after an interval greater than a given threshold, which
+         defaults to 1 millisecond longer than a normal timer tick. This could
+         suggest that interrupts are being disabled for up to that period, which
+         could be detrimental to real-time behavior.
+
+         To turn on checking, echo a "1" into /debug/latency_debug/enabled.
+         The warning threshold can be tuned by passing a millisecond value
+         into /debug/latency_debug/threshold.
+
 config DEBUG_SLAB
 	bool "Debug slab memory allocations"
 	depends on DEBUG_KERNEL && SLAB
-- 
1.6.0.6

