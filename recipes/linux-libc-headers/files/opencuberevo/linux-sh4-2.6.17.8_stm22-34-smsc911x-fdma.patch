This patch adds support for the new dma api for the smsc 911x driver.
it has been optimised to reconfigure transfers and only alloc memory
on initialisation.  Two pre-compiled nodes are now used for tx/rx
respectively.

Signed-off-by: Mark Glaisher <mark.glaisher@st.com>

Index: linux-2.6.17/drivers/net/smsc_911x/st40-shdma.c
===================================================================
--- linux-2.6.17.orig/drivers/net/smsc_911x/st40-shdma.c
+++ linux-2.6.17/drivers/net/smsc_911x/st40-shdma.c
@@ -1,4 +1,8 @@
 #include <asm/dma.h>
+#include <linux/stm/stm-dma.h>
+
+static struct stm_dma_params rx_transfer;
+static struct stm_dma_params tx_transfer;
 
 BOOLEAN Platform_IsValidDmaChannel(DWORD dwDmaCh)
 {
@@ -11,7 +15,9 @@ DWORD Platform_RequestDmaChannel(
 	PPLATFORM_DATA platformData)
 {
 	int chan;
-	chan = request_dma(ANY_CHANNEL, "smsc911x");
+	const char * dmac_id =STM_DMAC_ID;
+	const char * lb_cap_channel = STM_DMA_CAP_LOW_BW;
+	chan = request_dma_bycap(&dmac_id,&lb_cap_channel, "smsc911x");
 	if (chan < 0)
 		return TRANSFER_PIO;
 	return chan;
@@ -22,19 +28,47 @@ void Platform_ReleaseDmaChannel(
 	DWORD dwDmaChannel)
 {
 	free_dma(dwDmaChannel);
+	dma_free_descriptor(&rx_transfer);
+	dma_free_descriptor(&tx_transfer);
+}
+
+static void err_cb(void* x)
+{
+	SMSC_TRACE("DMA err completion callback");
 }
 
+
 BOOLEAN Platform_DmaInitialize(
 	PPLATFORM_DATA platformData,
 	DWORD dwDmaCh)
 {
+
+	declare_dma_parms(  	&rx_transfer,
+				MODE_FREERUNNING,
+			       	STM_DMA_LIST_OPEN,
+			       	STM_DMA_SETUP_CONTEXT_ISR,
+			       	STM_DMA_NOBLOCK_MODE,
+			       	(char*)STM_DMAC_ID);
+
+	declare_dma_parms(  	&tx_transfer,
+				MODE_FREERUNNING,
+			       	STM_DMA_LIST_OPEN,
+			       	STM_DMA_SETUP_CONTEXT_ISR,
+			       	STM_DMA_NOBLOCK_MODE,
+			       	(char*)STM_DMAC_ID);
+
+	/* From LAN to memory */
+	dma_parms_err_cb(&rx_transfer, err_cb, NULL, 0);
+	dma_parms_DIM_2_x_1(&rx_transfer,0x20,0);
+
+	/* From memory to LAN */
+	dma_parms_err_cb(&tx_transfer, err_cb, NULL, 0);
+	dma_parms_DIM_1_x_2(&tx_transfer,0x20,0);
+
+
 	return TRUE;
 }
 
-static void err_cb(void* x)
-{
-	SMSC_TRACE("DMA completion callback");
-}
 
 BOOLEAN Platform_DmaStartXfer(
 	PPLATFORM_DATA platformData,
@@ -44,15 +78,14 @@ BOOLEAN Platform_DmaStartXfer(
 {
 	DWORD dwAlignMask;
 	DWORD dwLanPhysAddr, dwMemPhysAddr;
-        struct dma_channel *chan;
-	int res;
-
-
+	stm_dma_params dmap;
+	unsigned long src, dst;
+	unsigned long res=0;
 	// 1. validate the requested channel #
 	SMSC_ASSERT(Platform_IsValidDmaChannel(pDmaXfer->dwDmaCh))
 
 	// 2. make sure the channel's not already running
-	if (get_dma_residue(pDmaXfer->dwDmaCh) != 0)
+	if (dma_get_status(pDmaXfer->dwDmaCh) != DMA_CHANNEL_STATUS_IDLE)
 	{
 		SMSC_WARNING("Platform_DmaStartXfer -- requested channel (%ld) is still running", pDmaXfer->dwDmaCh);
 		return FALSE;
@@ -79,39 +112,37 @@ BOOLEAN Platform_DmaStartXfer(
 	}
 
 	// 5. Prepare the DMA channel structure
-	chan = get_dma_channel(pDmaXfer->dwDmaCh);
-	BUG_ON(IS_ERR(chan));
-
-	chan->mode = MODE_FREERUNNING;
-	chan->count = pDmaXfer->dwDwCnt << 2;
-	chan->comp_callback = pCallback;
-	chan->comp_callback_param = pCallbackData;
-	chan->err_callback = err_cb;
-	chan->flags = LIST_TYPE_UNLINKED | DMA_SETUP_NOBLOCK; //  | NODE_DONE_ISR;
-	chan->list_len = 1;
-
-        if (pDmaXfer->fMemWr) {
-		/* From LAN to memory */
-                chan->flags |= DIM_2_x_1;
-                chan->sar = PHYSADDR(dwLanPhysAddr);
-		chan->dar = PHYSADDR(dwMemPhysAddr);
-                chan->src_sz = 0x20;
-                chan->sstride = 0;
-        } else {
-		/* From memory to LAN */
-                chan->flags |= DIM_1_x_2;
-		chan->sar = PHYSADDR(dwMemPhysAddr);
-                chan->dar = PHYSADDR(dwLanPhysAddr);
-                chan->dst_sz = 0x20;
-                chan->dstride = 0;
-        }
-
-	res = dma_configure_channel(chan);
-	BUG_ON(res != 0);
+	if (pDmaXfer->fMemWr) {
+		src = PHYSADDR(dwLanPhysAddr);
+		dst = PHYSADDR(dwMemPhysAddr);
+	} else {
 
+		src = PHYSADDR(dwMemPhysAddr);
+		dst = PHYSADDR(dwLanPhysAddr);
+	}
+	dmap = (pDmaXfer->fMemWr) ?
+			rx_transfer:
+			tx_transfer;
+
+	pDmaXfer->fMemWr ?
+		dma_parms_DIM_2_x_1(&dmap,0x20,0):
+		dma_parms_DIM_1_x_2(&dmap,0x20,0);
+
+	BUG_ON(in_interrupt());
+	dma_parms_comp_cb(&dmap, pCallback, pCallbackData, 0);
+	dma_parms_addrs(&dmap,src,dst, pDmaXfer->dwDwCnt << 2);
+	res=dma_compile_list(&dmap);
+	if(res != 0)
+		goto err_exit;
 	// 6. Start the transfer
-	dma_xfer(pDmaXfer->dwDmaCh);
+	res=dma_xfer_list(pDmaXfer->dwDmaCh,&dmap);
+	if(res != 0)
+		goto err_exit;
 
 	// DMA Transfering....
 	return TRUE;
+err_exit:
+	SMSC_WARNING("%s cant initialise DMA engine err_code %d\n",__FUNCTION__,res);
+	return FALSE;
 }
+
