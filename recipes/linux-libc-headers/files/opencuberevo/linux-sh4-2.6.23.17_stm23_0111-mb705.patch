Add support for the mb705 peripherial board. This includes a simple driver
for the front panel display and push button.

Signed-off-by: Stuart Menefy <stuart.menefy@st.com>
Index: linux-2.6.23-stm/arch/sh/Kconfig
===================================================================
--- linux-2.6.23-stm.orig/arch/sh/Kconfig
+++ linux-2.6.23-stm/arch/sh/Kconfig
@@ -595,6 +595,30 @@ config SH_ST_MB588
 	  Supports MB588 STEM board. See "arch/sh/boards/st/common/mb588.c"
 	  for configuration informations.
 
+config SH_ST_MB705
+	bool "mb705: Generic HD peripherals board"
+	depends on SH_ST_STPM_HD_V2
+	select SH_ST_EPLD
+	help
+	  Select SH_ST_MB705 if your processor board is connected
+	  to this STB-like peripherals board.
+
+config SH_ST_MB705_DISPLAY
+	bool "Driver for LED display on mb705"
+	depends on SH_ST_MB705
+	default y
+	help
+	  Select this option to enable a simple driver for the alphanumeric
+	  LED display on the mb705.
+
+config SH_ST_MB705_FPBUTTON
+	bool "Driver for the front pannel button on mb705"
+	depends on SH_ST_MB705
+	default y
+	help
+	  Select this option to enable a simple driver for the front
+	  pannel button on the mb705.
+
 endmenu
 
 source "arch/sh/boards/renesas/hs7751rvoip/Kconfig"
Index: linux-2.6.23-stm/arch/sh/boards/st/common/mb705-display.c
===================================================================
--- /dev/null
+++ linux-2.6.23-stm/arch/sh/boards/st/common/mb705-display.c
@@ -0,0 +1,161 @@
+/*
+ * arch/sh/boards/st/common/mb705-display.c
+ *
+ * Copyright (C) 2008 STMicroelectronics Limited
+ * Author: Stuart Menefy <stuart.menefy@st.com>
+ *
+ * May be copied or modified under the terms of the GNU General Public
+ * License.  See linux/COPYING for more information.
+ *
+ * Driver for the two HDSP-253x display modules on the mb705.
+ */
+
+#include <linux/init.h>
+#include <linux/platform_device.h>
+#include <asm/processor.h>
+#include "common.h"
+#include "mb705-epld.h"
+
+/* HDSP-253x display register offsets */
+/* All offsets must be shifted by 1 to allow for shifted address lines. */
+#define UDC_ADDRESS_OFF	(0<<4)
+#define UDC_RAM_OFF	(1<<4)
+#define CHAR_RAM_OFF	(3<<4)
+
+struct display_data {
+	spinlock_t lock;
+};
+
+static struct device_attribute dev_attr_udef[];
+
+static ssize_t store_text(struct device *dev,
+			  struct device_attribute *attr, const char *buf,
+			  size_t count)
+{
+	struct display_data *dd = dev_get_drvdata(dev);
+	int c;
+
+	spin_lock(&dd->lock);
+
+	for (c=0; c<16; c++) {
+		int base = ((c<8) ? EPLD_TS_DISPLAY1_BASE : EPLD_TS_DISPLAY0_BASE) + CHAR_RAM_OFF;
+		int off = c & 7;
+		int data = (c<count) ? buf[c] : ' ';
+		epld_write(data, base + (off << 1));
+	}
+
+	spin_unlock(&dd->lock);
+
+	return count;
+}
+
+static DEVICE_ATTR(text, S_IWUSR, NULL, store_text);
+
+static ssize_t store_udef(struct device *dev,
+			  struct device_attribute *attr, const char *buf,
+			  size_t count)
+{
+	struct display_data *dd = dev_get_drvdata(dev);
+	int code = attr - dev_attr_udef;
+	int display;
+
+	spin_lock(&dd->lock);
+
+	for (display=0; display < 2; display++) {
+		int base = (display == 0) ? EPLD_TS_DISPLAY0_BASE : EPLD_TS_DISPLAY1_BASE;
+		int i;
+
+		epld_write(code, base + UDC_ADDRESS_OFF);
+		for (i=0; (i < 7) && (i < count); i++)
+			epld_write(buf[i], base + UDC_RAM_OFF + (i << 1));
+	}
+
+	spin_unlock(&dd->lock);
+
+	return count;
+}
+
+static struct device_attribute dev_attr_udef[16] = {
+	__ATTR(udef0, S_IWUSR, NULL, store_udef),
+	__ATTR(udef1, S_IWUSR, NULL, store_udef),
+	__ATTR(udef2, S_IWUSR, NULL, store_udef),
+	__ATTR(udef3, S_IWUSR, NULL, store_udef),
+	__ATTR(udef4, S_IWUSR, NULL, store_udef),
+	__ATTR(udef5, S_IWUSR, NULL, store_udef),
+	__ATTR(udef6, S_IWUSR, NULL, store_udef),
+	__ATTR(udef7, S_IWUSR, NULL, store_udef),
+	__ATTR(udef8, S_IWUSR, NULL, store_udef),
+	__ATTR(udef9, S_IWUSR, NULL, store_udef),
+	__ATTR(udef10, S_IWUSR, NULL, store_udef),
+	__ATTR(udef11, S_IWUSR, NULL, store_udef),
+	__ATTR(udef12, S_IWUSR, NULL, store_udef),
+	__ATTR(udef13, S_IWUSR, NULL, store_udef),
+	__ATTR(udef14, S_IWUSR, NULL, store_udef),
+	__ATTR(udef15, S_IWUSR, NULL, store_udef)
+};
+
+static int __init mb705_display_probe(struct platform_device *pdev)
+{
+        struct device *dev = &pdev->dev;
+	int res;
+	struct display_data *dd;
+	int i;
+
+	dd = devm_kzalloc(dev, sizeof(*dd), GFP_KERNEL);
+	if (dd == NULL)
+		return -ENOMEM;
+
+	spin_lock_init(&dd->lock);
+
+	platform_set_drvdata(pdev, dd);
+
+	res = device_create_file(dev, &dev_attr_text);
+	if (res)
+		return res;
+
+	for (i=0; i<16; i++) {
+		device_create_file(dev, &dev_attr_udef[i]);
+	}
+
+	/* notFL signal is controlled by DisplayCtrlReg[0] */
+	epld_write(1, EPLD_TS_DISPLAY_CTRL_REG);
+
+	store_text(dev, NULL, "mb705", 5);
+
+	return 0;
+}
+
+static int __exit mb705_display_remove(struct platform_device *pdev)
+{
+	int i;
+
+	device_remove_file(&pdev->dev, &dev_attr_text);
+
+	for (i=0; i<4; i++) {
+		device_remove_file(&pdev->dev, &dev_attr_udef[i]);
+	}
+
+        return 0;
+}
+
+static struct platform_driver mb705_display_driver = {
+	.remove		= __exit_p(mb705_display_remove),
+	.driver		= {
+		.name	= "mb705-display",
+		.owner	= THIS_MODULE,
+	},
+};
+
+static int __init mb705_display_init(void)
+{
+	return platform_driver_probe(&mb705_display_driver,
+				     mb705_display_probe);
+}
+
+static void __exit mb705_display_exit(void)
+{
+	platform_driver_unregister(&mb705_display_driver);
+}
+
+module_init(mb705_display_init);
+module_exit(mb705_display_exit);
Index: linux-2.6.23-stm/arch/sh/boards/st/common/mb705.c
===================================================================
--- /dev/null
+++ linux-2.6.23-stm/arch/sh/boards/st/common/mb705.c
@@ -0,0 +1,271 @@
+/*
+ * arch/sh/boards/st/common/mb705.c
+ *
+ * Copyright (C) 2008 STMicroelectronics Limited
+ * Author: Stuart Menefy <stuart.menefy@st.com>
+ *
+ * May be copied or modified under the terms of the GNU General Public
+ * License.  See linux/COPYING for more information.
+ *
+ * STMicroelectronics STB peripherals board support.
+ */
+
+#include <linux/init.h>
+#include <linux/platform_device.h>
+#include <linux/leds.h>
+#include <linux/stm/sysconf.h>
+#include <linux/stm/pio.h>
+#include <linux/stm/soc.h>
+#include <linux/stm/emi.h>
+#include <linux/mtd/mtd.h>
+#include <linux/mtd/physmap.h>
+#include <linux/mtd/partitions.h>
+#include <linux/bug.h>
+#include <asm/processor.h>
+#include <asm/irq-ilc.h>
+#include "common.h"
+#include "mb705-epld.h"
+
+static DEFINE_SPINLOCK(misc_lock);
+
+static struct platform_device mb705_gpio_led = {
+	.name = "leds-gpio",
+	.id = 1,
+	.dev.platform_data = &(struct gpio_led_platform_data) {
+		.num_leds = 1,
+		.leds = (struct gpio_led[]) {
+			{
+				.name = "HB",
+				.default_trigger = "heartbeat",
+				.gpio = stpio_to_gpio(2, 0),
+				.active_low = 1,
+			},
+		},
+	},
+};
+
+static struct platform_device epld_device = {
+	.name		= "epld",
+	.id		= -1,
+	.num_resources	= 1,
+	.resource	= (struct resource[]) {
+		{
+			.start	= 0x07000000,
+			.end	= 0x070002ff,
+			.flags	= IORESOURCE_MEM,
+		}
+	},
+	.dev.platform_data = &(struct plat_epld_data) {
+		 .opsize = 16,
+	},
+};
+
+
+static struct platform_device mb705_display_device = {
+	.name = "mb705-display",
+	.id = -1,
+	.num_resources	= 1,
+	.resource	= (struct resource[]) {
+		{
+			.start	= 0x07000140,
+			.end	= 0x070001bf,
+			.flags	= IORESOURCE_MEM,
+		}
+	},
+};
+
+static struct platform_device mb705_fpbutton_device = {
+	.name = "mb705-fpbutton",
+	.id = -1,
+	.num_resources	= 2,
+	.resource	= (struct resource[]) {
+		{
+			.start	= ILC_EXT_IRQ(0),
+			.end	= ILC_EXT_IRQ(0),
+			.flags	= IORESOURCE_IRQ,
+		}, {
+			/* Mask for the EPLD status register */
+			.name	= "mask",
+			.start	= 1<<9,
+			.end	= 1<<9,
+			.flags	= IORESOURCE_IRQ,
+		}
+	},
+};
+
+static void set_vpp(struct map_info * info, int enable)
+{
+	u16 reg;
+
+	spin_lock(&misc_lock);
+
+	reg = epld_read(EPLD_EMI_MISC);
+	if (enable)
+		reg |= EPLD_EMI_MISC_NORFLASHVPPEN;
+	else
+		reg &= ~EPLD_EMI_MISC_NORFLASHVPPEN;
+	epld_write(reg, EPLD_EMI_MISC);
+
+	spin_unlock(&misc_lock);
+}
+
+static struct mtd_partition mtd_parts_table[3] = {
+	{
+		.name = "Boot firmware",
+		.size = 0x00040000,
+		.offset = 0x00000000,
+	}, {
+		.name = "Kernel",
+		.size = 0x00100000,
+		.offset = 0x00040000,
+	}, {
+		.name = "Root FS",
+		.size = MTDPART_SIZ_FULL,
+		.offset = 0x00140000,
+	}
+};
+
+static struct physmap_flash_data physmap_flash_data = {
+	.width		= 2,
+	.set_vpp	= set_vpp,
+	.nr_parts	= ARRAY_SIZE(mtd_parts_table),
+	.parts		= mtd_parts_table
+};
+
+static struct platform_device physmap_flash = {
+	.name		= "physmap-flash",
+	.id		= -1,
+	.num_resources	= 1,
+	.resource	= (struct resource[]) {
+		{
+			.start		= 0x00000000,	/* Can be overridden */
+			.end		= 32*1024*1024 - 1,
+			.flags		= IORESOURCE_MEM,
+		}
+	},
+	.dev		= {
+		.platform_data	= &physmap_flash_data,
+	},
+};
+
+static struct platform_device *mb705_devices[] __initdata = {
+	&epld_device,
+	&mb705_gpio_led,
+	&mb705_display_device,
+	&mb705_fpbutton_device,
+	&physmap_flash,
+};
+
+static struct mtd_partition nand_partitions[] = {
+	{
+		.name	= "NAND root",
+		.offset	= 0,
+		.size 	= 0x00800000
+	}, {
+		.name	= "NAND home",
+		.offset	= MTDPART_OFS_APPEND,
+		.size	= MTDPART_SIZ_FULL
+	},
+};
+
+static struct nand_config_data nand_config = {
+	.emi_bank		= 1,	/* Can be overridden */
+	.emi_withinbankoffset	= 0,
+
+	/* Timings for NAND512W3A */
+	.emi_timing_data = &(struct emi_timing_data) {
+		.rd_cycle_time	= 40,		 /* times in ns */
+		.rd_oee_start	= 0,
+		.rd_oee_end	= 10,
+		.rd_latchpoint	= 10,
+		.busreleasetime = 0,
+
+		.wr_cycle_time	= 40,
+		.wr_oee_start	= 0,
+		.wr_oee_end	= 10,
+	},
+
+	.chip_delay		= 40,		/* time in us */
+	.mtd_parts		= nand_partitions,
+	.nr_parts		= ARRAY_SIZE(nand_partitions),
+};
+
+#include <linux/delay.h>
+
+static int __init mb705_init(void)
+{
+	int i;
+
+	/* So far valid only for 7105 processor board! */
+	BUG_ON(cpu_data->type != CPU_STX7105);
+
+	/* We are't actually doing this early here... */
+	epld_early_init(&epld_device);
+
+	/* Check out the EPLDs */
+	for (i=0; i<3; i++) {
+		int ident_offset = (0x100 * i) + 0;
+		int test_offset = (0x100 * i) + 2;
+		u16 ident;
+		u16 test;
+		u16 mask = (i==0) ? 0xffff : 0xff;
+
+		ident = epld_read(ident_offset);
+		epld_write(0xab12+i, test_offset);
+		test = epld_read(test_offset);
+
+		printk(KERN_INFO
+		       "mb705 %s_EPLD: board rev %c, EPLD rev %d, test %s\n",
+		       (char*[3]){"EMI", "TS", "AUD" }[i],
+		       ((ident >> 4) & 0xf) - 1 + 'A', ident & 0xf,
+		       (((test ^ (0xab12+i)) & mask) == mask) ?
+		        "passed" : "failed");
+	}
+
+	/* Determine whether NOR and NAND devices are swapped. */
+	i = epld_read(EPLD_EMI_SWITCH);
+	if (i & EPLD_EMI_SWITCH_BOOTFROMNOR) {
+		u32 bank1_start = emi_bank_base(1);
+		u32 bank2_start = emi_bank_base(2);
+		physmap_flash.resource[0].start = bank1_start;
+		physmap_flash.resource[0].end = bank2_start - 1;
+		nand_config.emi_bank = 0;
+	}
+
+	/*
+	 * The MTD NAND code doesn't understand the concept of VPP,
+	 * (or hardware write protect) so permanently enable it.
+	 * Also disable NOR VPP enable just in case.
+	 */
+	i = epld_read(EPLD_EMI_MISC);
+	i &= ~EPLD_EMI_MISC_NORFLASHVPPEN;
+	i |= EPLD_EMI_MISC_NOTNANDFLASHWP;
+	epld_write(i, EPLD_EMI_MISC);
+
+	stx7105_configure_nand(&nand_config);
+
+	/* Interrupt routing.
+	 * At the moment we only care about a small number of
+	 * interrupts, so simply set up a static one-to-one routing.
+	 *
+	 * Interrupt sources:
+	 *  0 : MAFE
+	 *  1 : VOIP
+	 *  2 : SPDIF out
+	 *  3 : STRec status
+	 *  4 : STEM0 (-> SysIrq(2) this matches the mb680 but active high)
+	 *  5 : STEM1 (-> SysIrq(1) this matches the mb680 but active high))
+	 *  6 : DVB
+	 *  7 : DVB CD1
+	 *  8 : DVB CD2
+	 *  9 : FButton (-> SysIrq(0))
+	 * 10 : EPLD intr in
+	 */
+	epld_write(0, EPLD_EMI_INT_PRI(9));
+	epld_write(1, EPLD_EMI_INT_PRI(5));
+	epld_write(2, EPLD_EMI_INT_PRI(4));
+	epld_write((1<<4)|(1<<5)|(1<<9), EPLD_EMI_INT_MASK);
+
+	return platform_add_devices(mb705_devices, ARRAY_SIZE(mb705_devices));
+}
+arch_initcall(mb705_init);
Index: linux-2.6.23-stm/arch/sh/boards/st/common/Makefile
===================================================================
--- linux-2.6.23-stm.orig/arch/sh/boards/st/common/Makefile
+++ linux-2.6.23-stm/arch/sh/boards/st/common/Makefile
@@ -10,3 +10,6 @@ obj-$(CONFIG_SH_ST_DB679) += db679.o
 obj-$(CONFIG_SH_ST_MB520) += mb520.o
 obj-$(CONFIG_SH_ST_MB562) += mb562.o
 obj-$(CONFIG_SH_ST_MB588) += mb588.o
+obj-$(CONFIG_SH_ST_MB705) += mb705.o
+obj-$(CONFIG_SH_ST_MB705_DISPLAY) += mb705-display.o
+obj-$(CONFIG_SH_ST_MB705_FPBUTTON) += mb705-fpbutton.o
Index: linux-2.6.23-stm/arch/sh/boards/st/common/mb705-epld.h
===================================================================
--- /dev/null
+++ linux-2.6.23-stm/arch/sh/boards/st/common/mb705-epld.h
@@ -0,0 +1,27 @@
+/*
+ * arch/sh/boards/st/common/mb705-epld.h
+ *
+ * Copyright (C) 2008 STMicroelectronics Limited
+ * Author: Stuart Menefy <stuart.menefy@st.com>
+ *
+ * May be copied or modified under the terms of the GNU General Public
+ * License.  See linux/COPYING for more information.
+ *
+ * Register offsets into the EPLD memory space.
+ */
+
+#define EPLD_EMI_IDENT			0x000
+#define EPLD_EMI_TEST			0x002
+#define EPLD_EMI_SWITCH			0x004
+#define EPLD_EMI_SWITCH_BOOTFROMNOR		(1<<8)
+#define EPLD_EMI_MISC			0x00a
+#define EPLD_EMI_MISC_NORFLASHVPPEN		(1<<2)
+#define EPLD_EMI_MISC_NOTNANDFLASHWP		(1<<3)
+#define EPLD_EMI_INT_STATUS		0x020
+#define EPLD_EMI_INT_MASK		0x022
+#define EPLD_EMI_INT_PRI(x)		(0x024+((x)*2))
+
+#define EPLD_TS_DISPLAY_CTRL_REG	0x10c
+#define EPLD_TS_DISPLAY0_BASE		0x140
+#define EPLD_TS_DISPLAY1_BASE		0x180
+
Index: linux-2.6.23-stm/arch/sh/boards/st/common/mb705-fpbutton.c
===================================================================
--- /dev/null
+++ linux-2.6.23-stm/arch/sh/boards/st/common/mb705-fpbutton.c
@@ -0,0 +1,137 @@
+/*
+ * arch/sh/boards/st/common/mb705-fpbutton.c
+ *
+ * Copyright (C) 2008 STMicroelectronics Limited
+ * Author: Stuart Menefy <stuart.menefy@st.com>
+ *
+ * May be copied or modified under the terms of the GNU General Public
+ * License.  See linux/COPYING for more information.
+ *
+ * Driver for the front pannel button on the mb705 (SW12).
+ *
+ * Note SW8-4 must be on to disable propogation to the mb680
+ * which interprets the FP button as a reset.
+ */
+
+#include <linux/init.h>
+#include <linux/platform_device.h>
+#include <linux/interrupt.h>
+#include <linux/irq.h>
+#include <linux/jiffies.h>
+#include <linux/input.h>
+#include "common.h"
+#include "mb705-epld.h"
+
+#define SCAN_INTERVAL 100
+
+static struct timer_list fpbutton_timer;
+
+static irqreturn_t fpbutton_isr(int irq, void *dev_id)
+{
+	struct platform_device *pdev = dev_id;
+        struct input_dev *input = platform_get_drvdata(pdev);
+
+	input_event(input, EV_KEY, BTN_0, 1);
+	input_sync(input);
+
+	disable_irq(platform_get_irq(pdev, 0));
+	mod_timer(&fpbutton_timer, jiffies + msecs_to_jiffies(SCAN_INTERVAL));
+
+	return IRQ_HANDLED;
+}
+
+static void fpbutton_timer_callback(unsigned long data)
+{
+	struct platform_device *pdev = (struct platform_device *)data;
+        struct input_dev *input = platform_get_drvdata(pdev);
+	int mask = platform_get_irq_byname(pdev, "mask");
+	u16 status = epld_read(EPLD_EMI_INT_STATUS);
+
+	if (status & mask) {
+		mod_timer(&fpbutton_timer,
+			  jiffies + msecs_to_jiffies(SCAN_INTERVAL));
+	} else {
+		input_event(input, EV_KEY, BTN_0, 0);
+		input_sync(input);
+
+		enable_irq(platform_get_irq(pdev, 0));
+	}
+}
+
+static int __init mb705_fpbutton_probe(struct platform_device *pdev)
+{
+	struct input_dev *input;
+	int error;
+
+	input = input_allocate_device();
+	if (!input)
+		return -ENOMEM;
+
+	platform_set_drvdata(pdev, input);
+
+	input->evbit[0] = BIT(EV_KEY);
+
+	input->name = pdev->name;
+	input->phys = "mb705-fpbutton/input0";
+	input->dev.parent = &pdev->dev;
+
+	input->id.bustype = BUS_HOST;
+	input->id.vendor = 0x0001;
+	input->id.product = 0x0001;
+	input->id.version = 0x0100;
+
+	input_set_capability(input, EV_KEY, BTN_0);
+
+        error = input_register_device(input);
+	if (error)
+		goto fail;
+
+	init_timer(&fpbutton_timer);
+        fpbutton_timer.function = fpbutton_timer_callback;
+        fpbutton_timer.data = (unsigned long)pdev;
+
+	error = request_irq(platform_get_irq(pdev, 0), fpbutton_isr,
+			    IRQF_SAMPLE_RANDOM, "mb705-fpbutton", pdev);
+	if (error)
+		goto fail;
+
+	return 0;
+
+fail:
+	input_free_device(input);
+
+	return error;
+}
+
+static int __exit mb705_fpbutton_remove(struct platform_device *pdev)
+{
+	struct input_dev *input = platform_get_drvdata(pdev);
+
+	del_timer_sync(&fpbutton_timer);
+	free_irq(platform_get_irq(pdev, 0), pdev);
+	input_unregister_device(input);
+
+        return 0;
+}
+
+static struct platform_driver mb705_fpbutton_driver = {
+	.remove		= __exit_p(mb705_fpbutton_remove),
+	.driver		= {
+		.name	= "mb705-fpbutton",
+		.owner	= THIS_MODULE,
+	},
+};
+
+static int __init mb705_fpbutton_init(void)
+{
+	return platform_driver_probe(&mb705_fpbutton_driver,
+				     mb705_fpbutton_probe);
+}
+
+static void __exit mb705_fpbutton_exit(void)
+{
+	platform_driver_unregister(&mb705_fpbutton_driver);
+}
+
+module_init(mb705_fpbutton_init);
+module_exit(mb705_fpbutton_exit);
Index: linux-2.6.23-stm/arch/sh/kernel/cpu/sh4/setup-stx7105.c
===================================================================
--- linux-2.6.23-stm.orig/arch/sh/kernel/cpu/sh4/setup-stx7105.c
+++ linux-2.6.23-stm/arch/sh/kernel/cpu/sh4/setup-stx7105.c
@@ -814,6 +814,7 @@ void __init stx7105_configure_lirc(void)
 {
 	platform_device_register(&lirc_device);
 }
+#endif
 
 /* NAND Resources ---------------------------------------------------------- */
 
@@ -930,8 +931,6 @@ void __init stx7105_configure_nand(struc
 	platform_device_register(&nand_flash[emi_bank]);
 }
 
-#endif
-
 /* Early resources (sysconf and PIO) --------------------------------------- */
 
 static struct platform_device sysconf_device = {
Index: linux-2.6.23-stm/include/asm-sh/mb680/stem.h
===================================================================
--- linux-2.6.23-stm.orig/include/asm-sh/mb680/stem.h
+++ linux-2.6.23-stm/include/asm-sh/mb680/stem.h
@@ -11,12 +11,24 @@
 
 #include <asm/irq-ilc.h>
 
-/* STEM CS0 = BANK2 */
-/* Need to set J14A to 1-2 (notStemCS(0) <= notEMICSC) and
- * J4 to 1-2 and fit J2A (notStemIntr(0) <= SysIRQ2) if mb680 used
- * standalone. */
+/*
+ * If used standalone STEM CS0 = BANK2. In this mode
+ * need to set J14A to 1-2 (notStemCS(0) <= notEMICSC) and
+ * J4 to 1-2 and fit J2A (notStemIntr(0) <= SysIRQ2).
+ *
+ * If used with mb705 STEMCS0 is routed via the EPLD (J14A in position 2-3)
+ * which subdecodes STEMCS0 as CSE (bank 4) and A17-16 = 01 (the EPLDs
+ * occupy this same bank). Similarly StemIntr(0) is routed via the EPLD,
+ * which we program up to route it directly to SysIRQ2, see mb705_init()
+ * for more details
+ */
+#ifdef CONFIG_SH_ST_MB705
+#define STEM_CS0_BANK 4
+#define STEM_CS0_OFFSET (1<<17)
+#else
 #define STEM_CS0_BANK 2
 #define STEM_CS0_OFFSET 0
+#endif
 
 /* STEM CS1 = BANK3 */
 /* Need to set J14B to 1-2 (notStemCS(1) <= notEMICSD) and
