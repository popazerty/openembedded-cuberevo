commit 7195b4c3ff052f162685c0f6a92701f902da88da
Author: Pawel Moll <pawel.moll@st.com>
Date:   Tue Aug 5 10:46:27 2008 +0100

    sound_stm: Initial ALSA driver for STx7105.
    
    Add support for STx7105 audio peripherals and very
    basic support for mb705 (to be extended in future).
    
    Signed-off-by: Pawel Moll <pawel.moll@st.com>

diff --git a/arch/sh/kernel/cpu/sh4/setup-stx7105.c b/arch/sh/kernel/cpu/sh4/setup-stx7105.c
index 139f487..e4f85b0 100644
--- a/arch/sh/kernel/cpu/sh4/setup-stx7105.c
+++ b/arch/sh/kernel/cpu/sh4/setup-stx7105.c
@@ -639,6 +639,58 @@ void stx7105_configure_ethernet(int reverse_mii, int rmii_mode, int mode,
 	platform_device_register(&stx7105eth_device);
 }
 
+/* Audio output ------------------------------------------------------------ */
+
+void stx7105_configure_audio_pins(int pcmout, int spdif, int pcmin)
+{
+	/* Claim PIO pins as digital audio outputs, depending
+	 * on how many DATA outputs are to be used... */
+
+	if (pcmout > 0) {
+		stx7105_pio_sysconf(10, 3, 1, "AUD0PCMOUT_CLKIN/OUT");
+		stpio_request_pin(10, 3, "AUD0PCMOUT_CLKIN/OUT",
+				STPIO_ALT_OUT);
+		stx7105_pio_sysconf(10, 4, 1, "AUD0PCMOUT_LRCLK");
+		stpio_request_pin(10, 4, "AUD0PCMOUT_LRCLK", STPIO_ALT_OUT);
+		stx7105_pio_sysconf(10, 5, 1, "AUD0PCMOUT_SCLK");
+		stpio_request_pin(10, 5, "AUD0PCMOUT_SCLK", STPIO_ALT_OUT);
+		stx7105_pio_sysconf(10, 0, 1, "AUD0PCMOUT_DATA0");
+		stpio_request_pin(10, 0, "AUD0PCMOUT_DATA0", STPIO_ALT_OUT);
+	}
+	if (pcmout > 1) {
+		stx7105_pio_sysconf(10, 1, 1, "AUD0PCMOUT_DATA1");
+		stpio_request_pin(10, 1, "AUD0PCMOUT_DATA1", STPIO_ALT_OUT);
+	}
+	if (pcmout > 2) {
+		stx7105_pio_sysconf(10, 2, 1, "AUD0PCMOUT_DATA2");
+		stpio_request_pin(10, 2, "AUD0PCMOUT_DATA2", STPIO_ALT_OUT);
+	}
+	if (pcmout > 3)
+		BUG();
+
+	/* Claim PIO pin as SPDIF output... */
+
+	if (spdif > 0) {
+		stx7105_pio_sysconf(10, 6, 1, "AUDSPDIFOUT");
+		stpio_request_pin(10, 6, "AUDSPDIFOUT", STPIO_ALT_OUT);
+	}
+	if (spdif > 1)
+		BUG();
+
+	/* Claim PIO pins as digital audio inputs... */
+
+	if (pcmin > 0) {
+		stx7105_pio_sysconf(10, 7, 1, "AUD0PCMIN_DATA");
+		stpio_request_pin(10, 7, "AUD0PCMIN_DATA", STPIO_ALT_BIDIR);
+		stx7105_pio_sysconf(11, 0, 1, "AUD0PCMIN_SCLK");
+		stpio_request_pin(11, 0, "AUD0PCMIN_SCLK", STPIO_ALT_BIDIR);
+		stx7105_pio_sysconf(11, 1, 1, "AUD0PCMIN_LRCLK");
+		stpio_request_pin(11, 1, "AUD0PCMIN_LRCLK", STPIO_ALT_BIDIR);
+	}
+	if (pcmin > 1)
+		BUG();
+}
+
 /* PWM resources ----------------------------------------------------------- */
 
 static struct resource stm_pwm_resource[]= {
diff --git a/include/linux/stm/soc.h b/include/linux/stm/soc.h
index 1df2544..798758f 100644
--- a/include/linux/stm/soc.h
+++ b/include/linux/stm/soc.h
@@ -275,6 +275,7 @@ void stx7105_configure_ethernet(int reverse_mii, int rmii_mode, int mode,
 void stx7105_configure_nand(struct nand_config_data *data);
 void stx7105_configure_lirc(void);
 void stx7105_configure_pata(int bank, int pc_mode, int irq);
+void stx7105_configure_audio_pins(int pcmout, int spdif, int pcmin);
 
 void stx7111_early_device_init(void);
 void stx7111_configure_asc(const int *ascs, int num_ascs, int console);
diff --git a/sound/stm/Kconfig b/sound/stm/Kconfig
index 61caa87..84b7742 100644
--- a/sound/stm/Kconfig
+++ b/sound/stm/Kconfig
@@ -1,7 +1,7 @@
 menuconfig SND_STM
 	tristate "STMicroelectronics SoCs support"
 	depends on SND
-	depends on CPU_SUBTYPE_STB7100 || CPU_SUBTYPE_STX7111 || CPU_SUBTYPE_STX7141 || CPU_SUBTYPE_STX7200
+	depends on CPU_SUBTYPE_STB7100 || CPU_SUBTYPE_STX7105 || CPU_SUBTYPE_STX7111 || CPU_SUBTYPE_STX7141 || CPU_SUBTYPE_STX7200
 	select STM_DMA
 	select SND_PCM
 	select SND_DYNAMIC_MINORS
@@ -66,6 +66,16 @@ config SND_STM_STX710X
 		If you compile this driver as a module, it will be
 		called snd-stm-stx710x.ko
 
+config SND_STM_STX7105
+	tristate "STx7105 support"
+	depends on SND_STM
+	default y if CPU_SUBTYPE_STX7105
+	help
+		Select this to get ALSA driver for STx7105 chip.
+
+		If you compile this driver as a module, it will be
+		called snd-stm-stx7105.ko
+
 config SND_STM_STX7111
 	tristate "STx7111 support"
 	depends on SND_STM
diff --git a/sound/stm/Makefile b/sound/stm/Makefile
index 690a57e..ae99ecb 100644
--- a/sound/stm/Makefile
+++ b/sound/stm/Makefile
@@ -6,6 +6,9 @@ snd-stm-y += pcm_player.o pcm_reader.o spdif_player.o
 obj-$(CONFIG_SND_STM_STX710X) += snd-stm-stx710x.o
 snd-stm-stx710x-y := stx710x.o
 
+obj-$(CONFIG_SND_STM_STX7105) += snd-stm-stx7105.o
+snd-stm-stx7105-y := stx7105.o
+
 obj-$(CONFIG_SND_STM_STX7111) += snd-stm-stx7111.o
 snd-stm-stx7111-y := stx7111.o
 
diff --git a/sound/stm/reg_7105_audcfg.h b/sound/stm/reg_7105_audcfg.h
new file mode 100644
index 0000000..490ee13
--- /dev/null
+++ b/sound/stm/reg_7105_audcfg.h
@@ -0,0 +1,152 @@
+#ifndef __SND_STM_7105_AUDCFG_H
+#define __SND_STM_7105_AUDCFG_H
+
+
+
+/*
+ * 7105_AUDCFG_IO_CTRL
+ */
+
+#define offset__7105_AUDCFG_IO_CTRL(ip) 0x00
+#define get__7105_AUDCFG_IO_CTRL(ip) readl(ip->base + \
+	offset__7105_AUDCFG_IO_CTRL(ip))
+#define set__7105_AUDCFG_IO_CTRL(ip, value) writel((value), ip->base + \
+	offset__7105_AUDCFG_IO_CTRL(ip))
+
+/* PCM_CLK_EN */
+
+#define shift__7105_AUDCFG_IO_CTRL__PCM_CLK_EN(ip) 0
+#define mask__7105_AUDCFG_IO_CTRL__PCM_CLK_EN(ip) 0x1
+#define get__7105_AUDCFG_IO_CTRL__PCM_CLK_EN(ip) ((readl(ip->base + \
+	offset__7105_AUDCFG_IO_CTRL(ip)) >> \
+	shift__7105_AUDCFG_IO_CTRL__PCM_CLK_EN(ip)) & \
+	mask__7105_AUDCFG_IO_CTRL__PCM_CLK_EN(ip))
+#define set__7105_AUDCFG_IO_CTRL__PCM_CLK_EN(ip, value) \
+	writel((readl(ip->base + offset__7105_AUDCFG_IO_CTRL(ip)) & \
+	~(mask__7105_AUDCFG_IO_CTRL__PCM_CLK_EN(ip) << \
+	shift__7105_AUDCFG_IO_CTRL__PCM_CLK_EN(ip))) | (((value) & \
+	mask__7105_AUDCFG_IO_CTRL__PCM_CLK_EN(ip)) << \
+	shift__7105_AUDCFG_IO_CTRL__PCM_CLK_EN(ip)), ip->base + \
+	offset__7105_AUDCFG_IO_CTRL(ip))
+
+#define value__7105_AUDCFG_IO_CTRL__PCM_CLK_EN__INPUT(ip) 0x0
+#define mask__7105_AUDCFG_IO_CTRL__PCM_CLK_EN__INPUT(ip) \
+	(value__7105_AUDCFG_IO_CTRL__PCM_CLK_EN__INPUT(ip) << \
+	shift__7105_AUDCFG_IO_CTRL__PCM_CLK_EN(ip))
+#define set__7105_AUDCFG_IO_CTRL__PCM_CLK_EN__INPUT(ip) \
+	set__7105_AUDCFG_IO_CTRL__PCM_CLK_EN(ip, \
+	value__7105_AUDCFG_IO_CTRL__PCM_CLK_EN__INPUT(ip))
+
+#define value__7105_AUDCFG_IO_CTRL__PCM_CLK_EN__OUTPUT(ip) 0x1
+#define mask__7105_AUDCFG_IO_CTRL__PCM_CLK_EN__OUTPUT(ip) \
+	(value__7105_AUDCFG_IO_CTRL__PCM_CLK_EN__OUTPUT(ip) << \
+	shift__7105_AUDCFG_IO_CTRL__PCM_CLK_EN(ip))
+#define set__7105_AUDCFG_IO_CTRL__PCM_CLK_EN__OUTPUT(ip) \
+	set__7105_AUDCFG_IO_CTRL__PCM_CLK_EN(ip, \
+	value__7105_AUDCFG_IO_CTRL__PCM_CLK_EN__OUTPUT(ip))
+
+/* SPDIFHDMI_EN */
+
+#define shift__7105_AUDCFG_IO_CTRL__SPDIFHDMI_EN(ip) 3
+#define mask__7105_AUDCFG_IO_CTRL__SPDIFHDMI_EN(ip) 0x1
+#define get__7105_AUDCFG_IO_CTRL__SPDIFHDMI_EN(ip) ((readl(ip->base + \
+	offset__7105_AUDCFG_IO_CTRL(ip)) >> \
+	shift__7105_AUDCFG_IO_CTRL__SPDIFHDMI_EN(ip)) & \
+	mask__7105_AUDCFG_IO_CTRL__SPDIFHDMI_EN(ip))
+#define set__7105_AUDCFG_IO_CTRL__SPDIFHDMI_EN(ip, value) \
+	writel((readl(ip->base + offset__7105_AUDCFG_IO_CTRL(ip)) & \
+	~(mask__7105_AUDCFG_IO_CTRL__SPDIFHDMI_EN(ip) << \
+	shift__7105_AUDCFG_IO_CTRL__SPDIFHDMI_EN(ip))) | (((value) & \
+	mask__7105_AUDCFG_IO_CTRL__SPDIFHDMI_EN(ip)) << \
+	shift__7105_AUDCFG_IO_CTRL__SPDIFHDMI_EN(ip)), ip->base + \
+	offset__7105_AUDCFG_IO_CTRL(ip))
+
+#define value__7105_AUDCFG_IO_CTRL__SPDIFHDMI_EN__INPUT(ip) 0x0
+#define mask__7105_AUDCFG_IO_CTRL__SPDIFHDMI_EN__INPUT(ip) \
+	(value__7105_AUDCFG_IO_CTRL__SPDIFHDMI_EN__INPUT(ip) << \
+	shift__7105_AUDCFG_IO_CTRL__SPDIFHDMI_EN(ip))
+#define set__7105_AUDCFG_IO_CTRL__SPDIFHDMI_EN__INPUT(ip) \
+	set__7105_AUDCFG_IO_CTRL__SPDIFHDMI_EN(ip, \
+	value__7105_AUDCFG_IO_CTRL__SPDIFHDMI_EN__INPUT(ip))
+
+#define value__7105_AUDCFG_IO_CTRL__SPDIFHDMI_EN__OUTPUT(ip) 0x1
+#define mask__7105_AUDCFG_IO_CTRL__SPDIFHDMI_EN__OUTPUT(ip) \
+	(value__7105_AUDCFG_IO_CTRL__SPDIFHDMI_EN__OUTPUT(ip) << \
+	shift__7105_AUDCFG_IO_CTRL__SPDIFHDMI_EN(ip))
+#define set__7105_AUDCFG_IO_CTRL__SPDIFHDMI_EN__OUTPUT(ip) \
+	set__7105_AUDCFG_IO_CTRL__SPDIFHDMI_EN(ip, \
+	value__7105_AUDCFG_IO_CTRL__SPDIFHDMI_EN__OUTPUT(ip))
+
+/* PCMPLHDMI_EN */
+
+#define shift__7105_AUDCFG_IO_CTRL__PCMPLHDMI_EN(ip) 5
+#define mask__7105_AUDCFG_IO_CTRL__PCMPLHDMI_EN(ip) 0x1
+#define get__7105_AUDCFG_IO_CTRL__PCMPLHDMI_EN(ip) ((readl(ip->base + \
+	offset__7105_AUDCFG_IO_CTRL(ip)) >> \
+	shift__7105_AUDCFG_IO_CTRL__PCMPLHDMI_EN(ip)) & \
+	mask__7105_AUDCFG_IO_CTRL__PCMPLHDMI_EN(ip))
+#define set__7105_AUDCFG_IO_CTRL__PCMPLHDMI_EN(ip, value) \
+	writel((readl(ip->base + offset__7105_AUDCFG_IO_CTRL(ip)) & \
+	~(mask__7105_AUDCFG_IO_CTRL__PCMPLHDMI_EN(ip) << \
+	shift__7105_AUDCFG_IO_CTRL__PCMPLHDMI_EN(ip))) | (((value) & \
+	mask__7105_AUDCFG_IO_CTRL__PCMPLHDMI_EN(ip)) << \
+	shift__7105_AUDCFG_IO_CTRL__PCMPLHDMI_EN(ip)), ip->base + \
+	offset__7105_AUDCFG_IO_CTRL(ip))
+
+#define value__7105_AUDCFG_IO_CTRL__PCMPLHDMI_EN__INPUT(ip) 0x0
+#define mask__7105_AUDCFG_IO_CTRL__PCMPLHDMI_EN__INPUT(ip) \
+	(value__7105_AUDCFG_IO_CTRL__PCMPLHDMI_EN__INPUT(ip) << \
+	shift__7105_AUDCFG_IO_CTRL__PCMPLHDMI_EN(ip))
+#define set__7105_AUDCFG_IO_CTRL__PCMPLHDMI_EN__INPUT(ip) \
+	set__7105_AUDCFG_IO_CTRL__PCMPLHDMI_EN(ip, \
+	value__7105_AUDCFG_IO_CTRL__PCMPLHDMI_EN__INPUT(ip))
+
+#define value__7105_AUDCFG_IO_CTRL__PCMPLHDMI_EN__OUTPUT(ip) 0x1
+#define mask__7105_AUDCFG_IO_CTRL__PCMPLHDMI_EN__OUTPUT(ip) \
+	(value__7105_AUDCFG_IO_CTRL__PCMPLHDMI_EN__OUTPUT(ip) << \
+	shift__7105_AUDCFG_IO_CTRL__PCMPLHDMI_EN(ip))
+#define set__7105_AUDCFG_IO_CTRL__PCMPLHDMI_EN__OUTPUT(ip) \
+	set__7105_AUDCFG_IO_CTRL__PCMPLHDMI_EN(ip, \
+	value__7105_AUDCFG_IO_CTRL__PCMPLHDMI_EN__OUTPUT(ip))
+
+/* CLKREC_SEL */
+
+#define shift__7105_AUDCFG_IO_CTRL__CLKREC_SEL(ip) 9
+#define mask__7105_AUDCFG_IO_CTRL__CLKREC_SEL(ip) 0x3
+#define get__7105_AUDCFG_IO_CTRL__CLKREC_SEL(ip) ((readl(ip->base + \
+	offset__7105_AUDCFG_IO_CTRL(ip)) >> \
+	shift__7105_AUDCFG_IO_CTRL__CLKREC_SEL(ip)) & \
+	mask__7105_AUDCFG_IO_CTRL__CLKREC_SEL(ip))
+#define set__7105_AUDCFG_IO_CTRL__CLKREC_SEL(ip, value) \
+	writel((readl(ip->base + offset__7105_AUDCFG_IO_CTRL(ip)) & \
+	~(mask__7105_AUDCFG_IO_CTRL__CLKREC_SEL(ip) << \
+	shift__7105_AUDCFG_IO_CTRL__CLKREC_SEL(ip))) | (((value) & \
+	mask__7105_AUDCFG_IO_CTRL__CLKREC_SEL(ip)) << \
+	shift__7105_AUDCFG_IO_CTRL__CLKREC_SEL(ip)), ip->base + \
+	offset__7105_AUDCFG_IO_CTRL(ip))
+
+#define value__7105_AUDCFG_IO_CTRL__CLKREC_SEL__PCMPLHDMI(ip) 0x0
+#define mask__7105_AUDCFG_IO_CTRL__CLKREC_SEL__PCMPLHDMI(ip) \
+	(value__7105_AUDCFG_IO_CTRL__CLKREC_SEL__PCMPLHDMI(ip) << \
+	shift__7105_AUDCFG_IO_CTRL__CLKREC_SEL(ip))
+#define set__7105_AUDCFG_IO_CTRL__CLKREC_SEL__PCMPLHDMI(ip) \
+	set__7105_AUDCFG_IO_CTRL__CLKREC_SEL(ip, \
+	value__7105_AUDCFG_IO_CTRL__CLKREC_SEL__PCMPLHDMI(ip))
+
+#define value__7105_AUDCFG_IO_CTRL__CLKREC_SEL__SPDIFHDMI(ip) 0x1
+#define mask__7105_AUDCFG_IO_CTRL__CLKREC_SEL__SPDIFHDMI(ip) \
+	(value__7105_AUDCFG_IO_CTRL__CLKREC_SEL__SPDIFHDMI(ip) << \
+	shift__7105_AUDCFG_IO_CTRL__CLKREC_SEL(ip))
+#define set__7105_AUDCFG_IO_CTRL__CLKREC_SEL__SPDIFHDMI(ip) \
+	set__7105_AUDCFG_IO_CTRL__CLKREC_SEL(ip, \
+	value__7105_AUDCFG_IO_CTRL__CLKREC_SEL__SPDIFHDMI(ip))
+
+#define value__7105_AUDCFG_IO_CTRL__CLKREC_SEL__PCMPL1(ip) 0x2
+#define mask__7105_AUDCFG_IO_CTRL__CLKREC_SEL__PCMPL1(ip) \
+	(value__7105_AUDCFG_IO_CTRL__CLKREC_SEL__PCMPL1(ip) << \
+	shift__7105_AUDCFG_IO_CTRL__CLKREC_SEL(ip))
+#define set__7105_AUDCFG_IO_CTRL__CLKREC_SEL__PCMPL1(ip) \
+	set__7105_AUDCFG_IO_CTRL__CLKREC_SEL(ip, \
+	value__7105_AUDCFG_IO_CTRL__CLKREC_SEL__PCMPL1(ip))
+
+#endif
diff --git a/sound/stm/stx7105.c b/sound/stm/stx7105.c
new file mode 100644
index 0000000..f5ea85f
--- /dev/null
+++ b/sound/stm/stx7105.c
@@ -0,0 +1,591 @@
+/*
+ *   STMicrolectronics STx7105 SoC description & audio glue driver
+ *
+ *   Copyright (c) 2005-2007 STMicroelectronics Limited
+ *
+ *   Author: Pawel MOLL <pawel.moll@st.com>
+ *
+ *   This program is free software; you can redistribute it and/or modify
+ *   it under the terms of the GNU General Public License as published by
+ *   the Free Software Foundation; either version 2 of the License, or
+ *   (at your option) any later version.
+ *
+ *   This program is distributed in the hope that it will be useful,
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *   GNU General Public License for more details.
+ *
+ *   You should have received a copy of the GNU General Public License
+ *   along with this program; if not, write to the Free Software
+ *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
+ *
+ */
+
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/irq.h>
+#include <sound/driver.h>
+#include <sound/core.h>
+
+#define COMPONENT stx7105
+#include "common.h"
+#include "reg_7105_audcfg.h"
+
+
+
+/*
+ * ALSA module parameters
+ */
+
+static int index = -1; /* First available index */
+static char *id = "STx7105"; /* Default card ID */
+
+module_param(index, int, 0444);
+MODULE_PARM_DESC(index, "Index value for STx7105 audio subsystem card.");
+module_param(id, charp, 0444);
+MODULE_PARM_DESC(id, "ID string for STx7105 audio subsystem card.");
+
+
+
+/*
+ * Audio subsystem components & platform devices
+ */
+
+/* STx7105 audio glue */
+
+static struct platform_device stx7105_glue = {
+	.name          = "snd_stx7105_glue",
+	.id            = -1,
+	.num_resources = 1,
+	.resource      = (struct resource []) {
+		{
+			.flags = IORESOURCE_MEM,
+			.start = 0xfe210200,
+			.end   = 0xfe21020b,
+		},
+	}
+};
+
+/* Frequency synthesizers */
+
+static struct platform_device fsynth = {
+	.name          = "snd_fsynth",
+	.id            = -1,
+	.num_resources = 1,
+	.resource      = (struct resource []) {
+		{
+			.flags = IORESOURCE_MEM,
+			.start = 0xfe210000,
+			.end   = 0xfe21004f,
+		},
+	},
+	.dev.platform_data = &(struct snd_stm_fsynth_info) {
+		.ver = 4,
+		.channels_from = 0,
+		.channels_to = 2,
+	},
+};
+
+/* Internal DACs */
+
+static struct platform_device conv_int_dac = {
+	.name          = "snd_conv_int_dac",
+	.id            = -1,
+	.num_resources = 1,
+	.resource      = (struct resource []) {
+		{
+			.flags = IORESOURCE_MEM,
+			.start = 0xfe210100,
+			.end   = 0xfe210103,
+		},
+	},
+	.dev.platform_data = &(struct snd_stm_conv_int_dac_info) {
+		.ver = 4,
+		.source_bus_id = "snd_pcm_player.1",
+		.channel_from = 0,
+		.channel_to = 1,
+	},
+};
+
+/* PCM players  */
+
+static struct platform_device pcm_player_0 = {
+	.name          = "snd_pcm_player",
+	.id            = 0,
+	.num_resources = 2,
+	.resource      = (struct resource []) {
+		{
+			.flags = IORESOURCE_MEM,
+			.start = 0xfd104d00,
+			.end   = 0xfd104d27,
+		},
+		{
+			.flags = IORESOURCE_IRQ,
+			.start = evt2irq(0x1400),
+			.end   = evt2irq(0x1400),
+		},
+	},
+	.dev.platform_data = &(struct snd_stm_pcm_player_info) {
+		.name = "PCM player #0 (HDMI)",
+		.ver = 6,
+		.card_device = 0,
+		.fsynth_bus_id = "snd_fsynth",
+		.fsynth_output = 0,
+		.channels = 8,
+		.fdma_initiator = 0,
+		.fdma_request_line = 39,
+	},
+};
+
+static struct platform_device pcm_player_1 = {
+	.name          = "snd_pcm_player",
+	.id            = 1,
+	.num_resources = 2,
+	.resource      = (struct resource []) {
+		{
+			.flags = IORESOURCE_MEM,
+			.start = 0xfd101800,
+			.end   = 0xfd101827,
+		},
+		{
+			.flags = IORESOURCE_IRQ,
+			.start = evt2irq(0x1420),
+			.end   = evt2irq(0x1420),
+		},
+	},
+	.dev.platform_data = &(struct snd_stm_pcm_player_info) {
+		.name = "PCM player #1",
+		.ver = 6,
+		.card_device = 1,
+		.fsynth_bus_id = "snd_fsynth",
+		.fsynth_output = 1,
+		.channels = 2,
+		.fdma_initiator = 0,
+		.fdma_request_line = 34,
+	},
+};
+
+/*
+ * SPDIF player
+ */
+
+static struct platform_device spdif_player = {
+	.name          = "snd_spdif_player",
+	.id            = -1,
+	.num_resources = 2,
+	.resource      = (struct resource []) {
+		{
+			.flags = IORESOURCE_MEM,
+			.start = 0xfd104c00,
+			.end   = 0xfd104c43,
+		},
+		{
+			.flags = IORESOURCE_IRQ,
+			.start = evt2irq(0x1460),
+			.end   = evt2irq(0x1460),
+		},
+	},
+	.dev.platform_data = &(struct snd_stm_spdif_player_info) {
+		.name = "SPDIF player (HDMI)",
+		.ver = 4,
+		.card_device = 2,
+		.fsynth_bus_id = "snd_fsynth",
+		.fsynth_output = 2,
+		.fdma_initiator = 0,
+		.fdma_request_line = 40,
+	},
+};
+
+/* I2S to SPDIF converters */
+
+static struct platform_device conv_i2sspdif_0 = {
+	.name          = "snd_conv_i2sspdif",
+	.id            = 0,
+	.num_resources = 2,
+	.resource      = (struct resource []) {
+		{
+			.flags = IORESOURCE_MEM,
+			.start = 0xfd105000,
+			.end   = 0xfd105223,
+		},
+		{
+			.flags = IORESOURCE_IRQ,
+			.start = evt2irq(0x0a00),
+			.end   = evt2irq(0x0a00),
+		}
+	},
+	.dev.platform_data = &(struct snd_stm_conv_i2sspdif_info) {
+		.ver = 4,
+		.source_bus_id = "snd_pcm_player.0",
+		.channel_from = 0,
+		.channel_to = 1,
+	},
+};
+
+static struct platform_device conv_i2sspdif_1 = {
+	.name          = "snd_conv_i2sspdif",
+	.id            = 1,
+	.num_resources = 2,
+	.resource      = (struct resource []) {
+		{
+			.flags = IORESOURCE_MEM,
+			.start = 0xfd105400,
+			.end   = 0xfd105623,
+		},
+		{
+			.flags = IORESOURCE_IRQ,
+			.start = evt2irq(0x0a20),
+			.end   = evt2irq(0x0a20),
+		}
+	},
+	.dev.platform_data = &(struct snd_stm_conv_i2sspdif_info) {
+		.ver = 4,
+		.source_bus_id = "snd_pcm_player.0",
+		.channel_from = 2,
+		.channel_to = 3,
+	},
+};
+
+static struct platform_device conv_i2sspdif_2 = {
+	.name          = "snd_conv_i2sspdif",
+	.id            = 2,
+	.num_resources = 2,
+	.resource      = (struct resource []) {
+		{
+			.flags = IORESOURCE_MEM,
+			.start = 0xfd105800,
+			.end   = 0xfd105a23,
+		},
+		{
+			.flags = IORESOURCE_IRQ,
+			.start = evt2irq(0x0a40),
+			.end   = evt2irq(0x0a40),
+		}
+	},
+	.dev.platform_data = &(struct snd_stm_conv_i2sspdif_info) {
+		.ver = 4,
+		.source_bus_id = "snd_pcm_player.0",
+		.channel_from = 4,
+		.channel_to = 5,
+	},
+};
+
+static struct platform_device conv_i2sspdif_3 = {
+	.name          = "snd_conv_i2sspdif",
+	.id            = 3,
+	.num_resources = 2,
+	.resource      = (struct resource []) {
+		{
+			.flags = IORESOURCE_MEM,
+			.start = 0xfd105c00,
+			.end   = 0xfd105e23,
+		},
+		{
+			.flags = IORESOURCE_IRQ,
+			.start = evt2irq(0x0a60),
+			.end   = evt2irq(0x0a60),
+		}
+	},
+	.dev.platform_data = &(struct snd_stm_conv_i2sspdif_info) {
+		.ver = 4,
+		.source_bus_id = "snd_pcm_player.0",
+		.channel_from = 6,
+		.channel_to = 7,
+	},
+};
+
+/* PCM reader */
+
+static struct platform_device pcm_reader = {
+	.name          = "snd_pcm_reader",
+	.id            = -1,
+	.num_resources = 2,
+	.resource      = (struct resource []) {
+		{
+			.flags = IORESOURCE_MEM,
+			.start = 0xfd102000,
+			.end   = 0xfd102027,
+		},
+		{
+			.flags = IORESOURCE_IRQ,
+			.start = evt2irq(0x1440),
+			.end   = evt2irq(0x1440),
+		},
+	},
+	.dev.platform_data = &(struct snd_stm_pcm_reader_info) {
+		.name = "PCM Reader",
+		.ver = 5,
+		.card_device = 3,
+		.channels = 2,
+		.fdma_initiator = 0,
+		.fdma_request_line = 37,
+	},
+};
+
+static struct platform_device *snd_stm_stx7105_devices[] = {
+	&stx7105_glue,
+	&fsynth,
+	&conv_int_dac,
+	&pcm_player_0,
+	&pcm_player_1,
+	&spdif_player,
+	&conv_i2sspdif_0,
+	&conv_i2sspdif_1,
+	&conv_i2sspdif_2,
+	&conv_i2sspdif_3,
+	&pcm_reader,
+};
+
+
+
+/*
+ * Audio glue driver implementation
+ */
+
+struct snd_stm_stx7105_glue {
+	int ver;
+
+	struct resource *mem_region;
+	void *base;
+
+	struct snd_info_entry *proc_entry;
+
+	snd_stm_magic_field;
+};
+
+static void snd_stm_stx7105_glue_dump_registers(struct snd_info_entry *entry,
+		struct snd_info_buffer *buffer)
+{
+	struct snd_stm_stx7105_glue *stx7105_glue = entry->private_data;
+
+	snd_stm_assert(stx7105_glue, return);
+	snd_stm_magic_assert(stx7105_glue, return);
+
+	snd_iprintf(buffer, "--- snd_stx7105_glue ---\n");
+	snd_iprintf(buffer, "base = 0x%p\n", stx7105_glue->base);
+
+	snd_iprintf(buffer, "AUDCFG_IO_CTRL (offset 0x00) = 0x%08x\n",
+			get__7105_AUDCFG_IO_CTRL(stx7105_glue));
+
+	snd_iprintf(buffer, "\n");
+}
+
+static int __init snd_stm_stx7105_glue_register(struct snd_device *snd_device)
+{
+	struct snd_stm_stx7105_glue *stx7105_glue = snd_device->device_data;
+
+	snd_stm_assert(stx7105_glue, return -EINVAL);
+	snd_stm_magic_assert(stx7105_glue, return -EINVAL);
+
+	/* Enable audio outputs */
+
+	set__7105_AUDCFG_IO_CTRL(stx7105_glue,
+		mask__7105_AUDCFG_IO_CTRL__PCMPLHDMI_EN__OUTPUT(stx7105_glue) |
+		mask__7105_AUDCFG_IO_CTRL__SPDIFHDMI_EN__OUTPUT(stx7105_glue) |
+		mask__7105_AUDCFG_IO_CTRL__PCM_CLK_EN__OUTPUT(stx7105_glue));
+
+	/* Additional procfs info */
+
+	snd_stm_info_register(&stx7105_glue->proc_entry, "stx7105_glue",
+			snd_stm_stx7105_glue_dump_registers, stx7105_glue);
+
+	return 0;
+}
+
+static int __exit snd_stm_stx7105_glue_disconnect(struct snd_device *snd_device)
+{
+	struct snd_stm_stx7105_glue *stx7105_glue = snd_device->device_data;
+
+	snd_stm_assert(stx7105_glue, return -EINVAL);
+	snd_stm_magic_assert(stx7105_glue, return -EINVAL);
+
+	/* Remove procfs entry */
+
+	snd_stm_info_unregister(stx7105_glue->proc_entry);
+
+	/* Disable audio outputs */
+
+	set__7105_AUDCFG_IO_CTRL(stx7105_glue,
+		mask__7105_AUDCFG_IO_CTRL__PCMPLHDMI_EN__OUTPUT(stx7105_glue) |
+		mask__7105_AUDCFG_IO_CTRL__SPDIFHDMI_EN__OUTPUT(stx7105_glue) |
+		mask__7105_AUDCFG_IO_CTRL__PCM_CLK_EN__OUTPUT(stx7105_glue));
+
+	return 0;
+}
+
+static struct snd_device_ops snd_stm_stx7105_glue_snd_device_ops = {
+	.dev_register = snd_stm_stx7105_glue_register,
+	.dev_disconnect = snd_stm_stx7105_glue_disconnect,
+};
+
+static int __init snd_stm_stx7105_glue_probe(struct platform_device *pdev)
+{
+	int result = 0;
+	struct snd_stm_stx7105_glue *stx7105_glue;
+
+	snd_stm_printd(0, "--- Probing device '%s'...\n", pdev->dev.bus_id);
+
+	stx7105_glue = kzalloc(sizeof(*stx7105_glue), GFP_KERNEL);
+	if (!stx7105_glue) {
+		snd_stm_printe("Can't allocate memory "
+				"for a device description!\n");
+		result = -ENOMEM;
+		goto error_alloc;
+	}
+	snd_stm_magic_set(stx7105_glue);
+
+	result = snd_stm_memory_request(pdev, &stx7105_glue->mem_region,
+			&stx7105_glue->base);
+	if (result < 0) {
+		snd_stm_printe("Memory region request failed!\n");
+		goto error_memory_request;
+	}
+
+	/* ALSA component */
+
+	result = snd_device_new(snd_stm_card_get(), SNDRV_DEV_LOWLEVEL,
+			stx7105_glue, &snd_stm_stx7105_glue_snd_device_ops);
+	if (result < 0) {
+		snd_stm_printe("ALSA low level device creation failed!\n");
+		goto error_device;
+	}
+
+	/* Done now */
+
+	platform_set_drvdata(pdev, stx7105_glue);
+
+	snd_stm_printd(0, "--- Probed successfully!\n");
+
+	return result;
+
+error_device:
+	snd_stm_memory_release(stx7105_glue->mem_region, stx7105_glue->base);
+error_memory_request:
+	snd_stm_magic_clear(stx7105_glue);
+	kfree(stx7105_glue);
+error_alloc:
+	return result;
+}
+
+static int __exit snd_stm_stx7105_glue_remove(struct platform_device *pdev)
+{
+	struct snd_stm_stx7105_glue *stx7105_glue =
+			platform_get_drvdata(pdev);
+
+	snd_stm_assert(stx7105_glue, return -EINVAL);
+	snd_stm_magic_assert(stx7105_glue, return -EINVAL);
+
+	snd_stm_memory_release(stx7105_glue->mem_region, stx7105_glue->base);
+
+	snd_stm_magic_clear(stx7105_glue);
+	kfree(stx7105_glue);
+
+	return 0;
+}
+
+static struct platform_driver snd_stm_stx7105_glue_driver = {
+	.driver = {
+		.name = "snd_stx7105_glue",
+	},
+	.probe = snd_stm_stx7105_glue_probe,
+	.remove = snd_stm_stx7105_glue_remove,
+};
+
+
+
+/*
+ * Audio initialization
+ */
+
+static int __init snd_stm_stx7105_init(void)
+{
+	int result;
+	struct snd_card *card;
+
+	snd_stm_printd(0, "snd_stm_stx7105_init()\n");
+
+	if (cpu_data->type != CPU_STX7105) {
+		snd_stm_printe("Not supported (other than STx7105) SOC "
+				"detected!\n");
+		result = -EINVAL;
+		goto error_soc_type;
+	}
+
+	/* Cut 2.0 presumably will bring something new into the
+	 * matter, so above configuration must be checked!
+	 * - transfer_sizes (FIFO sizes has changed) */
+	WARN_ON(cpu_data->cut_major > 1);
+
+	/* Ugly but quick hack to have SPDIF player & I2S to SPDIF
+	 * converters enabled without loading STMFB...
+	 * TODO: do this in some sane way! */
+	{
+		void *hdmi_gpout = ioremap(0xfd104020, 4);
+		writel(readl(hdmi_gpout) | 0x3, hdmi_gpout);
+		iounmap(hdmi_gpout);
+	}
+
+	result = platform_driver_register(&snd_stm_stx7105_glue_driver);
+	result = 0;
+	if (result != 0) {
+		snd_stm_printe("Failed to register audio glue driver!\n");
+		goto error_driver_register;
+	}
+
+	card = snd_stm_card_new(index, id, THIS_MODULE);
+	if (card == NULL) {
+		snd_stm_printe("ALSA card creation failed!\n");
+		result = -ENOMEM;
+		goto error_card_new;
+	}
+	strcpy(card->driver, "STx7105");
+	strcpy(card->shortname, "STx7105 audio subsystem");
+	snprintf(card->longname, 79, "STMicroelectronics STx7105 cut %d "
+			"SOC audio subsystem", cpu_data->cut_major);
+
+	result = snd_stm_add_platform_devices(snd_stm_stx7105_devices,
+			ARRAY_SIZE(snd_stm_stx7105_devices));
+	if (result != 0) {
+		snd_stm_printe("Failed to add platform devices!\n");
+		goto error_add_devices;
+	}
+
+	result = snd_stm_card_register();
+	if (result != 0) {
+		snd_stm_printe("Failed to register ALSA cards!\n");
+		goto error_card_register;
+	}
+
+	return 0;
+
+error_card_register:
+	snd_stm_remove_platform_devices(snd_stm_stx7105_devices,
+			ARRAY_SIZE(snd_stm_stx7105_devices));
+error_add_devices:
+	snd_stm_card_free();
+error_card_new:
+	platform_driver_unregister(&snd_stm_stx7105_glue_driver);
+error_driver_register:
+error_soc_type:
+	return result;
+}
+
+static void __exit snd_stm_stx7105_exit(void)
+{
+	snd_stm_printd(0, "snd_stm_stx7105_exit()\n");
+
+	snd_stm_card_free();
+
+	snd_stm_remove_platform_devices(snd_stm_stx7105_devices,
+			ARRAY_SIZE(snd_stm_stx7105_devices));
+
+	platform_driver_unregister(&snd_stm_stx7105_glue_driver);
+}
+
+MODULE_AUTHOR("Pawel MOLL <pawel.moll@st.com>");
+MODULE_DESCRIPTION("STMicroelectronics STx7105 audio driver");
+MODULE_LICENSE("GPL");
+
+module_init(snd_stm_stx7105_init);
+module_exit(snd_stm_stx7105_exit);
