From 289e1d61ae854db26d629027f9a7f0df859c504e Mon Sep 17 00:00:00 2001
From: Francesco VIRLINZI <francesco.virlinzi@st.com>
Date: Wed, 6 May 2009 12:20:35 +0200
Subject: [PATCH] stm: pm: Registered ILC as sysdev device

This patch registers the ILC as sysdev device to better support
the resume from hibernation

Signed-off-by: Francesco Virlinzi <francesco.virlinzi@st.com>
---
 arch/sh/kernel/cpu/irq/st40_ilc_sti5528.c |   35 +++++++++++---
 arch/sh/kernel/cpu/irq/st40_ilc_stx7200.c |   68 +++++++++++++++++++++--------
 2 files changed, 77 insertions(+), 26 deletions(-)

diff --git a/arch/sh/kernel/cpu/irq/st40_ilc_sti5528.c b/arch/sh/kernel/cpu/irq/st40_ilc_sti5528.c
index ae29658..8976dcf 100644
--- a/arch/sh/kernel/cpu/irq/st40_ilc_sti5528.c
+++ b/arch/sh/kernel/cpu/irq/st40_ilc_sti5528.c
@@ -16,6 +16,9 @@
 #include <linux/init.h>
 #include <linux/irq.h>
 #include <linux/pm.h>
+#include <linux/sysdev.h>
+#include <linux/cpu.h>
+#include <linux/pm.h>
 
 #include <asm/system.h>
 #include <asm/io.h>
@@ -75,20 +78,36 @@ void ilc_route_external(int ilc_irq, int ext_out, int invert)
 	ilc_log[offset].ext_out = ext_out;
 	ilc_log[offset].invert  = invert;
 }
-
-int ilc_pm_state(pm_message_t state)
+#ifdef CONFIG_PM
+static int ilc_sysdev_suspend(struct sys_device *dev, pm_message_t state)
 {
 	int idx;
 	static pm_message_t prev_state;
-	switch (state.event) {
-	case PM_EVENT_ON:
-		if (prev_state.event == PM_EVENT_FREEZE)
+
+	if (state.event == PM_EVENT_ON &&
+	    prev_state.event == PM_EVENT_FREEZE) /* Resuming from hibernation*/
 		  for (idx = 0; idx < ARRAY_SIZE(ilc_log); ++idx)
 			ilc_route_external(ilc_log[idx].ilc_irq,
 					   ilc_log[idx].ext_out,
 					   ilc_log[idx].invert);
-	default:
-		prev_state = state;
-	}
+	prev_state = state;
 	return 0;
 }
+
+static int ilc_sysdev_resume(struct sys_device *dev)
+{
+	return ilc_sysdev_suspend(dev, PMSG_ON);
+}
+
+static struct sysdev_driver ilc_sysdev_driver = {
+	.suspend = ilc_sysdev_suspend,
+	.resume = ilc_sysdev_resume,
+};
+
+static int __init ilc_sysdev_init(void)
+{
+	return sysdev_driver_register(&cpu_sysdev_class, &ilc_sysdev_driver);
+}
+
+module_init(ilc_sysdev_init);
+#endif
diff --git a/arch/sh/kernel/cpu/irq/st40_ilc_stx7200.c b/arch/sh/kernel/cpu/irq/st40_ilc_stx7200.c
index bdf9397..ebe8218 100644
--- a/arch/sh/kernel/cpu/irq/st40_ilc_stx7200.c
+++ b/arch/sh/kernel/cpu/irq/st40_ilc_stx7200.c
@@ -11,6 +11,8 @@
  */
 
 #include <linux/kernel.h>
+#include <linux/sysdev.h>
+#include <linux/cpu.h>
 #include <linux/init.h>
 #include <linux/interrupt.h>
 #include <linux/irq.h>
@@ -33,6 +35,7 @@ struct ilc_data {
 	unsigned char priority;
 #define ILC_STATE_USED			0x1
 #define ILC_WAKEUP_ENABLED		0x2
+#define ILC_ENABLED			0x4
 
 #define ilc_is_used(_ilc)		(((_ilc)->state & ILC_STATE_USED) != 0)
 #define ilc_set_used(_ilc)		((_ilc)->state |= ILC_STATE_USED)
@@ -41,6 +44,11 @@ struct ilc_data {
 #define ilc_set_wakeup(_ilc)		((_ilc)->state |= ILC_WAKEUP_ENABLED)
 #define ilc_reset_wakeup(_ilc)		((_ilc)->state &= ~ILC_WAKEUP_ENABLED)
 #define ilc_wakeup_enabled(_ilc)  (((_ilc)->state & ILC_WAKEUP_ENABLED) != 0)
+
+#define ilc_set_enabled(_ilc)		((_ilc)->state |= ILC_ENABLED)
+#define ilc_set_disabled(_ilc)		((_ilc)->state &= ~ILC_ENABLED)
+#define ilc_is_enabled(_ilc)		(((_ilc)->state & ILC_ENABLED) != 0)
+
 	unsigned char state;
 /*
  * trigger_mode is used to restore the right mode
@@ -188,8 +196,6 @@ static unsigned int startup_ilc_irq(unsigned int irq)
 
 	DPRINTK("%s: irq %d\n", __FUNCTION__, irq);
 
-	WARN_ON(ilc_is_used(&ilc_data[irq_offset]));
-
 	if ((irq_offset < 0) || (irq_offset >= ILC_NR_IRQS))
 		return -ENODEV;
 
@@ -198,6 +204,7 @@ static unsigned int startup_ilc_irq(unsigned int irq)
 
 	spin_lock_irqsave(&ilc_data_lock, flags);
 	ilc_set_used(this);
+	ilc_set_enabled(this);
 	priority_mask[priority].mask[_BANK(irq_offset)] |= _BIT(irq_offset);
 	spin_unlock_irqrestore(&ilc_data_lock, flags);
 
@@ -241,6 +248,7 @@ static void shutdown_ilc_irq(unsigned int irq)
 	ILC_SET_PRI(irq_offset, 0);
 
 	spin_lock_irqsave(&ilc_data_lock, flags);
+	ilc_set_disabled(this);
 	ilc_set_unused(this);
 	priority_mask[priority].mask[_BANK(irq_offset)] &= ~(_BIT(irq_offset));
 	spin_unlock_irqrestore(&ilc_data_lock, flags);
@@ -249,35 +257,35 @@ static void shutdown_ilc_irq(unsigned int irq)
 static void unmask_ilc_irq(unsigned int irq)
 {
 	int irq_offset = irq - ILC_FIRST_IRQ;
+	struct ilc_data *this = &ilc_data[irq_offset];
 
 	DPRINTK2("%s: irq %d\n", __FUNCTION__, irq);
 
-	WARN_ON(!ilc_is_used(&ilc_data[irq_offset]));
-
 	ILC_SET_ENABLE(irq_offset);
+	ilc_set_enabled(this);
 }
 
 static void mask_ilc_irq(unsigned int irq)
 {
 	int irq_offset = irq - ILC_FIRST_IRQ;
+	struct ilc_data *this = &ilc_data[irq_offset];
 
 	DPRINTK2("%s: irq %d\n", __FUNCTION__, irq);
 
-	WARN_ON(!ilc_is_used(&ilc_data[irq_offset]));
-
 	ILC_CLR_ENABLE(irq_offset);
+	ilc_set_disabled(this);
 }
 
 static void mask_and_ack_ilc(unsigned int irq)
 {
 	int irq_offset = irq - ILC_FIRST_IRQ;
+	struct ilc_data *this = &ilc_data[irq_offset];
 
 	DPRINTK2("%s: irq %d\n", __FUNCTION__, irq);
 
-	WARN_ON(!ilc_is_used(&ilc_data[irq_offset]));
-
 	ILC_CLR_ENABLE(irq_offset);
 	(void)ILC_GET_ENABLE(irq_offset); /* Defeat write posting */
+	ilc_set_disabled(this);
 }
 
 static int set_type_ilc_irq(unsigned int irq, unsigned int flow_type)
@@ -361,26 +369,50 @@ void __init ilc_demux_init(void)
 }
 
 #ifdef CONFIG_PM
-int ilc_pm_state(pm_message_t state)
+static int ilc_sysdev_suspend(struct sys_device *dev, pm_message_t state)
 {
-	int idx;
-	long flag;
-	static pm_message_t prev_state = {.event = PM_EVENT_ON,};
-	switch (state.event) {
-	case PM_EVENT_ON:
-		if (prev_state.event == PM_EVENT_FREEZE){
+	int idx, irq;
+	unsigned long flag;
+	static pm_message_t prev_state;
+
+	if (state.event == PM_EVENT_ON &&
+	    prev_state.event == PM_EVENT_FREEZE) {
 			local_irq_save(flag);
 			for (idx = 0; idx < ARRAY_SIZE(ilc_data); ++idx) {
+				irq = idx + ILC_FIRST_IRQ;
 				ILC_SET_PRI(idx, ilc_data[idx].priority);
 				ILC_SET_TRIGMODE(idx, ilc_data[idx].trigger_mode);
+				if (ilc_is_used(&ilc_data[idx])) {
+					startup_ilc_irq(irq);
+					if (ilc_is_enabled(&ilc_data[idx]))
+						unmask_ilc_irq(irq);
+					else
+						mask_ilc_irq(irq);
 				}
+			}
 			local_irq_restore(flag);
 		}
-	default:
-		prev_state = state;
-	}
+
+	prev_state = state;
 	return 0;
 }
+
+static int ilc_sysdev_resume(struct sys_device *dev)
+{
+	return ilc_sysdev_suspend(dev, PMSG_ON);
+}
+
+static struct sysdev_driver ilc_sysdev_driver = {
+	.suspend = ilc_sysdev_suspend,
+	.resume = ilc_sysdev_resume,
+};
+
+static int __init ilc_sysdev_init(void)
+{
+	return sysdev_driver_register(&cpu_sysdev_class, &ilc_sysdev_driver);
+}
+
+module_init(ilc_sysdev_init);
 #endif
 
 #if defined(CONFIG_PROC_FS)
-- 
1.6.0.6

