From 55cf06d46793aa16492f3f8571bc4f16225b4641 Mon Sep 17 00:00:00 2001
From: Francesco M. Virlinzi <francesco.virlinzi@st.com>
Date: Fri, 13 Feb 2009 11:31:44 +0100
Subject: [PATCH] pm: Updates in the PM Common code

This patch makes necessary changes in the non-architecture specific
kernel PM code and adds additional sysfs information.

Signed-off-by: Francesco M. Virlinzi <francesco.virlinzi@st.com>
---
 drivers/base/core.c          |    7 ++++-
 drivers/base/power/resume.c  |    6 ++++
 drivers/base/power/suspend.c |    7 +++++
 drivers/base/power/sysfs.c   |   62 ++++++++++++++++++++++++++++++++++++++++++
 4 files changed, 81 insertions(+), 1 deletions(-)

diff --git a/drivers/base/core.c b/drivers/base/core.c
index fa43bc4..561fc62 100644
--- a/drivers/base/core.c
+++ b/drivers/base/core.c
@@ -578,7 +578,12 @@ void device_initialize(struct device *dev)
 	init_MUTEX(&dev->sem);
 	spin_lock_init(&dev->devres_lock);
 	INIT_LIST_HEAD(&dev->devres_head);
-	device_init_wakeup(dev, 0);
+/*
+ *	STMicroelectronics: <francesco virlinzi>
+ *	- commented to allow the initialization
+ *	  in our specific platform file.
+ *	device_init_wakeup(dev, 0);
+ */
 	set_dev_node(dev, -1);
 }
 
diff --git a/drivers/base/power/resume.c b/drivers/base/power/resume.c
index 00fd84a..627d8a0 100644
--- a/drivers/base/power/resume.c
+++ b/drivers/base/power/resume.c
@@ -44,6 +44,12 @@ int resume_device(struct device * dev)
 		error = dev->class->resume(dev);
 	}
 
+/*
+ *	STMicroelectronics: <francesco virlinzi>
+ *	- added to have a 'power state' for each device
+ */
+	if (!error)
+		dev->power.power_state = PMSG_ON;
 	up(&dev->sem);
 
 	TRACE_RESUME(error);
diff --git a/drivers/base/power/suspend.c b/drivers/base/power/suspend.c
index 26df9b2..f58aeac 100644
--- a/drivers/base/power/suspend.c
+++ b/drivers/base/power/suspend.c
@@ -81,6 +81,13 @@ int suspend_device(struct device * dev, pm_message_t state)
 		error = dev->bus->suspend(dev, state);
 		suspend_report_result(dev->bus->suspend, error);
 	}
+/*
+ *	STMicroelectronics: <francesco virlinzi>
+ *	- added to have a 'power state' for each device
+ */
+	if (!error)
+		dev->power.power_state = state;
+
 	up(&dev->sem);
 	return error;
 }
diff --git a/drivers/base/power/sysfs.c b/drivers/base/power/sysfs.c
index f2ed179..b056fb1 100644
--- a/drivers/base/power/sysfs.c
+++ b/drivers/base/power/sysfs.c
@@ -6,7 +6,66 @@
 #include <linux/string.h>
 #include "power.h"
 
+/**
+ *      state - Control current power state of device
+ *
+ *      show() returns the current power state of the device. '0' indicates
+ *      the device is on. Other values (1-3) indicate the device is in a low
+ *      power state.
+ *
+ *      store() sets the current power state, which is an integer value
+ *      between 0-3. If the device is on ('0'), and the value written is
+ *      greater than 0, then the device is placed directly into the low-power
+ *      state (via its driver's ->suspend() method).
+ *      If the device is currently in a low-power state, and the value is 0,
+ *      the device is powered back on (via the ->resume() method).
+ *      If the device is in a low-power state, and a different low-power state
+ *      is requested, the device is first resumed, then suspended into the new
+ *      low-power state.
+ */
+#ifdef CONFIG_PM
+static ssize_t state_show(struct device *dev, struct device_attribute *attr,
+	char *buf)
+{
+	if (dev->power.power_state.event)
+		return sprintf(buf, "off\n");
+	else
+		return sprintf(buf, "on\n");
+}
+
+static ssize_t state_store(struct device *dev, struct device_attribute *attr,
+	const char *buf, size_t n)
+{
+	int error = -EINVAL;
+
+	if ((n == 1) && (!strcmp(buf, "3") || !strcmp(buf, "2"))) {
+		/* suspend the device... */
+		error = suspend_device(dev, PMSG_SUSPEND);
+		/* ...and moves into the inactive list... */
+		if (!error) {
+			dev->power.power_state.event = PM_EVENT_SUSPEND;
+			mutex_lock(&dpm_list_mtx);
+			list_move(&dev->power.entry, &dpm_off);
+			mutex_unlock(&dpm_list_mtx);
+		}
+	}
+
+	if ((n == 1) && !strcmp(buf, "0")) {
+		/* resumes the device... */
+		resume_device(dev);
+		dev->power.power_state.event = PM_EVENT_ON;
+		/* ...and moves into the active list...*/
+		mutex_lock(&dpm_list_mtx);
+		list_move_tail(&dev->power.entry, &dpm_active);
+		mutex_unlock(&dpm_list_mtx);
+		error = 0;
+	}
+
+	return error ? error : n;
+}
 
+static DEVICE_ATTR(state, 0644, state_show, state_store);
+#endif
 /*
  *	wakeup - Report/change current wakeup option for device
  *
@@ -80,6 +139,9 @@ static DEVICE_ATTR(wakeup, 0644, wake_show, wake_store);
 
 
 static struct attribute * power_attrs[] = {
+#ifdef CONFIG_PM
+	&dev_attr_state.attr,
+#endif
 	&dev_attr_wakeup.attr,
 	NULL,
 };
-- 
1.5.6.3

