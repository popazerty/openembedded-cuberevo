commit f68b3ffe2328aeff43f2201b9ff7f48cfea3a03a
Author: Pawel MOLL <pawel.moll@st.com>
Date:   Fri Nov 30 10:06:07 2007 +0000

    FDMA driver fixes
    
    - Fixed stb710x_fdma_get_residue()
    - Fixed fdma_reset_channels() (missed Jon's patch)
    - Fixed xbar handling (wrong rework patch used)
    - Fixed deprecated request_irq call & irq handler prototype
    - Fixed channel pausing
    - Added API for flushing FDMA channel
    - Added dma_req_free(), complementary to dma_req_config()
      (request config is no longer freed by dma_params_free!!!)
    
    Signed-off-by: Pawel MOLL <pawel.moll@st.com>

Index: linux-2.6.23-stm/arch/sh/drivers/dma/dma-api.c
===================================================================
--- linux-2.6.23-stm.orig/arch/sh/drivers/dma/dma-api.c
+++ linux-2.6.23-stm/arch/sh/drivers/dma/dma-api.c
@@ -113,6 +113,23 @@ static int search_cap(const char **hayst
 	return 0;
 }
 
+static int matching_dmac(const char*dmac_req, const char* dmac_inst)
+{
+	char dr, di;
+
+	while ( (dr = *dmac_req) == (di = *dmac_inst) ) {
+		if (dr == '\0')
+			return 0;
+		dmac_req++;
+		dmac_inst++;
+	}
+
+	if ((dr == '\0') && (di == '.'))
+		return 0;
+
+	return 1;
+}
+
 /**
  * request_dma_bycap - Allocate a DMA channel based on its capabilities
  * @dmac: List of DMA controllers to search
@@ -136,7 +153,7 @@ int request_dma_bycap(const char **dmac,
 	BUG_ON(!dmac || !caps);
 
 	list_for_each_entry(info, &registered_dmac_list, list)
-		if (strcmp(*dmac, info->name) == 0) {
+		if (matching_dmac(*dmac, info->name) == 0) {
 			found = 1;
 			break;
 		}
Index: linux-2.6.23-stm/drivers/net/smsc_911x/st40-shdma.c
===================================================================
--- linux-2.6.23-stm.orig/drivers/net/smsc_911x/st40-shdma.c
+++ linux-2.6.23-stm/drivers/net/smsc_911x/st40-shdma.c
@@ -152,6 +152,8 @@ void Platform_ReleaseDmaChannel(
 	DWORD dwDmaChannel)
 {
 	free_dma(dwDmaChannel);
+	dma_req_free(dwDmaChannel, dma_reqs[0]);
+	dma_req_free(dwDmaChannel, dma_reqs[1]);
 	dma_params_free(&tx_transfer);
 	Platform_ReleaseDmaChannel_sg();
 }
Index: linux-2.6.23-stm/drivers/stm/710x_fdma2.c
===================================================================
--- linux-2.6.23-stm.orig/drivers/stm/710x_fdma2.c
+++ linux-2.6.23-stm/drivers/stm/710x_fdma2.c
@@ -230,7 +230,7 @@ static void fdma_start_channel(struct fd
 			      int ch_num,
 			      unsigned long start_addr)
 {
-	u32 cmd_sta_value = (start_addr  | CMDSTAT_FDMA_START_CHANNEL);
+	u32 cmd_sta_value = (start_addr | CMDSTAT_FDMA_START_CHANNEL);
 
 	writel(cmd_sta_value,CMD_STAT_REG(ch_num));
 	writel(MBOX_STR_CMD(ch_num),fd->io_base +fd->regs.fdma_cmd_set);
@@ -324,7 +324,7 @@ static inline void __handle_fdma_complet
 	}
 }
 
-static irqreturn_t fdma_irq(int irq, void *dev_id, struct pt_regs *regs)
+static irqreturn_t fdma_irq(int irq, void *dev_id)
 {
 	struct fdma_dev * fd = (struct fdma_dev *)dev_id;
 	int chan_num;
@@ -363,6 +363,10 @@ static int xbar_local_req(int req_line,
 	return req_line;
 }
 
+static void xbar_local_free(struct channel_status *chan, int local_req_line)
+{
+}
+
 static int __init xbar_init(void)
 {
 	return 0;
@@ -391,7 +395,6 @@ static int xbar_local_req(int req_line,
 	struct fdma_dev *fd = chan->fd;
 	int local_req_line;
 	void* xbar_addr;
-	unsigned long xbar_val;
 
 	if (fd->req_lines_inuse == ~0UL)
 		return -1;
@@ -399,14 +402,18 @@ static int xbar_local_req(int req_line,
 	local_req_line = ffz(fd->req_lines_inuse);
 	fd->req_lines_inuse |= 1<<local_req_line;
 
-	xbar_addr = xbar_dev->io_base + (req_line >> 2);
-	xbar_val = readl(xbar_addr);
-	xbar_val &= ~(0xff << (req_line & 3));
-	xbar_val |= ((fd->fdma_num << 5) | local_req_line) <<
-		((req_line & 3) * 8);
-	writel(xbar_val, xbar_addr);
+	xbar_addr = xbar_dev->io_base +
+		(fd->fdma_num * 0x80) +
+		(local_req_line * 4);
+	writel(req_line, xbar_addr);
 
-	return req_line;
+	return local_req_line;
+}
+
+static void xbar_local_free(struct channel_status *chan, int local_req_line)
+{
+	struct fdma_dev *fd = chan->fd;
+	fd->req_lines_inuse &= ~(1<<local_req_line);
 }
 
 static int __init xbar_driver_probe(struct platform_device *pdev)
@@ -472,7 +479,7 @@ module_exit(xbar_exit)
 
 static DEFINE_SPINLOCK(fdma_req_lock);
 
-struct stm_dma_req *fdma_req_allocate(unsigned int req_line, struct channel_status *chan)
+static struct stm_dma_req *fdma_req_allocate(unsigned int req_line, struct channel_status *chan)
 {
 	struct stm_dma_req* req = NULL;
 	int local_req_line;
@@ -499,13 +506,16 @@ out:
 	return req;
 }
 
-/* Note that this may be called multiple times for the same req, for
- * example linked list of params with the same req line in each.
- * Maybe we should have an explicit free as there is an explicit
- * allocate via stb710x_configure_pace_channel() ? */
 static void fdma_req_free(struct stm_dma_req *req)
 {
+	spin_lock(&fdma_req_lock);
+
+	if (req->chan)
+		xbar_local_free(req->chan, req->local_req_line);
+
 	req->chan = NULL;
+
+	spin_unlock(&fdma_req_lock);
 }
 
 /*---------------------------------------------------------------------*
@@ -554,7 +564,7 @@ static void fdma_reset_channels(struct f
 {
 	int channel=0;
 	for(;channel <(fd->ch_max-1);channel++)
-		writel(0,CMD_STAT_REG(0));
+		writel(0,CMD_STAT_REG(channel));
 }
 
 static struct stm_dma_req *stb710x_configure_pace_channel(struct fdma_dev *fd,
@@ -855,31 +865,25 @@ static  int stb710x_fdma_get_residue(str
 	struct fdma_dev *fd = FDMA_DEV(chan);
 	void __iomem *chan_base = fd->io_base + (chan->chan * NODE_DATA_OFFSET);
 	unsigned long irqflags;
-	unsigned long total = 0,count=0;
-	void *first_ptr=0;
-	fdma_llu_entry *cur_ptr;
+	unsigned long count;
+	fdma_llu_entry *current_node, *next_node;
 
 	spin_lock_irqsave(&fd->channel_lock, irqflags);
-	count = readl(chan_base +fd->regs.fdma_cntn);
-	/*first read the current node data*/
-	first_ptr = (void *) readl(chan_base + fd->regs.fdma_ptrn);
-	if(! first_ptr)
-		goto list_complete;
 
-	first_ptr = phys_to_virt(first_ptr);
+	/* Get info about current node */
+	current_node = (fdma_llu_entry *)phys_to_virt(readl(CMD_STAT_REG(chan->chan)) & ~0x1f);
+	count = readl(chan_base + fd->regs.fdma_cntn);
+
 	/* Accumulate the bytes remaining in the list */
-	cur_ptr = first_ptr;
-	do {
-		if(first_ptr >=(void*)phys_to_virt(cur_ptr->next_item)
-		   || cur_ptr->next_item ==0)
-			goto list_complete;
-
-		total += cur_ptr->size_bytes;
-	} while ((cur_ptr = phys_to_virt((fdma_llu_entry *) cur_ptr->next_item))!=0);
-list_complete:
+	next_node = (fdma_llu_entry *)phys_to_virt(readl(chan_base + fd->regs.fdma_ptrn));
+	while (next_node && next_node > current_node) {
+		count += next_node->size_bytes;
+		next_node = (fdma_llu_entry *)phys_to_virt(next_node->next_item);
+	}
+
 	spin_unlock_irqrestore(&fd->channel_lock, irqflags);
-	total+= count;
-	return total;
+
+	return count;
 }
 
 /*must only be called when channel is in pasued state*/
@@ -887,6 +891,7 @@ static int stb710x_fdma_unpause(struct f
 {
 	struct channel_status *chan = FDMA_CHAN(channel);
 	unsigned long irqflags=0;
+	u32 cmd_sta_value;
 
 	spin_lock_irqsave(&fd->channel_lock,irqflags);
 	if (chan->sw_state != FDMA_PAUSED) {
@@ -894,14 +899,22 @@ static int stb710x_fdma_unpause(struct f
 		return -EBUSY;
 	}
 
+	cmd_sta_value = readl(CMD_STAT_REG(channel->chan));
+	cmd_sta_value &= ~CMDSTAT_FDMA_CMD_MASK;
+	cmd_sta_value |= CMDSTAT_FDMA_RESTART_CHANNEL;
+	writel(cmd_sta_value, CMD_STAT_REG(channel->chan));
+
 	writel(MBOX_CMD_START_CHANNEL << (channel->chan*2),
 	       fd->io_base + fd->regs.fdma_cmd_set);
 	chan->sw_state = FDMA_RUNNING;
+
 	spin_unlock_irqrestore(&fd->channel_lock,irqflags);
 	return 0;
 }
 
-static int stb710x_fdma_pause(struct fdma_dev * fd,struct dma_channel * channel)
+static int stb710x_fdma_pause(struct fdma_dev * fd,
+		struct dma_channel * channel,
+		int flush)
 {
 	struct channel_status *chan = FDMA_CHAN(channel);
 	unsigned long irqflags=0;
@@ -919,8 +932,8 @@ static int stb710x_fdma_pause(struct fdm
 		return 0;
 	case FDMA_RUNNING:
 		/* Hardware is running, send the command */
-		writel(MBOX_CMD_PAUSE_CHANNEL << (channel->chan*2),
-		       fd->io_base + fd->regs.fdma_cmd_set);
+		writel((flush ? MBOX_CMD_FLUSH_CHANNEL : MBOX_CMD_PAUSE_CHANNEL)
+						<< (channel->chan*2), fd->io_base + fd->regs.fdma_cmd_set);
 		/* Fall through */
 	case FDMA_PAUSING:
 	case FDMA_STOPPING:
@@ -998,10 +1011,6 @@ static int stb710x_fdma_free_params(stru
 			resize_nodelist_mem(fd, desc, 0, 0);
 			kfree(desc);
 		}
-
-		if (this->req) {
-			fdma_req_free(this->req);
-		}
 	}
 
 	return 0;
@@ -1224,18 +1233,23 @@ static int stb710x_fdma_extended_op(stru
 {
 	struct fdma_dev *fd = FDMA_DEV(ch);
 	switch(opcode){
+		case STM_DMA_OP_FLUSH:
+			return stb710x_fdma_pause(fd,ch,1);
 		case STM_DMA_OP_PAUSE:
-			return stb710x_fdma_pause(fd,ch);
+			return stb710x_fdma_pause(fd,ch,0);
 		case STM_DMA_OP_UNPAUSE:
 			return  stb710x_fdma_unpause(fd,ch);
 		case STM_DMA_OP_STOP:
 			return stb710x_fdma_stop(fd,ch);
 		case STM_DMA_OP_COMPILE:
-			return stb710x_fdma_compile_params(fd, (struct stm_dma_params*)parm);
+			return stb710x_fdma_compile_params(fd, (struct stm_dma_params *)parm);
 		case STM_DMA_OP_STATUS:
 			return stb710x_get_engine_status(fd,ch->chan);
-		case STM_DMA_OP_PACING:
-			return (int)stb710x_configure_pace_channel(fd, ch, (struct stm_dma_req_config*)parm);
+		case STM_DMA_OP_REQ_CONFIG:
+			return (int)stb710x_configure_pace_channel(fd, ch, (struct stm_dma_req_config *)parm);
+		case STM_DMA_OP_REQ_FREE:
+			fdma_req_free((struct stm_dma_req *)parm);
+			return 0;
 		default:
 			return -ENOSYS;
 	}
@@ -1298,6 +1312,9 @@ static int __init fdma_driver_probe(stru
 	fd->fw_name = plat_data->fw_device_name;
 	fd->fw = plat_data->fw;
 
+	/* 7200: Req lines 0 and 31 are connected internally, not to the xbar */
+	fd->req_lines_inuse = (1<<31) | (1<<0);
+
 	spin_lock_init(&(fd)->channel_lock);
 	init_waitqueue_head(&(fd)->fw_load_q);
 
@@ -1325,7 +1342,7 @@ static int __init fdma_driver_probe(stru
 
 	err =request_irq(platform_get_irq(pdev, 0),
 			 fdma_irq,
-			 SA_INTERRUPT | SA_SHIRQ,
+			 IRQF_DISABLED | IRQF_SHARED,
 			 fd->name,
 			 fd);
 	if(err <0)
Index: linux-2.6.23-stm/drivers/stm/fdma.h
===================================================================
--- linux-2.6.23-stm.orig/drivers/stm/fdma.h
+++ linux-2.6.23-stm/drivers/stm/fdma.h
@@ -21,9 +21,9 @@
 #define SOURCE_ADDR 					0x05
 #define DEST_ADDR   					0x07
 
-#define CMDSTAT_FDMA_START_CHANNEL  			1
-#define CMDSTAT_FDMA_PAUSE_CHANNEL  			3
-
+#define CMDSTAT_FDMA_CMD_MASK				0x1f
+#define CMDSTAT_FDMA_START_CHANNEL			1
+#define CMDSTAT_FDMA_RESTART_CHANNEL			0
 
 #define STB7100_FDMA_CHANS              		16
 #define STB7109_FDMA_CHANS              		STB7100_FDMA_CHANS
@@ -34,6 +34,7 @@
 /*******************************/
 /*MBOX SETUP VALUES*/
 
+#define MBOX_CMD_FLUSH_CHANNEL		 		3
 #define MBOX_CMD_PAUSE_CHANNEL		 		2
 #define MBOX_CMD_START_CHANNEL       			1
 #define CLEAR_WORD					0XFFFFFFFF
@@ -46,7 +47,6 @@
 #define IS_TRANSFER_SG(parms)((MODE_SRC_SCATTER==parms->mode)||(MODE_DST_SCATTER==parms->mode )?1:0)
 #define MBOX_STR_CMD(ch) (MBOX_CMD_START_CHANNEL << (ch*2))
 #define CMD_STAT_REG(ch)(fd->io_base + fd->regs.fdma_cmd_statn + (ch * CMD_STAT_OFFSET))
-#define CH_PTR_REG(ch)(fd->io_base + fd->regs.fdma_ptrn  + (ch * CMD_STAT_OFFSET))
 
 #define IS_NODE_MALLOCED(priv)((priv.node!=0))
 
Index: linux-2.6.23-stm/include/linux/stm/stm-dma.h
===================================================================
--- linux-2.6.23-stm.orig/include/linux/stm/stm-dma.h
+++ linux-2.6.23-stm/include/linux/stm/stm-dma.h
@@ -63,12 +63,14 @@ enum stm_dma_flags {
 #define STM_DMA_CAP_ETH_BUF		"STM_DMA_ETH_BUFFER"
 
 /* dma_extend() operations */
-#define STM_DMA_OP_PAUSE			1
-#define STM_DMA_OP_UNPAUSE			2
-#define STM_DMA_OP_STOP				3
-#define STM_DMA_OP_COMPILE			4
-#define STM_DMA_OP_STATUS			5
-#define STM_DMA_OP_PACING			7
+#define STM_DMA_OP_FLUSH      1
+#define STM_DMA_OP_PAUSE      2
+#define STM_DMA_OP_UNPAUSE    3
+#define STM_DMA_OP_STOP       4
+#define STM_DMA_OP_COMPILE    5
+#define STM_DMA_OP_STATUS     6
+#define STM_DMA_OP_REQ_CONFIG 7
+#define STM_DMA_OP_REQ_FREE   8
 
 /* Generic DMA request line configuration */
 
@@ -189,6 +191,12 @@ static inline int dma_get_status(unsigne
 	return dma_extend(chan,STM_DMA_OP_STATUS,NULL);
 }
 
+/* Flush implies pause - I mean pause+flush */
+static inline int dma_flush_channel(unsigned int chan)
+{
+	return dma_extend(chan, STM_DMA_OP_FLUSH,NULL);
+}
+
 static inline int dma_pause_channel(unsigned int chan)
 {
 	return dma_extend(chan, STM_DMA_OP_PAUSE,NULL);
@@ -231,7 +239,12 @@ static inline struct stm_dma_req *dma_re
 	struct stm_dma_req_config* req_config)
 {
 	req_config->req_line = req_line;
-	return (struct stm_dma_req *)dma_extend(chan, STM_DMA_OP_PACING, req_config);
+	return (struct stm_dma_req *)dma_extend(chan, STM_DMA_OP_REQ_CONFIG, req_config);
+}
+
+static inline void dma_req_free(unsigned int chan, struct stm_dma_req *req)
+{
+	dma_extend(chan, STM_DMA_OP_REQ_FREE, req);
 }
 
 static inline  void dma_params_sg(	struct stm_dma_params *p,
