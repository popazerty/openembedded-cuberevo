This patch modifies the ioctl method for the driver.
Indeed, in the ioctl, we need to check the command argument and return 
the -EOPNOTSUPP value if the command is not supported.
Without this check some commands, i.e. iwconfig, could return wrong information
for the Ethernet interface.

It also moves the DMA initialization from the probe to the open method.

Signed-off by Giuseppe Cavallaro <peppe.cavallaro@st.com>

Index: linux/drivers/net/stmmac.c
===================================================================
--- linux.orig/drivers/net/stmmac.c	2007-08-30 11:13:29.567010000 +0100
+++ linux/drivers/net/stmmac.c	2007-08-30 11:14:13.016182000 +0100
@@ -67,6 +67,9 @@
  *	  - <tx_queue_size>: transmit queue size.
  * ----------------------------------------------------------------------------
  * Changelog:
+ *   July 2007:
+ *   	-  Moved the DMA initialization from the probe to the open method.
+ *   	-  Reviewed the ioctl method.
  *   May 2007:
  *   	-  Fixed Tx timeout function and csum calculation in the xmit method
  *	-  Added fixes for NAPI, RX tasklet and multicast
@@ -553,6 +556,14 @@
 /* Resets the MII bus */
 int stmmac_mdio_reset(struct mii_bus *bus)
 {
+	unsigned long ioaddr = (unsigned long)bus->priv;
+
+	/* This is a workaround for problems with the STE101P PHY.
+	 * It doesn't complete its reset until at least one clock cycle
+	 * on MDC, so perform a dummy mdio read.
+	 */
+	writel(0, ioaddr + MAC_MII_ADDR);
+
 	return 0;
 }
 
@@ -1562,6 +1573,26 @@
 		return (ret);
 	}
 
+	/* Attach the PHY */
+	ret = stmmac_init_phy(dev);
+	if (ret) {
+		printk(KERN_ERR "%s: Cannot attach to PHY (error: %d)\n",
+		       __FUNCTION__, ret);
+		return (-ENODEV);
+	}
+
+	/* Create and initialize the TX/RX descriptors rings */
+	init_dma_desc_rings(dev);
+
+	/* Intialize the DMA controller and send the SW reset */
+	/* This must be after we have successfully initialised the PHY
+	 * (see comment in stmmaceth_dma_reset). */
+	if (stmmaceth_dma_init(dev) < 0) {
+		ETHPRINTK(probe, ERR, "%s: DMA initialization failed\n",
+			  __FUNCTION__);
+		return (-1);
+	}
+
 	/* Check that the MAC address is valid.  If its not, refuse
 	 * to bring the device up. The user must specify an
 	 * address using the following linux command:
@@ -1595,14 +1626,6 @@
 	if (netif_msg_hw(lp))
 		dump_stm_mac_csr((unsigned int)dev->base_addr);
 
-	/* Attach the PHY */
-	ret = stmmac_init_phy(dev);
-	if (ret) {
-		printk(KERN_ERR "%s: Cannot attach to PHY (error: %d)\n",
-		       __FUNCTION__, ret);
-		return (-ENODEV);
-	}
-
 	phy_start(lp->phydev);
 
 	/* Start the ball rolling... */
@@ -1640,8 +1663,9 @@
 	/* Stop TX/RX DMA and clear the descriptors */
 	stmmaceth_dma_stop_tx(dev->base_addr);
 	stmmaceth_dma_stop_rx(dev->base_addr);
-	clear_dma_descs(lp->dma_tx, CONFIG_DMA_TX_SIZE, 0);
-	clear_dma_descs(lp->dma_rx, CONFIG_DMA_RX_SIZE, OWN_BIT);
+
+	free_dma_desc_resources(dev);
+
 	/* Disable the MAC core */
 	stmmaceth_mac_disable_tx(dev);
 	stmmaceth_mac_disable_rx(dev);
@@ -2357,19 +2381,28 @@
  *  @cmd :  IOCTL command
  *  Description:
  *  Currently there are no special functionality supported in IOCTL, just the 
- *  phy_mii_ioctl is invoked (it changes the PHY registers without regard to
- *  current state).
+ *  phy_mii_ioctl (it changes the PHY reg. without regard to current state).
  */
 static int stmmaceth_ioctl(struct net_device *dev, struct ifreq *rq, int cmd)
 {
 	struct eth_driver_local *lp = netdev_priv(dev);
+
 	if (!netif_running(dev))
 		return -EINVAL;
 
-	if (!lp->phydev)
-		return -EINVAL; // PHY not controllable
+	switch(cmd) {
+        case SIOCGMIIPHY:
+        case SIOCGMIIREG:
+        case SIOCSMIIREG:
+		if (!lp->phydev)
+			return -EINVAL;
 
-	return phy_mii_ioctl(lp->phydev, if_mii(rq), cmd);
+		return phy_mii_ioctl(lp->phydev, if_mii(rq), cmd);
+	default:
+		/* do nothing */
+		break;
+        }
+        return -EOPNOTSUPP;
 }
 
 /* ----------------------------------------------------------------------------
@@ -2437,9 +2470,9 @@
 
 	dev->get_stats = stmmaceth_stats;
 	dev->tx_timeout = stmmaceth_tx_timeout;
-	dev->watchdog_timeo = msecs_to_jiffies(watchdog);;
-	dev->set_multicast_list = stmmaceth_set_rx_mode,
-	    dev->change_mtu = stmmaceth_change_mtu;
+	dev->watchdog_timeo = msecs_to_jiffies(watchdog);
+	dev->set_multicast_list = stmmaceth_set_rx_mode;
+	dev->change_mtu = stmmaceth_change_mtu;
 	dev->ethtool_ops = &stmmaceth_ethtool_ops;
 	dev->do_ioctl = &stmmaceth_ioctl;
 #ifdef CONFIG_NET_POLL_CONTROLLER
@@ -2485,16 +2518,6 @@
 		return (-ENODEV);
 	}
 
-	/* Create and initialize the TX/RX descriptors rings */
-	init_dma_desc_rings(dev);
-
-	/* Intialize the DMA controller and send the SW reset */
-	if (stmmaceth_dma_init(dev) < 0) {
-		ETHPRINTK(probe, ERR, "%s: DMA initialization failed\n",
-			  __FUNCTION__);
-		return (-1);
-	}
-
 	spin_lock_init(&lp->lock);
 
 	return (ret);
@@ -2582,8 +2605,6 @@
 	/* MDIO bus Registration */
 	ret = stmmac_mdio_register(lp, ndev, (unsigned long)addr);
 
-	ndev = __dev_get_by_name("eth0");
-
       out:
 	if (ret < 0) {
 		platform_set_drvdata(pdev, NULL);
@@ -2622,8 +2643,6 @@
 
 	netif_carrier_off(ndev);
 
-	free_dma_desc_resources(ndev);
-
 	stmmac_mdio_unregister(lp);
 
 	platform_set_drvdata(pdev, NULL);
