commit eb8dcc653bb2893471a190c7775467a1d2cc7c89
Author: Pawel MOLL <pawel.moll@st.com>
Date:   Mon Mar 31 17:37:26 2008 +0100

    I2C bus numbering fix.
    
    i2c-stm driver was using dynamic bus number allocation, which can be
    unpredictable (hypothetically, this driver registration could be preceded
    by some hot-plug I2C driver registration, which would use internal bus
    numbers).  Additionally such behaviour is not compatible with
    i2c_board_info mechanism (I2C clients declaration during board-level
    initialisation).
    
    Now bus numbers are reserved and set to bus_id number during
    driver probing.
    
    Signed-off-by: Pawel MOLL <pawel.moll@st.com>

diff --git a/arch/sh/kernel/cpu/sh4/setup-stb7100.c b/arch/sh/kernel/cpu/sh4/setup-stb7100.c
index 51179b1..c0fe349 100644
--- a/arch/sh/kernel/cpu/sh4/setup-stb7100.c
+++ b/arch/sh/kernel/cpu/sh4/setup-stb7100.c
@@ -13,6 +13,7 @@
 #include <linux/serial.h>
 #include <linux/delay.h>
 #include <linux/io.h>
+#include <linux/i2c.h>
 #include <linux/stm/soc.h>
 #include <linux/stm/soc_init.h>
 #include <linux/stm/pio.h>
@@ -328,6 +329,11 @@ void __init stx7100_configure_ssc(struct plat_ssc_data *data)
 		platform_device_register(&stssc_devices[i]);
 	}
 
+	/* I2C buses number reservation (to prevent any hot-plug device
+	 * from using it) */
+#ifdef CONFIG_I2C_BOARDINFO
+	i2c_register_board_info(num_i2c - 1, NULL, 0);
+#endif
 }
 /* SATA resources ---------------------------------------------------------- */
 
diff --git a/arch/sh/kernel/cpu/sh4/setup-stx7111.c b/arch/sh/kernel/cpu/sh4/setup-stx7111.c
index e30cb3c..aaee16f 100644
--- a/arch/sh/kernel/cpu/sh4/setup-stx7111.c
+++ b/arch/sh/kernel/cpu/sh4/setup-stx7111.c
@@ -12,6 +12,7 @@
 #include <linux/init.h>
 #include <linux/serial.h>
 #include <linux/io.h>
+#include <linux/i2c.h>
 #include <linux/stm/soc.h>
 #include <linux/stm/soc_init.h>
 #include <linux/stm/pio.h>
@@ -255,6 +256,12 @@ void __init stx7111_configure_ssc(struct plat_ssc_data *data)
 
 		platform_device_register(&stssc_devices[i]);
 	}
+
+	/* I2C buses number reservation (to prevent any hot-plug device
+	 * from using it) */
+#ifdef CONFIG_I2C_BOARDINFO
+	i2c_register_board_info(num_i2c - 1, NULL, 0);
+#endif
 }
 
 /* Ethernet MAC resources -------------------------------------------------- */
diff --git a/arch/sh/kernel/cpu/sh4/setup-stx7200.c b/arch/sh/kernel/cpu/sh4/setup-stx7200.c
index c541443..c371cc7 100644
--- a/arch/sh/kernel/cpu/sh4/setup-stx7200.c
+++ b/arch/sh/kernel/cpu/sh4/setup-stx7200.c
@@ -12,6 +12,7 @@
 #include <linux/init.h>
 #include <linux/serial.h>
 #include <linux/io.h>
+#include <linux/i2c.h>
 #include <linux/stm/emi.h>
 #include <linux/stm/soc.h>
 #include <linux/stm/soc_init.h>
@@ -532,6 +533,11 @@ void __init stx7200_configure_ssc(struct plat_ssc_data *data)
 		platform_device_register(&stssc_devices[i]);
         }
 
+	/* I2C buses number reservation (to prevent any hot-plug device
+	 * from using it) */
+#ifdef CONFIG_I2C_BOARDINFO
+	i2c_register_board_info(num_i2c - 1, NULL, 0);
+#endif
 }
 
 /* Ethernet MAC resources -------------------------------------------------- */
diff --git a/drivers/i2c/busses/i2c-st40-pio.c b/drivers/i2c/busses/i2c-st40-pio.c
index 3779782..11e4941 100644
--- a/drivers/i2c/busses/i2c-st40-pio.c
+++ b/drivers/i2c/busses/i2c-st40-pio.c
@@ -40,21 +40,24 @@
 static void bit_st40_pio_setscl(void *data, int state)
 {
 	struct platform_device *pdev = (struct platform_device *)data;
-	struct ssc_pio_t *pio_info = (struct ssc_pio_t *)pdev->dev.platform_data;
+	struct ssc_pio_t *pio_info =
+		(struct ssc_pio_t *)pdev->dev.platform_data;
 	stpio_set_pin(pio_info->clk, state);
 }
 
 static void bit_st40_pio_setsda(void *data, int state)
 {
 	struct platform_device *pdev = (struct platform_device *)data;
-	struct ssc_pio_t *pio_info = (struct ssc_pio_t *)pdev->dev.platform_data;
+	struct ssc_pio_t *pio_info =
+		(struct ssc_pio_t *)pdev->dev.platform_data;
 	stpio_set_pin(pio_info->sdout, state);
 }
 
 static int bit_st40_pio_getscl(void *data)
 {
 	struct platform_device *pdev = (struct platform_device *)data;
-	struct ssc_pio_t *pio_info = (struct ssc_pio_t *)pdev->dev.platform_data;
+	struct ssc_pio_t *pio_info =
+		(struct ssc_pio_t *)pdev->dev.platform_data;
 	return stpio_get_pin(pio_info->clk);
 }
 
@@ -68,69 +71,74 @@ static int bit_st40_pio_getsda(void *data)
 static int __init i2c_st40_probe(struct platform_device *pdev)
 {
 	struct ssc_pio_t *pio_info =
-			(struct ssc_pio_t *)pdev->dev.platform_data;
-
-	struct i2c_adapter 	 *i2c_bus;
+		(struct ssc_pio_t *)pdev->dev.platform_data;
+	struct i2c_adapter *i2c_bus;
 	struct i2c_algo_bit_data *algo;
 
-	i2c_bus = devm_kzalloc(&pdev->dev,sizeof(struct i2c_adapter),GFP_KERNEL);
+	i2c_bus = devm_kzalloc(&pdev->dev, sizeof(struct i2c_adapter),
+			GFP_KERNEL);
 	if (!i2c_bus)
 		return -1;
 
-	algo    = devm_kzalloc(&pdev->dev,sizeof(struct i2c_algo_bit_data),GFP_KERNEL);
+	algo = devm_kzalloc(&pdev->dev, sizeof(struct i2c_algo_bit_data),
+			GFP_KERNEL);
 	if (!algo)
 		return -1;
 
-	pio_info->clk = stpio_request_pin(pio_info->pio_port,pio_info->pio_pin[0],
-				"I2C Clock", STPIO_BIDIR);
+	pio_info->clk = stpio_request_pin(pio_info->pio_port,
+			pio_info->pio_pin[0], "I2C Clock", STPIO_BIDIR);
 
-	if (!pio_info->clk){
-		printk(KERN_ERR NAME"Faild to clk pin allocation\n");
+	if (!pio_info->clk) {
+		printk(KERN_ERR NAME"Failed to clk pin allocation\n");
 		return -1;
 	}
 	pio_info->sdout = stpio_request_pin(pio_info->pio_port,pio_info->pio_pin[1],
-				"I2C Data", STPIO_BIDIR);
+			"I2C Data", STPIO_BIDIR);
 	if (!pio_info->sdout){
-		printk(KERN_ERR NAME"Faild to sda pin allocation\n");
+		printk(KERN_ERR NAME"Failed to sda pin allocation\n");
 		return -1;
 	}
 
 	stpio_set_pin(pio_info->clk, 1);
-        stpio_set_pin(pio_info->sdout, 1);
-
-	printk(KERN_INFO NAME ": allocated pin (%d,%d) for scl (0x%p)\n",
-		pio_info->pio_port, pio_info->pio_pin[0], pio_info->clk );
-	printk(KERN_INFO NAME ": allocated pin (%d,%d) for sda (0x%p)\n",
-		pio_info->pio_port, pio_info->pio_pin[1], pio_info->sdout);
-
-	sprintf(i2c_bus->name,"i2c_pio_%d",pdev->id);;
-	i2c_bus->id    = I2C_HW_B_ST40_PIO;
+	stpio_set_pin(pio_info->sdout, 1);
+
+	printk(KERN_INFO NAME": allocated pin (%d,%d) for scl (0x%p)\n",
+			pio_info->pio_port, pio_info->pio_pin[0],
+			pio_info->clk);
+	printk(KERN_INFO NAME": allocated pin (%d,%d) for sda (0x%p)\n",
+			pio_info->pio_port, pio_info->pio_pin[1],
+			pio_info->sdout);
+
+	sprintf(i2c_bus->name, "i2c_pio_%d", pdev->id);
+	i2c_bus->nr = pdev->id;
+	i2c_bus->id = I2C_HW_B_ST40_PIO;
 	i2c_bus->algo_data = algo;
 	i2c_bus->dev.parent = &pdev->dev;
 
-	algo->data   = pdev;
-        algo->setsda = bit_st40_pio_setsda;
-        algo->setscl = bit_st40_pio_setscl;
-        algo->getsda = bit_st40_pio_getsda;
-        algo->getscl = bit_st40_pio_getscl;
-        algo->udelay = 5;
-        algo->timeout= HZ;
-
-	pdev->dev.driver_data = (void*)i2c_bus;
-	if (i2c_bit_add_bus(i2c_bus)<0){
-		printk(KERN_ERR NAME "The I2C Core refuses the i2c-pio adapter\n");
+	algo->data = pdev;
+	algo->setsda = bit_st40_pio_setsda;
+	algo->setscl = bit_st40_pio_setscl;
+	algo->getsda = bit_st40_pio_getsda;
+	algo->getscl = bit_st40_pio_getscl;
+	algo->udelay = 5;
+	algo->timeout = HZ;
+
+	pdev->dev.driver_data = (void *)i2c_bus;
+	if (i2c_bit_add_numbered_bus(i2c_bus) < 0) {
+		printk(KERN_ERR NAME "The I2C Core refuses the i2c-pio "
+				"adapter\n");
 		return -1;
 	}
 
-        return 0;
+	return 0;
 }
 
 static int i2c_st40_remove(struct platform_device *pdev)
 {
 	struct ssc_pio_t *pio_info =
-			(struct ssc_pio_t *)pdev->dev.platform_data;
-
-	struct i2c_adapter *i2c_bus = (struct i2c_adapter*)pdev->dev.driver_data;;
+		(struct ssc_pio_t *)pdev->dev.platform_data;
+	struct i2c_adapter *i2c_bus =
+		(struct i2c_adapter *)pdev->dev.driver_data;
 	struct i2c_algo_bit_data *algo = i2c_bus->algo_data;
 
 	i2c_del_adapter(i2c_bus);
@@ -143,9 +151,9 @@ static int i2c_st40_remove(struct platform_device *pdev)
 }
 
 static struct platform_driver i2c_sw_driver = {
-        .driver.name = "i2c_st",
-        .driver.owner = THIS_MODULE,
-        .probe = i2c_st40_probe,
+	.driver.name = "i2c_st",
+	.driver.owner = THIS_MODULE,
+	.probe = i2c_st40_probe,
 	.remove= i2c_st40_remove,
 };
 
@@ -153,7 +161,7 @@ static int __init i2c_st40_pio_init(void)
 {
 	int i;
 
-	printk(KERN_INFO NAME ": ST40 PIO based I2C Driver\n");
+	printk(KERN_INFO NAME": ST40 PIO based I2C Driver\n");
 
 	platform_driver_register(&i2c_sw_driver);
 
@@ -171,4 +179,3 @@ MODULE_LICENSE("GPL");
 
 module_init(i2c_st40_pio_init);
 module_exit(i2c_st40_pio_exit);
-
diff --git a/drivers/i2c/busses/i2c-stm.c b/drivers/i2c/busses/i2c-stm.c
index 653c948..1ac6750 100644
--- a/drivers/i2c/busses/i2c-stm.c
+++ b/drivers/i2c/busses/i2c-stm.c
@@ -789,11 +789,12 @@ static int __init iic_stm_probe(struct platform_device *pdev)
 	i2c_stm->adapter.timeout = 2;
 	i2c_stm->adapter.class   = I2C_CLASS_ALL;
 	sprintf(i2c_stm->adapter.name,"i2c-hw-%d",pdev->id);
+	i2c_stm->adapter.nr = pdev->id;
 	i2c_stm->adapter.algo = &iic_stm_algo;
 	i2c_stm->adapter.dev.parent = &(pdev->dev);
 	iic_stm_setup_timing(i2c_stm,clk_get_rate(clk_get(NULL,"comms_clk")));
 	init_waitqueue_head(&(i2c_stm->wait_queue));
-	if (i2c_add_adapter(&(i2c_stm->adapter)) < 0) {
+	if (i2c_add_numbered_adapter(&(i2c_stm->adapter)) < 0) {
 		printk(KERN_ERR
 		       "%s: The I2C Core refuses the i2c/stm adapter\n",__FUNCTION__);
 		return -ENODEV;
