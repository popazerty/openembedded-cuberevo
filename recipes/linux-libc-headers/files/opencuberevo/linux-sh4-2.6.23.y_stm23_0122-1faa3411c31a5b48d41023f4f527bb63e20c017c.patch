From 1faa3411c31a5b48d41023f4f527bb63e20c017c Mon Sep 17 00:00:00 2001
From: Francesco VIRLINZI <francesco.virlinzi@st.com>
Date: Fri, 2 Oct 2009 15:34:26 +0200
Subject: [PATCH] stm: clk: Update the stx7105 to the new clk frmwk

This patch updates the STX7105 clock implementation due to the new clock
framework

Signed-off-by: Francesco Virlinzi <francesco.virlinzi@st.com>
---
 arch/sh/kernel/cpu/sh4/clock-stx7105.c |  165 +++++++++++++++++++-------------
 arch/sh/kernel/cpu/sh4/clock-stx7105.h |    4 -
 2 files changed, 97 insertions(+), 72 deletions(-)

diff --git a/arch/sh/kernel/cpu/sh4/clock-stx7105.c b/arch/sh/kernel/cpu/sh4/clock-stx7105.c
index bb35569..6891b3a 100755
--- a/arch/sh/kernel/cpu/sh4/clock-stx7105.c
+++ b/arch/sh/kernel/cpu/sh4/clock-stx7105.c
@@ -22,7 +22,7 @@
 
 #include <linux/clk.h>
 #include <linux/delay.h>
-#include <asm/clock.h>
+#include <linux/stm/clk.h>
 #include <linux/pm.h>
 #include <linux/io.h>
 #include "clock-stx7105.h"
@@ -66,9 +66,9 @@ static int clkgene_init(clk_t *clk_p);
 /* Per boards top input clocks. mb680 currently identical */
 static U32 SYSCLKIN = 30;	/* osc */
 static U32 SYSCLKALT = 30;	/* Alternate  osc */
-typedef struct fsyn_regs {
+struct fsyn_regs {
 	unsigned long md, pe, sdiv, prog;
-} fsyn_regs_t;
+};
 
 static struct fsyn_regs clkgenb_regs[] = {
 	{CKGB_FS0_MD1, CKGB_FS0_PE1, CKGB_FS0_SDIV1, CKGB_FS0_EN_PRG1},
@@ -123,7 +123,7 @@ REGISTER_OPS(Top,
 	NULL,	/* No measure function */
 	NULL	/* No observation point */
 );
-REGISTER_OPS(ClockGenA,
+REGISTER_OPS(clkgena,
 	     "clockgen A",
 	     clkgena_init,
 	     clkgena_set_parent,
@@ -135,7 +135,7 @@ REGISTER_OPS(ClockGenA,
 	     clkgena_get_measure,
 	     "TRIGGEROUT"
 );
-REGISTER_OPS(ClockGenB,
+REGISTER_OPS(clkgenb,
 	     "clockgen B/Video",
 	     clkgenb_init,
 	     clkgenb_set_parent,
@@ -147,7 +147,7 @@ REGISTER_OPS(ClockGenB,
 	     clkgena_get_measure,
 	     "SYSCLKOUT"
 );
-REGISTER_OPS(ClockGenC,
+REGISTER_OPS(clkgenc,
 	     "clockgen C/Audio",
 	     clkgenc_init,
 	     clkgenc_set_parent,
@@ -158,7 +158,7 @@ REGISTER_OPS(ClockGenC,
 	     NULL,
 	     NULL,
 	     "PIO13[7]");
-REGISTER_OPS(ClockGenD,
+REGISTER_OPS(clkgend,
 	     "clockgen D/LMI",
 	     clkgend_init,
 	     clkgend_set_parent,
@@ -171,6 +171,19 @@ REGISTER_OPS(ClockGenD,
 	     "PIO6[2]"
 );
 
+REGISTER_OPS(clkgene,
+	"USB",
+	clkgene_init,
+	clkgene_set_parent,
+	NULL,
+	clkgene_recalc,
+	NULL,
+	NULL,
+	NULL,
+	NULL,	/* No measure function */
+	NULL	/* No observation point */
+);
+
 /* Physical clocks description */
 clk_t clk_clocks[] = {
 	/*	    ClkID	       Ops	 Nominalfreq   Flags */
@@ -182,77 +195,79 @@ clk_t clk_clocks[] = {
 		     CLK_RATE_PROPAGATES | CLK_ALWAYS_ENABLED),
 
 	/* Clockgen A */
-	REGISTER_CLK(CLKA_REF, &ClockGenA, 0,
+	REGISTER_CLK(CLKA_REF, &clkgena, 0,
 		     CLK_RATE_PROPAGATES | CLK_ALWAYS_ENABLED),
-	REGISTER_CLK(CLKA_PLL0HS, &ClockGenA, 900000000, CLK_RATE_PROPAGATES),
-	REGISTER_CLK(CLKA_PLL0LS, &ClockGenA, 450000000, CLK_RATE_PROPAGATES),
-	REGISTER_CLK(CLKA_PLL1, &ClockGenA, 800000000, CLK_RATE_PROPAGATES),
-	REGISTER_CLK(CLKA_OSC, &ClockGenA, 0, CLK_RATE_PROPAGATES),
-
-	REGISTER_CLK(CLKA_IC_STNOC, &ClockGenA, 400000000, 0),
-	REGISTER_CLK(CLKA_FDMA0, &ClockGenA, 400000000, 0),
-	REGISTER_CLK(CLKA_FDMA1, &ClockGenA, 400000000, 0),
-	REGISTER_CLK(CLKA_ST40_ICK, &ClockGenA, 450000000, 0),
-	REGISTER_CLK(CLKA_IC_IF_100, &ClockGenA, 100000000, 0),
-	REGISTER_CLK(CLKA_LX_DMU_CPU, &ClockGenA, 450000000, 0),
-	REGISTER_CLK(CLKA_LX_AUD_CPU, &ClockGenA, 450000000, 0),
-	REGISTER_CLK(CLKA_IC_BDISP_200, &ClockGenA, 200000000, 0),
-	REGISTER_CLK(CLKA_IC_DISP_200, &ClockGenA, 200000000, 0),
-	REGISTER_CLK(CLKA_IC_TS_200, &ClockGenA, 200000000, 0),
-	REGISTER_CLK(CLKA_DISP_PIPE_200, &ClockGenA, 200000000, 0),
-	REGISTER_CLK(CLKA_BLIT_PROC, &ClockGenA, 266666666, 0),
-	REGISTER_CLK(CLKA_IC_DELTA_200, &ClockGenA, 266666666, 0),
-	REGISTER_CLK(CLKA_ETH_PHY, &ClockGenA, 25000000, 0),
-	REGISTER_CLK(CLKA_PCI, &ClockGenA, 66666666, 0),
-	REGISTER_CLK(CLKA_EMI_MASTER, &ClockGenA, 100000000, 0),
-	REGISTER_CLK(CLKA_IC_COMPO_200, &ClockGenA, 200000000, 0),
-	REGISTER_CLK(CLKA_IC_IF_200, &ClockGenA, 200000000, 0),
+	REGISTER_CLK(CLKA_PLL0HS, &clkgena, 900000000, CLK_RATE_PROPAGATES),
+	REGISTER_CLK(CLKA_PLL0LS, &clkgena, 450000000, CLK_RATE_PROPAGATES),
+	REGISTER_CLK(CLKA_PLL1, &clkgena, 800000000, CLK_RATE_PROPAGATES),
+	REGISTER_CLK(CLKA_OSC, &clkgena, 0, CLK_RATE_PROPAGATES),
+
+	REGISTER_CLK(CLKA_IC_STNOC, &clkgena, 400000000, 0),
+	REGISTER_CLK(CLKA_FDMA0, &clkgena, 400000000, 0),
+	REGISTER_CLK(CLKA_FDMA1, &clkgena, 400000000, 0),
+	REGISTER_CLK(CLKA_ST40_ICK, &clkgena, 450000000, 0),
+	REGISTER_CLK(CLKA_IC_IF_100, &clkgena, 100000000, 0),
+	REGISTER_CLK(CLKA_LX_DMU_CPU, &clkgena, 450000000, 0),
+	REGISTER_CLK(CLKA_LX_AUD_CPU, &clkgena, 450000000, 0),
+	REGISTER_CLK(CLKA_IC_BDISP_200, &clkgena, 200000000, 0),
+	REGISTER_CLK(CLKA_IC_DISP_200, &clkgena, 200000000, 0),
+	REGISTER_CLK(CLKA_IC_TS_200, &clkgena, 200000000, 0),
+	REGISTER_CLK(CLKA_DISP_PIPE_200, &clkgena, 200000000, 0),
+	REGISTER_CLK(CLKA_BLIT_PROC, &clkgena, 266666666, 0),
+	REGISTER_CLK(CLKA_IC_DELTA_200, &clkgena, 266666666, 0),
+	REGISTER_CLK(CLKA_ETH_PHY, &clkgena, 25000000, 0),
+	REGISTER_CLK(CLKA_PCI, &clkgena, 66666666, 0),
+	REGISTER_CLK(CLKA_EMI_MASTER, &clkgena, 100000000, 0),
+	REGISTER_CLK(CLKA_IC_COMPO_200, &clkgena, 200000000, 0),
+	REGISTER_CLK(CLKA_IC_IF_200, &clkgena, 200000000, 0),
 
 	/* Clockgen B */
-	REGISTER_CLK(CLKB_REF, &ClockGenB, 0,
+	REGISTER_CLK(CLKB_REF, &clkgenb, 0,
 		     CLK_RATE_PROPAGATES | CLK_ALWAYS_ENABLED),
-	REGISTER_CLK(CLKB_FS0, &ClockGenB, 0, CLK_RATE_PROPAGATES),
-	REGISTER_CLK(CLKB_FS0_CH1, &ClockGenB, 0, CLK_RATE_PROPAGATES),
-	REGISTER_CLK(CLKB_FS0_CH2, &ClockGenB, 0, CLK_RATE_PROPAGATES),
-	REGISTER_CLK(CLKB_FS0_CH3, &ClockGenB, 0, CLK_RATE_PROPAGATES),
-	REGISTER_CLK(CLKB_FS0_CH4, &ClockGenB, 0, CLK_RATE_PROPAGATES),
-	REGISTER_CLK(CLKB_FS1, &ClockGenB, 0, CLK_RATE_PROPAGATES),
-	REGISTER_CLK(CLKB_FS1_CH1, &ClockGenB, 0, CLK_RATE_PROPAGATES),
-	REGISTER_CLK(CLKB_FS1_CH2, &ClockGenB, 0, CLK_RATE_PROPAGATES),
-	REGISTER_CLK(CLKB_FS1_CH3, &ClockGenB, 0, CLK_RATE_PROPAGATES),
-	REGISTER_CLK(CLKB_FS1_CH4, &ClockGenB, 0, CLK_RATE_PROPAGATES),
-
-	REGISTER_CLK(CLKB_TMDS_HDMI, &ClockGenB, 0, 0),
-	REGISTER_CLK(CLKB_656_1, &ClockGenB, 0, 0),
-	REGISTER_CLK(CLKB_PIX_HD, &ClockGenB, 0, 0),
-	REGISTER_CLK(CLKB_DISP_HD, &ClockGenB, 0, 0),
-	REGISTER_CLK(CLKB_656, &ClockGenB, 0, 0),
-	REGISTER_CLK(CLKB_GDP3, &ClockGenB, 0, 0),
-	REGISTER_CLK(CLKB_DISP_ID, &ClockGenB, 0, CLK_RATE_PROPAGATES),
-	REGISTER_CLK(CLKB_PIX_SD, &ClockGenB, 0, 0),
-	REGISTER_CLK(CLKB_DVP, &ClockGenB, 0, 0),
-	REGISTER_CLK(CLKB_PIX_FROM_DVP, &ClockGenB, 0, 0),
-
-	REGISTER_CLK(CLKB_DSS, &ClockGenB, 0, 0),
-	REGISTER_CLK(CLKB_DAA, &ClockGenB, 0, 0),
-	REGISTER_CLK(CLKB_PP, &ClockGenB, 0, 0),
-	REGISTER_CLK(CLKB_LPC, &ClockGenB, 0, 0),
-
-	REGISTER_CLK(CLKB_SPARE12, &ClockGenB, 0, 0),
+	REGISTER_CLK(CLKB_FS0, &clkgenb, 0, CLK_RATE_PROPAGATES),
+	REGISTER_CLK(CLKB_FS0_CH1, &clkgenb, 0, CLK_RATE_PROPAGATES),
+	REGISTER_CLK(CLKB_FS0_CH2, &clkgenb, 0, CLK_RATE_PROPAGATES),
+	REGISTER_CLK(CLKB_FS0_CH3, &clkgenb, 0, CLK_RATE_PROPAGATES),
+	REGISTER_CLK(CLKB_FS0_CH4, &clkgenb, 0, CLK_RATE_PROPAGATES),
+	REGISTER_CLK(CLKB_FS1, &clkgenb, 0, CLK_RATE_PROPAGATES),
+	REGISTER_CLK(CLKB_FS1_CH1, &clkgenb, 0, CLK_RATE_PROPAGATES),
+	REGISTER_CLK(CLKB_FS1_CH2, &clkgenb, 0, CLK_RATE_PROPAGATES),
+	REGISTER_CLK(CLKB_FS1_CH3, &clkgenb, 0, CLK_RATE_PROPAGATES),
+	REGISTER_CLK(CLKB_FS1_CH4, &clkgenb, 0, CLK_RATE_PROPAGATES),
+
+	REGISTER_CLK(CLKB_TMDS_HDMI, &clkgenb, 0, 0),
+	REGISTER_CLK(CLKB_656_1, &clkgenb, 0, 0),
+	REGISTER_CLK(CLKB_PIX_HD, &clkgenb, 0, 0),
+	REGISTER_CLK(CLKB_DISP_HD, &clkgenb, 0, 0),
+	REGISTER_CLK(CLKB_656, &clkgenb, 0, 0),
+	REGISTER_CLK(CLKB_GDP3, &clkgenb, 0, 0),
+	REGISTER_CLK(CLKB_DISP_ID, &clkgenb, 0, CLK_RATE_PROPAGATES),
+	REGISTER_CLK(CLKB_PIX_SD, &clkgenb, 0, 0),
+	REGISTER_CLK(CLKB_DVP, &clkgenb, 0, 0),
+	REGISTER_CLK(CLKB_PIX_FROM_DVP, &clkgenb, 0, 0),
+
+	REGISTER_CLK(CLKB_PP, &clkgenb, 0, 0),
+	REGISTER_CLK(CLKB_LPC, &clkgenb, 0, 0),
+	REGISTER_CLK(CLKB_DSS, &clkgenb, 0, 0),
+	REGISTER_CLK(CLKB_DAA, &clkgenb, 0, 0),
+
+	REGISTER_CLK(CLKB_SPARE12, &clkgenb, 0, 0),
 
 	/* Clockgen C (AUDIO) */
-	REGISTER_CLK(CLKC_REF, &ClockGenC, 0,
+	REGISTER_CLK(CLKC_REF, &clkgenc, 0,
 		     CLK_RATE_PROPAGATES | CLK_ALWAYS_ENABLED),
-	REGISTER_CLK(CLKC_FS0, &ClockGenC, 0, CLK_RATE_PROPAGATES),
-	REGISTER_CLK(CLKC_FS0_CH1, &ClockGenC, 0, 0),
-	REGISTER_CLK(CLKC_FS0_CH2, &ClockGenC, 0, 0),
-	REGISTER_CLK(CLKC_FS0_CH3, &ClockGenC, 0, 0),
-	REGISTER_CLK(CLKC_FS0_CH4, &ClockGenC, 0, 0),
+	REGISTER_CLK(CLKC_FS0, &clkgenc, 0, CLK_RATE_PROPAGATES),
+	REGISTER_CLK(CLKC_FS0_CH1, &clkgenc, 0, 0),
+	REGISTER_CLK(CLKC_FS0_CH2, &clkgenc, 0, 0),
+	REGISTER_CLK(CLKC_FS0_CH3, &clkgenc, 0, 0),
+	REGISTER_CLK(CLKC_FS0_CH4, &clkgenc, 0, 0),
 
 	/* Clockgen D (LMI) */
-	REGISTER_CLK(CLKD_REF, &ClockGenD, 30000000,
+	REGISTER_CLK(CLKD_REF, &clkgend, 30000000,
 		     CLK_RATE_PROPAGATES | CLK_ALWAYS_ENABLED),
-	REGISTER_CLK(CLKD_LMI2X, &ClockGenD, 800000000, 0),
+	REGISTER_CLK(CLKD_LMI2X, &clkgend, 800000000, 0),
+	/* Clockgen E (USB), not really a clockgen */
+	REGISTER_CLK(CLKE_REF, &clkgene, 30000000, CLK_ALWAYS_ENABLED)
 
 /*
  * Not used in Linux
@@ -264,6 +279,13 @@ GENERIC_LINUX_CLKS(clk_clocks[CLKA_ST40_ICK],	/* sh4_clk parent    */
 		   clk_clocks[CLKA_IC_IF_100],	/* module_clk parent */
 		   clk_clocks[CLKA_IC_IF_100]);	/* comms_clk parent  */
 
+SYSCONF(1, 1, 0, 1);
+SYSCONF(2, 6, 0, 0);
+SYSCONF(2, 11, 1, 8);
+SYSCONF(2, 11, 9, 11);
+SYSCONF(2, 40, 0, 1);
+SYSCONF(2, 40, 2, 3);
+
 /*
  * The Linux clk_init function
  */
@@ -271,6 +293,13 @@ int __init clk_init(void)
 {
 	int i;
 
+	SYSCONF_CLAIM(1, 1, 0, 1);
+	SYSCONF_CLAIM(2, 6, 0, 0);
+	SYSCONF_CLAIM(2, 11, 1, 8);
+	SYSCONF_CLAIM(2, 11, 9, 11);
+	SYSCONF_CLAIM(2, 40, 0, 1);
+	SYSCONF_CLAIM(2, 40, 2, 3);
+
 	for (i = 0; i < ARRAY_SIZE(clk_clocks); ++i)
 		if (clk_clocks[i].name && !clk_register(&clk_clocks[i]))
 			clk_enable(&clk_clocks[i]);
diff --git a/arch/sh/kernel/cpu/sh4/clock-stx7105.h b/arch/sh/kernel/cpu/sh4/clock-stx7105.h
index 363fb61..42d1768 100755
--- a/arch/sh/kernel/cpu/sh4/clock-stx7105.h
+++ b/arch/sh/kernel/cpu/sh4/clock-stx7105.h
@@ -91,8 +91,4 @@ typedef enum
     /* Clockgen E = USB PHY */
     CLKE_REF,	   /* Clockgen E reference clock */
 
-/*
- * Not used in Linux
- *  CLK_LAST	    * Keep this as last clock ID. Used to get number of clocks
- */
 } clk_id_t;
-- 
1.6.0.6

