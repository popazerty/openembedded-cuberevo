From c5d2cf3c3b621a878784c612df6507aa8f6c5616 Mon Sep 17 00:00:00 2001
From: Pawel MOLL <pawel.moll@st.com>
Date: Wed, 29 Oct 2008 16:50:09 +0000
Subject: [PATCH] mm_bpa2: Added BPA2 allocation trace mechanism

When CONFIG_BPA2_ALLOC_TRACE is defined, the file and line number
of a allocation function call will be recorded and available via
the /proc/bpa2

Signed-off-by: Pawel Moll <pawel.moll@st.com>
Signed-off-by: Stuart Menefy <stuart.menefy@st.com>
---
 include/linux/bpa2.h |   24 +++++++++++++++++++++---
 mm/Kconfig           |   11 ++++++++++-
 mm/bpa2.c            |   30 +++++++++++++++++++++++++-----
 3 files changed, 56 insertions(+), 9 deletions(-)

diff --git a/include/linux/bpa2.h b/include/linux/bpa2.h
index dccee47..3f495cb 100644
--- a/include/linux/bpa2.h
+++ b/include/linux/bpa2.h
@@ -36,7 +36,16 @@ struct bpa2_part;
 void bpa2_init(struct bpa2_partition_desc* partdescs, int nparts);
 struct bpa2_part* bpa2_find_part(const char* name);
 int bpa2_low_part(struct bpa2_part* part);
-unsigned long bpa2_alloc_pages(struct bpa2_part *part, int count, int align, int priority);
+#if defined(CONFIG_BPA2_ALLOC_TRACE)
+#define bpa2_alloc_pages(part, count, align, priority) \
+		__bpa2_alloc_pages(part, count, align, priority, \
+		__FILE__, __LINE__)
+#else
+#define bpa2_alloc_pages(part, count, align, priority) \
+		__bpa2_alloc_pages(part, count, align, priority, NULL, 0)
+#endif
+unsigned long __bpa2_alloc_pages(struct bpa2_part *part, int count, int align,
+	       int priority, const char *trace_file, int trace_line);
 void bpa2_free_pages(struct bpa2_part *part, unsigned long base);
 
 
@@ -53,8 +62,17 @@ void bpa2_free_pages(struct bpa2_part *part, unsigned long base);
 		bigphysarea_free_pages(addr)
 
 /* New(er) interface */
-caddr_t	bigphysarea_alloc_pages(int count, int align, int priority);
-void	bigphysarea_free_pages(caddr_t base);
+#if defined(CONFIG_BPA2_ALLOC_TRACE)
+#define bigphysarea_alloc_pages(count, align, priority) \
+		__bigphysarea_alloc_pages(count, align, priority, \
+		__FILE__, __LINE__)
+#else
+#define bigphysarea_alloc_pages(count, align, priority) \
+		__bigphysarea_alloc_pages(count, align, priority, NULL, 0)
+#endif
+caddr_t	__bigphysarea_alloc_pages(int count, int align, int priority,
+		const char *trace_file, int trace_line);
+void bigphysarea_free_pages(caddr_t base);
 
 /* low level interface */
 void     bigphysarea_memory(unsigned long *base, unsigned long *size);
diff --git a/mm/Kconfig b/mm/Kconfig
index cc74c5a..ccd71cb 100644
--- a/mm/Kconfig
+++ b/mm/Kconfig
@@ -180,7 +180,7 @@ config VIRT_TO_BUS
 
 config BPA2
 	bool "Big Physical Area version 2"
-	---help---
+	help
 	  Enables kernel support for reserving large areas of physical
 	  memory at boot-time for use by certain device drivers (such as
 	  video framegrabbers, etc.) which require it. This is backwards
@@ -188,3 +188,12 @@ config BPA2
 	  but with extensions for multiple areas. It can also be configured
 	  from the architecture specific setup code.
 
+config BPA2_ALLOC_TRACE
+	bool "Trace BPA2 allocations"
+	depends on BPA2
+	depends on PROC_FS
+	default n
+	help
+	  Enables tracing of BPA2 allocations - /proc/bpa2 will list
+	  all the allocations together with information about a code which
+	  called the allocator function.
diff --git a/mm/bpa2.c b/mm/bpa2.c
index cf11f36..21c999b 100644
--- a/mm/bpa2.c
+++ b/mm/bpa2.c
@@ -60,6 +60,10 @@ struct range {
 	struct range *next;
 	unsigned long base;			/* base of allocated block */
 	unsigned long size;			/* size in bytes */
+#if defined(CONFIG_BPA2_ALLOC_TRACE)
+	const char *trace_file;
+	int trace_line;
+#endif
 };
 
 struct bpa2_part {
@@ -373,7 +377,8 @@ EXPORT_SYMBOL(bpa2_low_part);
  *
  * This function may not be called from an interrupt.
  */
-unsigned long bpa2_alloc_pages(struct bpa2_part* bp, int count, int align, int priority)
+unsigned long __bpa2_alloc_pages(struct bpa2_part *bp, int count, int align,
+		int priority, const char *trace_file, int trace_line)
 {
 	struct range *range, **range_ptr, *new_range, *align_range, *used_range;
 	unsigned long aligned_base=0;
@@ -446,6 +451,11 @@ unsigned long bpa2_alloc_pages(struct bpa2_part* bp, int count, int align, int p
 		*range_ptr = range->next;
 		used_range = range;
 	}
+#if defined(CONFIG_BPA2_ALLOC_TRACE)
+	/* Save the caller data */
+	used_range->trace_file = trace_file;
+	used_range->trace_line = trace_line;
+#endif
 	/*
 	 * Insert block into used list
 	 */
@@ -463,7 +473,7 @@ fail:
 
 	return result;
 }
-EXPORT_SYMBOL(bpa2_alloc_pages);
+EXPORT_SYMBOL(__bpa2_alloc_pages);
 
 /**
  * bpa2_free_pages - free pages allocated from a bpa2 partition
@@ -540,20 +550,25 @@ void bpa2_free_pages(struct bpa2_part* bp, unsigned long base)
 }
 EXPORT_SYMBOL(bpa2_free_pages);
 
-caddr_t	bigphysarea_alloc_pages(int count, int align, int priority)
+
+
+caddr_t	__bigphysarea_alloc_pages(int count, int align, int priority,
+		const char *trace_file, int trace_line)
 {
 	unsigned long addr;
 
 	if (! bpa2_bigphysarea_part)
 		return NULL;
 
-	addr = bpa2_alloc_pages(bpa2_bigphysarea_part, count, align, priority);
+	addr = __bpa2_alloc_pages(bpa2_bigphysarea_part, count,
+			align, priority, trace_file, trace_line);
+
 	if (addr == 0)
 		return NULL;
 
 	return phys_to_virt(addr);
 }
-EXPORT_SYMBOL(bigphysarea_alloc_pages);
+EXPORT_SYMBOL(__bigphysarea_alloc_pages);
 
 void bigphysarea_free_pages(caddr_t mapped_addr)
 {
@@ -655,6 +670,11 @@ static int bpa2_seq_show(struct seq_file *s, void *v)
 				range = range->next) {
 			seq_printf(s, "- %lu B at 0x%.8lx",
 					range->size, range->base);
+#if defined(CONFIG_BPA2_ALLOC_TRACE)
+			if (range->trace_file)
+				seq_printf(s, " (%s:%d)", range->trace_file,
+						range->trace_line);
+#endif
 			seq_printf(s, "\n");
 		}
 	}
-- 
1.5.3.6

