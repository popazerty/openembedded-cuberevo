Add a set_type method to the ILC interrupt type. This allows us to
move the interrupt level setting from the generic ILC code into the
board specific sources, where they should have been in the first place.

Signed-off-by: Stuart Menefy <stuart.menefy@st.com>
Index: linux-2.6.23-stm/arch/sh/boards/st/mb519/setup.c
===================================================================
--- linux-2.6.23-stm.orig/arch/sh/boards/st/mb519/setup.c
+++ linux-2.6.23-stm/arch/sh/boards/st/mb519/setup.c
@@ -229,6 +229,10 @@ static void __init mb519_init_irq(void)
 {
 	epld_early_init(&epld_device);
 
+	/* Mark Ethernet PHY as active low */
+	set_irq_type(ILC_IRQ(93), IRQ_TYPE_LEVEL_LOW);
+	set_irq_type(ILC_IRQ(95), IRQ_TYPE_LEVEL_LOW);
+
 #if defined(CONFIG_SH_ST_STEM)
 	/* The off chip interrupts on the mb519 are a mess. The external
 	 * EPLD priority encodes them, but because they pass through the ILC3
Index: linux-2.6.23-stm/arch/sh/boards/st/mb680/setup.c
===================================================================
--- linux-2.6.23-stm.orig/arch/sh/boards/st/mb680/setup.c
+++ linux-2.6.23-stm/arch/sh/boards/st/mb680/setup.c
@@ -143,6 +143,11 @@ static void __iomem *mb680_ioport_map(un
 
 static void __init mb680_init_irq(void)
 {
+#ifndef CONFIG_SH_ST_MB705
+	/* Configure STEM interrupts as active low. */
+	set_irq_type(ILC_EXT_IRQ(1), IRQ_TYPE_LEVEL_LOW);
+	set_irq_type(ILC_EXT_IRQ(2), IRQ_TYPE_LEVEL_LOW);
+#endif
 }
 
 struct sh_machine_vector mv_mb680 __initmv = {
Index: linux-2.6.23-stm/arch/sh/kernel/cpu/irq/st40_ilc.h
===================================================================
--- linux-2.6.23-stm.orig/arch/sh/kernel/cpu/irq/st40_ilc.h
+++ linux-2.6.23-stm/arch/sh/kernel/cpu/irq/st40_ilc.h
@@ -42,5 +42,9 @@ extern void __iomem *ilc_base;
 
 #define ILC_SET_TRIGMODE(_int, _mod) ctrl_outl((_mod), ILC_TRIGMODE_REG(_int))
 
+#define ILC_TRIGGERMODE_NONE	0
 #define ILC_TRIGGERMODE_HIGH	1
 #define ILC_TRIGGERMODE_LOW	2
+#define ILC_TRIGGERMODE_RISING	3
+#define ILC_TRIGGERMODE_FALLING	4
+#define ILC_TRIGGERMODE_ANY	5
Index: linux-2.6.23-stm/arch/sh/kernel/cpu/irq/st40_ilc_stx7200.c
===================================================================
--- linux-2.6.23-stm.orig/arch/sh/kernel/cpu/irq/st40_ilc_stx7200.c
+++ linux-2.6.23-stm/arch/sh/kernel/cpu/irq/st40_ilc_stx7200.c
@@ -144,21 +144,6 @@ static unsigned int startup_ilc_irq(unsi
 	ILC_SET_PRI(irq_offset, priority);
 #endif
 
-	ILC_SET_TRIGMODE(irq_offset, ILC_TRIGGERMODE_HIGH);
-
-#if CONFIG_CPU_SUBTYPE_STX7200
-	/* Gross hack for external Ethernet PHYs which are active low */
-	/* FIXME: Move this into the BSP code */
-	if ((irq_offset == 93)  ||  (irq_offset == 95)) {
-		ILC_SET_TRIGMODE(irq_offset, ILC_TRIGGERMODE_LOW);
-	}
-#elif defined(CONFIG_CPU_SUBTYPE_STX7105)
-	/* Similarly for STEM interrupts which are active low */
-	if ((irq == ILC_EXT_IRQ(2)) || (irq == ILC_EXT_IRQ(3))) {
-		ILC_SET_TRIGMODE(irq_offset, ILC_TRIGGERMODE_LOW);
-	}
-#endif
-
 	ILC_SET_ENABLE(irq_offset);
 
 	return 0;
@@ -211,6 +196,36 @@ DPRINTK2("%s: irq %d\n", __FUNCTION__, i
 	(void)ILC_GET_ENABLE(irq_offset); /* Defeat write posting */
 }
 
+static int set_type_ilc_irq(unsigned int irq, unsigned int flow_type)
+{
+	int irq_offset = irq - ILC_FIRST_IRQ;
+	int mode;
+
+	switch (flow_type) {
+	case IRQ_TYPE_EDGE_RISING:
+		mode = ILC_TRIGGERMODE_RISING;
+		break;
+	case IRQ_TYPE_EDGE_FALLING:
+		mode = ILC_TRIGGERMODE_FALLING;
+		break;
+	case IRQ_TYPE_EDGE_BOTH:
+		mode = ILC_TRIGGERMODE_ANY;
+		break;
+	case IRQ_TYPE_LEVEL_HIGH:
+		mode = ILC_TRIGGERMODE_HIGH;
+		break;
+	case IRQ_TYPE_LEVEL_LOW:
+		mode = ILC_TRIGGERMODE_LOW;
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	ILC_SET_TRIGMODE(irq_offset, mode);
+
+	return 0;
+}
+
 static struct irq_chip ilc_chip = {
 	.name		= "ILC3",
 	.startup	= startup_ilc_irq,
@@ -218,13 +233,17 @@ static struct irq_chip ilc_chip = {
 	.mask		= disable_ilc_irq,
 	.mask_ack	= mask_and_ack_ilc,
 	.unmask		= enable_ilc_irq,
+	.set_type	= set_type_ilc_irq,
 };
 
 void __init ilc_demux_init(void)
 {
 	int irq;
+	int irq_offset;
 
-	DPRINTK("Initialising ILC demux\n");
+	/* Deafult all interrupts to active high. */
+	for (irq_offset = 0; irq_offset < ILC_NR_IRQS; irq_offset++)
+		ILC_SET_TRIGMODE(irq_offset, ILC_TRIGGERMODE_HIGH);
 
 	for (irq = ILC_FIRST_IRQ; irq < (ILC_FIRST_IRQ+ILC_NR_IRQS); irq++)
 		/* SIM: Should we do the masking etc in ilc_irq_demux and
