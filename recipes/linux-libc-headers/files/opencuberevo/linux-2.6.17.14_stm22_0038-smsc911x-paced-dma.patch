This patch adds support to the SMSC 911x driver to use linked paced
transfers rather than free-running DMA to receive data.

This is mainly used as a work-around for broken boards, which do not
have the FIFOSEL pin wired up. On these we have no choose but to read
from the main register bank, where the receive FIFO is mapped multiple
times. We can do this using free-running 2D transfers, but these are
comparatively slow. However paced transfers, with a large read and
non-incrementing address have the same effect, and comparable performance
to FIFOSEL operation.

To do this the driver needs two pacing signals which are
permanently active, by default this is SSC 1 and 2 Tx empty, but
this may need to be changed if either SSC is in use.

A special mode is available in some FDMA firmware versions, where channel
11 has additional buffering. In theory this should give improved
performance, and so the FDMA driver has been modified to reserve this
channel for Ethernet use.

Signed-off-by: Stuart Menefy <stuart.menefy@st.com>

Index: linux/drivers/net/smsc_911x/st40-shdma.c
===================================================================
--- linux.orig/drivers/net/smsc_911x/st40-shdma.c
+++ linux/drivers/net/smsc_911x/st40-shdma.c
@@ -1,11 +1,107 @@
 #include <linux/dma-mapping.h>
 #include <asm/dma.h>
 #include <linux/stm/stm-dma.h>
+#include <linux/stm/710x_fdma.h>
 
 static struct stm_dma_params rx_transfer;
-static struct stm_dma_params rx_transfer_sg;
 static struct stm_dma_params tx_transfer;
 
+static void err_cb(void* x);
+static DWORD smsc911x_request_dma(const char* chan);
+
+#if defined (CONFIG_SMSC911x_DMA_PACED)
+/* Ideally whould be: pDmaXfer->dwDwCnt*2
+ * Next best would be: MAX_RX_SKBS*2
+ * but for now use: */
+#define MAX_NODELIST_LEN 20
+static struct stm_dma_params rx_transfer_paced[MAX_NODELIST_LEN];
+
+#define SYSCONF_DEVID 0xb9001000
+
+#define SMSC_SHORT_PTK_CHAN 1
+#define SMSC_LONG_PTK_CHAN 0
+
+
+/*we wont know until runtime which req #  to use (platform - dep)*/
+struct fmdareq_RequestConfig_s new_rqs[2] = {
+/*10*/{0, READ,  OPCODE_32,4,DISABLE_FLG,0,1 },  /* SSC 1 txbuff empty */
+/*11*/{0, READ,  OPCODE_32,1,DISABLE_FLG,0,1 }  /* SSC 2 txbuff empty */
+};
+
+DWORD Platform_RequestDmaChannelSg(
+	PPLATFORM_DATA platformData)
+{
+	return smsc911x_request_dma(STM_DMA_CAP_ETH_BUF);
+}
+
+static void Platform_ReleaseDmaChannel_sg(void)
+{
+	int i;
+
+	for(i=0;i<MAX_NODELIST_LEN;i++)
+		dma_free_descriptor(&rx_transfer_paced[i]);
+}
+
+static void Platform_DmaInitialize_sg(void)
+{
+	int i;
+	int devid = ctrl_inl(SYSCONF_DEVID);
+	int chip_7109 = (((devid >> 12) & 0x3ff) == 0x02c);
+
+	SMSC_TRACE("DMA Rx using paced transfers to main register bank");
+
+	for(i=0;i<MAX_NODELIST_LEN;i++){
+		declare_dma_parms(&rx_transfer_paced[i],
+				  MODE_PACED,
+				  STM_DMA_LIST_OPEN,
+				  STM_DMA_SETUP_CONTEXT_ISR,
+				  STM_DMA_NOBLOCK_MODE,
+				  (char*)STM_DMAC_ID);
+		dma_parms_err_cb(&rx_transfer_paced[i], err_cb, NULL, 0);
+	}
+
+	if(chip_7109){
+		new_rqs[SMSC_LONG_PTK_CHAN].Index = STB7109_FDMA_REQ_SSC_1_TX;
+		new_rqs[SMSC_SHORT_PTK_CHAN].Index = STB7109_FDMA_REQ_SSC_2_TX;
+	}
+	else {
+		new_rqs[SMSC_LONG_PTK_CHAN].Index = STB7100_FDMA_REQ_SSC_1_TX;
+		new_rqs[SMSC_SHORT_PTK_CHAN].Index = STB7100_FDMA_REQ_SSC_2_TX;
+	}
+
+	dma_manual_stbus_pacing(&rx_transfer_paced[0],&new_rqs[0]);
+	dma_manual_stbus_pacing(&rx_transfer_paced[0],&new_rqs[1]);
+
+}
+#else
+static struct stm_dma_params rx_transfer_sg;
+
+DWORD Platform_RequestDmaChannelSg(
+	PPLATFORM_DATA platformData)
+{
+	return smsc911x_request_dma(STM_DMA_CAP_LOW_BW);
+}
+
+static void Platform_ReleaseDmaChannel_sg(void)
+{
+	dma_free_descriptor(&rx_transfer_sg);
+}
+
+static void Platform_DmaInitialize_sg(void)
+{
+	SMSC_TRACE("DMA Rx using freefrunning transfers and FIFOSEL");
+
+	declare_dma_parms(&rx_transfer_sg,
+			  MODE_DST_SCATTER,
+			  STM_DMA_LIST_OPEN,
+			  STM_DMA_SETUP_CONTEXT_ISR,
+			  STM_DMA_NOBLOCK_MODE,
+			  (char*)STM_DMAC_ID);
+	dma_parms_err_cb(&rx_transfer_sg, err_cb, NULL, 0);
+	dma_parms_DIM_1_x_1(&rx_transfer_sg,0);
+}
+#endif
+
 BOOLEAN Platform_IsValidDmaChannel(DWORD dwDmaCh)
 {
 	if ((dwDmaCh >= 0) && (dwDmaCh < TRANSFER_PIO))
@@ -16,10 +112,16 @@ BOOLEAN Platform_IsValidDmaChannel(DWORD
 DWORD Platform_RequestDmaChannel(
 	PPLATFORM_DATA platformData)
 {
+	return smsc911x_request_dma(STM_DMA_CAP_LOW_BW);
+}
+
+static DWORD smsc911x_request_dma(const char* cap)
+{
 	int chan;
-	const char * dmac_id =STM_DMAC_ID;
-	const char * lb_cap_channel = STM_DMA_CAP_LOW_BW;
-	chan = request_dma_bycap(&dmac_id,&lb_cap_channel, "smsc911x");
+	const char * dmac_id[] = { STM_DMAC_ID, NULL };
+	const char * cap_channel[] = { cap, NULL };
+
+	chan = request_dma_bycap(dmac_id, cap_channel, "smsc911x");
 	if (chan < 0)
 		return TRANSFER_PIO;
 	return chan;
@@ -31,8 +133,8 @@ void Platform_ReleaseDmaChannel(
 {
 	free_dma(dwDmaChannel);
 	dma_free_descriptor(&rx_transfer);
-	dma_free_descriptor(&rx_transfer_sg);
 	dma_free_descriptor(&tx_transfer);
+	Platform_ReleaseDmaChannel_sg();
 }
 
 static void err_cb(void* x)
@@ -45,39 +147,27 @@ BOOLEAN Platform_DmaInitialize(
 	PPLATFORM_DATA platformData,
 	DWORD dwDmaCh)
 {
-
+	/* From LAN to memory */
 	declare_dma_parms(  	&rx_transfer,
 				MODE_FREERUNNING,
 			       	STM_DMA_LIST_OPEN,
 			       	STM_DMA_SETUP_CONTEXT_ISR,
 			       	STM_DMA_NOBLOCK_MODE,
 			       	(char*)STM_DMAC_ID);
+	dma_parms_err_cb(&rx_transfer, err_cb, NULL, 0);
+	dma_parms_DIM_2_x_1(&rx_transfer,0x20,0);
 
-	declare_dma_parms(  	&rx_transfer_sg,
-				MODE_DST_SCATTER,
-			       	STM_DMA_LIST_OPEN,
-			       	STM_DMA_SETUP_CONTEXT_ISR,
-			       	STM_DMA_NOBLOCK_MODE,
-			       	(char*)STM_DMAC_ID);
-
+	/* From memory to LAN */
 	declare_dma_parms(  	&tx_transfer,
 				MODE_FREERUNNING,
 			       	STM_DMA_LIST_OPEN,
 			       	STM_DMA_SETUP_CONTEXT_ISR,
 			       	STM_DMA_NOBLOCK_MODE,
 			       	(char*)STM_DMAC_ID);
-
-	/* From LAN to memory */
-	dma_parms_err_cb(&rx_transfer, err_cb, NULL, 0);
-	dma_parms_DIM_2_x_1(&rx_transfer,0x20,0);
-
-	dma_parms_err_cb(&rx_transfer_sg, err_cb, NULL, 0);
-	dma_parms_DIM_1_x_1(&rx_transfer_sg,0);
-
-	/* From memory to LAN */
 	dma_parms_err_cb(&tx_transfer, err_cb, NULL, 0);
 	dma_parms_DIM_1_x_2(&tx_transfer,0x20,0);
 
+	Platform_DmaInitialize_sg();
 
 	return TRUE;
 }
@@ -153,6 +243,95 @@ err_exit:
 	return FALSE;
 }
 
+#if defined (CONFIG_SMSC911x_DMA_PACED)
+
+BOOLEAN Platform_DmaStartSgXfer(
+	PPLATFORM_DATA platformData,
+	const DMA_XFER * const pDmaXfer,
+	void (*pCallback)(void*),
+	void* pCallbackData)
+{
+	DWORD dwLanPhysAddr;
+	int res=0;
+	int sg_count;
+	struct scatterlist *sg;
+
+	struct stm_dma_params *param;
+
+	// 1. validate the requested channel #
+	SMSC_ASSERT(Platform_IsValidDmaChannel(pDmaXfer->dwDmaCh))
+
+	// Validate this is a LAN to memory transfer
+	SMSC_ASSERT(pDmaXfer->fMemWr)
+
+	// 2. make sure the channel's not already running
+	if (dma_get_status(pDmaXfer->dwDmaCh) != DMA_CHANNEL_STATUS_IDLE)
+	{
+		SMSC_WARNING("Platform_DmaStartXfer -- requested channel (%ld) is still running", pDmaXfer->dwDmaCh);
+		return FALSE;
+	}
+
+	// 3. calculate the physical transfer addresses
+	dwLanPhysAddr = 0x1fffffffUL & (CpuToPhysicalAddr((void *)pDmaXfer->dwLanReg));
+
+	// 4. Map (flush) the buffer
+	sg = (struct scatterlist*)pDmaXfer->pdwBuf;
+	sg_count = dma_map_sg(NULL, sg,
+			      pDmaXfer->dwDwCnt,
+			      pDmaXfer->fMemWr ? DMA_FROM_DEVICE : DMA_TO_DEVICE);
+
+	// 5. Prepare the DMA channel structure
+	param = rx_transfer_paced;
+	for ( ; sg_count; sg_count--) {
+		int long_len = sg_dma_len(sg) & (~127);
+		int short_len = sg_dma_len(sg) & 127;
+
+		if (long_len) {
+			dma_parms_addrs(param,
+					dwLanPhysAddr,
+					sg_dma_address(sg),
+					long_len);
+			dma_parms_paced(param,
+					long_len,
+					new_rqs[SMSC_LONG_PTK_CHAN].Index);
+			dma_link_nodes(param, param+1);
+			param++;
+		}
+
+		if (short_len) {
+			dma_parms_addrs(param,
+					dwLanPhysAddr,
+					sg_dma_address(sg) + long_len,
+					short_len);
+			dma_parms_paced(param,
+					short_len,
+					new_rqs[SMSC_SHORT_PTK_CHAN].Index);
+			dma_link_nodes(param, param+1);
+			param++;
+		}
+
+		sg++;
+	}
+
+	param--;
+	dma_link_nodes(param, NULL);
+
+	dma_parms_comp_cb(param, pCallback, pCallbackData, 0);
+	res=dma_compile_list(rx_transfer_paced);
+	if(res != 0)
+		goto err_exit;
+	// 6. Start the transfer
+	dma_xfer_list(pDmaXfer->dwDmaCh,rx_transfer_paced);
+
+	// DMA Transfering....
+	return TRUE;
+err_exit:
+	SMSC_WARNING("%s cant initialise DMA engine err_code %d\n",__FUNCTION__,(int)res);
+	return FALSE;
+}
+
+#else
+
 BOOLEAN Platform_DmaStartSgXfer(
 	PPLATFORM_DATA platformData,
 	const DMA_XFER * const pDmaXfer,
@@ -201,3 +380,5 @@ err_exit:
 	SMSC_WARNING("%s cant initialise DMA engine err_code %d\n",__FUNCTION__,(int)res);
 	return FALSE;
 }
+
+#endif
Index: linux/drivers/net/Kconfig
===================================================================
--- linux.orig/drivers/net/Kconfig
+++ linux/drivers/net/Kconfig
@@ -875,6 +875,17 @@ config SMSC911x_DMA
 	  PIO transfers. This may reduce the CPU overhead, will probably
 	  reduce performance.
 
+config SMSC911x_DMA_PACED
+	depends on EXPERIMENTAL && SMSC911x_DMA
+	bool "SMSC 911x DMA using paced transfers"
+	---help---
+	  Enabling this option will cause SMSC 911x DMA receive transfers to
+	  use paced rather than freerunning DMA. This mainly used on boards
+	  which do not have the FIFOSEL pin wired up.
+
+	  To do this the driver needs two pacing signals which are
+	  permanently active, by default this is SSC 1 and 2 Tx empty, but
+	  this may need to be changed if either SSC is in use.
 
 config SMC9194
 	tristate "SMC 9194 support"
Index: linux/drivers/stm/710x_fdma2.c
===================================================================
--- linux.orig/drivers/stm/710x_fdma2.c
+++ linux/drivers/stm/710x_fdma2.c
@@ -569,11 +569,21 @@ static int fdma_register_caps(void)
 	const char  * dmac_id = (const char *)STM_DMAC_ID;
 	static const char* hb_caps[] = {STM_DMA_CAP_HIGH_BW,NULL};
 	static const char* lb_caps[] = {STM_DMA_CAP_LOW_BW,NULL};
+	static const char* eth_caps[] = {STM_DMA_CAP_ETH_BUF,NULL};
 
 	for (;channel <= chip.ch_max;channel++) {
 		dmac_caps[channel-chip.ch_min].ch_num = channel;
-		dmac_caps[channel-chip.ch_min].caplist =
-			(channel < 4) ? hb_caps : lb_caps;
+		switch (channel) {
+		case 0 ... 3:
+			dmac_caps[channel-chip.ch_min].caplist = hb_caps;
+			break;
+		case 11:
+			dmac_caps[channel-chip.ch_min].caplist = eth_caps;
+			break;
+		default:
+			dmac_caps[channel-chip.ch_min].caplist = lb_caps;
+			break;
+		}
 	}
 	res= register_chan_caps(dmac_id,&dmac_caps[0]);
 
Index: linux/include/linux/stm/stm-dma.h
===================================================================
--- linux.orig/include/linux/stm/stm-dma.h
+++ linux/include/linux/stm/stm-dma.h
@@ -81,11 +81,11 @@ enum stm_dma_flags {
 #define DMA_CHANNEL_STATUS_RUNNING 		2
 #define DMA_CHANNEL_STATUS_PAUSED 		3
 
-/*we only have the notion of two types of channels thus far*/
-#define STM_DMA_CAP_HIGH_BW 	"STM_DMA_HIGH_BANDWIDTH"
-#define STM_DMA_CAP_LOW_BW 		"STM_DMA_LOW_BANDWIDTH"
+/* Parameters to request_dma_bycap() */
 #define STM_DMAC_ID 			"ST40 STB710x FDMAC"
-
+#define STM_DMA_CAP_HIGH_BW		"STM_DMA_HIGH_BANDWIDTH"
+#define STM_DMA_CAP_LOW_BW		"STM_DMA_LOW_BANDWIDTH"
+#define STM_DMA_CAP_ETH_BUF		"STM_DMA_ETH_BUFFER"
 
 /* dma_extend() operations */
 #define STM_DMA_OP_PAUSE			1
@@ -317,8 +317,7 @@ static inline  void dma_parms_sg(	struct
 static inline void dma_link_nodes(	struct stm_dma_params * parent,
 					struct stm_dma_params * child)
 {
-	if(child)
-		parent->next=child;
+	parent->next=child;
 }
 
 static inline void dma_parms_addrs(	struct stm_dma_params *p,
Index: linux/drivers/net/smsc_911x/smsc911x.c
===================================================================
--- linux.orig/drivers/net/smsc_911x/smsc911x.c
+++ linux/drivers/net/smsc_911x/smsc911x.c
@@ -1700,7 +1700,7 @@ int Smsc911x_open(struct net_device *dev
 
 
 		if(rx_dma==TRANSFER_REQUEST_DMA) {
-			dwRxDmaCh=Platform_RequestDmaChannel(&(privateData->PlatformData));
+			dwRxDmaCh=Platform_RequestDmaChannelSg(&(privateData->PlatformData));
 			SMSC_ASSERT(dwRxDmaCh!=TRANSFER_REQUEST_DMA);
 			if(dwRxDmaCh<TRANSFER_REQUEST_DMA) {
 				privateData->RxDmaChReserved=TRUE;
Index: linux/drivers/net/smsc_911x/st40-gpdma.c
===================================================================
--- linux.orig/drivers/net/smsc_911x/st40-gpdma.c
+++ linux/drivers/net/smsc_911x/st40-gpdma.c
@@ -79,6 +79,12 @@ DWORD Platform_RequestDmaChannel(
 	return TRANSFER_PIO;
 }
 
+DWORD Platform_RequestDmaChannelSg(
+	PPLATFORM_DATA platformData)
+{
+	return TRANSFER_PIO;
+}
+
 void Platform_ReleaseDmaChannel(
 	PPLATFORM_DATA platformData,
 	DWORD dwDmaChannel)
