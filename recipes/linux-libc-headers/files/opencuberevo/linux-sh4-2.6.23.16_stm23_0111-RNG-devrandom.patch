Hardware RNG /dev/random support:

	Adds a driver which periodically fills the random number entropy pool
        with values obtained from the hardware random number generator present 
        on the newer STM SoCs (7109 onwards)

	(This allows /dev/random (which normally requires mouse and keyboard 
	connection to obtain entropy) to work on embedded systems and provide 
	cryptographically strong random numbers.  It can be also be used in
	conjunction with the hw_random driver if required).

Signed-off-by: Carl Shaw <carl.shaw@st.com>
Index: linux/drivers/char/hw_random/stm-rng.c
===================================================================
--- linux.orig/drivers/char/hw_random/stm-rng.c	2008-05-16 08:22:24.000000000 +0100
+++ linux/drivers/char/hw_random/stm-rng.c	2008-05-16 08:22:45.000000000 +0100
@@ -1,11 +1,11 @@
 /*
- * drivers/char/hw_random/omap-rng.c
+ * drivers/char/hw_random/stm-rng.c
  *
- * RNG driver for ST Microelectronics STx7109, STx7200 SoCs
+ * RNG driver for ST Microelectronics STx7xxx  SoCs
  *
  * Author: Carl Shaw <carl.shaw@st.com>
  *
- * Copyright 2007 (c) ST Microelectronics R&D Ltd.
+ * Copyright (c) 2007-2008 ST Microelectronics R&D Ltd.
  *
  * Based on omap RNG driver
  *
Index: linux/drivers/stm/Kconfig
===================================================================
--- linux.orig/drivers/stm/Kconfig	2008-05-16 08:22:24.000000000 +0100
+++ linux/drivers/stm/Kconfig	2008-05-16 09:38:48.000000000 +0100
@@ -126,4 +126,23 @@
         Enable this option to print out information about the slave CPUs
         addresses and operations you are using for coprocessor.
 
+config STM_RNG
+       depends on CPU_SUBTYPE_ST40
+       bool "STM Random Number Generator Support"
+       default y
+       ---help---
+         This option adds support for the hardware Random Number Generator
+          (RNG) present on the STx71xx and STx7200 SoCs.  It allows the
+         RNG to feed /dev/random with entropy thereby ensuring real
+         random numbers from this device.
+
+         Without this option, /dev/random has little entropy and is not
+         useful.  In fact, it may block for a long time while waiting for
+         entropy.
+
+         This option should always be enabled for the STx71xx and STx7200
+         SoCs.
+
+          This option can be used in conjunction with the /dev/hw_random
+          driver found in the char drivers menu.
 endmenu
Index: linux/drivers/stm/Makefile
===================================================================
--- linux.orig/drivers/stm/Makefile	2008-05-16 08:22:24.000000000 +0100
+++ linux/drivers/stm/Makefile	2008-05-16 08:22:45.000000000 +0100
@@ -8,4 +8,6 @@
 obj-$(CONFIG_STM_COPROCESSOR_SUPPORT)	+= copro-st_socs.o
 obj-$(CONFIG_STM_COPROCESSOR)		+= stm-coprocessor.o
 obj-$(CONFIG_STM_COPROCESSOR_FRMW)	+= stm-coprocessor_frmw.o
+obj-$(CONFIG_STM_RNG)		+= stm_rng.o
 obj-y				+= emi.o
+
Index: linux/drivers/stm/stm_rng.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ linux/drivers/stm/stm_rng.c	2008-05-16 11:26:44.000000000 +0100
@@ -0,0 +1,207 @@
+/*
+ * 	File: stm_rng.c
+ *
+ *	Hardware Random Number Generator Support for  STM STx7109 / STx7200 RNG
+ *	(c) Copyright 2008 ST Microelectronics (R&D) Ltd.
+ *
+ *	Author: <carl.shaw@st.com>
+ *
+ *	----------------------------------------------------------
+ *	This software may be used and distributed according to the terms
+ *	of the GNU General Public License v2, incorporated herein by reference.
+ *
+ */
+
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/fs.h>
+#include <linux/init.h>
+#include <linux/spinlock.h>
+#include <linux/random.h>
+#include <linux/timer.h>
+#include <linux/platform_device.h>
+#include <linux/spinlock.h>
+#include <asm/io.h>
+
+/*
+ * core module and version information
+ */
+#define RNG_VERSION "1.0"
+#define RNG_MODULE_NAME "stm_rng"
+#define RNG_DRIVER_NAME   RNG_MODULE_NAME " hardware driver " RNG_VERSION
+#define PFX RNG_MODULE_NAME ": "
+
+/* Debug Macros */
+/* #define DEBUG */
+
+#ifdef DEBUG
+#define DPRINTK(fmt, args...) printk(KERN_DEBUG PFX "%s: " fmt, __FUNCTION__ , ## args)
+#else
+#define DPRINTK(fmt, args...)
+#endif
+
+/*
+ * Defines
+ */
+/* per-cpu buffer size in 16 bit words */
+#define STM_RNG_BUFFSIZE   512
+/* register offsets */
+#define STM_RNG_STATUS_REG 0x20
+#define STM_RNG_DATA_REG   0x24
+
+/*
+ * Local variables
+ */
+
+struct timer_list      stm_rng_timer;
+static void __iomem *  stm_rng_base = NULL;
+static unsigned short* stm_rng_buffer = NULL;
+static unsigned long   stm_rng_bufcnt = 0;
+static spinlock_t      stm_rng_spinlock = SPIN_LOCK_UNLOCKED;
+
+/*
+ * The real work is done by the poll function below.
+ * The timer should fire every 10 ms
+ */
+
+void stm_rng_poll(unsigned long arg)
+{
+	u32 val;
+
+	mod_timer(&stm_rng_timer, jiffies + (HZ/100));
+
+	spin_lock(&stm_rng_spinlock);
+
+	/* data OK ? */
+	val = readl(stm_rng_base + STM_RNG_STATUS_REG);
+
+	if ((val&3)==0){
+		/* Get random number and add to our entropy pool */
+		val = readl(stm_rng_base + STM_RNG_DATA_REG);
+		stm_rng_buffer[stm_rng_bufcnt] = (unsigned short)(val & 0x0000ffff);
+		stm_rng_bufcnt ++;
+
+		if (stm_rng_bufcnt == STM_RNG_BUFFSIZE){
+			DPRINTK("adding RNG data to /dev/random\n");
+			add_random_data((char*)stm_rng_buffer,
+				STM_RNG_BUFFSIZE*sizeof(short));
+			stm_rng_bufcnt = 0;
+		}
+	}
+
+	spin_unlock(&stm_rng_spinlock);
+}
+
+/*
+ * Platform bus support
+ */
+
+static int __init stm_rng_probe(struct platform_device *rng_device)
+{
+	struct resource *res;
+
+	if (!rng_device->name ){
+		pr_err(PFX
+		      "Device probe failed.  Check your kernel SoC config!!\n");
+		return -ENODEV;
+	}
+
+	res = platform_get_resource(rng_device, IORESOURCE_MEM, 0);
+	if (!res) {
+		pr_err(PFX
+			"RNG config not found.  Check your kernel SoC config!!\n");
+		return -ENODEV;
+	}
+
+	DPRINTK("RNG physical base address = 0x%08x\n", res->start);
+
+	if (res->start == 0) {
+		pr_err(PFX
+			"RNG base address undefined.  Check your SoC config!!\n");
+		return -ENODEV;
+	}
+
+	stm_rng_base = ioremap(res->start, 0x28);
+
+	if (stm_rng_base == NULL) {
+		pr_err(PFX "Cannot ioremap RNG memory\n");
+		return -EBUSY;
+	}
+
+	stm_rng_buffer = kmalloc(STM_RNG_BUFFSIZE*sizeof(short), GFP_KERNEL);
+	if (stm_rng_buffer == NULL){
+		pr_err(PFX "Cannot allocate entropy words buffer\n");
+		return -ENOMEM;
+	}
+
+	stm_rng_bufcnt = 0;
+
+	init_timer(&stm_rng_timer);
+	stm_rng_timer.function = stm_rng_poll;
+	stm_rng_timer.expires  = jiffies + (HZ/100);
+	add_timer(&stm_rng_timer);
+
+	pr_info( RNG_DRIVER_NAME " configured\n");
+
+	return 0;
+}
+
+static int stm_rng_remove(struct platform_device *dev)
+{
+    return 0;
+}
+
+static struct platform_driver stm_rng_driver = {
+	.driver.name = "stm_rng",
+	.driver.owner = THIS_MODULE,
+	.probe = stm_rng_probe,
+	.remove = stm_rng_remove,
+};
+
+
+/*
+ * rng_init - initialize RNG poll timer
+ */
+
+static int __init rng_init (void)
+{
+	int ret = -ENODEV;
+
+	/* Check for STM RNG using platform bus */
+	if ((ret = platform_driver_register(&stm_rng_driver)))
+		goto out;
+
+	if (stm_rng_base == 0) {
+		ret = -ENODEV;
+		goto out;
+	}
+
+	return 0;
+out:
+	pr_err(PFX
+		"RNG not configured.  Check your SoC config!!\n");
+	if (stm_rng_base)
+		iounmap(stm_rng_base);
+	return ret;
+}
+
+/*
+ * rng_init - shutdown RNG module
+ */
+
+static void __exit rng_cleanup (void)
+{
+	if (stm_rng_base) {
+		del_timer_sync(&stm_rng_timer);
+		iounmap(stm_rng_base);
+		if (stm_rng_buffer)
+			kfree(stm_rng_buffer);
+	}
+}
+
+MODULE_AUTHOR("ST Microelectronics R&D Ltd. <carl.shaw@st.com>");
+MODULE_DESCRIPTION("STM H/W Random Number Generator (RNG) driver");
+MODULE_LICENSE("GPL");
+
+module_init (rng_init);
+module_exit (rng_cleanup);
Index: linux/drivers/char/random.c
===================================================================
--- linux.orig/drivers/char/random.c	2008-05-16 08:22:24.000000000 +0100
+++ linux/drivers/char/random.c	2008-05-16 11:00:00.000000000 +0100
@@ -671,6 +671,23 @@
 EXPORT_SYMBOL(add_disk_randomness);
 #endif
 
+/* Add data generated by hardware engine directly to entropy pool */
+/* Note that the hardware generator tests the randomness of its   */
+/* data in hardware so we don't bounce this out to user-space via */
+/* /dev/hw_random, check it with a daemon and then write it to    */
+/* /dev/random as in the usual Linux case                         */
+/* Note that <count> parameter is in BITS                         */
+void add_random_data(const char* rdata, int count)
+{
+	add_entropy_words(&input_pool, (const __u32 *)rdata,
+		count / sizeof(__u32));
+	credit_entropy_store(&input_pool, count);
+
+	if(input_pool.entropy_count >= random_read_wakeup_thresh)
+		wake_up_interruptible(&random_read_wait);
+}
+EXPORT_SYMBOL(add_random_data);
+
 #define EXTRACT_SIZE 10
 
 /*********************************************************************
Index: linux/include/linux/random.h
===================================================================
--- linux.orig/include/linux/random.h	2008-05-16 08:22:24.000000000 +0100
+++ linux/include/linux/random.h	2008-05-16 11:00:47.000000000 +0100
@@ -48,6 +48,8 @@
 				 unsigned int value);
 extern void add_interrupt_randomness(int irq);
 
+extern void add_random_data(const char* rdata, int count);
+
 extern void get_random_bytes(void *buf, int nbytes);
 void generate_random_uuid(unsigned char uuid_out[16]);
 
Index: linux/arch/sh/kernel/cpu/sh4/setup-stb7100.c
===================================================================
--- linux.orig/arch/sh/kernel/cpu/sh4/setup-stb7100.c	2008-05-16 08:22:59.000000000 +0100
+++ linux/arch/sh/kernel/cpu/sh4/setup-stb7100.c	2008-05-16 08:28:20.000000000 +0100
@@ -681,6 +681,19 @@
 	}
 };
 
+static struct platform_device devrandom_rng_device = {
+	.name           = "stm_rng",
+	.id             = 0,
+	.num_resources  = 1,
+	.resource       = (struct resource[]){
+		{
+			.start  = 0x19250000,
+			.end    = 0x19250fff,
+			.flags  = IORESOURCE_MEM
+		},
+	}
+};
+
 /* ASC resources ----------------------------------------------------------- */
 
 static struct platform_device stm_stasc_devices[] = {
@@ -891,6 +904,7 @@
 	&ilc3_device,
 	&rtc_device,
 	&hwrandom_rng_device,
+	&devrandom_rng_device,
 };
 
 static int __init stx710x_devices_setup(void)
Index: linux/arch/sh/kernel/cpu/sh4/setup-stx7105.c
===================================================================
--- linux.orig/arch/sh/kernel/cpu/sh4/setup-stx7105.c	2008-05-16 08:23:40.000000000 +0100
+++ linux/arch/sh/kernel/cpu/sh4/setup-stx7105.c	2008-05-16 08:28:18.000000000 +0100
@@ -620,6 +620,20 @@
 	}
 };
 
+static struct platform_device devrandom_rng_device = {
+	.name           = "stm_rng",
+	.id             = 0,
+	.num_resources  = 1,
+	.resource       = (struct resource[]){
+		{
+			.start  = 0xfe250000,
+			.end    = 0xfe250fff,
+			.flags  = IORESOURCE_MEM
+		},
+	}
+};
+
+
 /* ASC resources ----------------------------------------------------------- */
 
 static struct platform_device stm_stasc_devices[] = {
@@ -1012,6 +1026,7 @@
 	&sysconf_device,
 	&ilc3_device,
 	&hwrandom_rng_device,
+	&devrandom_rng_device,
 };
 
 static int __init stx7105_devices_setup(void)
Index: linux/arch/sh/kernel/cpu/sh4/setup-stx7111.c
===================================================================
--- linux.orig/arch/sh/kernel/cpu/sh4/setup-stx7111.c	2008-05-16 08:23:40.000000000 +0100
+++ linux/arch/sh/kernel/cpu/sh4/setup-stx7111.c	2008-05-16 08:28:58.000000000 +0100
@@ -395,6 +395,19 @@
 	}
 };
 
+static struct platform_device devrandom_rng_device = {
+	.name           = "stm_rng",
+	.id             = 0,
+	.num_resources  = 1,
+	.resource       = (struct resource[]){
+		{
+			.start  = 0xfe250000,
+			.end    = 0xfe250fff,
+			.flags  = IORESOURCE_MEM
+		},
+	}
+};
+
 /* ASC resources ----------------------------------------------------------- */
 
 static struct platform_device stm_stasc_devices[] = {
@@ -801,6 +814,7 @@
 	&sysconf_device,
 	&ilc3_device,
 	&hwrandom_rng_device,
+	&devrandom_rng_device,
 };
 
 static int __init stx7111_devices_setup(void)
Index: linux/arch/sh/kernel/cpu/sh4/setup-stx7200.c
===================================================================
--- linux.orig/arch/sh/kernel/cpu/sh4/setup-stx7200.c	2008-05-16 08:23:40.000000000 +0100
+++ linux/arch/sh/kernel/cpu/sh4/setup-stx7200.c	2008-05-16 08:30:16.000000000 +0100
@@ -1022,6 +1022,19 @@
 	}
 };
 
+static struct platform_device devrandom_rng_device = {
+	.name           = "stm_rng",
+	.id             = 0,
+	.num_resources  = 1,
+	.resource       = (struct resource[]){
+		{
+			.start  = 0xfdb70000,
+			.end    = 0xfdb70fff,
+			.flags  = IORESOURCE_MEM
+		},
+	}
+};
+
 /* ASC resources ----------------------------------------------------------- */
 
 static struct platform_device stm_stasc_devices[] = {
@@ -1264,6 +1277,7 @@
 	&ilc3_device,
         &rtc_device,
 	&hwrandom_rng_device,
+	&devrandom_rng_device,
 };
 
 static int __init stx7200_devices_setup(void)
