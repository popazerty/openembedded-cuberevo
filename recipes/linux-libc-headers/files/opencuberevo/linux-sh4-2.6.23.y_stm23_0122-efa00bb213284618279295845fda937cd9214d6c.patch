From efa00bb213284618279295845fda937cd9214d6c Mon Sep 17 00:00:00 2001
From: Pawel MOLL <pawel.moll@st.com>
Date: Tue, 20 Oct 2009 14:41:57 +0100
Subject: [PATCH] sound_stm: Rename STx710x to STx7100

As there is another family of STx710x now (STx7105/6), the
STx7100/9-related code had to be renamed to STx7100.

Signed-off-by: Pawel Moll <pawel.moll@st.com>
---
 arch/sh/configs/cb104se_defconfig       |    2 +-
 arch/sh/configs/hdref_defconfig         |    2 +-
 arch/sh/configs/hdrefse_defconfig       |    2 +-
 arch/sh/configs/hmp7100_defconfig       |    2 +-
 arch/sh/configs/hmp7100se_defconfig     |    2 +-
 arch/sh/configs/hms1_defconfig          |    2 +-
 arch/sh/configs/hms1se_defconfig        |    2 +-
 arch/sh/configs/mb411_defconfig         |    2 +-
 arch/sh/configs/mb442_defconfig         |    2 +-
 arch/sh/configs/mb442se_defconfig       |    2 +-
 arch/sh/configs/mb519_mb520_defconfig   |    2 +-
 arch/sh/configs/mb519se_mb520_defconfig |    2 +-
 arch/sh/configs/mb618_defconfig         |    2 +-
 arch/sh/configs/mb618se_defconfig       |    2 +-
 arch/sh/configs/pdk7105_defconfig       |    2 +-
 arch/sh/configs/pdk7105se_defconfig     |    2 +-
 sound/stm/Kconfig                       |    4 +-
 sound/stm/Makefile                      |    4 +-
 sound/stm/pcm_player.c                  |    2 +-
 sound/stm/pcm_reader.c                  |    2 +-
 sound/stm/reg_7100_audcfg.h             |  178 ++++++++++
 sound/stm/reg_710x_audcfg.h             |  178 ----------
 sound/stm/spdif_player.c                |    2 +-
 sound/stm/stx7100.c                     |  569 ++++++++++++++++++++++++++++++
 sound/stm/stx710x.c                     |  570 -------------------------------
 25 files changed, 770 insertions(+), 771 deletions(-)
 create mode 100644 sound/stm/reg_7100_audcfg.h
 delete mode 100644 sound/stm/reg_710x_audcfg.h
 create mode 100644 sound/stm/stx7100.c
 delete mode 100644 sound/stm/stx710x.c

diff --git a/arch/sh/configs/cb104se_defconfig b/arch/sh/configs/cb104se_defconfig
index b5e2044..212be4d 100644
--- a/arch/sh/configs/cb104se_defconfig
+++ b/arch/sh/configs/cb104se_defconfig
@@ -819,7 +819,7 @@ CONFIG_SND_VERBOSE_PROCFS=y
 #
 CONFIG_SND_STM=y
 CONFIG_SND_STM_BPA2_PARTITION_NAME="audio"
-# CONFIG_SND_STM_STX710X is not set
+# CONFIG_SND_STM_STX7100 is not set
 # CONFIG_SND_STM_STX7105 is not set
 # CONFIG_SND_STM_STX7111 is not set
 # CONFIG_SND_STM_STX7141 is not set
diff --git a/arch/sh/configs/hdref_defconfig b/arch/sh/configs/hdref_defconfig
index 6640380..dd04f2f 100644
--- a/arch/sh/configs/hdref_defconfig
+++ b/arch/sh/configs/hdref_defconfig
@@ -1022,7 +1022,7 @@ CONFIG_SND_VERBOSE_PROCFS=y
 #
 CONFIG_SND_STM=y
 CONFIG_SND_STM_BPA2_PARTITION_NAME="audio"
-CONFIG_SND_STM_STX710X=y
+CONFIG_SND_STM_STX7100=y
 # CONFIG_SND_STM_STX7111 is not set
 # CONFIG_SND_STM_STX7200 is not set
 # CONFIG_SND_STM_CONV_DUMMY is not set
diff --git a/arch/sh/configs/hdrefse_defconfig b/arch/sh/configs/hdrefse_defconfig
index 434b55c..a50c67f 100644
--- a/arch/sh/configs/hdrefse_defconfig
+++ b/arch/sh/configs/hdrefse_defconfig
@@ -1022,7 +1022,7 @@ CONFIG_SND_VERBOSE_PROCFS=y
 #
 CONFIG_SND_STM=y
 CONFIG_SND_STM_BPA2_PARTITION_NAME="audio"
-CONFIG_SND_STM_STX710X=y
+CONFIG_SND_STM_STX7100=y
 # CONFIG_SND_STM_STX7111 is not set
 # CONFIG_SND_STM_STX7200 is not set
 # CONFIG_SND_STM_CONV_DUMMY is not set
diff --git a/arch/sh/configs/hmp7100_defconfig b/arch/sh/configs/hmp7100_defconfig
index 2fb088e..9caf94a 100644
--- a/arch/sh/configs/hmp7100_defconfig
+++ b/arch/sh/configs/hmp7100_defconfig
@@ -1043,7 +1043,7 @@ CONFIG_SND_VERBOSE_PROCFS=y
 #
 CONFIG_SND_STM=y
 CONFIG_SND_STM_BPA2_PARTITION_NAME="audio"
-CONFIG_SND_STM_STX710X=y
+CONFIG_SND_STM_STX7100=y
 # CONFIG_SND_STM_STX7111 is not set
 # CONFIG_SND_STM_STX7200 is not set
 # CONFIG_SND_STM_CONV_DUMMY is not set
diff --git a/arch/sh/configs/hmp7100se_defconfig b/arch/sh/configs/hmp7100se_defconfig
index d74881a..dde6b88 100644
--- a/arch/sh/configs/hmp7100se_defconfig
+++ b/arch/sh/configs/hmp7100se_defconfig
@@ -1043,7 +1043,7 @@ CONFIG_SND_VERBOSE_PROCFS=y
 #
 CONFIG_SND_STM=y
 CONFIG_SND_STM_BPA2_PARTITION_NAME="audio"
-CONFIG_SND_STM_STX710X=y
+CONFIG_SND_STM_STX7100=y
 # CONFIG_SND_STM_STX7111 is not set
 # CONFIG_SND_STM_STX7200 is not set
 # CONFIG_SND_STM_CONV_DUMMY is not set
diff --git a/arch/sh/configs/hms1_defconfig b/arch/sh/configs/hms1_defconfig
index 0a21ffd..c1ec84c 100644
--- a/arch/sh/configs/hms1_defconfig
+++ b/arch/sh/configs/hms1_defconfig
@@ -1033,7 +1033,7 @@ CONFIG_SND_VERBOSE_PROCFS=y
 #
 CONFIG_SND_STM=y
 CONFIG_SND_STM_BPA2_PARTITION_NAME="audio"
-CONFIG_SND_STM_STX710X=y
+CONFIG_SND_STM_STX7100=y
 # CONFIG_SND_STM_STX7111 is not set
 # CONFIG_SND_STM_STX7200 is not set
 # CONFIG_SND_STM_CONV_DUMMY is not set
diff --git a/arch/sh/configs/hms1se_defconfig b/arch/sh/configs/hms1se_defconfig
index 612f3f0..006d025 100644
--- a/arch/sh/configs/hms1se_defconfig
+++ b/arch/sh/configs/hms1se_defconfig
@@ -1033,7 +1033,7 @@ CONFIG_SND_VERBOSE_PROCFS=y
 #
 CONFIG_SND_STM=y
 CONFIG_SND_STM_BPA2_PARTITION_NAME="audio"
-CONFIG_SND_STM_STX710X=y
+CONFIG_SND_STM_STX7100=y
 # CONFIG_SND_STM_STX7111 is not set
 # CONFIG_SND_STM_STX7200 is not set
 # CONFIG_SND_STM_CONV_DUMMY is not set
diff --git a/arch/sh/configs/mb411_defconfig b/arch/sh/configs/mb411_defconfig
index 0460e47..469df72 100644
--- a/arch/sh/configs/mb411_defconfig
+++ b/arch/sh/configs/mb411_defconfig
@@ -900,7 +900,7 @@ CONFIG_SND_VERBOSE_PROCFS=y
 #
 CONFIG_SND_STM=y
 CONFIG_SND_STM_BPA2_PARTITION_NAME="audio"
-CONFIG_SND_STM_STX710X=y
+CONFIG_SND_STM_STX7100=y
 # CONFIG_SND_STM_STX7111 is not set
 # CONFIG_SND_STM_STX7200 is not set
 # CONFIG_SND_STM_CONV_DUMMY is not set
diff --git a/arch/sh/configs/mb442_defconfig b/arch/sh/configs/mb442_defconfig
index 20b977b..a241d4f 100644
--- a/arch/sh/configs/mb442_defconfig
+++ b/arch/sh/configs/mb442_defconfig
@@ -1021,7 +1021,7 @@ CONFIG_SND_VERBOSE_PROCFS=y
 #
 CONFIG_SND_STM=y
 CONFIG_SND_STM_BPA2_PARTITION_NAME="audio"
-CONFIG_SND_STM_STX710X=y
+CONFIG_SND_STM_STX7100=y
 # CONFIG_SND_STM_STX7111 is not set
 # CONFIG_SND_STM_STX7200 is not set
 # CONFIG_SND_STM_CONV_DUMMY is not set
diff --git a/arch/sh/configs/mb442se_defconfig b/arch/sh/configs/mb442se_defconfig
index 5ac8c69..d6324f3 100644
--- a/arch/sh/configs/mb442se_defconfig
+++ b/arch/sh/configs/mb442se_defconfig
@@ -1021,7 +1021,7 @@ CONFIG_SND_VERBOSE_PROCFS=y
 #
 CONFIG_SND_STM=y
 CONFIG_SND_STM_BPA2_PARTITION_NAME="audio"
-CONFIG_SND_STM_STX710X=y
+CONFIG_SND_STM_STX7100=y
 # CONFIG_SND_STM_STX7111 is not set
 # CONFIG_SND_STM_STX7200 is not set
 # CONFIG_SND_STM_CONV_DUMMY is not set
diff --git a/arch/sh/configs/mb519_mb520_defconfig b/arch/sh/configs/mb519_mb520_defconfig
index 8597925..9a560c8 100644
--- a/arch/sh/configs/mb519_mb520_defconfig
+++ b/arch/sh/configs/mb519_mb520_defconfig
@@ -810,7 +810,7 @@ CONFIG_SND_VERBOSE_PROCFS=y
 #
 CONFIG_SND_STM=y
 CONFIG_SND_STM_BPA2_PARTITION_NAME="audio"
-# CONFIG_SND_STM_STX710X is not set
+# CONFIG_SND_STM_STX7100 is not set
 # CONFIG_SND_STM_STX7111 is not set
 CONFIG_SND_STM_STX7200=y
 # CONFIG_SND_STM_CONV_DUMMY is not set
diff --git a/arch/sh/configs/mb519se_mb520_defconfig b/arch/sh/configs/mb519se_mb520_defconfig
index cc9026f..d4194bb 100644
--- a/arch/sh/configs/mb519se_mb520_defconfig
+++ b/arch/sh/configs/mb519se_mb520_defconfig
@@ -810,7 +810,7 @@ CONFIG_SND_VERBOSE_PROCFS=y
 #
 CONFIG_SND_STM=y
 CONFIG_SND_STM_BPA2_PARTITION_NAME="audio"
-# CONFIG_SND_STM_STX710X is not set
+# CONFIG_SND_STM_STX7100 is not set
 # CONFIG_SND_STM_STX7111 is not set
 CONFIG_SND_STM_STX7200=y
 # CONFIG_SND_STM_CONV_DUMMY is not set
diff --git a/arch/sh/configs/mb618_defconfig b/arch/sh/configs/mb618_defconfig
index e45b8da..d5f8cbf 100644
--- a/arch/sh/configs/mb618_defconfig
+++ b/arch/sh/configs/mb618_defconfig
@@ -870,7 +870,7 @@ CONFIG_SND_VERBOSE_PROCFS=y
 # SoC Audio support for SuperH
 #
 CONFIG_SND_STM=y
-# CONFIG_SND_STM_STX710X is not set
+# CONFIG_SND_STM_STX7100 is not set
 CONFIG_SND_STM_STX7111=y
 # CONFIG_SND_STM_STX7200 is not set
 # CONFIG_SND_STM_CONV_DUMMY is not set
diff --git a/arch/sh/configs/mb618se_defconfig b/arch/sh/configs/mb618se_defconfig
index c46cc51..329afef 100644
--- a/arch/sh/configs/mb618se_defconfig
+++ b/arch/sh/configs/mb618se_defconfig
@@ -870,7 +870,7 @@ CONFIG_SND_VERBOSE_PROCFS=y
 # SoC Audio support for SuperH
 #
 CONFIG_SND_STM=y
-# CONFIG_SND_STM_STX710X is not set
+# CONFIG_SND_STM_STX7100 is not set
 CONFIG_SND_STM_STX7111=y
 # CONFIG_SND_STM_STX7200 is not set
 # CONFIG_SND_STM_CONV_DUMMY is not set
diff --git a/arch/sh/configs/pdk7105_defconfig b/arch/sh/configs/pdk7105_defconfig
index d552b9d..02ef8cd 100644
--- a/arch/sh/configs/pdk7105_defconfig
+++ b/arch/sh/configs/pdk7105_defconfig
@@ -882,7 +882,7 @@ CONFIG_SND_SOC=y
 #
 CONFIG_SND_STM=y
 CONFIG_SND_STM_BPA2_PARTITION_NAME="audio"
-# CONFIG_SND_STM_STX710X is not set
+# CONFIG_SND_STM_STX7100 is not set
 CONFIG_SND_STM_STX7105=y
 # CONFIG_SND_STM_STX7111 is not set
 # CONFIG_SND_STM_STX7141 is not set
diff --git a/arch/sh/configs/pdk7105se_defconfig b/arch/sh/configs/pdk7105se_defconfig
index 0c648d4..518603a 100644
--- a/arch/sh/configs/pdk7105se_defconfig
+++ b/arch/sh/configs/pdk7105se_defconfig
@@ -882,7 +882,7 @@ CONFIG_SND_SOC=y
 #
 CONFIG_SND_STM=y
 CONFIG_SND_STM_BPA2_PARTITION_NAME="audio"
-# CONFIG_SND_STM_STX710X is not set
+# CONFIG_SND_STM_STX7100 is not set
 CONFIG_SND_STM_STX7105=y
 # CONFIG_SND_STM_STX7111 is not set
 # CONFIG_SND_STM_STX7141 is not set
diff --git a/sound/stm/Kconfig b/sound/stm/Kconfig
index ddd9769..b792ab3 100644
--- a/sound/stm/Kconfig
+++ b/sound/stm/Kconfig
@@ -56,7 +56,7 @@ config SND_STM_DEBUG_LEVEL
 		/sys/module/snd_stm/parameter/debug_component_name (or
 		use module/kernel command line parameter ;-)...
 
-config SND_STM_STX710X
+config SND_STM_STX7100
 	tristate "STx7100 and STx7109 support"
 	depends on SND_STM
 	default y if CPU_SUBTYPE_STB7100
@@ -64,7 +64,7 @@ config SND_STM_STX710X
 		Select this to get ALSA driver for STx7100 and STx7109 chips.
 
 		If you compile this driver as a module, it will be
-		called snd-stm-stx710x.ko
+		called snd-stm-stx7100.ko
 
 config SND_STM_STX7105
 	tristate "STx7105 support"
diff --git a/sound/stm/Makefile b/sound/stm/Makefile
index d22c97d..afc0ec6 100644
--- a/sound/stm/Makefile
+++ b/sound/stm/Makefile
@@ -3,8 +3,8 @@ snd-stm-y := init.o common.o fsynth.o
 snd-stm-y += conv.o conv_i2sspdif.o conv_int_dac.o
 snd-stm-y += pcm_player.o pcm_reader.o spdif_player.o
 
-obj-$(CONFIG_SND_STM_STX710X) += snd-stm-stx710x.o
-snd-stm-stx710x-y := stx710x.o
+obj-$(CONFIG_SND_STM_STX7100) += snd-stm-stx7100.o
+snd-stm-stx7100-y := stx7100.o
 
 obj-$(CONFIG_SND_STM_STX7105) += snd-stm-stx7105.o
 snd-stm-stx7105-y := stx7105.o
diff --git a/sound/stm/pcm_player.c b/sound/stm/pcm_player.c
index 57e3937..da5e46a 100644
--- a/sound/stm/pcm_player.c
+++ b/sound/stm/pcm_player.c
@@ -956,7 +956,7 @@ static int snd_stm_pcm_player_probe(struct platform_device *pdev)
 
 	/* FDMA transfer size depends (among others ;-) on FIFO length,
 	 * which is:
-	 * - 30 cells (120 bytes) in STx710x and STx7200 cut 1.0
+	 * - 30 cells (120 bytes) in STx7100/9 and STx7200 cut 1.0
 	 * - 70 cells (280 bytes) in STx7111 and STx7200 cut 2.0. */
 
 	if (pcm_player->ver < ver__AUD_PCMOUT__65_1_3)
diff --git a/sound/stm/pcm_reader.c b/sound/stm/pcm_reader.c
index abadec5..dc6062c 100644
--- a/sound/stm/pcm_reader.c
+++ b/sound/stm/pcm_reader.c
@@ -876,7 +876,7 @@ static int snd_stm_pcm_reader_probe(struct platform_device *pdev)
 
 	/* FDMA transfer size depends (among others ;-) on FIFO length,
 	 * which is:
-	 * - 2 cells (8 bytes) in STx710x and STx7200 cut 1.0
+	 * - 2 cells (8 bytes) in STx7100/9 and STx7200 cut 1.0
 	 * - 70 cells (280 bytes) in STx7111 and STx7200 cut 2.0. */
 
 	if (pcm_reader->ver < ver__AUD_PCMIN__65_3_1)
diff --git a/sound/stm/reg_7100_audcfg.h b/sound/stm/reg_7100_audcfg.h
new file mode 100644
index 0000000..375ea05
--- /dev/null
+++ b/sound/stm/reg_7100_audcfg.h
@@ -0,0 +1,178 @@
+#ifndef __SND_STM_710X_AUDCFG_H
+#define __SND_STM_710X_AUDCFG_H
+
+
+
+/*
+ * 710X_AUDCFG_IO_CTRL
+ */
+
+#define offset__710X_AUDCFG_IO_CTRL(ip) 0x00
+#define get__710X_AUDCFG_IO_CTRL(ip) readl(ip->base + \
+	offset__710X_AUDCFG_IO_CTRL(ip))
+#define set__710X_AUDCFG_IO_CTRL(ip, value) writel(value, ip->base + \
+	offset__710X_AUDCFG_IO_CTRL(ip))
+
+/* PCM_CLK_EN */
+
+#define shift__710X_AUDCFG_IO_CTRL__PCM_CLK_EN(ip) 0
+#define mask__710X_AUDCFG_IO_CTRL__PCM_CLK_EN(ip) 0x1
+#define get__710X_AUDCFG_IO_CTRL__PCM_CLK_EN(ip) ((readl(ip->base + \
+	offset__710X_AUDCFG_IO_CTRL(ip)) >> \
+	shift__710X_AUDCFG_IO_CTRL__PCM_CLK_EN(ip)) & \
+	mask__710X_AUDCFG_IO_CTRL__PCM_CLK_EN(ip))
+#define set__710X_AUDCFG_IO_CTRL__PCM_CLK_EN(ip, value) \
+	writel((readl(ip->base + offset__710X_AUDCFG_IO_CTRL(ip)) & \
+	~(mask__710X_AUDCFG_IO_CTRL__PCM_CLK_EN(ip) << \
+	shift__710X_AUDCFG_IO_CTRL__PCM_CLK_EN(ip))) | (((value) & \
+	mask__710X_AUDCFG_IO_CTRL__PCM_CLK_EN(ip)) << \
+	shift__710X_AUDCFG_IO_CTRL__PCM_CLK_EN(ip)), ip->base + \
+	offset__710X_AUDCFG_IO_CTRL(ip))
+
+#define value__710X_AUDCFG_IO_CTRL__PCM_CLK_EN__INPUT(ip) 0x0
+#define mask__710X_AUDCFG_IO_CTRL__PCM_CLK_EN__INPUT(ip) \
+	(value__710X_AUDCFG_IO_CTRL__PCM_CLK_EN__INPUT(ip) << \
+	shift__710X_AUDCFG_IO_CTRL__PCM_CLK_EN(ip))
+#define set__710X_AUDCFG_IO_CTRL__PCM_CLK_EN__INPUT(ip) \
+	set__710X_AUDCFG_IO_CTRL__PCM_CLK_EN(ip, \
+	value__710X_AUDCFG_IO_CTRL__PCM_CLK_EN__INPUT(ip))
+
+#define value__710X_AUDCFG_IO_CTRL__PCM_CLK_EN__OUTPUT(ip) 0x1
+#define mask__710X_AUDCFG_IO_CTRL__PCM_CLK_EN__OUTPUT(ip) \
+	(value__710X_AUDCFG_IO_CTRL__PCM_CLK_EN__OUTPUT(ip) << \
+	shift__710X_AUDCFG_IO_CTRL__PCM_CLK_EN(ip))
+#define set__710X_AUDCFG_IO_CTRL__PCM_CLK_EN__OUTPUT(ip) \
+	set__710X_AUDCFG_IO_CTRL__PCM_CLK_EN(ip, \
+	value__710X_AUDCFG_IO_CTRL__PCM_CLK_EN__OUTPUT(ip))
+
+/* DATA0_EN */
+
+#define shift__710X_AUDCFG_IO_CTRL__DATA0_EN(ip) 1
+#define mask__710X_AUDCFG_IO_CTRL__DATA0_EN(ip) 0x1
+#define get__710X_AUDCFG_IO_CTRL__DATA0_EN(ip) ((readl(ip->base + \
+	offset__710X_AUDCFG_IO_CTRL(ip)) >> \
+	shift__710X_AUDCFG_IO_CTRL__DATA0_EN(ip)) & \
+	mask__710X_AUDCFG_IO_CTRL__DATA0_EN(ip))
+#define set__710X_AUDCFG_IO_CTRL__DATA0_EN(ip, value) \
+	writel((readl(ip->base + offset__710X_AUDCFG_IO_CTRL(ip)) & \
+	~(mask__710X_AUDCFG_IO_CTRL__DATA0_EN(ip) << \
+	shift__710X_AUDCFG_IO_CTRL__DATA0_EN(ip))) | (((value) & \
+	mask__710X_AUDCFG_IO_CTRL__DATA0_EN(ip)) << \
+	shift__710X_AUDCFG_IO_CTRL__DATA0_EN(ip)), ip->base + \
+	offset__710X_AUDCFG_IO_CTRL(ip))
+
+#define value__710X_AUDCFG_IO_CTRL__DATA0_EN__INPUT(ip) 0x0
+#define mask__710X_AUDCFG_IO_CTRL__DATA0_EN__INPUT(ip) \
+	(value__710X_AUDCFG_IO_CTRL__DATA0_EN__INPUT(ip) << \
+	shift__710X_AUDCFG_IO_CTRL__DATA0_EN(ip))
+#define set__710X_AUDCFG_IO_CTRL__DATA0_EN__INPUT(ip) \
+	set__710X_AUDCFG_IO_CTRL__DATA0_EN(ip, \
+	value__710X_AUDCFG_IO_CTRL__DATA0_EN__INPUT(ip))
+
+#define value__710X_AUDCFG_IO_CTRL__DATA0_EN__OUTPUT(ip) 0x1
+#define mask__710X_AUDCFG_IO_CTRL__DATA0_EN__OUTPUT(ip) \
+	(value__710X_AUDCFG_IO_CTRL__DATA0_EN__OUTPUT(ip) << \
+	shift__710X_AUDCFG_IO_CTRL__DATA0_EN(ip))
+#define set__710X_AUDCFG_IO_CTRL__DATA0_EN__OUTPUT(ip) \
+	set__710X_AUDCFG_IO_CTRL__DATA0_EN(ip, \
+	value__710X_AUDCFG_IO_CTRL__DATA0_EN__OUTPUT(ip))
+
+/* DATA1_EN */
+
+#define shift__710X_AUDCFG_IO_CTRL__DATA1_EN(ip) 2
+#define mask__710X_AUDCFG_IO_CTRL__DATA1_EN(ip) 0x1
+#define get__710X_AUDCFG_IO_CTRL__DATA1_EN(ip) ((readl(ip->base + \
+	offset__710X_AUDCFG_IO_CTRL(ip)) >> \
+	shift__710X_AUDCFG_IO_CTRL__DATA1_EN(ip)) & \
+	mask__710X_AUDCFG_IO_CTRL__DATA1_EN(ip))
+#define set__710X_AUDCFG_IO_CTRL__DATA1_EN(ip, value) \
+	writel((readl(ip->base + offset__710X_AUDCFG_IO_CTRL(ip)) & \
+	~(mask__710X_AUDCFG_IO_CTRL__DATA1_EN(ip) << \
+	shift__710X_AUDCFG_IO_CTRL__DATA1_EN(ip))) | (((value) & \
+	mask__710X_AUDCFG_IO_CTRL__DATA1_EN(ip)) << \
+	shift__710X_AUDCFG_IO_CTRL__DATA1_EN(ip)), ip->base + \
+	offset__710X_AUDCFG_IO_CTRL(ip))
+
+#define value__710X_AUDCFG_IO_CTRL__DATA1_EN__INPUT(ip) 0x0
+#define mask__710X_AUDCFG_IO_CTRL__DATA1_EN__INPUT(ip) \
+	(value__710X_AUDCFG_IO_CTRL__DATA1_EN__INPUT(ip) << \
+	shift__710X_AUDCFG_IO_CTRL__DATA1_EN(ip))
+#define set__710X_AUDCFG_IO_CTRL__DATA1_EN__INPUT(ip) \
+	set__710X_AUDCFG_IO_CTRL__DATA1_EN(ip, \
+	value__710X_AUDCFG_IO_CTRL__DATA1_EN__INPUT(ip))
+
+#define value__710X_AUDCFG_IO_CTRL__DATA1_EN__OUTPUT(ip) 0x1
+#define mask__710X_AUDCFG_IO_CTRL__DATA1_EN__OUTPUT(ip) \
+	(value__710X_AUDCFG_IO_CTRL__DATA1_EN__OUTPUT(ip) << \
+	shift__710X_AUDCFG_IO_CTRL__DATA1_EN(ip))
+#define set__710X_AUDCFG_IO_CTRL__DATA1_EN__OUTPUT(ip) \
+	set__710X_AUDCFG_IO_CTRL__DATA1_EN(ip, \
+	value__710X_AUDCFG_IO_CTRL__DATA1_EN__OUTPUT(ip))
+
+/* SPDIF_EN */
+
+#define shift__710X_AUDCFG_IO_CTRL__SPDIF_EN(ip) 3
+#define mask__710X_AUDCFG_IO_CTRL__SPDIF_EN(ip) 0x1
+#define get__710X_AUDCFG_IO_CTRL__SPDIF_EN(ip) ((readl(ip->base + \
+	offset__710X_AUDCFG_IO_CTRL(ip)) >> \
+	shift__710X_AUDCFG_IO_CTRL__SPDIF_EN(ip)) & \
+	mask__710X_AUDCFG_IO_CTRL__SPDIF_EN(ip))
+#define set__710X_AUDCFG_IO_CTRL__SPDIF_EN(ip, value) \
+	writel((readl(ip->base + offset__710X_AUDCFG_IO_CTRL(ip)) & \
+	~(mask__710X_AUDCFG_IO_CTRL__SPDIF_EN(ip) << \
+	shift__710X_AUDCFG_IO_CTRL__SPDIF_EN(ip))) | (((value) & \
+	mask__710X_AUDCFG_IO_CTRL__SPDIF_EN(ip)) << \
+	shift__710X_AUDCFG_IO_CTRL__SPDIF_EN(ip)), ip->base + \
+	offset__710X_AUDCFG_IO_CTRL(ip))
+
+#define value__710X_AUDCFG_IO_CTRL__SPDIF_EN__DISABLE(ip) 0x0
+#define mask__710X_AUDCFG_IO_CTRL__SPDIF_EN__DISABLE(ip) \
+	(value__710X_AUDCFG_IO_CTRL__SPDIF_EN__DISABLE(ip) << \
+	shift__710X_AUDCFG_IO_CTRL__SPDIF_EN(ip))
+#define set__710X_AUDCFG_IO_CTRL__SPDIF_EN__DISABLE(ip) \
+	set__710X_AUDCFG_IO_CTRL__SPDIF_EN(ip, \
+	value__710X_AUDCFG_IO_CTRL__SPDIF_EN__DISABLE(ip))
+
+#define value__710X_AUDCFG_IO_CTRL__SPDIF_EN__ENABLE(ip) 0x1
+#define mask__710X_AUDCFG_IO_CTRL__SPDIF_EN__ENABLE(ip) \
+	(value__710X_AUDCFG_IO_CTRL__SPDIF_EN__ENABLE(ip) << \
+	shift__710X_AUDCFG_IO_CTRL__SPDIF_EN(ip))
+#define set__710X_AUDCFG_IO_CTRL__SPDIF_EN__ENABLE(ip) \
+	set__710X_AUDCFG_IO_CTRL__SPDIF_EN(ip, \
+	value__710X_AUDCFG_IO_CTRL__SPDIF_EN__ENABLE(ip))
+
+/* HDMI_AUD_SRC */
+
+#define shift__710X_AUDCFG_IO_CTRL__HDMI_AUD_SRC(ip) 4
+#define mask__710X_AUDCFG_IO_CTRL__HDMI_AUD_SRC(ip) 0x1
+#define get__710X_AUDCFG_IO_CTRL__HDMI_AUD_SRC(ip) ((readl(ip->base + \
+	offset__710X_AUDCFG_IO_CTRL(ip)) >> \
+	shift__710X_AUDCFG_IO_CTRL__HDMI_AUD_SRC(ip)) & \
+	mask__710X_AUDCFG_IO_CTRL__HDMI_AUD_SRC(ip))
+#define set__710X_AUDCFG_IO_CTRL__HDMI_AUD_SRC(ip, value) \
+	writel((readl(ip->base + offset__710X_AUDCFG_IO_CTRL(ip)) & \
+	~(mask__710X_AUDCFG_IO_CTRL__HDMI_AUD_SRC(ip) << \
+	shift__710X_AUDCFG_IO_CTRL__HDMI_AUD_SRC(ip))) | (((value) & \
+	mask__710X_AUDCFG_IO_CTRL__HDMI_AUD_SRC(ip)) << \
+	shift__710X_AUDCFG_IO_CTRL__HDMI_AUD_SRC(ip)), ip->base + \
+	offset__710X_AUDCFG_IO_CTRL(ip))
+
+#define value__710X_AUDCFG_IO_CTRL__HDMI_AUD_SRC__PCM_PLAYER(ip) 0x0
+#define mask__710X_AUDCFG_IO_CTRL__HDMI_AUD_SRC__PCM_PLAYER(ip) \
+	(value__710X_AUDCFG_IO_CTRL__HDMI_AUD_SRC__PCM_PLAYER(ip) << \
+	shift__710X_AUDCFG_IO_CTRL__HDMI_AUD_SRC(ip))
+#define set__710X_AUDCFG_IO_CTRL__HDMI_AUD_SRC__PCM_PLAYER(ip) \
+	set__710X_AUDCFG_IO_CTRL__HDMI_AUD_SRC(ip, \
+	value__710X_AUDCFG_IO_CTRL__HDMI_AUD_SRC__PCM_PLAYER(ip))
+
+#define value__710X_AUDCFG_IO_CTRL__HDMI_AUD_SRC__SPDIF_PLAYER(ip) 0x1
+#define mask__710X_AUDCFG_IO_CTRL__HDMI_AUD_SRC__SPDIF_PLAYER(ip) \
+	(value__710X_AUDCFG_IO_CTRL__HDMI_AUD_SRC__SPDIF_PLAYER(ip) << \
+	shift__710X_AUDCFG_IO_CTRL__HDMI_AUD_SRC(ip))
+#define set__710X_AUDCFG_IO_CTRL__HDMI_AUD_SRC__SPDIF_PLAYER(ip) \
+	set__710X_AUDCFG_IO_CTRL__HDMI_AUD_SRC(ip, \
+	value__710X_AUDCFG_IO_CTRL__HDMI_AUD_SRC__SPDIF_PLAYER(ip))
+
+
+
+#endif
diff --git a/sound/stm/reg_710x_audcfg.h b/sound/stm/reg_710x_audcfg.h
deleted file mode 100644
index 375ea05..0000000
--- a/sound/stm/reg_710x_audcfg.h
+++ /dev/null
@@ -1,178 +0,0 @@
-#ifndef __SND_STM_710X_AUDCFG_H
-#define __SND_STM_710X_AUDCFG_H
-
-
-
-/*
- * 710X_AUDCFG_IO_CTRL
- */
-
-#define offset__710X_AUDCFG_IO_CTRL(ip) 0x00
-#define get__710X_AUDCFG_IO_CTRL(ip) readl(ip->base + \
-	offset__710X_AUDCFG_IO_CTRL(ip))
-#define set__710X_AUDCFG_IO_CTRL(ip, value) writel(value, ip->base + \
-	offset__710X_AUDCFG_IO_CTRL(ip))
-
-/* PCM_CLK_EN */
-
-#define shift__710X_AUDCFG_IO_CTRL__PCM_CLK_EN(ip) 0
-#define mask__710X_AUDCFG_IO_CTRL__PCM_CLK_EN(ip) 0x1
-#define get__710X_AUDCFG_IO_CTRL__PCM_CLK_EN(ip) ((readl(ip->base + \
-	offset__710X_AUDCFG_IO_CTRL(ip)) >> \
-	shift__710X_AUDCFG_IO_CTRL__PCM_CLK_EN(ip)) & \
-	mask__710X_AUDCFG_IO_CTRL__PCM_CLK_EN(ip))
-#define set__710X_AUDCFG_IO_CTRL__PCM_CLK_EN(ip, value) \
-	writel((readl(ip->base + offset__710X_AUDCFG_IO_CTRL(ip)) & \
-	~(mask__710X_AUDCFG_IO_CTRL__PCM_CLK_EN(ip) << \
-	shift__710X_AUDCFG_IO_CTRL__PCM_CLK_EN(ip))) | (((value) & \
-	mask__710X_AUDCFG_IO_CTRL__PCM_CLK_EN(ip)) << \
-	shift__710X_AUDCFG_IO_CTRL__PCM_CLK_EN(ip)), ip->base + \
-	offset__710X_AUDCFG_IO_CTRL(ip))
-
-#define value__710X_AUDCFG_IO_CTRL__PCM_CLK_EN__INPUT(ip) 0x0
-#define mask__710X_AUDCFG_IO_CTRL__PCM_CLK_EN__INPUT(ip) \
-	(value__710X_AUDCFG_IO_CTRL__PCM_CLK_EN__INPUT(ip) << \
-	shift__710X_AUDCFG_IO_CTRL__PCM_CLK_EN(ip))
-#define set__710X_AUDCFG_IO_CTRL__PCM_CLK_EN__INPUT(ip) \
-	set__710X_AUDCFG_IO_CTRL__PCM_CLK_EN(ip, \
-	value__710X_AUDCFG_IO_CTRL__PCM_CLK_EN__INPUT(ip))
-
-#define value__710X_AUDCFG_IO_CTRL__PCM_CLK_EN__OUTPUT(ip) 0x1
-#define mask__710X_AUDCFG_IO_CTRL__PCM_CLK_EN__OUTPUT(ip) \
-	(value__710X_AUDCFG_IO_CTRL__PCM_CLK_EN__OUTPUT(ip) << \
-	shift__710X_AUDCFG_IO_CTRL__PCM_CLK_EN(ip))
-#define set__710X_AUDCFG_IO_CTRL__PCM_CLK_EN__OUTPUT(ip) \
-	set__710X_AUDCFG_IO_CTRL__PCM_CLK_EN(ip, \
-	value__710X_AUDCFG_IO_CTRL__PCM_CLK_EN__OUTPUT(ip))
-
-/* DATA0_EN */
-
-#define shift__710X_AUDCFG_IO_CTRL__DATA0_EN(ip) 1
-#define mask__710X_AUDCFG_IO_CTRL__DATA0_EN(ip) 0x1
-#define get__710X_AUDCFG_IO_CTRL__DATA0_EN(ip) ((readl(ip->base + \
-	offset__710X_AUDCFG_IO_CTRL(ip)) >> \
-	shift__710X_AUDCFG_IO_CTRL__DATA0_EN(ip)) & \
-	mask__710X_AUDCFG_IO_CTRL__DATA0_EN(ip))
-#define set__710X_AUDCFG_IO_CTRL__DATA0_EN(ip, value) \
-	writel((readl(ip->base + offset__710X_AUDCFG_IO_CTRL(ip)) & \
-	~(mask__710X_AUDCFG_IO_CTRL__DATA0_EN(ip) << \
-	shift__710X_AUDCFG_IO_CTRL__DATA0_EN(ip))) | (((value) & \
-	mask__710X_AUDCFG_IO_CTRL__DATA0_EN(ip)) << \
-	shift__710X_AUDCFG_IO_CTRL__DATA0_EN(ip)), ip->base + \
-	offset__710X_AUDCFG_IO_CTRL(ip))
-
-#define value__710X_AUDCFG_IO_CTRL__DATA0_EN__INPUT(ip) 0x0
-#define mask__710X_AUDCFG_IO_CTRL__DATA0_EN__INPUT(ip) \
-	(value__710X_AUDCFG_IO_CTRL__DATA0_EN__INPUT(ip) << \
-	shift__710X_AUDCFG_IO_CTRL__DATA0_EN(ip))
-#define set__710X_AUDCFG_IO_CTRL__DATA0_EN__INPUT(ip) \
-	set__710X_AUDCFG_IO_CTRL__DATA0_EN(ip, \
-	value__710X_AUDCFG_IO_CTRL__DATA0_EN__INPUT(ip))
-
-#define value__710X_AUDCFG_IO_CTRL__DATA0_EN__OUTPUT(ip) 0x1
-#define mask__710X_AUDCFG_IO_CTRL__DATA0_EN__OUTPUT(ip) \
-	(value__710X_AUDCFG_IO_CTRL__DATA0_EN__OUTPUT(ip) << \
-	shift__710X_AUDCFG_IO_CTRL__DATA0_EN(ip))
-#define set__710X_AUDCFG_IO_CTRL__DATA0_EN__OUTPUT(ip) \
-	set__710X_AUDCFG_IO_CTRL__DATA0_EN(ip, \
-	value__710X_AUDCFG_IO_CTRL__DATA0_EN__OUTPUT(ip))
-
-/* DATA1_EN */
-
-#define shift__710X_AUDCFG_IO_CTRL__DATA1_EN(ip) 2
-#define mask__710X_AUDCFG_IO_CTRL__DATA1_EN(ip) 0x1
-#define get__710X_AUDCFG_IO_CTRL__DATA1_EN(ip) ((readl(ip->base + \
-	offset__710X_AUDCFG_IO_CTRL(ip)) >> \
-	shift__710X_AUDCFG_IO_CTRL__DATA1_EN(ip)) & \
-	mask__710X_AUDCFG_IO_CTRL__DATA1_EN(ip))
-#define set__710X_AUDCFG_IO_CTRL__DATA1_EN(ip, value) \
-	writel((readl(ip->base + offset__710X_AUDCFG_IO_CTRL(ip)) & \
-	~(mask__710X_AUDCFG_IO_CTRL__DATA1_EN(ip) << \
-	shift__710X_AUDCFG_IO_CTRL__DATA1_EN(ip))) | (((value) & \
-	mask__710X_AUDCFG_IO_CTRL__DATA1_EN(ip)) << \
-	shift__710X_AUDCFG_IO_CTRL__DATA1_EN(ip)), ip->base + \
-	offset__710X_AUDCFG_IO_CTRL(ip))
-
-#define value__710X_AUDCFG_IO_CTRL__DATA1_EN__INPUT(ip) 0x0
-#define mask__710X_AUDCFG_IO_CTRL__DATA1_EN__INPUT(ip) \
-	(value__710X_AUDCFG_IO_CTRL__DATA1_EN__INPUT(ip) << \
-	shift__710X_AUDCFG_IO_CTRL__DATA1_EN(ip))
-#define set__710X_AUDCFG_IO_CTRL__DATA1_EN__INPUT(ip) \
-	set__710X_AUDCFG_IO_CTRL__DATA1_EN(ip, \
-	value__710X_AUDCFG_IO_CTRL__DATA1_EN__INPUT(ip))
-
-#define value__710X_AUDCFG_IO_CTRL__DATA1_EN__OUTPUT(ip) 0x1
-#define mask__710X_AUDCFG_IO_CTRL__DATA1_EN__OUTPUT(ip) \
-	(value__710X_AUDCFG_IO_CTRL__DATA1_EN__OUTPUT(ip) << \
-	shift__710X_AUDCFG_IO_CTRL__DATA1_EN(ip))
-#define set__710X_AUDCFG_IO_CTRL__DATA1_EN__OUTPUT(ip) \
-	set__710X_AUDCFG_IO_CTRL__DATA1_EN(ip, \
-	value__710X_AUDCFG_IO_CTRL__DATA1_EN__OUTPUT(ip))
-
-/* SPDIF_EN */
-
-#define shift__710X_AUDCFG_IO_CTRL__SPDIF_EN(ip) 3
-#define mask__710X_AUDCFG_IO_CTRL__SPDIF_EN(ip) 0x1
-#define get__710X_AUDCFG_IO_CTRL__SPDIF_EN(ip) ((readl(ip->base + \
-	offset__710X_AUDCFG_IO_CTRL(ip)) >> \
-	shift__710X_AUDCFG_IO_CTRL__SPDIF_EN(ip)) & \
-	mask__710X_AUDCFG_IO_CTRL__SPDIF_EN(ip))
-#define set__710X_AUDCFG_IO_CTRL__SPDIF_EN(ip, value) \
-	writel((readl(ip->base + offset__710X_AUDCFG_IO_CTRL(ip)) & \
-	~(mask__710X_AUDCFG_IO_CTRL__SPDIF_EN(ip) << \
-	shift__710X_AUDCFG_IO_CTRL__SPDIF_EN(ip))) | (((value) & \
-	mask__710X_AUDCFG_IO_CTRL__SPDIF_EN(ip)) << \
-	shift__710X_AUDCFG_IO_CTRL__SPDIF_EN(ip)), ip->base + \
-	offset__710X_AUDCFG_IO_CTRL(ip))
-
-#define value__710X_AUDCFG_IO_CTRL__SPDIF_EN__DISABLE(ip) 0x0
-#define mask__710X_AUDCFG_IO_CTRL__SPDIF_EN__DISABLE(ip) \
-	(value__710X_AUDCFG_IO_CTRL__SPDIF_EN__DISABLE(ip) << \
-	shift__710X_AUDCFG_IO_CTRL__SPDIF_EN(ip))
-#define set__710X_AUDCFG_IO_CTRL__SPDIF_EN__DISABLE(ip) \
-	set__710X_AUDCFG_IO_CTRL__SPDIF_EN(ip, \
-	value__710X_AUDCFG_IO_CTRL__SPDIF_EN__DISABLE(ip))
-
-#define value__710X_AUDCFG_IO_CTRL__SPDIF_EN__ENABLE(ip) 0x1
-#define mask__710X_AUDCFG_IO_CTRL__SPDIF_EN__ENABLE(ip) \
-	(value__710X_AUDCFG_IO_CTRL__SPDIF_EN__ENABLE(ip) << \
-	shift__710X_AUDCFG_IO_CTRL__SPDIF_EN(ip))
-#define set__710X_AUDCFG_IO_CTRL__SPDIF_EN__ENABLE(ip) \
-	set__710X_AUDCFG_IO_CTRL__SPDIF_EN(ip, \
-	value__710X_AUDCFG_IO_CTRL__SPDIF_EN__ENABLE(ip))
-
-/* HDMI_AUD_SRC */
-
-#define shift__710X_AUDCFG_IO_CTRL__HDMI_AUD_SRC(ip) 4
-#define mask__710X_AUDCFG_IO_CTRL__HDMI_AUD_SRC(ip) 0x1
-#define get__710X_AUDCFG_IO_CTRL__HDMI_AUD_SRC(ip) ((readl(ip->base + \
-	offset__710X_AUDCFG_IO_CTRL(ip)) >> \
-	shift__710X_AUDCFG_IO_CTRL__HDMI_AUD_SRC(ip)) & \
-	mask__710X_AUDCFG_IO_CTRL__HDMI_AUD_SRC(ip))
-#define set__710X_AUDCFG_IO_CTRL__HDMI_AUD_SRC(ip, value) \
-	writel((readl(ip->base + offset__710X_AUDCFG_IO_CTRL(ip)) & \
-	~(mask__710X_AUDCFG_IO_CTRL__HDMI_AUD_SRC(ip) << \
-	shift__710X_AUDCFG_IO_CTRL__HDMI_AUD_SRC(ip))) | (((value) & \
-	mask__710X_AUDCFG_IO_CTRL__HDMI_AUD_SRC(ip)) << \
-	shift__710X_AUDCFG_IO_CTRL__HDMI_AUD_SRC(ip)), ip->base + \
-	offset__710X_AUDCFG_IO_CTRL(ip))
-
-#define value__710X_AUDCFG_IO_CTRL__HDMI_AUD_SRC__PCM_PLAYER(ip) 0x0
-#define mask__710X_AUDCFG_IO_CTRL__HDMI_AUD_SRC__PCM_PLAYER(ip) \
-	(value__710X_AUDCFG_IO_CTRL__HDMI_AUD_SRC__PCM_PLAYER(ip) << \
-	shift__710X_AUDCFG_IO_CTRL__HDMI_AUD_SRC(ip))
-#define set__710X_AUDCFG_IO_CTRL__HDMI_AUD_SRC__PCM_PLAYER(ip) \
-	set__710X_AUDCFG_IO_CTRL__HDMI_AUD_SRC(ip, \
-	value__710X_AUDCFG_IO_CTRL__HDMI_AUD_SRC__PCM_PLAYER(ip))
-
-#define value__710X_AUDCFG_IO_CTRL__HDMI_AUD_SRC__SPDIF_PLAYER(ip) 0x1
-#define mask__710X_AUDCFG_IO_CTRL__HDMI_AUD_SRC__SPDIF_PLAYER(ip) \
-	(value__710X_AUDCFG_IO_CTRL__HDMI_AUD_SRC__SPDIF_PLAYER(ip) << \
-	shift__710X_AUDCFG_IO_CTRL__HDMI_AUD_SRC(ip))
-#define set__710X_AUDCFG_IO_CTRL__HDMI_AUD_SRC__SPDIF_PLAYER(ip) \
-	set__710X_AUDCFG_IO_CTRL__HDMI_AUD_SRC(ip, \
-	value__710X_AUDCFG_IO_CTRL__HDMI_AUD_SRC__SPDIF_PLAYER(ip))
-
-
-
-#endif
diff --git a/sound/stm/spdif_player.c b/sound/stm/spdif_player.c
index 5866bd0..d316463 100644
--- a/sound/stm/spdif_player.c
+++ b/sound/stm/spdif_player.c
@@ -1554,7 +1554,7 @@ static int snd_stm_spdif_player_probe(struct platform_device *pdev)
 
 	/* FDMA transfer size depends (among others ;-) on FIFO length,
 	 * which is:
-	 * - 6 cells (24 bytes) in STx710x and STx7200 cut 1.0
+	 * - 6 cells (24 bytes) in STx7100/9 and STx7200 cut 1.0
 	 * - 30 cells (120 bytes) in STx7111 and STx7200 cut 2.0. */
 
 	if (spdif_player->ver < ver__AUD_SPDIF__65_2_0)
diff --git a/sound/stm/stx7100.c b/sound/stm/stx7100.c
new file mode 100644
index 0000000..804643d
--- /dev/null
+++ b/sound/stm/stx7100.c
@@ -0,0 +1,569 @@
+/*
+ *   STMicrolectronics STx7100/STx7109 SoC description & audio glue driver
+ *
+ *   Copyright (c) 2005-2007 STMicroelectronics Limited
+ *
+ *   Author: Pawel Moll <pawel.moll@st.com>
+ *
+ *   This program is free software; you can redistribute it and/or modify
+ *   it under the terms of the GNU General Public License as published by
+ *   the Free Software Foundation; either version 2 of the License, or
+ *   (at your option) any later version.
+ *
+ *   This program is distributed in the hope that it will be useful,
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *   GNU General Public License for more details.
+ *
+ *   You should have received a copy of the GNU General Public License
+ *   along with this program; if not, write to the Free Software
+ *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
+ *
+ */
+
+#include <linux/init.h>
+#include <linux/module.h>
+#include <sound/driver.h>
+#include <sound/core.h>
+
+#define COMPONENT stx7100
+#include "common.h"
+#include "reg_7100_audcfg.h"
+
+
+
+/*
+ * ALSA module parameters
+ */
+
+static int index = -1; /* First available index */
+static char *id = "STx7100"; /* Default card ID */
+
+module_param(index, int, 0444);
+MODULE_PARM_DESC(index, "Index value for STx7100/STx7109 audio subsystem "
+		"card.");
+module_param(id, charp, 0444);
+MODULE_PARM_DESC(id, "ID string for STx7100/STx7109 audio subsystem card.");
+
+
+
+/*
+ * Audio subsystem components & platform devices
+ */
+
+/* STx7100/STx7109 audio glue */
+
+static struct platform_device stx7100_glue = {
+	.name          = "snd_stx7100_glue",
+	.id            = -1,
+	.num_resources = 1,
+	.resource      = (struct resource[]) {
+		{
+			.flags = IORESOURCE_MEM,
+			.start = 0x19210200,
+			.end   = 0x19210203,
+		},
+	},
+};
+
+/* Frequency synthesizer */
+
+static struct snd_stm_fsynth_info fsynth_info = {
+	/* .ver = see snd_stm_stx7100_init() */
+	.channels_from = 0,
+	.channels_to = 2,
+};
+
+static struct platform_device fsynth = {
+	.name          = "snd_fsynth",
+	.id            = -1,
+	.num_resources = 1,
+	.resource      = (struct resource[]) {
+		{
+			.flags = IORESOURCE_MEM,
+			.start = 0x19210000,
+			.end   = 0x1921003f,
+		},
+	},
+	.dev.platform_data = &fsynth_info,
+};
+
+/* Internal DAC */
+
+static struct snd_stm_conv_int_dac_info conv_int_dac_info = {
+	/* .ver = see snd_stm_stx7100_init() */
+	.source_bus_id = "snd_pcm_player.1",
+	.channel_from = 0,
+	.channel_to = 1,
+};
+
+static struct platform_device conv_int_dac = {
+	.name          = "snd_conv_int_dac",
+	.id            = -1,
+	.num_resources = 1,
+	.resource      = (struct resource[]) {
+		{
+			.flags = IORESOURCE_MEM,
+			.start = 0x19210100,
+			.end   = 0x19210103,
+		},
+	},
+	.dev.platform_data = &conv_int_dac_info,
+};
+
+/* PCM players */
+
+struct snd_stm_pcm_player_info pcm_player_0_info = {
+	.name = "PCM player #0 (HDMI)",
+	/* .ver = see snd_stm_stx7100_init() */
+	.card_device = 0,
+	.fsynth_bus_id = "snd_fsynth",
+	.fsynth_output = 0,
+	.channels = 10,
+	.fdma_initiator = 1,
+	/* .fdma_request_line = see snd_stm_stx7100_init() */
+};
+
+static struct platform_device pcm_player_0 = {
+	.name          = "snd_pcm_player",
+	.id            = 0,
+	.num_resources = 2,
+	.resource      = (struct resource[]) {
+		{
+			.flags = IORESOURCE_MEM,
+			.start = 0x18101000,
+			.end   = 0x18101027,
+		},
+		{
+			.flags = IORESOURCE_IRQ,
+			.start = 144,
+			.end   = 144,
+		},
+	},
+	.dev.platform_data = &pcm_player_0_info,
+};
+
+struct snd_stm_pcm_player_info pcm_player_1_info = {
+	.name = "PCM player #1",
+	/* .ver = see snd_stm_stx7100_init() */
+	.card_device = 1,
+	.fsynth_bus_id = "snd_fsynth",
+	.fsynth_output = 1,
+	.channels = 2,
+	.fdma_initiator = 1,
+	/* .fdma_request_line = see snd_stm_stx7100_init() */
+};
+
+static struct platform_device pcm_player_1 = {
+	.name          = "snd_pcm_player",
+	.id            = 1,
+	.num_resources = 2,
+	.resource      = (struct resource[]) {
+		{
+			.flags = IORESOURCE_MEM,
+			.start = 0x18101800,
+			.end   = 0x18101827,
+		},
+		{
+			.flags = IORESOURCE_IRQ,
+			.start = 145,
+			.end   = 145,
+		},
+	},
+	.dev.platform_data = &pcm_player_1_info,
+};
+
+/* SPDIF player */
+
+struct snd_stm_spdif_player_info spdif_player_info = {
+	.name = "SPDIF player (HDMI)",
+	/* .ver = see snd_stm_stx7100_init() */
+	.card_device = 2,
+	.fsynth_bus_id = "snd_fsynth",
+	.fsynth_output = 2,
+	.fdma_initiator = 1,
+	/* .fdma_request_line = see snd_stm_stx7100_init() */
+};
+
+static struct platform_device spdif_player = {
+	.name          = "snd_spdif_player",
+	.id            = -1,
+	.num_resources = 2,
+	.resource      = (struct resource[]) {
+		{
+			.flags = IORESOURCE_MEM,
+			.start = 0x18103000,
+			.end   = 0x1810303f,
+		},
+		{
+			.flags = IORESOURCE_IRQ,
+			.start = 147,
+			.end   = 147,
+		},
+	},
+	.dev.platform_data = &spdif_player_info,
+};
+
+/* HDMI-connected I2S to SPDIF converter */
+
+static struct snd_stm_conv_i2sspdif_info conv_i2sspdif_info = {
+	/* .ver = see snd_stm_stx7100_init() */
+	.source_bus_id = "snd_pcm_player.0",
+	.channel_from = 0,
+	.channel_to = 1,
+};
+
+static struct platform_device conv_i2sspdif = {
+	.name          = "snd_conv_i2sspdif",
+	.id            = -1,
+	.num_resources = 2,
+	.resource      = (struct resource[]) {
+		{
+			.flags = IORESOURCE_MEM,
+			.start = 0x18103800,
+			.end   = 0x18103a23,
+		},
+		{
+			.flags = IORESOURCE_IRQ,
+			.start = 142,
+			.end   = 142,
+		},
+	},
+	.dev.platform_data = &conv_i2sspdif_info,
+};
+
+/* PCM reader */
+
+struct snd_stm_pcm_reader_info pcm_reader_info = {
+	.name = "PCM Reader",
+	/* .ver = see snd_stm_stx7100_init() */
+	.card_device = 3,
+	.channels = 2,
+	.fdma_initiator = 1,
+	/* .fdma_request_line = see snd_stm_stx7100_init() */
+};
+
+static struct platform_device pcm_reader = {
+	.name          = "snd_pcm_reader",
+	.id            = -1,
+	.num_resources = 2,
+	.resource      = (struct resource[]) {
+		{
+			.flags = IORESOURCE_MEM,
+			.start = 0x18102000,
+			.end   = 0x18102027,
+		},
+		{
+			.flags = IORESOURCE_IRQ,
+			.start = 146,
+			.end   = 146,
+		},
+	},
+	.dev.platform_data = &pcm_reader_info,
+};
+
+static struct platform_device *snd_stm_stx7100_devices[] = {
+	&stx7100_glue,
+	&fsynth,
+	&pcm_player_0,
+	&pcm_player_1,
+	&conv_int_dac,
+	&spdif_player,
+	&conv_i2sspdif,
+	&pcm_reader,
+};
+
+
+
+/*
+ * Audio glue driver implementation
+ */
+
+struct snd_stm_stx7100_glue {
+	int ver;
+
+	struct resource *mem_region;
+	void *base;
+
+	struct snd_info_entry *proc_entry;
+
+	snd_stm_magic_field;
+};
+
+static void snd_stm_stx7100_glue_dump_registers(struct snd_info_entry *entry,
+		struct snd_info_buffer *buffer)
+{
+	struct snd_stm_stx7100_glue *stx7100_glue = entry->private_data;
+
+	snd_stm_assert(stx7100_glue, return);
+	snd_stm_magic_assert(stx7100_glue, return);
+
+	snd_iprintf(buffer, "--- snd_stx7100_glue ---\n");
+	snd_iprintf(buffer, "base = 0x%p\n", stx7100_glue->base);
+
+	snd_iprintf(buffer, "AUDCFG_IO_CTRL (offset 0x00) = 0x%08x\n",
+			get__710X_AUDCFG_IO_CTRL(stx7100_glue));
+
+	snd_iprintf(buffer, "\n");
+}
+
+static int __init snd_stm_stx7100_glue_register(struct snd_device *snd_device)
+{
+	struct snd_stm_stx7100_glue *stx7100_glue = snd_device->device_data;
+
+	snd_stm_assert(stx7100_glue, return -EINVAL);
+	snd_stm_magic_assert(stx7100_glue, return -EINVAL);
+
+	/* Enable audio outputs */
+
+	set__710X_AUDCFG_IO_CTRL(stx7100_glue,
+		mask__710X_AUDCFG_IO_CTRL__SPDIF_EN__ENABLE(stx7100_glue) |
+		mask__710X_AUDCFG_IO_CTRL__DATA1_EN__OUTPUT(stx7100_glue) |
+		mask__710X_AUDCFG_IO_CTRL__DATA0_EN__OUTPUT(stx7100_glue) |
+		mask__710X_AUDCFG_IO_CTRL__PCM_CLK_EN__OUTPUT(stx7100_glue));
+
+	/* Additional procfs info */
+
+	snd_stm_info_register(&stx7100_glue->proc_entry, "stx7100_glue",
+			snd_stm_stx7100_glue_dump_registers, stx7100_glue);
+
+	return 0;
+}
+
+static int __exit snd_stm_stx7100_glue_disconnect(struct snd_device *snd_device)
+{
+	struct snd_stm_stx7100_glue *stx7100_glue = snd_device->device_data;
+
+	snd_stm_assert(stx7100_glue, return -EINVAL);
+	snd_stm_magic_assert(stx7100_glue, return -EINVAL);
+
+	/* Remove procfs entry */
+
+	snd_stm_info_unregister(stx7100_glue->proc_entry);
+
+	/* Disable audio outputs */
+
+	set__710X_AUDCFG_IO_CTRL(stx7100_glue,
+		mask__710X_AUDCFG_IO_CTRL__SPDIF_EN__DISABLE(stx7100_glue) |
+		mask__710X_AUDCFG_IO_CTRL__DATA1_EN__INPUT(stx7100_glue) |
+		mask__710X_AUDCFG_IO_CTRL__DATA0_EN__INPUT(stx7100_glue) |
+		mask__710X_AUDCFG_IO_CTRL__PCM_CLK_EN__INPUT(stx7100_glue));
+
+	return 0;
+}
+
+static struct snd_device_ops snd_stm_stx7100_glue_snd_device_ops = {
+	.dev_register = snd_stm_stx7100_glue_register,
+	.dev_disconnect = snd_stm_stx7100_glue_disconnect,
+};
+
+static int __init snd_stm_stx7100_glue_probe(struct platform_device *pdev)
+{
+	int result = 0;
+	struct snd_stm_stx7100_glue *stx7100_glue;
+
+	snd_stm_printd(0, "--- Probing device '%s'...\n", pdev->dev.bus_id);
+
+	stx7100_glue = kzalloc(sizeof(*stx7100_glue), GFP_KERNEL);
+	if (!stx7100_glue) {
+		snd_stm_printe("Can't allocate memory "
+				"for a device description!\n");
+		result = -ENOMEM;
+		goto error_alloc;
+	}
+	snd_stm_magic_set(stx7100_glue);
+
+	result = snd_stm_memory_request(pdev, &stx7100_glue->mem_region,
+			&stx7100_glue->base);
+	if (result < 0) {
+		snd_stm_printe("Memory region request failed!\n");
+		goto error_memory_request;
+	}
+
+	/* ALSA component */
+
+	result = snd_device_new(snd_stm_card_get(), SNDRV_DEV_LOWLEVEL,
+			stx7100_glue, &snd_stm_stx7100_glue_snd_device_ops);
+	if (result < 0) {
+		snd_stm_printe("ALSA low level device creation failed!\n");
+		goto error_device;
+	}
+
+	/* Done now */
+
+	platform_set_drvdata(pdev, stx7100_glue);
+
+	snd_stm_printd(0, "--- Probed successfully!\n");
+
+	return result;
+
+error_device:
+	snd_stm_memory_release(stx7100_glue->mem_region, stx7100_glue->base);
+error_memory_request:
+	snd_stm_magic_clear(stx7100_glue);
+	kfree(stx7100_glue);
+error_alloc:
+	return result;
+}
+
+static int __exit snd_stm_stx7100_glue_remove(struct platform_device *pdev)
+{
+	struct snd_stm_stx7100_glue *stx7100_glue =
+			platform_get_drvdata(pdev);
+
+	snd_stm_assert(stx7100_glue, return -EINVAL);
+	snd_stm_magic_assert(stx7100_glue, return -EINVAL);
+
+	snd_stm_memory_release(stx7100_glue->mem_region, stx7100_glue->base);
+
+	snd_stm_magic_clear(stx7100_glue);
+	kfree(stx7100_glue);
+
+	return 0;
+}
+
+static struct platform_driver snd_stm_stx7100_glue_driver = {
+	.driver = {
+		.name = "snd_stx7100_glue",
+	},
+	.probe = snd_stm_stx7100_glue_probe,
+	.remove = snd_stm_stx7100_glue_remove,
+};
+
+
+
+/*
+ * Audio initialization
+ */
+
+static int __init snd_stm_stx7100_init(void)
+{
+	int result;
+	const char *soc_type;
+	struct snd_card *card;
+
+	snd_stm_printd(0, "snd_stm_stx7100_init()\n");
+
+	switch (cpu_data->type) {
+	case CPU_STB7100:
+		soc_type = "STx7100";
+
+		/* FDMA request line configuration */
+		pcm_player_0_info.fdma_request_line = 26;
+		pcm_player_1_info.fdma_request_line = 27;
+		spdif_player_info.fdma_request_line = 29;
+		pcm_reader_info.fdma_request_line = 28;
+
+		/* IP versions */
+		pcm_reader_info.ver = 1;
+		if (cpu_data->cut_major < 3) {
+			/* STx7100 cut < 3.0 */
+			pcm_player_0_info.ver = 1;
+			pcm_player_1_info.ver = 1;
+		} else {
+			/* STx7100 cut >= 3.0 */
+			pcm_player_0_info.ver = 2;
+			pcm_player_1_info.ver = 2;
+		}
+		conv_int_dac_info.ver = 1;
+		spdif_player_info.ver = 1;
+		conv_i2sspdif_info.ver = 1;
+
+		break;
+
+	case CPU_STB7109:
+		soc_type = "STx7109";
+
+		/* FDMA request line configuration */
+		pcm_player_0_info.fdma_request_line = 24;
+		pcm_player_1_info.fdma_request_line = 25;
+		spdif_player_info.fdma_request_line = 27;
+		pcm_reader_info.fdma_request_line = 26;
+
+		/* IP versions */
+		pcm_reader_info.ver = 2;
+		if (cpu_data->cut_major < 3) {
+			/* STx7109 cut < 3.0 */
+			pcm_player_0_info.ver = 3;
+			pcm_player_1_info.ver = 3;
+		} else {
+			/* STx7109 cut >= 3.0 */
+			pcm_player_0_info.ver = 4;
+			pcm_player_1_info.ver = 4;
+		}
+		conv_int_dac_info.ver = 2;
+		spdif_player_info.ver = 2;
+		conv_i2sspdif_info.ver = 2;
+
+		break;
+
+	default:
+		snd_stm_printe("Not supported (other than STx7100 or STx7109)"
+				" SOC detected!\n");
+		result = -EINVAL;
+		goto error_soc_type;
+	}
+
+	result = platform_driver_register(&snd_stm_stx7100_glue_driver);
+	if (result != 0) {
+		snd_stm_printe("Failed to register audio glue driver!\n");
+		goto error_driver_register;
+	}
+
+	card = snd_stm_card_new(index, id, THIS_MODULE);
+	if (card == NULL) {
+		snd_stm_printe("ALSA card creation failed!\n");
+		result = -ENOMEM;
+		goto error_card_new;
+	}
+	strcpy(card->driver, soc_type);
+	snprintf(card->shortname, 31, "%s audio subsystem", soc_type);
+	snprintf(card->longname, 79, "STMicroelectronics %s cut %d.%d SOC "
+			"audio subsystem", soc_type, cpu_data->cut_major,
+			cpu_data->cut_minor);
+
+	result = snd_stm_add_platform_devices(snd_stm_stx7100_devices,
+			ARRAY_SIZE(snd_stm_stx7100_devices));
+	if (result != 0) {
+		snd_stm_printe("Failed to add platform devices!\n");
+		goto error_add_devices;
+	}
+
+	result = snd_stm_card_register();
+	if (result != 0) {
+		snd_stm_printe("Failed to register ALSA cards!\n");
+		goto error_card_register;
+	}
+
+	return 0;
+
+error_card_register:
+	snd_stm_remove_platform_devices(snd_stm_stx7100_devices,
+			ARRAY_SIZE(snd_stm_stx7100_devices));
+error_add_devices:
+	snd_stm_card_free();
+error_card_new:
+	platform_driver_unregister(&snd_stm_stx7100_glue_driver);
+error_driver_register:
+error_soc_type:
+	return result;
+}
+
+static void __exit snd_stm_stx7100_exit(void)
+{
+	snd_stm_printd(0, "snd_stm_stx7100_exit()\n");
+
+	snd_stm_card_free();
+
+	snd_stm_remove_platform_devices(snd_stm_stx7100_devices,
+			ARRAY_SIZE(snd_stm_stx7100_devices));
+
+	platform_driver_unregister(&snd_stm_stx7100_glue_driver);
+}
+
+MODULE_AUTHOR("Pawel Moll <pawel.moll@st.com>");
+MODULE_DESCRIPTION("STMicroelectronics STx7100/STx7109 audio driver");
+MODULE_LICENSE("GPL");
+
+module_init(snd_stm_stx7100_init);
+module_exit(snd_stm_stx7100_exit);
diff --git a/sound/stm/stx710x.c b/sound/stm/stx710x.c
deleted file mode 100644
index 6066052..0000000
--- a/sound/stm/stx710x.c
+++ /dev/null
@@ -1,570 +0,0 @@
-/*
- *   STMicrolectronics STx7100 SoC description & audio glue driver
- *
- *   Copyright (c) 2005-2007 STMicroelectronics Limited
- *
- *   Author: Pawel Moll <pawel.moll@st.com>
- *
- *   This program is free software; you can redistribute it and/or modify
- *   it under the terms of the GNU General Public License as published by
- *   the Free Software Foundation; either version 2 of the License, or
- *   (at your option) any later version.
- *
- *   This program is distributed in the hope that it will be useful,
- *   but WITHOUT ANY WARRANTY; without even the implied warranty of
- *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- *   GNU General Public License for more details.
- *
- *   You should have received a copy of the GNU General Public License
- *   along with this program; if not, write to the Free Software
- *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
- *
- */
-
-#include <linux/init.h>
-#include <linux/module.h>
-#include <sound/driver.h>
-#include <sound/core.h>
-
-#define COMPONENT stx710x
-#include "common.h"
-#include "reg_710x_audcfg.h"
-
-
-
-/*
- * ALSA module parameters
- */
-
-static int index = -1; /* First available index */
-static char *id = "STx710x"; /* Default card ID */
-
-module_param(index, int, 0444);
-MODULE_PARM_DESC(index, "Index value for STx710x audio subsystem card.");
-module_param(id, charp, 0444);
-MODULE_PARM_DESC(id, "ID string for STx710x audio subsystem card.");
-
-
-
-/*
- * Audio subsystem components & platform devices
- */
-
-/* STx710x audio glue */
-
-static struct platform_device stx710x_glue = {
-	.name          = "snd_stx710x_glue",
-	.id            = -1,
-	.num_resources = 1,
-	.resource      = (struct resource[]) {
-		{
-			.flags = IORESOURCE_MEM,
-			.start = 0x19210200,
-			.end   = 0x19210203,
-		},
-	},
-};
-
-/* Frequency synthesizer */
-
-static struct snd_stm_fsynth_info fsynth_info = {
-	/* .ver = see snd_stm_stx710x_init() */
-	.channels_from = 0,
-	.channels_to = 2,
-};
-
-static struct platform_device fsynth = {
-	.name          = "snd_fsynth",
-	.id            = -1,
-	.num_resources = 1,
-	.resource      = (struct resource[]) {
-		{
-			.flags = IORESOURCE_MEM,
-			.start = 0x19210000,
-			.end   = 0x1921003f,
-		},
-	},
-	.dev.platform_data = &fsynth_info,
-};
-
-/* Internal DAC */
-
-static struct snd_stm_conv_int_dac_info conv_int_dac_info = {
-	/* .ver = see snd_stm_stx710x_init() */
-	.source_bus_id = "snd_pcm_player.1",
-	.channel_from = 0,
-	.channel_to = 1,
-};
-
-static struct platform_device conv_int_dac = {
-	.name          = "snd_conv_int_dac",
-	.id            = -1,
-	.num_resources = 1,
-	.resource      = (struct resource[]) {
-		{
-			.flags = IORESOURCE_MEM,
-			.start = 0x19210100,
-			.end   = 0x19210103,
-		},
-	},
-	.dev.platform_data = &conv_int_dac_info,
-};
-
-/* PCM players */
-
-struct snd_stm_pcm_player_info pcm_player_0_info = {
-	.name = "PCM player #0 (HDMI)",
-	/* .ver = see snd_stm_stx710x_init() */
-	.card_device = 0,
-	.fsynth_bus_id = "snd_fsynth",
-	.fsynth_output = 0,
-	.channels = 10,
-	.fdma_initiator = 1,
-	/* .fdma_request_line = see snd_stm_stx710x_init() */
-};
-
-static struct platform_device pcm_player_0 = {
-	.name          = "snd_pcm_player",
-	.id            = 0,
-	.num_resources = 2,
-	.resource      = (struct resource[]) {
-		{
-			.flags = IORESOURCE_MEM,
-			.start = 0x18101000,
-			.end   = 0x18101027,
-		},
-		{
-			.flags = IORESOURCE_IRQ,
-			.start = 144,
-			.end   = 144,
-		},
-	},
-	.dev.platform_data = &pcm_player_0_info,
-};
-
-struct snd_stm_pcm_player_info pcm_player_1_info = {
-	.name = "PCM player #1",
-	/* .ver = see snd_stm_stx710x_init() */
-	.card_device = 1,
-	.fsynth_bus_id = "snd_fsynth",
-	.fsynth_output = 1,
-	.channels = 2,
-	.fdma_initiator = 1,
-	/* .fdma_request_line = see snd_stm_stx710x_init() */
-};
-
-static struct platform_device pcm_player_1 = {
-	.name          = "snd_pcm_player",
-	.id            = 1,
-	.num_resources = 2,
-	.resource      = (struct resource[]) {
-		{
-			.flags = IORESOURCE_MEM,
-			.start = 0x18101800,
-			.end   = 0x18101827,
-		},
-		{
-			.flags = IORESOURCE_IRQ,
-			.start = 145,
-			.end   = 145,
-		},
-	},
-	.dev.platform_data = &pcm_player_1_info,
-};
-
-/* SPDIF player */
-
-struct snd_stm_spdif_player_info spdif_player_info = {
-	.name = "SPDIF player (HDMI)",
-	/* .ver = see snd_stm_stx710x_init() */
-	.card_device = 2,
-	.fsynth_bus_id = "snd_fsynth",
-	.fsynth_output = 2,
-	.fdma_initiator = 1,
-	/* .fdma_request_line = see snd_stm_stx710x_init() */
-};
-
-static struct platform_device spdif_player = {
-	.name          = "snd_spdif_player",
-	.id            = -1,
-	.num_resources = 2,
-	.resource      = (struct resource[]) {
-		{
-			.flags = IORESOURCE_MEM,
-			.start = 0x18103000,
-			.end   = 0x1810303f,
-		},
-		{
-			.flags = IORESOURCE_IRQ,
-			.start = 147,
-			.end   = 147,
-		},
-	},
-	.dev.platform_data = &spdif_player_info,
-};
-
-/* HDMI-connected I2S to SPDIF converter */
-
-static struct snd_stm_conv_i2sspdif_info conv_i2sspdif_info = {
-	/* .ver = see snd_stm_stx710x_init() */
-	.source_bus_id = "snd_pcm_player.0",
-	.channel_from = 0,
-	.channel_to = 1,
-};
-
-static struct platform_device conv_i2sspdif = {
-	.name          = "snd_conv_i2sspdif",
-	.id            = -1,
-	.num_resources = 2,
-	.resource      = (struct resource[]) {
-		{
-			.flags = IORESOURCE_MEM,
-			.start = 0x18103800,
-			.end   = 0x18103a23,
-		},
-		{
-			.flags = IORESOURCE_IRQ,
-			.start = 142,
-			.end   = 142,
-		},
-	},
-	.dev.platform_data = &conv_i2sspdif_info,
-};
-
-/* PCM reader */
-
-struct snd_stm_pcm_reader_info pcm_reader_info = {
-	.name = "PCM Reader",
-	/* .ver = see snd_stm_stx710x_init() */
-	.card_device = 3,
-	.channels = 2,
-	.fdma_initiator = 1,
-	/* .fdma_request_line = see snd_stm_stx710x_init() */
-};
-
-static struct platform_device pcm_reader = {
-	.name          = "snd_pcm_reader",
-	.id            = -1,
-	.num_resources = 2,
-	.resource      = (struct resource[]) {
-		{
-			.flags = IORESOURCE_MEM,
-			.start = 0x18102000,
-			.end   = 0x18102027,
-		},
-		{
-			.flags = IORESOURCE_IRQ,
-			.start = 146,
-			.end   = 146,
-		},
-	},
-	.dev.platform_data = &pcm_reader_info,
-};
-
-static struct platform_device *snd_stm_stx710x_devices[] = {
-	&stx710x_glue,
-	&fsynth,
-	&pcm_player_0,
-	&pcm_player_1,
-	&conv_int_dac,
-	&spdif_player,
-	&conv_i2sspdif,
-	&pcm_reader,
-};
-
-
-
-/*
- * Audio glue driver implementation
- */
-
-struct snd_stm_stx710x_glue {
-	int ver;
-
-	struct resource *mem_region;
-	void *base;
-
-	struct snd_info_entry *proc_entry;
-
-	snd_stm_magic_field;
-};
-
-static void snd_stm_stx710x_glue_dump_registers(struct snd_info_entry *entry,
-		struct snd_info_buffer *buffer)
-{
-	struct snd_stm_stx710x_glue *stx710x_glue = entry->private_data;
-
-	snd_stm_assert(stx710x_glue, return);
-	snd_stm_magic_assert(stx710x_glue, return);
-
-	snd_iprintf(buffer, "--- snd_stx710x_glue ---\n");
-	snd_iprintf(buffer, "base = 0x%p\n", stx710x_glue->base);
-
-	snd_iprintf(buffer, "AUDCFG_IO_CTRL (offset 0x00) = 0x%08x\n",
-			get__710X_AUDCFG_IO_CTRL(stx710x_glue));
-
-	snd_iprintf(buffer, "\n");
-}
-
-static int __init snd_stm_stx710x_glue_register(struct snd_device *snd_device)
-{
-	struct snd_stm_stx710x_glue *stx710x_glue = snd_device->device_data;
-
-	snd_stm_assert(stx710x_glue, return -EINVAL);
-	snd_stm_magic_assert(stx710x_glue, return -EINVAL);
-
-	/* Enable audio outputs */
-
-	set__710X_AUDCFG_IO_CTRL(stx710x_glue,
-		mask__710X_AUDCFG_IO_CTRL__SPDIF_EN__ENABLE(stx710x_glue) |
-		mask__710X_AUDCFG_IO_CTRL__DATA1_EN__OUTPUT(stx710x_glue) |
-		mask__710X_AUDCFG_IO_CTRL__DATA0_EN__OUTPUT(stx710x_glue) |
-		mask__710X_AUDCFG_IO_CTRL__PCM_CLK_EN__OUTPUT(stx710x_glue));
-
-	/* Additional procfs info */
-
-	snd_stm_info_register(&stx710x_glue->proc_entry, "stx710x_glue",
-			snd_stm_stx710x_glue_dump_registers, stx710x_glue);
-
-	return 0;
-}
-
-static int __exit snd_stm_stx710x_glue_disconnect(struct snd_device *snd_device)
-{
-	struct snd_stm_stx710x_glue *stx710x_glue = snd_device->device_data;
-
-	snd_stm_assert(stx710x_glue, return -EINVAL);
-	snd_stm_magic_assert(stx710x_glue, return -EINVAL);
-
-	/* Remove procfs entry */
-
-	snd_stm_info_unregister(stx710x_glue->proc_entry);
-
-	/* Disable audio outputs */
-
-	set__710X_AUDCFG_IO_CTRL(stx710x_glue,
-		mask__710X_AUDCFG_IO_CTRL__SPDIF_EN__DISABLE(stx710x_glue) |
-		mask__710X_AUDCFG_IO_CTRL__DATA1_EN__INPUT(stx710x_glue) |
-		mask__710X_AUDCFG_IO_CTRL__DATA0_EN__INPUT(stx710x_glue) |
-		mask__710X_AUDCFG_IO_CTRL__PCM_CLK_EN__INPUT(stx710x_glue));
-
-	return 0;
-}
-
-static struct snd_device_ops snd_stm_stx710x_glue_snd_device_ops = {
-	.dev_register = snd_stm_stx710x_glue_register,
-	.dev_disconnect = snd_stm_stx710x_glue_disconnect,
-};
-
-static int __init snd_stm_stx710x_glue_probe(struct platform_device *pdev)
-{
-	int result = 0;
-	struct snd_stm_stx710x_glue *stx710x_glue;
-
-	snd_stm_printd(0, "--- Probing device '%s'...\n", pdev->dev.bus_id);
-
-	stx710x_glue = kzalloc(sizeof(*stx710x_glue), GFP_KERNEL);
-	if (!stx710x_glue) {
-		snd_stm_printe("Can't allocate memory "
-				"for a device description!\n");
-		result = -ENOMEM;
-		goto error_alloc;
-	}
-	snd_stm_magic_set(stx710x_glue);
-
-	result = snd_stm_memory_request(pdev, &stx710x_glue->mem_region,
-			&stx710x_glue->base);
-	if (result < 0) {
-		snd_stm_printe("Memory region request failed!\n");
-		goto error_memory_request;
-	}
-
-	/* ALSA component */
-
-	result = snd_device_new(snd_stm_card_get(), SNDRV_DEV_LOWLEVEL,
-			stx710x_glue, &snd_stm_stx710x_glue_snd_device_ops);
-	if (result < 0) {
-		snd_stm_printe("ALSA low level device creation failed!\n");
-		goto error_device;
-	}
-
-	/* Done now */
-
-	platform_set_drvdata(pdev, stx710x_glue);
-
-	snd_stm_printd(0, "--- Probed successfully!\n");
-
-	return result;
-
-error_device:
-	snd_stm_memory_release(stx710x_glue->mem_region, stx710x_glue->base);
-error_memory_request:
-	snd_stm_magic_clear(stx710x_glue);
-	kfree(stx710x_glue);
-error_alloc:
-	return result;
-}
-
-static int __exit snd_stm_stx710x_glue_remove(struct platform_device *pdev)
-{
-	struct snd_stm_stx710x_glue *stx710x_glue =
-			platform_get_drvdata(pdev);
-
-	snd_stm_assert(stx710x_glue, return -EINVAL);
-	snd_stm_magic_assert(stx710x_glue, return -EINVAL);
-
-	snd_stm_memory_release(stx710x_glue->mem_region, stx710x_glue->base);
-
-	snd_stm_magic_clear(stx710x_glue);
-	kfree(stx710x_glue);
-
-	return 0;
-}
-
-static struct platform_driver snd_stm_stx710x_glue_driver = {
-	.driver = {
-		.name = "snd_stx710x_glue",
-	},
-	.probe = snd_stm_stx710x_glue_probe,
-	.remove = snd_stm_stx710x_glue_remove,
-};
-
-
-
-/*
- * Audio initialization
- */
-
-static int __init snd_stm_stx710x_init(void)
-{
-	int result;
-	const char *soc_type;
-	struct snd_card *card;
-
-	snd_stm_printd(0, "snd_stm_stx710x_init()\n");
-
-	switch (cpu_data->type) {
-	case CPU_STB7100:
-		soc_type = "STx7100";
-
-		/* FDMA request line configuration */
-		pcm_player_0_info.fdma_request_line = 26;
-		pcm_player_1_info.fdma_request_line = 27;
-		spdif_player_info.fdma_request_line = 29;
-		pcm_reader_info.fdma_request_line = 28;
-
-		/* IP versions */
-		fsynth_info.ver = 1;
-		pcm_reader_info.ver = 1;
-		if (cpu_data->cut_major < 3) {
-			/* STx7100 cut < 3.0 */
-			pcm_player_0_info.ver = 1;
-			pcm_player_1_info.ver = 1;
-		} else {
-			/* STx7100 cut >= 3.0 */
-			pcm_player_0_info.ver = 2;
-			pcm_player_1_info.ver = 2;
-		}
-		conv_int_dac_info.ver = 1;
-		spdif_player_info.ver = 1;
-		conv_i2sspdif_info.ver = 1;
-
-		break;
-
-	case CPU_STB7109:
-		soc_type = "STx7109";
-
-		/* FDMA request line configuration */
-		pcm_player_0_info.fdma_request_line = 24;
-		pcm_player_1_info.fdma_request_line = 25;
-		spdif_player_info.fdma_request_line = 27;
-		pcm_reader_info.fdma_request_line = 26;
-
-		/* IP versions */
-		fsynth_info.ver = 2;
-		pcm_reader_info.ver = 2;
-		if (cpu_data->cut_major < 3) {
-			/* STx7109 cut < 3.0 */
-			pcm_player_0_info.ver = 3;
-			pcm_player_1_info.ver = 3;
-		} else {
-			/* STx7109 cut >= 3.0 */
-			pcm_player_0_info.ver = 4;
-			pcm_player_1_info.ver = 4;
-		}
-		conv_int_dac_info.ver = 2;
-		spdif_player_info.ver = 2;
-		conv_i2sspdif_info.ver = 2;
-
-		break;
-
-	default:
-		snd_stm_printe("Not supported (other than STx7100 or STx7109)"
-				" SOC detected!\n");
-		result = -EINVAL;
-		goto error_soc_type;
-	}
-
-	result = platform_driver_register(&snd_stm_stx710x_glue_driver);
-	if (result != 0) {
-		snd_stm_printe("Failed to register audio glue driver!\n");
-		goto error_driver_register;
-	}
-
-	card = snd_stm_card_new(index, id, THIS_MODULE);
-	if (card == NULL) {
-		snd_stm_printe("ALSA card creation failed!\n");
-		result = -ENOMEM;
-		goto error_card_new;
-	}
-	strcpy(card->driver, soc_type);
-	snprintf(card->shortname, 31, "%s audio subsystem", soc_type);
-	snprintf(card->longname, 79, "STMicroelectronics %s cut %d.%d SOC "
-			"audio subsystem", soc_type, cpu_data->cut_major,
-			cpu_data->cut_minor);
-
-	result = snd_stm_add_platform_devices(snd_stm_stx710x_devices,
-			ARRAY_SIZE(snd_stm_stx710x_devices));
-	if (result != 0) {
-		snd_stm_printe("Failed to add platform devices!\n");
-		goto error_add_devices;
-	}
-
-	result = snd_stm_card_register();
-	if (result != 0) {
-		snd_stm_printe("Failed to register ALSA cards!\n");
-		goto error_card_register;
-	}
-
-	return 0;
-
-error_card_register:
-	snd_stm_remove_platform_devices(snd_stm_stx710x_devices,
-			ARRAY_SIZE(snd_stm_stx710x_devices));
-error_add_devices:
-	snd_stm_card_free();
-error_card_new:
-	platform_driver_unregister(&snd_stm_stx710x_glue_driver);
-error_driver_register:
-error_soc_type:
-	return result;
-}
-
-static void __exit snd_stm_stx710x_exit(void)
-{
-	snd_stm_printd(0, "snd_stm_stx710x_exit()\n");
-
-	snd_stm_card_free();
-
-	snd_stm_remove_platform_devices(snd_stm_stx710x_devices,
-			ARRAY_SIZE(snd_stm_stx710x_devices));
-
-	platform_driver_unregister(&snd_stm_stx710x_glue_driver);
-}
-
-MODULE_AUTHOR("Pawel Moll <pawel.moll@st.com>");
-MODULE_DESCRIPTION("STMicroelectronics STx710x audio driver");
-MODULE_LICENSE("GPL");
-
-module_init(snd_stm_stx710x_init);
-module_exit(snd_stm_stx710x_exit);
-- 
1.6.0.6

