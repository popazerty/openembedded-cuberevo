From ea521c973c4bff06979003d87c2cdeef6375ed05 Mon Sep 17 00:00:00 2001
From: David McKay <david.mckay@st.com>
Date: Wed, 18 Feb 2009 10:10:05 +0000
Subject: [PATCH] sata_stm: Support for new SATA phy on 7105,7200A

Adds support for the new SATA phy on 7105,7200 and 7141 chips.
There is a workaround needed for the phy which involves waggling
the phy's jtag lines. The new phy is only single channel rather than dual
channel so there is only one SATA port rather than two.

Signed-off-by: David McKay <david.mckay@st.com>
Signed-off-by: Stuart Menefy <stuart.menefy@st.com>
---
 arch/sh/boards/st/mb680/setup.c        |    3 +-
 arch/sh/kernel/cpu/sh4/Makefile        |    6 +-
 arch/sh/kernel/cpu/sh4/sata-init.c     |  319 ++++++++++++++++++++++++++++++++
 arch/sh/kernel/cpu/sh4/setup-stx7105.c |   18 +-
 arch/sh/kernel/cpu/sh4/setup-stx7141.c |    3 +
 arch/sh/kernel/cpu/sh4/setup-stx7200.c |    7 +
 include/linux/stm/soc.h                |    4 +-
 7 files changed, 346 insertions(+), 14 deletions(-)
 create mode 100644 arch/sh/kernel/cpu/sh4/sata-init.c

diff --git a/arch/sh/boards/st/mb680/setup.c b/arch/sh/boards/st/mb680/setup.c
index 3095711..0e0acdb 100644
--- a/arch/sh/boards/st/mb680/setup.c
+++ b/arch/sh/boards/st/mb680/setup.c
@@ -171,8 +171,7 @@ int pcibios_map_platform_irq(struct pci_dev *dev, u8 slot, u8 pin)
 static int __init device_init(void)
 {
 	stx7105_configure_pci(&pci_config);
-	stx7200_configure_sata(0);
-	stx7200_configure_sata(1);
+	stx7105_configure_sata();
 	stx7105_configure_pwm(&pwm_private_info);
 	stx7105_configure_ssc(&ssc_private_info);
 
diff --git a/arch/sh/kernel/cpu/sh4/Makefile b/arch/sh/kernel/cpu/sh4/Makefile
index e3f4cdc..55693ff 100644
--- a/arch/sh/kernel/cpu/sh4/Makefile
+++ b/arch/sh/kernel/cpu/sh4/Makefile
@@ -21,10 +21,10 @@ obj-$(CONFIG_CPU_SUBTYPE_SH4_202)	+= setup-sh4-202.o
 obj-$(CONFIG_CPU_SUBTYPE_ST40STB1)	+= setup-st40ra.o
 obj-$(CONFIG_CPU_SUBTYPE_STX5197)	+= setup-stx5197.o
 obj-$(CONFIG_CPU_SUBTYPE_STB7100)	+= setup-stb7100.o
-obj-$(CONFIG_CPU_SUBTYPE_STX7105)	+= setup-stx7105.o
+obj-$(CONFIG_CPU_SUBTYPE_STX7105)	+= setup-stx7105.o sata-init.o
 obj-$(CONFIG_CPU_SUBTYPE_STX7111)	+= setup-stx7111.o
-obj-$(CONFIG_CPU_SUBTYPE_STX7141)	+= setup-stx7141.o
-obj-$(CONFIG_CPU_SUBTYPE_STX7200)	+= setup-stx7200.o
+obj-$(CONFIG_CPU_SUBTYPE_STX7141)	+= setup-stx7141.o sata-init.o
+obj-$(CONFIG_CPU_SUBTYPE_STX7200)	+= setup-stx7200.o sata-init.o
 
 # Primary on-chip clocks (common)
 ifndef CONFIG_CPU_SH4A
diff --git a/arch/sh/kernel/cpu/sh4/sata-init.c b/arch/sh/kernel/cpu/sh4/sata-init.c
new file mode 100644
index 0000000..392b8a3
--- /dev/null
+++ b/arch/sh/kernel/cpu/sh4/sata-init.c
@@ -0,0 +1,319 @@
+/*
+ * STx7200 Setup
+ *
+ * Copyright (C) 2007 STMicroelectronics Limited
+ * Author: Stuart Menefy <stuart.menefy@st.com>
+ *
+ * This file is subject to the terms and conditions of the GNU General Public
+ * License.  See the file "COPYING" in the main directory of this archive
+ * for more details.
+ */
+
+#include <linux/stm/soc.h>
+#include <linux/types.h>
+#include <linux/init.h>
+#include <linux/delay.h>
+#include <linux/stm/sysconf.h>
+
+/* sysconf status 0 */
+#define sata_tdo	(1<<1)
+
+/* sysconf config 33 */
+#define soft_jtag_en	(1<<6)
+#define tms_sata_en	(1<<5)
+#define trstn_sata	(1<<4)
+#define tdi_high	(1<<1)
+#define tdi_low		(0<<1)
+#define tck_high	(1<<0)
+#define tck_low		(0<<0)
+
+static void __init SATA_JTAG_IR_Select_MIPHY(struct sysconf_field *sc)
+{
+	/* Flush trst synchronizer with two tck clocks */
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tck_low);
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tck_high);
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tck_low);
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tck_high);
+
+	/* Set tap into idle state */
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tck_low);
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tck_high);
+
+	/* Set tap into shift ir state */
+	sysconf_write(sc, soft_jtag_en | tms_sata_en | trstn_sata | tck_low);
+	sysconf_write(sc, soft_jtag_en | tms_sata_en | trstn_sata | tck_high);
+	sysconf_write(sc, soft_jtag_en | tms_sata_en | trstn_sata | tck_low);
+	sysconf_write(sc, soft_jtag_en | tms_sata_en | trstn_sata | tck_high);
+
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tck_low);
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tck_high);
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tck_low);
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tck_high);
+
+	/* Shift in MacroMicroBusAccess TDI = 101 */
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tdi_high | tck_low);
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tdi_high | tck_high);
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tdi_low | tck_low);
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tdi_low | tck_high);
+
+	/* Set tap into idle mode */
+	sysconf_write(sc,
+		      soft_jtag_en | tms_sata_en | trstn_sata | tdi_high |
+		      tck_low);
+	sysconf_write(sc, soft_jtag_en | tms_sata_en | trstn_sata | tdi_high | tck_high);
+	sysconf_write(sc, soft_jtag_en | tms_sata_en | trstn_sata | tck_low);
+	sysconf_write(sc, soft_jtag_en | tms_sata_en | trstn_sata | tck_high);
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tck_low);
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tck_high);
+}
+
+static void __init SATA_JTAG_DR_Write_MIPHY(struct sysconf_field *sc, u8 regno,
+					    u8 data)
+{
+	int k;
+	u8 x;
+
+	/* Set TAP into shift dr state */
+	sysconf_write(sc, soft_jtag_en | tms_sata_en | trstn_sata | tck_low);
+	sysconf_write(sc, soft_jtag_en | tms_sata_en | trstn_sata | tck_high);
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tck_low);
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tck_high);
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tck_low);
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tck_high);
+
+	/* Shift in DR=[17:10]=data;[9:2]address=regno;[1]rd=0;[0]wr=1  */
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tdi_high | tck_low);
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tdi_high | tck_high);
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tck_low);
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tck_high);
+
+	/* Push in the register address */
+	for (k = 0; k < 8; k++) {
+		x = ((regno >> k) & 0x1);
+		x = x << 1;
+		sysconf_write(sc, soft_jtag_en | trstn_sata | x | tck_low);
+		sysconf_write(sc, soft_jtag_en | trstn_sata | x | tck_high);
+	}
+
+	/* Push in the data to be written */
+	x = 0;
+	for (k = 0; k < 7; k++) {
+		x = ((data >> k) & 0x1);
+		x = x << 1;
+		sysconf_write(sc, soft_jtag_en | trstn_sata | x | tck_low);
+		sysconf_write(sc, soft_jtag_en | trstn_sata | x | tck_high);
+	}
+
+	/* Set TAP back round into SHIFT DR STATE
+	 * (exit1_dr,update_dr,idle,idle,select_dr,capture_dr) */
+	x = ((data >> 7) & 0x1);
+	x = x << 1;
+	sysconf_write(sc, soft_jtag_en | tms_sata_en | trstn_sata | x | tck_low);
+	sysconf_write(sc, soft_jtag_en | tms_sata_en | trstn_sata | x | tck_high);
+	sysconf_write(sc, soft_jtag_en | tms_sata_en | trstn_sata | tck_low);
+	sysconf_write(sc, soft_jtag_en | tms_sata_en | trstn_sata | tck_high);
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tck_low);
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tck_high);
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tck_low);
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tck_high);
+	sysconf_write(sc, soft_jtag_en | tms_sata_en | trstn_sata | tck_low);
+	sysconf_write(sc, soft_jtag_en | tms_sata_en | trstn_sata | tck_high);
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tck_low);
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tck_high);
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tck_low);
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tck_high);
+
+	/*Set TAP into idle mode */
+	sysconf_write(sc, soft_jtag_en | tms_sata_en | trstn_sata | tck_low);
+	sysconf_write(sc, soft_jtag_en | tms_sata_en | trstn_sata | tck_high);
+	sysconf_write(sc, soft_jtag_en | tms_sata_en | trstn_sata | tck_low);
+	sysconf_write(sc, soft_jtag_en | tms_sata_en | trstn_sata | tck_high);
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tck_low);
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tck_high);
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tck_low);
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tck_high);
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tck_low);
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tck_high);
+}
+
+static __init u32 SATA_JTAG_DR_Read_MIPHY(struct sysconf_field *sc,
+					  struct sysconf_field *status_sc,
+					  u8 regno)
+{
+	int k;
+	u8 x;
+	u32 ctrlbit, regvalue = 0;
+
+	/* Set TAP into shift DR state */
+	sysconf_write(sc, soft_jtag_en | tms_sata_en | trstn_sata | tck_low);
+	sysconf_write(sc, soft_jtag_en | tms_sata_en | trstn_sata | tck_high);
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tck_low);
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tck_high);
+
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tck_low);
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tck_high);
+
+	/* Shift in DR=[17:10]dummy_data;[9:2]address=regno;[1]rd=1;[0]wr=0  */
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tck_low);
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tck_high);
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tdi_high | tck_low);
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tdi_high | tck_high);
+
+	/*  push in the register address */
+	for (k = 0; k < 8; k++) {
+		x = ((regno >> k) & 0x1);
+		x = x << 1;
+		sysconf_write(sc, soft_jtag_en | trstn_sata | x | tck_low);
+		sysconf_write(sc, soft_jtag_en | trstn_sata | x | tck_high);
+	}
+
+	/* Push in 0 in the data field */
+	for (k = 0; k < 7; k++) {
+		sysconf_write(sc, soft_jtag_en | trstn_sata | tck_low);
+		sysconf_write(sc, soft_jtag_en | trstn_sata | tck_high);
+	}
+
+	/* Set TAP back round into SHIFT DR STATE
+	 * (exit1_dr,update_dr,idle,idle,select_dr,capture_dr) */
+	sysconf_write(sc, soft_jtag_en | tms_sata_en | trstn_sata | tck_low);
+	sysconf_write(sc, soft_jtag_en | tms_sata_en | trstn_sata | tck_high);
+	sysconf_write(sc, soft_jtag_en | tms_sata_en | trstn_sata | tck_low);
+	sysconf_write(sc, soft_jtag_en | tms_sata_en | trstn_sata | tck_high);
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tck_low);
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tck_high);
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tck_low);
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tck_high);
+	sysconf_write(sc, soft_jtag_en | tms_sata_en | trstn_sata | tck_low);
+	sysconf_write(sc, soft_jtag_en | tms_sata_en | trstn_sata | tck_high);
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tck_low);
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tck_high);
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tck_low);
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tck_high);
+
+	/* Shift out the MIPHY register contents */
+
+	/* Discard first 10 bits */
+	for (k = 0; k < 10; k++) {
+		sysconf_write(sc, soft_jtag_en | trstn_sata | tck_low);
+		sysconf_write(sc, soft_jtag_en | trstn_sata | tck_high);
+	}
+
+	for (k = 0; k < 7; k++) {
+		sysconf_write(sc, soft_jtag_en | trstn_sata | tck_low);
+		sysconf_write(sc, soft_jtag_en | trstn_sata | tck_high);
+		ctrlbit = sysconf_read(status_sc);
+		ctrlbit = ctrlbit & sata_tdo;
+		ctrlbit = ctrlbit >> 1;
+		regvalue = ((ctrlbit & 0x1) << k) | regvalue;
+	}
+
+	/* Set TAP into idle mode */
+	sysconf_write(sc, soft_jtag_en | tms_sata_en | trstn_sata | tck_low);
+	sysconf_write(sc, soft_jtag_en | tms_sata_en | trstn_sata | tck_high);
+	ctrlbit = sysconf_read(status_sc);
+	ctrlbit = ctrlbit & sata_tdo;
+	ctrlbit = ctrlbit >> 1;
+	regvalue = ((ctrlbit & 0x1) << 7) | regvalue;
+
+	sysconf_write(sc, soft_jtag_en | tms_sata_en | trstn_sata | tck_low);
+	sysconf_write(sc, soft_jtag_en | tms_sata_en | trstn_sata | tck_high);
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tck_low);
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tck_high);
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tck_low);
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tck_high);
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tck_low);
+	sysconf_write(sc, soft_jtag_en | trstn_sata | tck_high);
+
+	return (regvalue);
+}
+
+void __init stm_sata_miphy_init(void)
+{
+	struct sysconf_field *sc, *status_sc;
+
+	sc = sysconf_claim(SYS_CFG, 33, 0, 6, NULL);
+	status_sc = sysconf_claim(SYS_STA, 0, 0, 2, NULL);
+
+	SATA_JTAG_IR_Select_MIPHY(sc);
+
+	/* Force Macro1 in reset and request PLL calibration reset */
+
+	/* Force PLL calibration reset, PLL reset and assert
+	 * Deserializer Reset */
+	SATA_JTAG_DR_Write_MIPHY(sc, 0x00, 0x16);
+	SATA_JTAG_DR_Write_MIPHY(sc, 0x11, 0x0);
+	/* Force macro1 to use rx_lspd, tx_lspd (by default rx_lspd
+	 * and tx_lspd set for Gen1)  */
+	SATA_JTAG_DR_Write_MIPHY(sc, 0x10, 0x1);
+
+	/* Force Recovered clock on first I-DLL phase & all
+	 * Deserializers in HP mode */
+
+	/* Force Rx_Clock on first I-DLL phase on macro1 */
+	SATA_JTAG_DR_Write_MIPHY(sc, 0x72, 0x40);
+	/* Force Des in HP mode on macro1 */
+	SATA_JTAG_DR_Write_MIPHY(sc, 0x12, 0x00);
+
+	/* Wait for HFC_READY = 0 */
+	while (SATA_JTAG_DR_Read_MIPHY(sc, status_sc, 0x1) & 0x3)
+		;
+
+	/* Restart properly Process compensation & PLL Calibration */
+
+	/* Set properly comsr definition for 30 MHz ref clock */
+	SATA_JTAG_DR_Write_MIPHY(sc, 0x41, 0x1E);
+	/* comsr compensation reference */
+	SATA_JTAG_DR_Write_MIPHY(sc, 0x42, 0x33);
+	/* Set properly comsr definition for 30 MHz ref clock */
+	SATA_JTAG_DR_Write_MIPHY(sc, 0x41, 0x1E);
+	/* comsr cal gives more suitable results in fast PVT for comsr
+	   used by TX buffer to build slopes making TX rise/fall fall
+	   times. */
+	SATA_JTAG_DR_Write_MIPHY(sc, 0x42, 0x33);
+	/* Force VCO current to value defined by address 0x5A */
+	SATA_JTAG_DR_Write_MIPHY(sc, 0x51, 0x2);
+	/* Force VCO current to value defined by address 0x5A */
+	SATA_JTAG_DR_Write_MIPHY(sc, 0x5A, 0xF);
+	/* Enable auto load compensation for pll_i_bias */
+	SATA_JTAG_DR_Write_MIPHY(sc, 0x47, 0x2A);
+	/* Force restart compensation and enable auto load for
+	 * Comzc_Tx, Comzc_Rx & Comsr on macro1 */
+	SATA_JTAG_DR_Write_MIPHY(sc, 0x40, 0x13);
+
+	/* Wait for comzc & comsr done */
+	while ((SATA_JTAG_DR_Read_MIPHY(sc, status_sc, 0x40) & 0xC) != 0xC)
+		;
+
+	/* Recommended settings for swing & slew rate FOR SATA GEN 1
+	 * from CPG */
+	SATA_JTAG_DR_Write_MIPHY(sc, 0x20, 0x00);
+	/* (Tx Swing target 500-550mV peak-to-peak diff) */
+	SATA_JTAG_DR_Write_MIPHY(sc, 0x21, 0x2);
+	/* (Tx Slew target120-140 ps rising/falling time) */
+	SATA_JTAG_DR_Write_MIPHY(sc, 0x22, 0x4);
+
+	/* Force Macro1 in partial mode & release pll cal reset */
+	SATA_JTAG_DR_Write_MIPHY(sc, 0x00, 0x10);
+	udelay(10);
+
+	SATA_JTAG_DR_Write_MIPHY(sc, 0x50, 0x8D);
+	SATA_JTAG_DR_Write_MIPHY(sc, 0x50, 0x8D);
+
+	/*  Wait for phy_ready */
+	/*  When phy is in ready state ( register 0x01 of macro1 to 0x13) */
+	while ((SATA_JTAG_DR_Read_MIPHY(sc, status_sc, 0x01) & 0x03) != 0x03)
+		;
+
+	/* Enable macro1 to use rx_lspd  & tx_lspd from link interface */
+	SATA_JTAG_DR_Write_MIPHY(sc, 0x10, 0x00);
+	/* Release Rx_Clock on first I-DLL phase on macro1 */
+	SATA_JTAG_DR_Write_MIPHY(sc, 0x72, 0x00);
+
+	/* Deassert deserializer reset */
+	SATA_JTAG_DR_Write_MIPHY(sc, 0x00, 0x00);
+	/* des_bit_lock_en is set */
+	SATA_JTAG_DR_Write_MIPHY(sc, 0x02, 0x08);
+
+	/* bit lock detection strength */
+	SATA_JTAG_DR_Write_MIPHY(sc, 0x86, 0x61);
+}
diff --git a/arch/sh/kernel/cpu/sh4/setup-stx7105.c b/arch/sh/kernel/cpu/sh4/setup-stx7105.c
index d17ffe7..832594c 100644
--- a/arch/sh/kernel/cpu/sh4/setup-stx7105.c
+++ b/arch/sh/kernel/cpu/sh4/setup-stx7105.c
@@ -423,26 +423,28 @@ static struct plat_sata_data sata_private_info = {
 	.only_32bit = 0,
 };
 
-static struct platform_device sata_device[2] = {
+static struct platform_device sata_device[1] = {
 	SATA_DEVICE(0, 0xfe209000, evt2irq(0xb00), evt2irq(0xa80),
 		    &sata_private_info),
-	SATA_DEVICE(1, 0xfd100000, ILC_EXT_IRQ(33), ILC_EXT_IRQ(34),
-		    &sata_private_info),
 };
 
-void __init stx7200_configure_sata(unsigned int port)
+void __init stx7105_configure_sata(void)
 {
 	struct sysconf_field *sc;
 
 	/* Power up SATA phy */
-	sc = sysconf_claim(SYS_CFG, 32, 8+port, 8+port, "USB");
+	sc = sysconf_claim(SYS_CFG, 32, 9, 9, "SATA");
 	sysconf_write(sc, 0);
 
+	if ((cpu_data->cut_major >= 3)) {
+		stm_sata_miphy_init();
+	}
+
 	/* Power up SATA host */
-	sc = sysconf_claim(SYS_CFG, 32, 10+port, 10+port, "USB");
-	sysconf_write(sc, (port == 0) ? 1 : 0);
+	sc = sysconf_claim(SYS_CFG, 32, 11 , 11, "SATA");
+	sysconf_write(sc, 0 );
 
-	platform_device_register(sata_device + port);
+	platform_device_register(sata_device);
 }
 
 /* PATA resources ---------------------------------------------------------- */
diff --git a/arch/sh/kernel/cpu/sh4/setup-stx7141.c b/arch/sh/kernel/cpu/sh4/setup-stx7141.c
index c7563ff..b77b726 100644
--- a/arch/sh/kernel/cpu/sh4/setup-stx7141.c
+++ b/arch/sh/kernel/cpu/sh4/setup-stx7141.c
@@ -487,6 +487,9 @@ static struct platform_device sata_device =
 
 void __init stx7141_configure_sata(void)
 {
+	if (cpu_data->cut_major >= 2)
+		stm_sata_miphy_init();
+
 	platform_device_register(&sata_device);
 }
 
diff --git a/arch/sh/kernel/cpu/sh4/setup-stx7200.c b/arch/sh/kernel/cpu/sh4/setup-stx7200.c
index a9c7221..44426e1 100644
--- a/arch/sh/kernel/cpu/sh4/setup-stx7200.c
+++ b/arch/sh/kernel/cpu/sh4/setup-stx7200.c
@@ -403,6 +403,13 @@ static struct platform_device sata_device[2] = {
 
 void __init stx7200_configure_sata(unsigned int port)
 {
+	static int initialised_phy;
+
+	if ((cpu_data->cut_major >= 3) && (!initialised_phy)) {
+		stm_sata_miphy_init();
+		initialised_phy = 1;
+	}
+
 	BUG_ON(port > 1);
 	platform_device_register(sata_device + port);
 }
diff --git a/include/linux/stm/soc.h b/include/linux/stm/soc.h
index 7167f80..ea0226c 100644
--- a/include/linux/stm/soc.h
+++ b/include/linux/stm/soc.h
@@ -389,7 +389,7 @@ void stx7100_configure_ethernet(int rmii_mode, int ext_clk, int phy_bus);
 void stx7100_configure_lirc(lirc_scd_t *scd);
 void stx7100_configure_pata(int bank, int pc_mode, int irq);
 
-void stx7105_configure_sata(unsigned int port);
+void stx7105_configure_sata(void);
 void stx7105_early_device_init(void);
 void stx7105_configure_asc(const int *ascs, int num_ascs, int console);
 void stx7105_configure_pwm(struct plat_stm_pwm_data *data);
@@ -438,4 +438,6 @@ void stx7200_configure_lirc(lirc_scd_t *scd);
 void stx7200_configure_nand(struct nand_config_data *data);
 void stx7200_configure_pata(int bank, int pc_mode, int irq);
 
+void stm_sata_miphy_init(void);
+
 #endif /* __LINUX_ST_SOC_H */
-- 
1.5.6.3

