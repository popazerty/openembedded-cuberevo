diff --git a/board/st/hdk7108/hdk7108-stx7108.romgen b/board/st/hdk7108/hdk7108-stx7108.romgen
index 75ca849..772fff7 100644
--- a/board/st/hdk7108/hdk7108-stx7108.romgen
+++ b/board/st/hdk7108/hdk7108-stx7108.romgen
@@ -80,6 +80,8 @@ stx7108_sysconf_1_regs.SYSTEM_STATUS0
 */
 ELSE(1)
 
+						/* QQQ - FOLLOWING LINE ADDED BY HAND */
+IF_EQ32(2, 0xfde2000c, (0x1f<<2), (0x1a<<2))	/* 2: if MODE[6:2] == 0x1A (i.e. boot-from-SPI) */
 
 /*
 stx7108_spi_regs.SPI_CLOCKDIV
@@ -102,7 +104,12 @@ stx7108_spi_regs.SPI_STATUSMODECHANGE
 /*
 stx7108_spi_regs.SPI_MODESELECT
 */
-  POKE32(0xfe902018, 0x00000005)
+/*POKE32(0xfe902018, 0x00000005)		   QQQ - THIS LINE COMMENTED OUT BY HAND */
+  POKE32(0xfe902018, 0x00000002)		/* QQQ - THIS LINE ADDED BY HAND */
+
+						/* QQQ - FOLLOWING LINE ADDED BY HAND */
+ENDIF(2)					/* 2: if MODE[6:2] == 0x1A (i.e. boot-from-SPI) */
+
 ENDIF(1)
 
 
diff --git a/board/st/hdk7108/init-hdk7108.S b/board/st/hdk7108/init-hdk7108.S
index 56a10d7..1244cda 100644
--- a/board/st/hdk7108/init-hdk7108.S
+++ b/board/st/hdk7108/init-hdk7108.S
@@ -51,6 +51,11 @@ __memory_setup_table:
 	 *		#endif
 	 * See the supplied version of the ".romgen" file, to see where
 	 * these have been added, if there is any doubt.
+	 *
+	 * Update (November 2010), an additional modification is required,
+	 * such that the changes to the SPI registers are *only*
+	 * to be performed if we are actively booting from SPI.
+	 * Please note the lines with "QQQ - ... BY HAND"
 	 */
 #include "hdk7108-stx7108.romgen"
 
diff --git a/board/st/mb903/mb903.c b/board/st/mb903/mb903.c
index a4fe5ed..acd85bc 100644
--- a/board/st/mb903/mb903.c
+++ b/board/st/mb903/mb903.c
@@ -142,7 +142,7 @@ int checkboard (void)
 #endif
 		"\n");
 
-#if defined(CONFIG_SPI)
+#if defined(CONFIG_SOFT_SPI)
 	/*
 	 * Configure for the SPI Serial Flash.
 	 * Note: for CFG_BOOT_FROM_SPI + CFG_ENV_IS_IN_EEPROM, this
diff --git a/common/Makefile b/common/Makefile
index ace8cc7..388075a 100644
--- a/common/Makefile
+++ b/common/Makefile
@@ -144,6 +144,11 @@ all:	$(LIB) $(AOBJS)
 $(LIB): $(obj).depend $(OBJS)
 	$(AR) $(ARFLAGS) $@ $(OBJS)
 
+# QQQ - we really ought to fix "dlmalloc.c" instead!
+$(obj)dlmalloc.o: $(src)dlmalloc.c
+	$(CC) $(CFLAGS) -fno-strict-aliasing \
+		-c -o $@ $(src)dlmalloc.c
+
 $(obj)environment.o: $(src)environment.c $(obj)../tools/envcrc
 	$(CC) $(AFLAGS) -Wa,--no-warn \
 		-DENV_CRC=$(shell $(obj)../tools/envcrc) \
diff --git a/common/cmd_ide.c b/common/cmd_ide.c
index eec8d3e..c34d8ec 100644
--- a/common/cmd_ide.c
+++ b/common/cmd_ide.c
@@ -818,7 +818,7 @@ __ide_outb(int dev, int port, unsigned char val)
 		dev, port, val, (ATA_CURR_BASE(dev)+CFG_ATA_PORT_ADDR(port)));
 	outb(val, (ATA_CURR_BASE(dev)+CFG_ATA_PORT_ADDR(port)));
 }
-void inline ide_outb (int dev, int port, unsigned char val)
+void ide_outb (int dev, int port, unsigned char val)
 		__attribute__((weak, alias("__ide_outb")));
 
 unsigned char inline
@@ -830,7 +830,7 @@ __ide_inb(int dev, int port)
 		dev, port, (ATA_CURR_BASE(dev)+CFG_ATA_PORT_ADDR(port)), val);
 	return val;
 }
-unsigned char inline ide_inb(int dev, int port)
+unsigned char ide_inb(int dev, int port)
 			__attribute__((weak, alias("__ide_inb")));
 
 #ifdef __PPC__
@@ -1022,7 +1022,10 @@ input_data(int dev, ulong *sect_buf, int words)
 static void
 input_data(int dev, ulong *sect_buf, int words)
 {
-	unsigned short *buf = (unsigned short *)sect_buf;
+		/* to workaround strict aliasing issues */
+	typedef unsigned short __attribute__((__may_alias__)) ushort_any;
+	ushort_any *buf = (ushort_any *)sect_buf;
+
 	int count = words << 1;
 	DECLARE_GLOBAL_DATA_PTR;
 	bd_t *bd = gd->bd;
diff --git a/common/main.c b/common/main.c
index 4253eac..7d89236 100644
--- a/common/main.c
+++ b/common/main.c
@@ -48,7 +48,7 @@ DECLARE_GLOBAL_DATA_PTR;
  * Board-specific Platform code can reimplement show_boot_progress () if needed
  */
 void inline __show_boot_progress (int val) {}
-void inline show_boot_progress (int val) __attribute__((weak, alias("__show_boot_progress")));
+void show_boot_progress (int val) __attribute__((weak, alias("__show_boot_progress")));
 
 #if defined(CONFIG_BOOT_RETRY_TIME) && defined(CONFIG_RESET_TO_RETRY)
 extern int do_reset (cmd_tbl_t *cmdtp, int flag, int argc, char *argv[]);		/* for do_reset() prototype */
diff --git a/cpu/sh/env_eeprom.c b/cpu/sh/env_eeprom.c
index 888510f..188a490 100644
--- a/cpu/sh/env_eeprom.c
+++ b/cpu/sh/env_eeprom.c
@@ -5,7 +5,7 @@
  * (C) Copyright 2001 Sysgo Real-Time Solutions, GmbH <www.elinos.com>
  * Andreas Heppel <aheppel@sysgo.de>
  *
- * (C) Copyright 2009 STMicroelectronics Ltd.
+ * (C) Copyright 2009,2010 STMicroelectronics Ltd.
  * Sean McGoogan <Sean.McGoogan@st.com>
 
  * See file CREDITS for list of people who contributed to this
@@ -114,7 +114,7 @@ extern int env_init(void)
 {
 	ulong crc, len, new;
 	unsigned off;
-	uchar buf[4];		/* only do 32-bits per iteration */
+	u32 *buf;		/* only do 32-bits per iteration */
 
 	/* read old CRC (from flash) */
 	crc = spiboot_get_u32(CFG_ENV_OFFSET + offsetof(env_t,crc));
@@ -126,8 +126,8 @@ extern int env_init(void)
 	while (len > 0)
 	{
 		int n = (len > sizeof(buf)) ? sizeof(buf) : len;
-		*(ulong*)buf = spiboot_get_u32(off);
-		new = crc32 (new, buf, n);
+		buf = (u32*)spiboot_get_u32(off);
+		new = crc32 (new, (uchar*)&buf, n);
 		len -= n;
 		off += n;
 	}
diff --git a/cpu/sh/spi.c b/cpu/sh/spi.c
index 00cd1a3..21f829d 100644
--- a/cpu/sh/spi.c
+++ b/cpu/sh/spi.c
@@ -495,6 +495,27 @@ static int spi_probe_serial_flash(
 			deviceName = "ST M25PX64";	/* 64 Mbit == 8 MiB */
 		}
 	}
+	else if (
+		(devid[1] == 0x20u)	&&	/* Manufacturer ID */
+		(devid[2] == 0xBAu)	&&	/* Memory Type */
+		(				/* Memory Capacity */
+			(devid[3] == 0x16u) ||	/* N25Q032 */
+			(devid[3] == 0x18u)	/* N25Q128 */
+		)
+	   )
+	{
+		pageSize   = 256u;
+		eraseSize  = 64u<<10;			/* 64 KiB, 256 pages/sector */
+		deviceSize = 1u<<devid[3];		/* Memory Capacity */
+		if (devid[3] == 0x16u)
+		{
+			deviceName = "ST N25Q032";	/* 32 Mbit == 4 MiB */
+		}
+		else if (devid[3] == 0x18u)
+		{
+			deviceName = "ST N25Q128";	/* 128 Mbit == 16 MiB */
+		}
+	}
 	else
 	{
 		printf("ERROR: Unknown SPI Device detected, devid = 0x%02x, 0x%02x, 0x%02x\n",
@@ -804,6 +825,7 @@ extern ssize_t spi_read (
 #endif	/* defined(CONFIG_SOFT_SPI) || defined(CONFIG_STM_SSC_SPI) */
 
 	if (len < 1) return len;
+	if (deviceSize == 0) return 0;	/* no valid device found ? */
 	if (last >= deviceSize)	/* Out of range ? */
 	{
 		printf("ERROR: Offset out of range (max=0x%lx)\n",
@@ -1058,6 +1080,7 @@ extern ssize_t spi_write (
 #endif	/* defined(CONFIG_SOFT_SPI) || defined(CONFIG_STM_SSC_SPI) */
 
 	if (len < 1) return len;
+	if (deviceSize == 0) return 0;	/* no valid device found ? */
 	if (last >= deviceSize)	/* Out of range ? */
 	{
 		printf("ERROR: Offset out of range (max=0x%lx)\n",
diff --git a/cpu/sh/start.S b/cpu/sh/start.S
index 99767f6..04eeaf0 100644
--- a/cpu/sh/start.S
+++ b/cpu/sh/start.S
@@ -55,7 +55,6 @@ disable_watchdog:
 	MOV_CONST16_R0 0xA500	/* WTCSR.TME=0 */
 	mov.w   r0, @r1
 
-
 	/*
 	 * If were are going to boot U-boot from NAND flash, then
 	 * we need add a special "signature" pattern in the first
@@ -143,13 +142,22 @@ config_spiboot_controller:
 
 	/* Slow (divide) the SPI clock down to improve reliability. */
 	/* Note: for some (?) FSM SPI controllers, diving by 4 fails to boot! */
-#if defined(CONFIG_SH_FLI7510) || defined(CONFIG_SH_FLI7540) || defined(CONFIG_SH_STX5206)
+#if defined(CONFIG_SH_FLI7510) || defined(CONFIG_SH_FLI7540) || defined(CONFIG_SH_STX5206) || defined(CONFIG_SH_STX7108)
 	mov	#6, r0			/* *ST40_EMI_SPI_CLOCKDIV = 6 */
 #else
 	mov	#4, r0			/* *ST40_EMI_SPI_CLOCKDIV = 4 */
 #endif
 	mov.l	r0, @(ST40_EMI_SPI_CLOCKDIV-ST40_EMI_SPI_REGS_BASE,r1)
 
+	/*
+	 * Note: we need to ensure that there has been at least one
+	 * transaction on the SPI bus, before we can read (or poll)
+	 * the SPI_STATUSMODECHANGE register later on.
+	 * Any valid peek will do. We may as well do it now.
+	 */
+dummy_peek_on_spi:
+	mov	#0, r0		/* Read word from SPI at offset zero */
+	mov.l	@r0, r0		/* peek(<somewhere-in-SPI>) */
 #endif	/* CFG_BOOT_FROM_SPI */
 
 
@@ -355,13 +363,8 @@ set_pmb:
 	SH4_SET_PMB 1 0x88 0x48 128 0 0 1	/* LMI0 (second-half) UN-cached */
 	SH4_SET_PMB 3 0x98 0x48 128 0 0 1	/* LMI0 (second-half) UN-cached */
 	#endif
-	#if !defined(CFG_BOOT_FROM_SPI)
 	SH4_SET_PMB 4 0xa0 0x00  128 0 0 1	/* NOR FLASH UN-cached (lower 64MiB) */
 	SH4_SET_PMB 5 0xb0 0x00  128		/* NOR FLASH CACHED */
-	#else
-	SH4_SET_PMB 4 0xa0 0x08  128 0 0 1	/* NOR FLASH UN-cached (upper 64MiB) */
-	SH4_SET_PMB 5 0xb0 0x08  128		/* NOR FLASH CACHED */
-	#endif	/* CFG_BOOT_FROM_SPI */
 #elif defined(CONFIG_SH_STX7108) && defined(CONFIG_SH_HDK7108)
 	SH4_SET_PMB 0 0x80 0x40 128 0 0 1	/* LMI0 (first-half)  UN-cached */
 	SH4_SET_PMB 2 0x90 0x40 128 0 0 1	/* LMI0 (first-half)  UN-cached */
@@ -541,17 +544,122 @@ enable_se_mode:
 #endif	/* CONFIG_CPU_SUBTYPE_SH4_2XX */
 	/* ensure MMU coherency, by issuing an RTE instruction */
 	/* this idiom works for all SH4-x00 series cores */
-	mova	relocate, r0
-	ldc	r0, spc		/* SPC = address of relocate */
+	mova	mmu_coherent, r0
+	ldc	r0, spc		/* SPC = address of "mmu_coherent" */
 	stc	sr, r0
 	ldc	r0, ssr		/* SSR = SR */
 	rte			/* do it */
 	  nop
 .balign 4
+mmu_coherent:
 #endif	/* CONFIG_SH_SE_MODE */
 
 
 	/*
+	 * Support for Linux Hibernation-on-Memory (HoM).
+	 *
+	 * If the 3 long-words at CONFIG_HOM_TAG_VIRTUAL_ADDRESS
+	 * are "frozen_linux", then there is a valid linux kernel
+	 * and HoM environment to restore. The 4th long-word should
+	 * contain the address of stm_defrost_kernel() in vmlinux.
+	 */
+#if defined(CONFIG_HIBERNATION_ON_MEMORY)
+
+#if !defined(CONFIG_HOM_TAG_VIRTUAL_ADDRESS)
+#error Please define CONFIG_HOM_TAG_VIRTUAL_ADDRESS to use HoM.
+#endif
+#define LINUX_HOM_MARKER_0		0x7a6f7266 /* froz */
+#define LINUX_HOM_MARKER_1		0x6c5f6e65 /* en_l */
+#define LINUX_HOM_MARKER_2		0x78756e69 /* inux */
+
+hom_check_frozen_linux_marker:
+	MOV_CONST32_R0	CONFIG_HOM_TAG_VIRTUAL_ADDRESS
+	mov	r0, r1		! start of marker (we hope)
+
+	MOV_CONST32_R0	LINUX_HOM_MARKER_0
+	mov.l	@r1, r2
+	cmp/eq	r0, r2		! check the first marker
+	bf	hom_no_frozen_linux_marker
+
+	MOV_CONST32_R0	LINUX_HOM_MARKER_1
+	mov.l	@(4, r1), r2
+	cmp/eq	r0, r2		! check the second marker
+	bf	hom_no_frozen_linux_marker
+
+	MOV_CONST32_R0	LINUX_HOM_MARKER_2
+	mov.l	@(8, r1), r2
+	cmp/eq	r0, r2		! check the third marker
+	bf	hom_no_frozen_linux_marker
+
+	! if we get here, then the "frozen_linux" marker was found
+hom_got_frozen_linux_marker:
+	mov	#-1, r0		! r0 = 0xFFFFFFFF
+	mov.l	r0, @r1		! over-write the marker with all ones.
+	mov.l	r0, @(4, r1)
+	mov.l	r0, @(8, r1)
+	mov.l	@(12, r1), r8	! r8 = stm_defrost_kernel()
+	ocbp	@r1		! write-back the (now dirty) cache-line
+
+#if defined(CONFIG_SH_SE_MODE)
+	/*
+	 * explicitly invalidate all PMB entries, except for PMB[0],
+	 * and possibly PMB[1].
+	 */
+hom_invalidate_pmb:
+	MOV_CONST32_R0	(P4SEG_PMB_ADDR)
+	mov	r0, r1
+	mov	#0, r2			! PMB[n].V = 0, i.e. INVALID
+	mov	#1, r3
+	shll8	r3			! R3 = address stride is 0x100
+#if CFG_SH_LMI_NEEDS_2_PMB_ENTRIES
+	add	r3, r1			! skip first PMB slot (PMB[0])
+	mov	#2, r0			! R0 = counter (indexes: 2..15)
+#else
+	mov	#1, r0			! R0 = counter (indexes: 1..15)
+#endif
+1:	add	r3, r1			! next PMB slot
+	mov.l	r2, @r1			! invalidate current entry
+	cmp/eq	#15, r0			! finished ?
+	bf/s	1b			! more to do ?
+	  add	#1, r0			! next index counter
+
+	/*
+	 * we need to ensure that the ITLB is flushed, and not
+	 * harbouring any mappings from the recently invalidated
+	 * PMB entries.
+	 */
+hom_invalidate_itlb:
+	MOV_CONST32_R0 SH4_CCN_MMUCR
+	mov	#(SH4_MMUCR_TI), r1
+	mov.l	r1, @r0			/* MMUCR.TI = 1 */
+#endif	/* CONFIG_SH_SE_MODE */
+
+	/*
+	 * re-invalidate the caches: both I$ & D$
+	 */
+hom_invalidate_caches:
+	MOV_CONST16_R0 (SH4_CCR_OCI|SH4_CCR_ICI)
+	mov	r0, a0
+	CALL	sh_cache_set_op_offset
+
+	/*
+	 * Disable interrupts, and jump to stm_defrost_kernel()
+	 */
+hom_call_stm_defrost_kernel:
+	mov	#0x3c, r2
+	shll2	r2		! R2 = 0x000000F0
+	stc	sr, r1
+	or	r2, r1
+	ldc	r1, sr		! set SR.IMASK = 15
+	jmp	@r8		! Finally, jump to stm_defrost_kernel()
+	  nop
+
+hom_no_frozen_linux_marker:
+				! no HoM kernel to restore
+#endif	/* CONFIG_HIBERNATION_ON_MEMORY */
+
+
+	/*
 	 * now relocate "u-boot.bin" (from FLASH to RAM):
 	 *	r0 == scratch/temp
 	 *	r1 == source address (SRC)
diff --git a/cpu/sh/stm_spi_fsm.c b/cpu/sh/stm_spi_fsm.c
index 57b97c3..f51ae25 100644
--- a/cpu/sh/stm_spi_fsm.c
+++ b/cpu/sh/stm_spi_fsm.c
@@ -538,6 +538,11 @@ extern int fsm_write(const uint8_t * const buf, const uint32_t bufsize, uint32_t
 	return 0;
 }
 
+
+#if !defined(CFG_STM_SPI_CLOCKDIV)
+#define CFG_STM_SPI_CLOCKDIV		2	/* default is SPI_CLOCKDIV = 2 */
+#endif
+
 extern int fsm_init(void)
 {
 	DEBUG("debug: in %s()\n", __FUNCTION__);
@@ -547,9 +552,10 @@ extern int fsm_init(void)
 	udelay(1);	/* QQQ - is this long enough ??? */
 	fsm_write_reg(SPI_FAST_SEQ_CFG, 0);
 
-	fsm_write_reg(SPI_CLOCKDIV, 0x00000002);
+	fsm_write_reg(SPI_CLOCKDIV, CFG_STM_SPI_CLOCKDIV);
 
-	fsm_set_mode(0x8);
+		/* select Fast Sequence Mode (FSM) */
+	fsm_set_mode(1<<3);
 
 	fsm_write_reg(SPI_CONFIGDATA, 0x00a00aa1);
 	fsm_write_reg(SPI_PROGRAM_ERASE_TIME, 0x00000002);
diff --git a/cpu/sh/stx7108/stx7108.c b/cpu/sh/stx7108/stx7108.c
index 17c2558..9f38894 100644
--- a/cpu/sh/stx7108/stx7108.c
+++ b/cpu/sh/stx7108/stx7108.c
@@ -836,14 +836,16 @@ extern int i2c_set_bus_speed(unsigned int speed)
 #endif	/* CONFIG_I2C_CMD_TREE */
 
 
-#if defined(CONFIG_SPI)
+#if defined(CONFIG_SPI) && defined(CONFIG_SOFT_SPI)
+	/*
+	 * We want to use "bit-banging" for SPI (not SSC, nor FSM).
+	 */
 extern void stx7108_configure_spi(void)
 {
 	/*
 	 *	We set up the PIO pins correctly for SPI
 	 */
 
-#if defined(CONFIG_SOFT_SPI)			/* Use "bit-banging" for SPI */
 	/* route PIO (alternate #0) */
 	stx7108_pioalt_select(2, 1, 0);			/* SPI_MISO */
 	stx7108_pioalt_select(2, 0, 0);			/* SPI_MOSI */
@@ -860,12 +862,8 @@ extern void stx7108_configure_spi(void)
 	STPIO_SET_PIN(ST40_PIO_BASE(2), 0, 0);		/* deassert SPI_MOSI */
 	STPIO_SET_PIN(ST40_PIO_BASE(1), 7, 1);		/* deassert SPI_notCS */
 	STPIO_SET_PIN(ST40_PIO_BASE(1), 6, 1);		/* assert SPI_CLK */
-#else
-#error Currently only S/W bit-banging for SPI is supported.
-#endif	/* CONFIG_SOFT_SPI */
 }
 
-#if defined(CONFIG_SOFT_SPI)			/* Use "bit-banging" for SPI */
 extern void stx7108_spi_scl(const int val)
 {
 	const int pin = 6;	/* PIO1[6] = SPI_CLK */
@@ -883,7 +881,6 @@ extern unsigned char stx7108_spi_read(void)
 	const int pin = 1;	/* PIO2[1] = SPI_MISO */
 	return STPIO_GET_PIN(ST40_PIO_BASE(2), pin);
 }
-#endif	/* CONFIG_SOFT_SPI */
 
 /*
  * assert or de-assert the SPI Chip Select line.
@@ -920,5 +917,5 @@ spi_chipsel_type spi_chipsel[] =
 };
 int spi_chipsel_cnt = sizeof(spi_chipsel) / sizeof(spi_chipsel[0]);
 
-#endif	/* CONFIG_SPI */
+#endif	/* CONFIG_SPI && CONFIG_SOFT_SPI */
 
diff --git a/drivers/usb/usb_ohci.c b/drivers/usb/usb_ohci.c
index f70fad5..9fd57a5 100644
--- a/drivers/usb/usb_ohci.c
+++ b/drivers/usb/usb_ohci.c
@@ -1286,6 +1286,9 @@ static int ohci_submit_rh_msg(struct usb_device *dev, unsigned long pipe,
 	__u16 wIndex;
 	__u16 wLength;
 
+		/* to workaround strict aliasing issues */
+	typedef __u16 __attribute__((__may_alias__)) __u16_any;
+
 #ifdef DEBUG
 pkt_print(NULL, dev, pipe, buffer, transfer_len, cmd, "SUB(rh)", usb_pipein(pipe));
 #else
@@ -1314,11 +1317,11 @@ pkt_print(NULL, dev, pipe, buffer, transfer_len, cmd, "SUB(rh)", usb_pipein(pipe
 	*/
 
 	case RH_GET_STATUS:
-			*(__u16 *) data_buf = cpu_to_le16 (1); OK (2);
+			*(__u16_any *) data_buf = cpu_to_le16 (1); OK (2);
 	case RH_GET_STATUS | RH_INTERFACE:
-			*(__u16 *) data_buf = cpu_to_le16 (0); OK (2);
+			*(__u16_any *) data_buf = cpu_to_le16 (0); OK (2);
 	case RH_GET_STATUS | RH_ENDPOINT:
-			*(__u16 *) data_buf = cpu_to_le16 (0); OK (2);
+			*(__u16_any *) data_buf = cpu_to_le16 (0); OK (2);
 	case RH_GET_STATUS | RH_CLASS:
 			*(__u32 *) data_buf = cpu_to_le32 (
 				RD_RH_STAT & ~(RH_HS_CRWE | RH_HS_DRWE));
diff --git a/fs/fat/fat.c b/fs/fat/fat.c
index b2beaad..5fed570 100644
--- a/fs/fat/fat.c
+++ b/fs/fat/fat.c
@@ -703,6 +703,7 @@ read_bootsectandvi(boot_sector *bs, volume_info *volinfo, int *fatsize)
 {
 	__u8 block[FS_BLOCK_SIZE];
 	volume_info *vistart;
+	char *fstype;
 
 	if (disk_read(0, 1, block) < 0) {
 		FAT_DPRINT("Error: reading block\n");
@@ -735,9 +736,12 @@ read_bootsectandvi(boot_sector *bs, volume_info *volinfo, int *fatsize)
 	}
 	memcpy(volinfo, vistart, sizeof(volume_info));
 
-	/* Terminate fs_type string. Writing past the end of vistart
-	   is ok - it's just the buffer. */
-	vistart->fs_type[8] = '\0';
+	/*
+	 * Terminate fs_type string. Writing past the end of vistart
+	 * is ok - it's just the buffer.
+	 */
+	fstype = vistart->fs_type;
+	fstype[8] = '\0';
 
 	if (*fatsize == 32) {
 		if (compare_sign(FAT32_SIGN, vistart->fs_type) == 0) {
diff --git a/include/configs/hdk5289.h b/include/configs/hdk5289.h
index 24d4601..8b1f796 100644
--- a/include/configs/hdk5289.h
+++ b/include/configs/hdk5289.h
@@ -273,7 +273,7 @@
  */
 
 /* Choose if we want FLASH Support (NAND, NOR & SPI devices),
- * all three, or none, ao any other combination.
+ * all three, or none, or any other combination.
  *
  * Note: by default CONFIG_CMD_FLASH is defined in config_cmd_default.h
  */
diff --git a/include/configs/hdk7108.h b/include/configs/hdk7108.h
index cee1c52..d58d9c0 100644
--- a/include/configs/hdk7108.h
+++ b/include/configs/hdk7108.h
@@ -42,15 +42,15 @@
  *
  *	Jumper	NOR	NAND	SPI
  *	------	---	----	---
- *	JF2	1-2	2-3	qqq		FLASH_CS#
- *	JF3	1-2	2-3	qqq		NAND_CS#
+ *	JF2	1-2	2-3	2-3		FLASH_CS#
+ *	JF3	1-2	2-3	2-3		NAND_CS#
  *	JH4-2	 ON	 ON	off		MODE[5]
  *	JH4-1	off	off	 ON		MODE[4]
  *	JH2-2	 ON	 ON	off		MODE[3]
  *	JH2-1	off	 ON	 ON		MODE[2]
  *
  *	For boot-from-NOR, both JF2 and JF3 switches closer to CPU.
- *	For boot-from-NAND, both JF2 and JF3 switches closer to SCART.
+ *	For boot-from-NAND/SPI, both JF2 and JF3 switches closer to SCART.
  */
 
 
@@ -63,15 +63,28 @@
 
 
 /*-----------------------------------------------------------------------
+ * Are we booting directly from a SPI Serial Flash device ?
+ * If so, then define the "CFG_BOOT_FROM_SPI" macro,
+ * otherwise (e.g. for NOR/NAND Flash booting), do not define it.
+ */
+#undef CFG_BOOT_FROM_SPI		/* define to build a SPI-bootable image */
+
+
+/*-----------------------------------------------------------------------
  * Start addresses for the final memory configuration
  * Assume we run out of uncached memory for the moment
  */
 
-#ifdef CFG_BOOT_FROM_NAND	/* we are booting from NAND */
+#if defined(CFG_BOOT_FROM_SPI)		/* we are booting from SPI */
+#define CFG_EMI_SPI_BASE	0xA0000000	/* CSA: SPI Flash,  Physical 0x00000000 (128MiB) */
+#define CFG_EMI_NAND_BASE	0xA0000000	/* CSA: NAND Flash, Physical 0x00000000 (128MiB) */
+#define CFG_EMI_NOR_BASE	0xA8000000	/* CSB: NOR Flash,  Physical 0x08000000 (8MiB) */
+#define CFG_NAND_FLEX_CSn_MAP	{ 0 }		/* NAND is on Chip Select CSA */
+#elif defined(CFG_BOOT_FROM_NAND)	/* we are booting from NAND */
 #define CFG_EMI_NAND_BASE	0xA0000000	/* CSA: NAND Flash, Physical 0x00000000 (128iB) */
 #define CFG_EMI_NOR_BASE	0xA8000000	/* CSB: NOR Flash,  Physical 0x08000000 (8MiB) */
 #define CFG_NAND_FLEX_CSn_MAP	{ 0 }		/* NAND is on Chip Select CSA */
-#else				/* we are booting from NOR */
+#else					/* we are booting from NOR */
 #define CFG_EMI_NOR_BASE	0xA0000000	/* CSA: NOR Flash,  Physical 0x00000000 (128MiB) */
 #define CFG_EMI_NAND_BASE	0xA8000000	/* CSB: NAND Flash, Physical 0x08000000 (8MiB) */
 #define CFG_NAND_FLEX_CSn_MAP	{ 1 }		/* NAND is on Chip Select CSB */
@@ -274,15 +287,15 @@
  * FLASH organization
  */
 
-/* Choose if we want FLASH Support (NAND &/or NOR devices)
- * With the MB837 + MB705 combination, we may use *both*
- * NOR and NAND flash, at the same time, if we want.
+/* Choose if we want FLASH Support (NAND, NOR & SPI devices),
+ * all three, or none, or any other combination.
  *
  * Note: by default CONFIG_CMD_FLASH is defined in config_cmd_default.h
  */
 #undef CONFIG_CMD_FLASH		/* undefine it, define only if needed */
 #define CONFIG_CMD_FLASH	/* define for NOR flash */
 #define CONFIG_CMD_NAND		/* define for NAND flash */
+#define CONFIG_SPI_FLASH	/* define for SPI serial flash */
 
 /*-----------------------------------------------------------------------
  * NOR FLASH organization
@@ -389,6 +402,29 @@
 #endif /* CFG_BOOT_FROM_NAND */
 
 /*-----------------------------------------------------------------------
+ * SPI SERIAL FLASH organization
+ */
+
+/*
+ *	Name	Manuf	Device
+ *	-----	-----	------
+ *	UK1	ST	M25P128 (or N25Q128)
+ */
+#if defined(CONFIG_SPI_FLASH)			/* SPI serial flash present ? */
+#	define CONFIG_SPI_FLASH_ST		/* ST M25Pxxx (UK1) */
+#	define CONFIG_SPI			/* enable the SPI driver */
+#	define CONFIG_CMD_EEPROM		/* enable the "eeprom" command set */
+#	define CFG_I2C_FRAM			/* to minimize performance degradation */
+#	undef  CFG_EEPROM_PAGE_WRITE_DELAY_MS	/* to minimize performance degradation */
+
+	/* Can only use H/W FSM SPI Controller (not H/W SSC, nor S/W "bit-banging") */
+#	define CONFIG_STM_FSM_SPI		/* Use the H/W FSM for SPI */
+#	define CFG_STM_SPI_FSM_BASE	0xfe902000	/* FSM SPI Controller Base */
+#	define CFG_STM_SPI_CLOCKDIV	4	/* set SPI_CLOCKDIV = 4 */
+#	undef CONFIG_CMD_SPI			/* SPI serial bus command support - NOT with FSM! */
+#endif	/* CONFIG_SPI_FLASH */
+
+/*-----------------------------------------------------------------------
  * Address, size, & location of U-boot's Environment Sector
  */
 
@@ -405,6 +441,9 @@
 #		undef CFG_ENV_SIZE		/* give it just one large-page block */
 #		define CFG_ENV_SIZE	0x20000	/* 128 KiB of environment data */
 #	endif /* if CFG_ENV_SIZE < 0x20000 */
+#elif 1 && defined(CONFIG_SPI_FLASH)		/* SPI serial flash present ? */
+#	define CFG_ENV_IS_IN_EEPROM		/* ENV is stored in SPI Serial Flash */
+#	define CFG_ENV_OFFSET	CFG_MONITOR_LEN	/* immediately after u-boot.bin */
 #else
 #	define CFG_ENV_IS_NOWHERE		/* ENV is stored in volatile RAM */
 #	undef CONFIG_CMD_ENV			/* no need for "saveenv" */
@@ -497,4 +536,23 @@
 #	define I2C_DELAY	do { NDELAY(625); } while (0)	/* 625 ns */
 #endif	/* CONFIG_CMD_I2C */
 
+
+/*----------------------------------------------------------------------
+ * Support for Linux Hibernation-on-Memory (HoM)
+ */
+
+	/*
+	 * Define the following only if we want to use the
+	 * Linux Hibernation-on-Memory (HoM) capability.
+	 */
+#undef CONFIG_HIBERNATION_ON_MEMORY
+
+	/*
+	 * If we are using HoM, we need to tell U-Boot where the
+	 * special "tag" is located in memory. This must be the
+	 * same address as configured for the linux kernel.
+	 */
+#undef CONFIG_HOM_TAG_VIRTUAL_ADDRESS
+
+
 #endif	/* __CONFIG_H */
diff --git a/include/configs/mb796.h b/include/configs/mb796.h
index eba1d9b..bf94a10 100644
--- a/include/configs/mb796.h
+++ b/include/configs/mb796.h
@@ -416,7 +416,6 @@
 #if defined(CONFIG_SPI_FLASH)			/* SPI serial flash present ? */
 #	define CONFIG_SPI_FLASH_ST		/* ST M25Pxx (IC27) */
 #	define CONFIG_SPI			/* enable the SPI driver */
-//#	define CONFIG_CMD_SPI			/* SPI serial bus command support - NOT with FSM! */
 #	define CONFIG_CMD_EEPROM		/* enable the "eeprom" command set */
 #	define CFG_I2C_FRAM			/* to minimize performance degradation */
 #	undef  CFG_EEPROM_PAGE_WRITE_DELAY_MS	/* to minimize performance degradation */
@@ -424,6 +423,7 @@
 	/* Can only use H/W FSM SPI Controller (not H/W SSC, nor S/W "bit-banging") */
 #	define CONFIG_STM_FSM_SPI		/* Use the H/W FSM for SPI */
 #	define CFG_STM_SPI_FSM_BASE	0xfe702000	/* FSM SPI Controller Base */
+#	undef CONFIG_CMD_SPI			/* SPI serial bus command support - NOT with FSM! */
 #endif	/* CONFIG_SPI_FLASH */
 
 /*-----------------------------------------------------------------------
diff --git a/include/configs/mb903.h b/include/configs/mb903.h
index dd4d7ea..74d49d4 100644
--- a/include/configs/mb903.h
+++ b/include/configs/mb903.h
@@ -310,18 +310,23 @@
 #if defined(CONFIG_SPI_FLASH)			/* SPI serial flash present ? */
 #	define CONFIG_SPI_FLASH_ST		/* ST M25Pxx */
 #	define CONFIG_SPI			/* enable the SPI driver */
-#	define CONFIG_CMD_SPI			/* SPI serial bus command support */
 #	define CONFIG_CMD_EEPROM		/* enable the "eeprom" command set */
 #	define CFG_I2C_FRAM			/* to minimize performance degradation */
 #	undef  CFG_EEPROM_PAGE_WRITE_DELAY_MS	/* to minimize performance degradation */
-#	define CONFIG_SOFT_SPI			/* Use S/W "bit-banging" PIO (not the SSC) */
-
-#if defined(CONFIG_SOFT_SPI)			/* Use "bit-banging" for SPI */
+	/* On cut 2.0, we *should* be able to use the FSM SPI Controller */
+#if 1						/* Do we use S/W "bit-banging" PIO ? */
+#	define CONFIG_SOFT_SPI			/* Use S/W "bit-banging" PIO (not SSC nor FSM) */
+#	define CONFIG_CMD_SPI			/* add SPI serial bus command support */
 #	define SPI_SCL(val)	do { stx7108_spi_scl((val)); } while (0)
 #	define SPI_SDA(val)	do { stx7108_spi_sda((val)); } while (0)
 #	define SPI_DELAY	do { udelay(1); } while (0)	/* QQQ: only 500 kHz ??? */
 #	define SPI_READ		stx7108_spi_read()
-#endif	/* CONFIG_SOFT_SPI */
+#else						/* else, use the H/W FSM SPI Controller */
+#	define CONFIG_STM_FSM_SPI		/* Use the H/W FSM Controller for SPI */
+#	define CFG_STM_SPI_FSM_BASE	0xfe902000	/* FSM SPI Controller Base */
+#	define CFG_STM_SPI_CLOCKDIV	4	/* set SPI_CLOCKDIV = 4 */
+#	undef CONFIG_CMD_SPI			/* SPI serial bus command support - NOT with FSM! */
+#endif	/* SOFT -v- FSM */
 
 #endif	/* CONFIG_SPI_FLASH */
 
diff --git a/include/systemace.h b/include/systemace.h
index be43d46..48b89a3 100644
--- a/include/systemace.h
+++ b/include/systemace.h
@@ -19,7 +19,6 @@
  *    along with this program; if not, write to the Free Software
  *    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA
  */
-#ident "$Id:$"
 
 #ifdef CONFIG_SYSTEMACE
 
diff --git a/sh_config.mk b/sh_config.mk
index 0de8db8..8e9552c 100644
--- a/sh_config.mk
+++ b/sh_config.mk
@@ -27,7 +27,7 @@
 # for actual build number, in the following identifier.
 # Regular Expression for string is:
 # 	"stm[2-9][0-9]-[2-9][0-9][0-9][0-9]-[01][0-9]-[0-3][0-9]"
-SH_IDENT_STRING="\"stm23-2010-10-22\""
+SH_IDENT_STRING="\"stm23-2010-11-23\""
 
 PLATFORM_CPPFLAGS += -DCONFIG_SH4 -D__SH4__ -DCONFIG_IDENT_STRING=$(SH_IDENT_STRING)
 PLATFORM_LDFLAGS  += -n
